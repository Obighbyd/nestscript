func @@main() {
    VAR %r0;
    VAR %r1;
    MOV_THIS %r0;
    PUSH %r0;
    FUNC %r0 @@f0;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV $RET $RET;
}
func @@f0() {
    VAR @c9;
    ALLOC @c9;
    VAR @c44;
    ALLOC @c44;
    VAR @c90;
    ALLOC @c90;
    VAR @c390;
    ALLOC @c390;
    VAR @c132;
    ALLOC @c132;
    VAR @c82;
    ALLOC @c82;
    VAR @c586;
    ALLOC @c586;
    VAR @c14;
    ALLOC @c14;
    VAR @c109;
    ALLOC @c109;
    VAR @c110;
    ALLOC @c110;
    VAR @c111;
    ALLOC @c111;
    VAR @c168;
    ALLOC @c168;
    VAR @c171;
    ALLOC @c171;
    VAR @c239;
    ALLOC @c239;
    VAR @c46;
    ALLOC @c46;
    VAR @c252;
    ALLOC @c252;
    VAR @c243;
    ALLOC @c243;
    VAR @c244;
    ALLOC @c244;
    VAR @c250;
    ALLOC @c250;
    VAR @c251;
    ALLOC @c251;
    VAR @c242;
    ALLOC @c242;
    VAR @c316;
    ALLOC @c316;
    VAR @c245;
    ALLOC @c245;
    VAR @c447;
    ALLOC @c447;
    VAR @c448;
    ALLOC @c448;
    VAR @c594;
    ALLOC @c594;
    VAR @c591;
    ALLOC @c591;
    VAR @c80;
    ALLOC @c80;
    VAR @c79;
    ALLOC @c79;
    VAR @c464;
    ALLOC @c464;
    VAR @c32;
    ALLOC @c32;
    VAR @c210;
    ALLOC @c210;
    VAR @c397;
    ALLOC @c397;
    VAR @c8;
    ALLOC @c8;
    VAR @c74;
    ALLOC @c74;
    VAR @c220;
    ALLOC @c220;
    VAR @c218;
    ALLOC @c218;
    VAR @c325;
    ALLOC @c325;
    VAR @c119;
    ALLOC @c119;
    VAR @c165;
    ALLOC @c165;
    VAR @c385;
    ALLOC @c385;
    VAR @c268;
    ALLOC @c268;
    VAR @c162;
    ALLOC @c162;
    VAR @c383;
    ALLOC @c383;
    VAR @c270;
    ALLOC @c270;
    VAR @c115;
    ALLOC @c115;
    VAR @c116;
    ALLOC @c116;
    VAR @c170;
    ALLOC @c170;
    VAR @c269;
    ALLOC @c269;
    VAR @c151;
    ALLOC @c151;
    VAR @c118;
    ALLOC @c118;
    VAR @c289;
    ALLOC @c289;
    VAR @c386;
    ALLOC @c386;
    VAR @c177;
    ALLOC @c177;
    VAR @c178;
    ALLOC @c178;
    VAR @c271;
    ALLOC @c271;
    VAR @c273;
    ALLOC @c273;
    VAR @c150;
    ALLOC @c150;
    VAR @c292;
    ALLOC @c292;
    VAR @c394;
    ALLOC @c394;
    VAR @c161;
    ALLOC @c161;
    VAR @c33;
    ALLOC @c33;
    VAR @c297;
    ALLOC @c297;
    VAR @c298;
    ALLOC @c298;
    VAR @c299;
    ALLOC @c299;
    VAR @c300;
    ALLOC @c300;
    VAR @c301;
    ALLOC @c301;
    VAR @c302;
    ALLOC @c302;
    VAR @c303;
    ALLOC @c303;
    VAR @c304;
    ALLOC @c304;
    VAR @c305;
    ALLOC @c305;
    VAR @c441;
    ALLOC @c441;
    VAR @c440;
    ALLOC @c440;
    VAR @c439;
    ALLOC @c439;
    VAR @c451;
    ALLOC @c451;
    VAR @c427;
    ALLOC @c427;
    VAR @c449;
    ALLOC @c449;
    VAR @c425;
    ALLOC @c425;
    VAR @c28;
    ALLOC @c28;
    VAR @c29;
    ALLOC @c29;
    VAR @c30;
    ALLOC @c30;
    VAR @c312;
    ALLOC @c312;
    VAR @c311;
    ALLOC @c311;
    VAR @c323;
    ALLOC @c323;
    VAR @c25;
    ALLOC @c25;
    VAR @c428;
    ALLOC @c428;
    VAR @c399;
    ALLOC @c399;
    VAR @c430;
    ALLOC @c430;
    VAR @c446;
    ALLOC @c446;
    VAR @c308;
    ALLOC @c308;
    VAR @c293;
    ALLOC @c293;
    VAR @c294;
    ALLOC @c294;
    VAR @c3;
    ALLOC @c3;
    VAR @c596;
    ALLOC @c596;
    VAR @c436;
    ALLOC @c436;
    VAR @c233;
    ALLOC @c233;
    VAR @c403;
    ALLOC @c403;
    VAR @c400;
    ALLOC @c400;
    VAR @c175;
    ALLOC @c175;
    VAR @c401;
    ALLOC @c401;
    VAR @c310;
    ALLOC @c310;
    VAR @c424;
    ALLOC @c424;
    VAR @c435;
    ALLOC @c435;
    VAR @c656;
    ALLOC @c656;
    VAR rsAstralRange;
    VAR rsComboMarksRange;
    VAR reComboHalfMarksRange;
    VAR rsComboSymbolsRange;
    VAR rsComboRange;
    VAR rsDingbatRange;
    VAR rsLowerRange;
    VAR rsMathOpRange;
    VAR rsNonCharRange;
    VAR rsPunctuationRange;
    VAR rsSpaceRange;
    VAR rsUpperRange;
    VAR rsVarRange;
    VAR rsBreakRange;
    VAR rsApos;
    VAR rsAstral;
    VAR rsBreak;
    VAR rsCombo;
    VAR rsDigits;
    VAR rsDingbat;
    VAR rsLower;
    VAR rsMisc;
    VAR rsFitz;
    VAR rsModifier;
    VAR rsNonAstral;
    VAR rsRegional;
    VAR rsSurrPair;
    VAR rsUpper;
    VAR rsZWJ;
    VAR rsMiscLower;
    VAR rsMiscUpper;
    VAR rsOptContrLower;
    VAR rsOptContrUpper;
    VAR reOptMod;
    VAR rsOptVar;
    VAR rsOptJoin;
    VAR rsOrdLower;
    VAR rsOrdUpper;
    VAR rsSeq;
    VAR rsEmoji;
    VAR rsSymbol;
    VAR @c526;
    ALLOC @c526;
    VAR @c422;
    ALLOC @c422;
    VAR @c20;
    ALLOC @c20;
    VAR @c21;
    ALLOC @c21;
    VAR @c12;
    ALLOC @c12;
    VAR @c13;
    ALLOC @c13;
    VAR @c23;
    ALLOC @c23;
    VAR @c438;
    ALLOC @c438;
    VAR @c180;
    ALLOC @c180;
    VAR @c125;
    ALLOC @c125;
    VAR deburredLetters;
    VAR htmlEscapes;
    VAR htmlUnescapes;
    VAR @c11;
    ALLOC @c11;
    VAR @c419;
    ALLOC @c419;
    VAR @c402;
    ALLOC @c402;
    VAR freeGlobal;
    VAR freeSelf;
    VAR @c22;
    ALLOC @c22;
    VAR freeExports;
    VAR @c0;
    ALLOC @c0;
    VAR @c26;
    ALLOC @c26;
    VAR @c1;
    ALLOC @c1;
    VAR nodeUtil;
    VAR @c34;
    ALLOC @c34;
    VAR @c36;
    ALLOC @c36;
    VAR @c37;
    ALLOC @c37;
    VAR @c38;
    ALLOC @c38;
    VAR @c39;
    ALLOC @c39;
    VAR @c40;
    ALLOC @c40;
    VAR @c159;
    ALLOC @c159;
    VAR @c511;
    ALLOC @c511;
    VAR @c45;
    ALLOC @c45;
    VAR @c352;
    ALLOC @c352;
    VAR @c41;
    ALLOC @c41;
    VAR @c147;
    ALLOC @c147;
    VAR @c135;
    ALLOC @c135;
    VAR @c136;
    ALLOC @c136;
    VAR @c10;
    ALLOC @c10;
    VAR @c144;
    ALLOC @c144;
    VAR @c225;
    ALLOC @c225;
    VAR @c357;
    ALLOC @c357;
    VAR @c42;
    ALLOC @c42;
    VAR @c17;
    ALLOC @c17;
    VAR @c19;
    ALLOC @c19;
    VAR @c454;
    ALLOC @c454;
    VAR @c405;
    ALLOC @c405;
    VAR @c6;
    ALLOC @c6;
    VAR @c2;
    ALLOC @c2;
    VAR @c205;
    ALLOC @c205;
    VAR @c5;
    ALLOC @c5;
    VAR @c462;
    ALLOC @c462;
    VAR @c457;
    ALLOC @c457;
    VAR basePropertyOf;
    VAR @c356;
    ALLOC @c356;
    VAR @c201;
    ALLOC @c201;
    VAR @c7;
    ALLOC @c7;
    VAR @c95;
    ALLOC @c95;
    VAR @c575;
    ALLOC @c575;
    VAR @c35;
    ALLOC @c35;
    VAR @c417;
    ALLOC @c417;
    VAR @c137;
    ALLOC @c137;
    VAR @c444;
    ALLOC @c444;
    VAR @c445;
    ALLOC @c445;
    VAR @c540;
    ALLOC @c540;
    VAR @c423;
    ALLOC @c423;
    VAR @c426;
    ALLOC @c426;
    VAR @c655;
    ALLOC @c655;
    VAR @c281;
    ALLOC @c281;
    VAR @c15;
    ALLOC @c15;
    VAR @c452;
    ALLOC @c452;
    VAR @c396;
    ALLOC @c396;
    VAR @c272;
    ALLOC @c272;
    VAR @c27;
    ALLOC @c27;
    VAR @c318;
    ALLOC @c318;
    VAR @c193;
    ALLOC @c193;
    VAR @c31;
    ALLOC @c31;
    VAR @c573;
    ALLOC @c573;
    VAR @c4;
    ALLOC @c4;
    VAR @c332;
    ALLOC @c332;
    VAR @c247;
    ALLOC @c247;
    VAR @c248;
    ALLOC @c248;
    VAR @c450;
    ALLOC @c450;
    VAR @c16;
    ALLOC @c16;
    VAR @c18;
    ALLOC @c18;
    VAR @c453;
    ALLOC @c453;
    VAR @c43;
    ALLOC @c43;
    VAR @c24;
    ALLOC @c24;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    VAR %r13;
    VAR %r14;
    VAR %r15;
    VAR %r16;
    VAR %r17;
    VAR %r18;
    VAR %r19;
    VAR %r20;
    VAR %r21;
    VAR %r22;
    VAR %r23;
    FUNC @c159 @@f2;
    FUNC @c511 @@f3;
    FUNC @c45 @@f4;
    FUNC @c352 @@f5;
    FUNC @c41 @@f6;
    FUNC @c147 @@f7;
    FUNC @c135 @@f8;
    FUNC @c136 @@f9;
    FUNC @c10 @@f10;
    FUNC @c144 @@f11;
    FUNC @c225 @@f12;
    FUNC @c357 @@f13;
    FUNC @c42 @@f14;
    FUNC @c19 @@f15;
    FUNC @c454 @@f16;
    FUNC @c405 @@f17;
    FUNC @c6 @@f18;
    FUNC @c2 @@f19;
    FUNC @c205 @@f20;
    FUNC @c5 @@f21;
    FUNC @c462 @@f22;
    FUNC @c457 @@f23;
    FUNC basePropertyOf @@f24;
    FUNC @c356 @@f25;
    FUNC @c201 @@f26;
    FUNC @c7 @@f27;
    FUNC @c95 @@f28;
    FUNC @c575 @@f29;
    FUNC @c35 @@f30;
    FUNC @c417 @@f31;
    FUNC @c137 @@f32;
    FUNC @c444 @@f33;
    FUNC @c445 @@f34;
    FUNC @c540 @@f35;
    FUNC @c655 @@f36;
    FUNC @c281 @@f37;
    FUNC @c15 @@f38;
    FUNC @c452 @@f39;
    FUNC @c396 @@f40;
    FUNC @c272 @@f41;
    FUNC @c27 @@f42;
    FUNC @c318 @@f43;
    FUNC @c193 @@f44;
    FUNC @c31 @@f45;
    FUNC @c573 @@f46;
    FUNC @c4 @@f47;
    FUNC @c332 @@f48;
    FUNC @c247 @@f49;
    FUNC @c248 @@f50;
    FUNC @c16 @@f51;
    FUNC @c18 @@f52;
    FUNC @c453 @@f53;
    FUNC @c43 @@f54;
    MOV @c44 "4.17.10";
    MOV @c90 200;
    MOV @c390 "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.";
    MOV @c132 "Expected a function";
    MOV @c82 "__lodash_hash_undefined__";
    MOV @c586 500;
    MOV @c14 "__lodash_placeholder__";
    MOV @c109 1;
    MOV @c110 2;
    MOV @c111 4;
    MOV @c168 1;
    MOV @c171 2;
    MOV @c239 1;
    MOV @c46 2;
    MOV @c252 4;
    MOV @c243 8;
    MOV @c244 16;
    MOV @c250 32;
    MOV @c251 64;
    MOV @c242 128;
    MOV @c316 256;
    MOV @c245 512;
    MOV @c447 30;
    MOV @c448 "...";
    MOV @c594 800;
    MOV @c591 16;
    MOV @c80 1;
    MOV @c79 2;
    MOV @c464 3;
    MOV @c32 1;
    MOV %r0 0;
    DIV @c32 %r0;
    MOV @c210 9007199254740991;
    MOV @c397 1.7976931348623157e+308;
    MOV @c8 0;
    MOV %r0 0;
    DIV @c8 %r0;
    MOV @c74 4294967295;
    MOV @c220 @c74;
    MOV %r0 1;
    SUB @c220 %r0;
    MOV @c218 @c74;
    MOV %r0 1;
    ZSHR @c218 %r0;
    NEW_ARR @c325;
    NEW_ARR %r0;
    MOV %r1 "ary";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c242;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 0 %r0;
    NEW_ARR %r0;
    MOV %r1 "bind";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c239;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 1 %r0;
    NEW_ARR %r0;
    MOV %r1 "bindKey";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c46;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 2 %r0;
    NEW_ARR %r0;
    MOV %r1 "curry";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c243;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 3 %r0;
    NEW_ARR %r0;
    MOV %r1 "curryRight";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c244;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 4 %r0;
    NEW_ARR %r0;
    MOV %r1 "flip";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c245;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 5 %r0;
    NEW_ARR %r0;
    MOV %r1 "partial";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c250;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 6 %r0;
    NEW_ARR %r0;
    MOV %r1 "partialRight";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c251;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 7 %r0;
    NEW_ARR %r0;
    MOV %r1 "rearg";
    SET_KEY %r0 0 %r1;
    MOV %r1 @c316;
    SET_KEY %r0 1 %r1;
    SET_KEY @c325 8 %r0;
    MOV @c119 "[object Arguments]";
    MOV @c165 "[object Array]";
    MOV @c385 "[object AsyncFunction]";
    MOV @c268 "[object Boolean]";
    MOV @c162 "[object Date]";
    MOV @c383 "[object DOMException]";
    MOV @c270 "[object Error]";
    MOV @c115 "[object Function]";
    MOV @c116 "[object GeneratorFunction]";
    MOV @c170 "[object Map]";
    MOV @c269 "[object Number]";
    MOV @c151 "[object Null]";
    MOV @c118 "[object Object]";
    MOV @c289 "[object Promise]";
    MOV @c386 "[object Proxy]";
    MOV @c177 "[object RegExp]";
    MOV @c178 "[object Set]";
    MOV @c271 "[object String]";
    MOV @c273 "[object Symbol]";
    MOV @c150 "[object Undefined]";
    MOV @c292 "[object WeakMap]";
    MOV @c394 "[object WeakSet]";
    MOV @c161 "[object ArrayBuffer]";
    MOV @c33 "[object DataView]";
    MOV @c297 "[object Float32Array]";
    MOV @c298 "[object Float64Array]";
    MOV @c299 "[object Int8Array]";
    MOV @c300 "[object Int16Array]";
    MOV @c301 "[object Int32Array]";
    MOV @c302 "[object Uint8Array]";
    MOV @c303 "[object Uint8ClampedArray]";
    MOV @c304 "[object Uint16Array]";
    MOV @c305 "[object Uint32Array]";
    NEW_REG @c441 "\\b__p \\+= '';" "g";
    NEW_REG @c440 "\\b(__p \\+=) '' \\+" "g";
    NEW_REG @c439 "(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';" "g";
    NEW_REG @c451 "&(?:amp|lt|gt|quot|#39);" "g";
    NEW_REG @c427 "[&<>\"']" "g";
    MOV %r1 @c451;
    MOV %r2 "source";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'RegExp' 1 false;
    MOV @c449 $RET;
    MOV %r1 @c427;
    MOV %r2 "source";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'RegExp' 1 false;
    MOV @c425 $RET;
    NEW_REG @c28 "<%-([\\s\\S]+?)%>" "g";
    NEW_REG @c29 "<%([\\s\\S]+?)%>" "g";
    NEW_REG @c30 "<%=([\\s\\S]+?)%>" "g";
    NEW_REG @c312 "\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]" "";
    NEW_REG @c311 "^\\w*$" "";
    NEW_REG @c323 "[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))" "g";
    NEW_REG @c25 "[\\\\^$.*+?()[\\]{}|]" "g";
    MOV %r1 @c25;
    MOV %r2 "source";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'RegExp' 1 false;
    MOV @c428 $RET;
    NEW_REG @c399 "^\\s+|\\s+$" "g";
    NEW_REG @c430 "^\\s+" "";
    NEW_REG @c446 "\\s+$" "";
    NEW_REG @c308 "\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?" "";
    NEW_REG @c293 "\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*" "";
    NEW_REG @c294 ",? & " "";
    NEW_REG @c3 "[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+" "g";
    NEW_REG @c596 "\\\\(\\\\)?" "g";
    NEW_REG @c436 "\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}" "g";
    NEW_REG @c233 "\\w*$" "";
    NEW_REG @c403 "^[-+]0x[0-9a-f]+$" "i";
    NEW_REG @c400 "^0b[01]+$" "i";
    NEW_REG @c175 "^\\[object .+?Constructor\\]$" "";
    NEW_REG @c401 "^0o[0-7]+$" "i";
    NEW_REG @c310 "^(?:0|[1-9]\\d*)$" "";
    NEW_REG @c424 "[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]" "g";
    NEW_REG @c435 "($^)" "";
    NEW_REG @c656 "['\\n\\r\\u2028\\u2029\\\\]" "g";
    MOV rsAstralRange "\\ud800-\\udfff";
    MOV rsComboMarksRange "\\u0300-\\u036f";
    MOV reComboHalfMarksRange "\\ufe20-\\ufe2f";
    MOV rsComboSymbolsRange "\\u20d0-\\u20ff";
    MOV rsComboRange rsComboMarksRange;
    MOV %r1 reComboHalfMarksRange;
    ADD rsComboRange %r1;
    MOV %r0 rsComboSymbolsRange;
    ADD rsComboRange %r0;
    MOV rsDingbatRange "\\u2700-\\u27bf";
    MOV rsLowerRange "a-z\\xdf-\\xf6\\xf8-\\xff";
    MOV rsMathOpRange "\\xac\\xb1\\xd7\\xf7";
    MOV rsNonCharRange "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    MOV rsPunctuationRange "\\u2000-\\u206f";
    MOV rsSpaceRange " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    MOV rsUpperRange "A-Z\\xc0-\\xd6\\xd8-\\xde";
    MOV rsVarRange "\\ufe0e\\ufe0f";
    MOV rsBreakRange rsMathOpRange;
    MOV %r2 rsNonCharRange;
    ADD rsBreakRange %r2;
    MOV %r1 rsPunctuationRange;
    ADD rsBreakRange %r1;
    MOV %r0 rsSpaceRange;
    ADD rsBreakRange %r0;
    MOV rsApos "['’]";
    MOV rsAstral "[";
    MOV %r1 rsAstralRange;
    ADD rsAstral %r1;
    MOV %r0 "]";
    ADD rsAstral %r0;
    MOV rsBreak "[";
    MOV %r1 rsBreakRange;
    ADD rsBreak %r1;
    MOV %r0 "]";
    ADD rsBreak %r0;
    MOV rsCombo "[";
    MOV %r1 rsComboRange;
    ADD rsCombo %r1;
    MOV %r0 "]";
    ADD rsCombo %r0;
    MOV rsDigits "\\d+";
    MOV rsDingbat "[";
    MOV %r1 rsDingbatRange;
    ADD rsDingbat %r1;
    MOV %r0 "]";
    ADD rsDingbat %r0;
    MOV rsLower "[";
    MOV %r1 rsLowerRange;
    ADD rsLower %r1;
    MOV %r0 "]";
    ADD rsLower %r0;
    MOV rsMisc "[^";
    MOV %r6 rsAstralRange;
    ADD rsMisc %r6;
    MOV %r5 rsBreakRange;
    ADD rsMisc %r5;
    MOV %r4 rsDigits;
    ADD rsMisc %r4;
    MOV %r3 rsDingbatRange;
    ADD rsMisc %r3;
    MOV %r2 rsLowerRange;
    ADD rsMisc %r2;
    MOV %r1 rsUpperRange;
    ADD rsMisc %r1;
    MOV %r0 "]";
    ADD rsMisc %r0;
    MOV rsFitz "\\ud83c[\\udffb-\\udfff]";
    MOV rsModifier "(?:";
    MOV %r3 rsCombo;
    ADD rsModifier %r3;
    MOV %r2 "|";
    ADD rsModifier %r2;
    MOV %r1 rsFitz;
    ADD rsModifier %r1;
    MOV %r0 ")";
    ADD rsModifier %r0;
    MOV rsNonAstral "[^";
    MOV %r1 rsAstralRange;
    ADD rsNonAstral %r1;
    MOV %r0 "]";
    ADD rsNonAstral %r0;
    MOV rsRegional "(?:\\ud83c[\\udde6-\\uddff]){2}";
    MOV rsSurrPair "[\\ud800-\\udbff][\\udc00-\\udfff]";
    MOV rsUpper "[";
    MOV %r1 rsUpperRange;
    ADD rsUpper %r1;
    MOV %r0 "]";
    ADD rsUpper %r0;
    MOV rsZWJ "\\u200d";
    MOV rsMiscLower "(?:";
    MOV %r3 rsLower;
    ADD rsMiscLower %r3;
    MOV %r2 "|";
    ADD rsMiscLower %r2;
    MOV %r1 rsMisc;
    ADD rsMiscLower %r1;
    MOV %r0 ")";
    ADD rsMiscLower %r0;
    MOV rsMiscUpper "(?:";
    MOV %r3 rsUpper;
    ADD rsMiscUpper %r3;
    MOV %r2 "|";
    ADD rsMiscUpper %r2;
    MOV %r1 rsMisc;
    ADD rsMiscUpper %r1;
    MOV %r0 ")";
    ADD rsMiscUpper %r0;
    MOV rsOptContrLower "(?:";
    MOV %r1 rsApos;
    ADD rsOptContrLower %r1;
    MOV %r0 "(?:d|ll|m|re|s|t|ve))?";
    ADD rsOptContrLower %r0;
    MOV rsOptContrUpper "(?:";
    MOV %r1 rsApos;
    ADD rsOptContrUpper %r1;
    MOV %r0 "(?:D|LL|M|RE|S|T|VE))?";
    ADD rsOptContrUpper %r0;
    MOV reOptMod rsModifier;
    MOV %r0 "?";
    ADD reOptMod %r0;
    MOV rsOptVar "[";
    MOV %r1 rsVarRange;
    ADD rsOptVar %r1;
    MOV %r0 "]?";
    ADD rsOptVar %r0;
    MOV rsOptJoin "(?:";
    MOV %r6 rsZWJ;
    ADD rsOptJoin %r6;
    MOV %r5 "(?:";
    ADD rsOptJoin %r5;
    MOV %r5 "|";
    PUSH %r5;
    NEW_ARR %r5;
    MOV %r7 rsNonAstral;
    SET_KEY %r5 0 %r7;
    MOV %r7 rsRegional;
    SET_KEY %r5 1 %r7;
    MOV %r7 rsSurrPair;
    SET_KEY %r5 2 %r7;
    MOV %r6 "join";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    ADD rsOptJoin %r4;
    MOV %r3 ")";
    ADD rsOptJoin %r3;
    MOV %r2 rsOptVar;
    ADD rsOptJoin %r2;
    MOV %r1 reOptMod;
    ADD rsOptJoin %r1;
    MOV %r0 ")*";
    ADD rsOptJoin %r0;
    MOV rsOrdLower "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    MOV rsOrdUpper "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    MOV rsSeq rsOptVar;
    MOV %r1 reOptMod;
    ADD rsSeq %r1;
    MOV %r0 rsOptJoin;
    ADD rsSeq %r0;
    MOV rsEmoji "(?:";
    MOV %r3 "|";
    PUSH %r3;
    NEW_ARR %r3;
    MOV %r5 rsDingbat;
    SET_KEY %r3 0 %r5;
    MOV %r5 rsRegional;
    SET_KEY %r3 1 %r5;
    MOV %r5 rsSurrPair;
    SET_KEY %r3 2 %r5;
    MOV %r4 "join";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    ADD rsEmoji %r2;
    MOV %r1 ")";
    ADD rsEmoji %r1;
    MOV %r0 rsSeq;
    ADD rsEmoji %r0;
    MOV rsSymbol "(?:";
    MOV %r2 "|";
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r4 rsNonAstral;
    MOV %r6 rsCombo;
    ADD %r4 %r6;
    MOV %r5 "?";
    ADD %r4 %r5;
    SET_KEY %r2 0 %r4;
    MOV %r4 rsCombo;
    SET_KEY %r2 1 %r4;
    MOV %r4 rsRegional;
    SET_KEY %r2 2 %r4;
    MOV %r4 rsSurrPair;
    SET_KEY %r2 3 %r4;
    MOV %r4 rsAstral;
    SET_KEY %r2 4 %r4;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    ADD rsSymbol %r1;
    MOV %r0 ")";
    ADD rsSymbol %r0;
    MOV %r0 "g";
    PUSH %r0;
    MOV %r0 rsApos;
    PUSH %r0;
    CALL_CTX 'RegExp' 2 false;
    MOV @c526 $RET;
    MOV %r0 "g";
    PUSH %r0;
    MOV %r0 rsCombo;
    PUSH %r0;
    CALL_CTX 'RegExp' 2 false;
    MOV @c422 $RET;
    MOV %r0 "g";
    PUSH %r0;
    MOV %r0 rsFitz;
    MOV %r5 "(?=";
    ADD %r0 %r5;
    MOV %r4 rsFitz;
    ADD %r0 %r4;
    MOV %r3 ")|";
    ADD %r0 %r3;
    MOV %r2 rsSymbol;
    ADD %r0 %r2;
    MOV %r1 rsSeq;
    ADD %r0 %r1;
    PUSH %r0;
    CALL_CTX 'RegExp' 2 false;
    MOV @c20 $RET;
    MOV %r0 "g";
    PUSH %r0;
    MOV %r1 "|";
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r3 rsUpper;
    MOV %r10 "?";
    ADD %r3 %r10;
    MOV %r9 rsLower;
    ADD %r3 %r9;
    MOV %r8 "+";
    ADD %r3 %r8;
    MOV %r7 rsOptContrLower;
    ADD %r3 %r7;
    MOV %r6 "(?=";
    ADD %r3 %r6;
    MOV %r6 "|";
    PUSH %r6;
    NEW_ARR %r6;
    MOV %r8 rsBreak;
    SET_KEY %r6 0 %r8;
    MOV %r8 rsUpper;
    SET_KEY %r6 1 %r8;
    MOV %r8 "$";
    SET_KEY %r6 2 %r8;
    MOV %r7 "join";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    ADD %r3 %r5;
    MOV %r4 ")";
    ADD %r3 %r4;
    SET_KEY %r1 0 %r3;
    MOV %r3 rsMiscUpper;
    MOV %r8 "+";
    ADD %r3 %r8;
    MOV %r7 rsOptContrUpper;
    ADD %r3 %r7;
    MOV %r6 "(?=";
    ADD %r3 %r6;
    MOV %r6 "|";
    PUSH %r6;
    NEW_ARR %r6;
    MOV %r8 rsBreak;
    SET_KEY %r6 0 %r8;
    MOV %r8 rsUpper;
    MOV %r9 rsMiscLower;
    ADD %r8 %r9;
    SET_KEY %r6 1 %r8;
    MOV %r8 "$";
    SET_KEY %r6 2 %r8;
    MOV %r7 "join";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    ADD %r3 %r5;
    MOV %r4 ")";
    ADD %r3 %r4;
    SET_KEY %r1 1 %r3;
    MOV %r3 rsUpper;
    MOV %r7 "?";
    ADD %r3 %r7;
    MOV %r6 rsMiscLower;
    ADD %r3 %r6;
    MOV %r5 "+";
    ADD %r3 %r5;
    MOV %r4 rsOptContrLower;
    ADD %r3 %r4;
    SET_KEY %r1 2 %r3;
    MOV %r3 rsUpper;
    MOV %r5 "+";
    ADD %r3 %r5;
    MOV %r4 rsOptContrUpper;
    ADD %r3 %r4;
    SET_KEY %r1 3 %r3;
    MOV %r3 rsOrdUpper;
    SET_KEY %r1 4 %r3;
    MOV %r3 rsOrdLower;
    SET_KEY %r1 5 %r3;
    MOV %r3 rsDigits;
    SET_KEY %r1 6 %r3;
    MOV %r3 rsEmoji;
    SET_KEY %r1 7 %r3;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_CTX 'RegExp' 2 false;
    MOV @c21 $RET;
    MOV %r0 "[";
    MOV %r5 rsZWJ;
    ADD %r0 %r5;
    MOV %r4 rsAstralRange;
    ADD %r0 %r4;
    MOV %r3 rsComboRange;
    ADD %r0 %r3;
    MOV %r2 rsVarRange;
    ADD %r0 %r2;
    MOV %r1 "]";
    ADD %r0 %r1;
    PUSH %r0;
    CALL_CTX 'RegExp' 1 false;
    MOV @c12 $RET;
    NEW_REG @c13 "[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]" "";
    NEW_ARR @c23;
    MOV %r0 "Array";
    SET_KEY @c23 0 %r0;
    MOV %r0 "Buffer";
    SET_KEY @c23 1 %r0;
    MOV %r0 "DataView";
    SET_KEY @c23 2 %r0;
    MOV %r0 "Date";
    SET_KEY @c23 3 %r0;
    MOV %r0 "Error";
    SET_KEY @c23 4 %r0;
    MOV %r0 "Float32Array";
    SET_KEY @c23 5 %r0;
    MOV %r0 "Float64Array";
    SET_KEY @c23 6 %r0;
    MOV %r0 "Function";
    SET_KEY @c23 7 %r0;
    MOV %r0 "Int8Array";
    SET_KEY @c23 8 %r0;
    MOV %r0 "Int16Array";
    SET_KEY @c23 9 %r0;
    MOV %r0 "Int32Array";
    SET_KEY @c23 10 %r0;
    MOV %r0 "Map";
    SET_KEY @c23 11 %r0;
    MOV %r0 "Math";
    SET_KEY @c23 12 %r0;
    MOV %r0 "Object";
    SET_KEY @c23 13 %r0;
    MOV %r0 "Promise";
    SET_KEY @c23 14 %r0;
    MOV %r0 "RegExp";
    SET_KEY @c23 15 %r0;
    MOV %r0 "Set";
    SET_KEY @c23 16 %r0;
    MOV %r0 "String";
    SET_KEY @c23 17 %r0;
    MOV %r0 "Symbol";
    SET_KEY @c23 18 %r0;
    MOV %r0 "TypeError";
    SET_KEY @c23 19 %r0;
    MOV %r0 "Uint8Array";
    SET_KEY @c23 20 %r0;
    MOV %r0 "Uint8ClampedArray";
    SET_KEY @c23 21 %r0;
    MOV %r0 "Uint16Array";
    SET_KEY @c23 22 %r0;
    MOV %r0 "Uint32Array";
    SET_KEY @c23 23 %r0;
    MOV %r0 "WeakMap";
    SET_KEY @c23 24 %r0;
    MOV %r0 "_";
    SET_KEY @c23 25 %r0;
    MOV %r0 "clearTimeout";
    SET_KEY @c23 26 %r0;
    MOV %r0 "isFinite";
    SET_KEY @c23 27 %r0;
    MOV %r0 "parseInt";
    SET_KEY @c23 28 %r0;
    MOV %r0 "setTimeout";
    SET_KEY @c23 29 %r0;
    MOV @c438 1;
    MINUS templateCounter;
    NEW_OBJ @c180;
    MOV %r8 true;
    MOV %r9 @c180;
    MOV %r10 @c305;
    SET_KEY %r9 %r10 %r8;
    MOV %r7 %r8;
    MOV %r8 @c180;
    MOV %r9 @c304;
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
    MOV %r7 @c180;
    MOV %r8 @c303;
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
    MOV %r6 @c180;
    MOV %r7 @c302;
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 @c180;
    MOV %r6 @c301;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV %r4 @c180;
    MOV %r5 @c300;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    MOV %r3 @c180;
    MOV %r4 @c299;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV %r2 @c180;
    MOV %r3 @c298;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 @c180;
    MOV %r2 @c297;
    SET_KEY %r1 %r2 %r0;
    MOV %r14 false;
    MOV %r15 @c180;
    MOV %r16 @c292;
    SET_KEY %r15 %r16 %r14;
    MOV %r13 %r14;
    MOV %r14 @c180;
    MOV %r15 @c271;
    SET_KEY %r14 %r15 %r13;
    MOV %r12 %r13;
    MOV %r13 @c180;
    MOV %r14 @c178;
    SET_KEY %r13 %r14 %r12;
    MOV %r11 %r12;
    MOV %r12 @c180;
    MOV %r13 @c177;
    SET_KEY %r12 %r13 %r11;
    MOV %r10 %r11;
    MOV %r11 @c180;
    MOV %r12 @c118;
    SET_KEY %r11 %r12 %r10;
    MOV %r9 %r10;
    MOV %r10 @c180;
    MOV %r11 @c269;
    SET_KEY %r10 %r11 %r9;
    MOV %r8 %r9;
    MOV %r9 @c180;
    MOV %r10 @c170;
    SET_KEY %r9 %r10 %r8;
    MOV %r7 %r8;
    MOV %r8 @c180;
    MOV %r9 @c115;
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
    MOV %r7 @c180;
    MOV %r8 @c270;
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
    MOV %r6 @c180;
    MOV %r7 @c162;
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 @c180;
    MOV %r6 @c33;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV %r4 @c180;
    MOV %r5 @c268;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    MOV %r3 @c180;
    MOV %r4 @c161;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV %r2 @c180;
    MOV %r3 @c165;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 @c180;
    MOV %r2 @c119;
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ @c125;
    MOV %r21 true;
    MOV %r22 @c125;
    MOV %r23 @c305;
    SET_KEY %r22 %r23 %r21;
    MOV %r20 %r21;
    MOV %r21 @c125;
    MOV %r22 @c304;
    SET_KEY %r21 %r22 %r20;
    MOV %r19 %r20;
    MOV %r20 @c125;
    MOV %r21 @c303;
    SET_KEY %r20 %r21 %r19;
    MOV %r18 %r19;
    MOV %r19 @c125;
    MOV %r20 @c302;
    SET_KEY %r19 %r20 %r18;
    MOV %r17 %r18;
    MOV %r18 @c125;
    MOV %r19 @c273;
    SET_KEY %r18 %r19 %r17;
    MOV %r16 %r17;
    MOV %r17 @c125;
    MOV %r18 @c271;
    SET_KEY %r17 %r18 %r16;
    MOV %r15 %r16;
    MOV %r16 @c125;
    MOV %r17 @c178;
    SET_KEY %r16 %r17 %r15;
    MOV %r14 %r15;
    MOV %r15 @c125;
    MOV %r16 @c177;
    SET_KEY %r15 %r16 %r14;
    MOV %r13 %r14;
    MOV %r14 @c125;
    MOV %r15 @c118;
    SET_KEY %r14 %r15 %r13;
    MOV %r12 %r13;
    MOV %r13 @c125;
    MOV %r14 @c269;
    SET_KEY %r13 %r14 %r12;
    MOV %r11 %r12;
    MOV %r12 @c125;
    MOV %r13 @c170;
    SET_KEY %r12 %r13 %r11;
    MOV %r10 %r11;
    MOV %r11 @c125;
    MOV %r12 @c301;
    SET_KEY %r11 %r12 %r10;
    MOV %r9 %r10;
    MOV %r10 @c125;
    MOV %r11 @c300;
    SET_KEY %r10 %r11 %r9;
    MOV %r8 %r9;
    MOV %r9 @c125;
    MOV %r10 @c299;
    SET_KEY %r9 %r10 %r8;
    MOV %r7 %r8;
    MOV %r8 @c125;
    MOV %r9 @c298;
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
    MOV %r7 @c125;
    MOV %r8 @c297;
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
    MOV %r6 @c125;
    MOV %r7 @c162;
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 @c125;
    MOV %r6 @c268;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV %r4 @c125;
    MOV %r5 @c33;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    MOV %r3 @c125;
    MOV %r4 @c161;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV %r2 @c125;
    MOV %r3 @c165;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 @c125;
    MOV %r2 @c119;
    SET_KEY %r1 %r2 %r0;
    MOV %r2 false;
    MOV %r3 @c125;
    MOV %r4 @c292;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV %r2 @c125;
    MOV %r3 @c115;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 @c125;
    MOV %r2 @c270;
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ deburredLetters;
    MOV %r0 "A";
    SET_KEY deburredLetters '\xc0' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\xc1' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\xc2' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\xc3' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\xc4' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\xc5' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\xe0' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\xe1' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\xe2' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\xe3' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\xe4' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\xe5' %r0;
    MOV %r0 "C";
    SET_KEY deburredLetters '\xc7' %r0;
    MOV %r0 "c";
    SET_KEY deburredLetters '\xe7' %r0;
    MOV %r0 "D";
    SET_KEY deburredLetters '\xd0' %r0;
    MOV %r0 "d";
    SET_KEY deburredLetters '\xf0' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\xc8' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\xc9' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\xca' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\xcb' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\xe8' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\xe9' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\xea' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\xeb' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\xcc' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\xcd' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\xce' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\xcf' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\xec' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\xed' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\xee' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\xef' %r0;
    MOV %r0 "N";
    SET_KEY deburredLetters '\xd1' %r0;
    MOV %r0 "n";
    SET_KEY deburredLetters '\xf1' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\xd2' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\xd3' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\xd4' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\xd5' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\xd6' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\xd8' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\xf2' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\xf3' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\xf4' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\xf5' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\xf6' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\xf8' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\xd9' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\xda' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\xdb' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\xdc' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\xf9' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\xfa' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\xfb' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\xfc' %r0;
    MOV %r0 "Y";
    SET_KEY deburredLetters '\xdd' %r0;
    MOV %r0 "y";
    SET_KEY deburredLetters '\xfd' %r0;
    MOV %r0 "y";
    SET_KEY deburredLetters '\xff' %r0;
    MOV %r0 "Ae";
    SET_KEY deburredLetters '\xc6' %r0;
    MOV %r0 "ae";
    SET_KEY deburredLetters '\xe6' %r0;
    MOV %r0 "Th";
    SET_KEY deburredLetters '\xde' %r0;
    MOV %r0 "th";
    SET_KEY deburredLetters '\xfe' %r0;
    MOV %r0 "ss";
    SET_KEY deburredLetters '\xdf' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\u0100' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\u0102' %r0;
    MOV %r0 "A";
    SET_KEY deburredLetters '\u0104' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\u0101' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\u0103' %r0;
    MOV %r0 "a";
    SET_KEY deburredLetters '\u0105' %r0;
    MOV %r0 "C";
    SET_KEY deburredLetters '\u0106' %r0;
    MOV %r0 "C";
    SET_KEY deburredLetters '\u0108' %r0;
    MOV %r0 "C";
    SET_KEY deburredLetters '\u010a' %r0;
    MOV %r0 "C";
    SET_KEY deburredLetters '\u010c' %r0;
    MOV %r0 "c";
    SET_KEY deburredLetters '\u0107' %r0;
    MOV %r0 "c";
    SET_KEY deburredLetters '\u0109' %r0;
    MOV %r0 "c";
    SET_KEY deburredLetters '\u010b' %r0;
    MOV %r0 "c";
    SET_KEY deburredLetters '\u010d' %r0;
    MOV %r0 "D";
    SET_KEY deburredLetters '\u010e' %r0;
    MOV %r0 "D";
    SET_KEY deburredLetters '\u0110' %r0;
    MOV %r0 "d";
    SET_KEY deburredLetters '\u010f' %r0;
    MOV %r0 "d";
    SET_KEY deburredLetters '\u0111' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\u0112' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\u0114' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\u0116' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\u0118' %r0;
    MOV %r0 "E";
    SET_KEY deburredLetters '\u011a' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\u0113' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\u0115' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\u0117' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\u0119' %r0;
    MOV %r0 "e";
    SET_KEY deburredLetters '\u011b' %r0;
    MOV %r0 "G";
    SET_KEY deburredLetters '\u011c' %r0;
    MOV %r0 "G";
    SET_KEY deburredLetters '\u011e' %r0;
    MOV %r0 "G";
    SET_KEY deburredLetters '\u0120' %r0;
    MOV %r0 "G";
    SET_KEY deburredLetters '\u0122' %r0;
    MOV %r0 "g";
    SET_KEY deburredLetters '\u011d' %r0;
    MOV %r0 "g";
    SET_KEY deburredLetters '\u011f' %r0;
    MOV %r0 "g";
    SET_KEY deburredLetters '\u0121' %r0;
    MOV %r0 "g";
    SET_KEY deburredLetters '\u0123' %r0;
    MOV %r0 "H";
    SET_KEY deburredLetters '\u0124' %r0;
    MOV %r0 "H";
    SET_KEY deburredLetters '\u0126' %r0;
    MOV %r0 "h";
    SET_KEY deburredLetters '\u0125' %r0;
    MOV %r0 "h";
    SET_KEY deburredLetters '\u0127' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\u0128' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\u012a' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\u012c' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\u012e' %r0;
    MOV %r0 "I";
    SET_KEY deburredLetters '\u0130' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\u0129' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\u012b' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\u012d' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\u012f' %r0;
    MOV %r0 "i";
    SET_KEY deburredLetters '\u0131' %r0;
    MOV %r0 "J";
    SET_KEY deburredLetters '\u0134' %r0;
    MOV %r0 "j";
    SET_KEY deburredLetters '\u0135' %r0;
    MOV %r0 "K";
    SET_KEY deburredLetters '\u0136' %r0;
    MOV %r0 "k";
    SET_KEY deburredLetters '\u0137' %r0;
    MOV %r0 "k";
    SET_KEY deburredLetters '\u0138' %r0;
    MOV %r0 "L";
    SET_KEY deburredLetters '\u0139' %r0;
    MOV %r0 "L";
    SET_KEY deburredLetters '\u013b' %r0;
    MOV %r0 "L";
    SET_KEY deburredLetters '\u013d' %r0;
    MOV %r0 "L";
    SET_KEY deburredLetters '\u013f' %r0;
    MOV %r0 "L";
    SET_KEY deburredLetters '\u0141' %r0;
    MOV %r0 "l";
    SET_KEY deburredLetters '\u013a' %r0;
    MOV %r0 "l";
    SET_KEY deburredLetters '\u013c' %r0;
    MOV %r0 "l";
    SET_KEY deburredLetters '\u013e' %r0;
    MOV %r0 "l";
    SET_KEY deburredLetters '\u0140' %r0;
    MOV %r0 "l";
    SET_KEY deburredLetters '\u0142' %r0;
    MOV %r0 "N";
    SET_KEY deburredLetters '\u0143' %r0;
    MOV %r0 "N";
    SET_KEY deburredLetters '\u0145' %r0;
    MOV %r0 "N";
    SET_KEY deburredLetters '\u0147' %r0;
    MOV %r0 "N";
    SET_KEY deburredLetters '\u014a' %r0;
    MOV %r0 "n";
    SET_KEY deburredLetters '\u0144' %r0;
    MOV %r0 "n";
    SET_KEY deburredLetters '\u0146' %r0;
    MOV %r0 "n";
    SET_KEY deburredLetters '\u0148' %r0;
    MOV %r0 "n";
    SET_KEY deburredLetters '\u014b' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\u014c' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\u014e' %r0;
    MOV %r0 "O";
    SET_KEY deburredLetters '\u0150' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\u014d' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\u014f' %r0;
    MOV %r0 "o";
    SET_KEY deburredLetters '\u0151' %r0;
    MOV %r0 "R";
    SET_KEY deburredLetters '\u0154' %r0;
    MOV %r0 "R";
    SET_KEY deburredLetters '\u0156' %r0;
    MOV %r0 "R";
    SET_KEY deburredLetters '\u0158' %r0;
    MOV %r0 "r";
    SET_KEY deburredLetters '\u0155' %r0;
    MOV %r0 "r";
    SET_KEY deburredLetters '\u0157' %r0;
    MOV %r0 "r";
    SET_KEY deburredLetters '\u0159' %r0;
    MOV %r0 "S";
    SET_KEY deburredLetters '\u015a' %r0;
    MOV %r0 "S";
    SET_KEY deburredLetters '\u015c' %r0;
    MOV %r0 "S";
    SET_KEY deburredLetters '\u015e' %r0;
    MOV %r0 "S";
    SET_KEY deburredLetters '\u0160' %r0;
    MOV %r0 "s";
    SET_KEY deburredLetters '\u015b' %r0;
    MOV %r0 "s";
    SET_KEY deburredLetters '\u015d' %r0;
    MOV %r0 "s";
    SET_KEY deburredLetters '\u015f' %r0;
    MOV %r0 "s";
    SET_KEY deburredLetters '\u0161' %r0;
    MOV %r0 "T";
    SET_KEY deburredLetters '\u0162' %r0;
    MOV %r0 "T";
    SET_KEY deburredLetters '\u0164' %r0;
    MOV %r0 "T";
    SET_KEY deburredLetters '\u0166' %r0;
    MOV %r0 "t";
    SET_KEY deburredLetters '\u0163' %r0;
    MOV %r0 "t";
    SET_KEY deburredLetters '\u0165' %r0;
    MOV %r0 "t";
    SET_KEY deburredLetters '\u0167' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\u0168' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\u016a' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\u016c' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\u016e' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\u0170' %r0;
    MOV %r0 "U";
    SET_KEY deburredLetters '\u0172' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\u0169' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\u016b' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\u016d' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\u016f' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\u0171' %r0;
    MOV %r0 "u";
    SET_KEY deburredLetters '\u0173' %r0;
    MOV %r0 "W";
    SET_KEY deburredLetters '\u0174' %r0;
    MOV %r0 "w";
    SET_KEY deburredLetters '\u0175' %r0;
    MOV %r0 "Y";
    SET_KEY deburredLetters '\u0176' %r0;
    MOV %r0 "y";
    SET_KEY deburredLetters '\u0177' %r0;
    MOV %r0 "Y";
    SET_KEY deburredLetters '\u0178' %r0;
    MOV %r0 "Z";
    SET_KEY deburredLetters '\u0179' %r0;
    MOV %r0 "Z";
    SET_KEY deburredLetters '\u017b' %r0;
    MOV %r0 "Z";
    SET_KEY deburredLetters '\u017d' %r0;
    MOV %r0 "z";
    SET_KEY deburredLetters '\u017a' %r0;
    MOV %r0 "z";
    SET_KEY deburredLetters '\u017c' %r0;
    MOV %r0 "z";
    SET_KEY deburredLetters '\u017e' %r0;
    MOV %r0 "IJ";
    SET_KEY deburredLetters '\u0132' %r0;
    MOV %r0 "ij";
    SET_KEY deburredLetters '\u0133' %r0;
    MOV %r0 "Oe";
    SET_KEY deburredLetters '\u0152' %r0;
    MOV %r0 "oe";
    SET_KEY deburredLetters '\u0153' %r0;
    MOV %r0 "'n";
    SET_KEY deburredLetters '\u0149' %r0;
    MOV %r0 "s";
    SET_KEY deburredLetters '\u017f' %r0;
    NEW_OBJ htmlEscapes;
    MOV %r0 "&amp;";
    SET_KEY htmlEscapes '&' %r0;
    MOV %r0 "&lt;";
    SET_KEY htmlEscapes '<' %r0;
    MOV %r0 "&gt;";
    SET_KEY htmlEscapes '>' %r0;
    MOV %r0 "&quot;";
    SET_KEY htmlEscapes '"' %r0;
    MOV %r0 "&#39;";
    SET_KEY htmlEscapes "'" %r0;
    NEW_OBJ htmlUnescapes;
    MOV %r0 "&";
    SET_KEY htmlUnescapes '&amp;' %r0;
    MOV %r0 "<";
    SET_KEY htmlUnescapes '&lt;' %r0;
    MOV %r0 ">";
    SET_KEY htmlUnescapes '&gt;' %r0;
    MOV %r0 "\"";
    SET_KEY htmlUnescapes '&quot;' %r0;
    MOV %r0 "'";
    SET_KEY htmlUnescapes '&#39;' %r0;
    NEW_OBJ @c11;
    MOV %r0 "\\";
    SET_KEY @c11 '\\' %r0;
    MOV %r0 "'";
    SET_KEY @c11 "'" %r0;
    MOV %r0 "n";
    SET_KEY @c11 '\n' %r0;
    MOV %r0 "r";
    SET_KEY @c11 '\r' %r0;
    MOV %r0 "u2028";
    SET_KEY @c11 '\u2028' %r0;
    MOV %r0 "u2029";
    SET_KEY @c11 '\u2029' %r0;
    MOV @c419 parseFloat;
    MOV @c402 parseInt;
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    MOV %r3 "object";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2_;
    MOV_CTX %r3 "global";
    LG_AND %r1 %r3;
LABEL _l2_:
    MOV %r0 %r1;
    JF %r1 _l1_;
    MOV_CTX %r4 "global";
    MOV %r5 "Object";
    MOV_PROP %r2 %r4 %r5;
    MOV_CTX %r3 "Object";
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1_:
    MOV freeGlobal %r0;
    JF %r0 _l0_;
    MOV_CTX %r1 "global";
    LG_AND freeGlobal %r1;
LABEL _l0_:
    MOV_CTX %r2 "self";
    TYPE_OF %r2;
    MOV %r3 "object";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l5_;
    MOV_CTX %r3 "self";
    LG_AND %r1 %r3;
LABEL _l5_:
    MOV %r0 %r1;
    JF %r1 _l4_;
    MOV_CTX %r4 "self";
    MOV %r5 "Object";
    MOV_PROP %r2 %r4 %r5;
    MOV_CTX %r3 "Object";
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4_:
    MOV freeSelf %r0;
    JF %r0 _l3_;
    MOV_CTX %r1 "self";
    LG_AND freeSelf %r1;
LABEL _l3_:
    MOV %r1 freeGlobal;
    MOV %r0 %r1;
    JIF %r1 _l7_;
    MOV %r2 freeSelf;
    LG_OR %r0 %r2;
LABEL _l7_:
    MOV @c22 %r0;
    JIF %r0 _l6_;
    MOV %r3 "return this";
    PUSH %r3;
    CALL_CTX 'Function' 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    LG_OR @c22 %r1;
LABEL _l6_:
    MOV_CTX %r2 "exports";
    TYPE_OF %r2;
    MOV %r3 "object";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l10_;
    MOV_CTX %r3 "exports";
    LG_AND %r1 %r3;
LABEL _l10_:
    MOV %r0 %r1;
    JF %r1 _l9_;
    MOV_CTX %r3 "exports";
    MOV %r4 "nodeType";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l9_:
    MOV freeExports %r0;
    JF %r0 _l8_;
    MOV_CTX %r1 "exports";
    LG_AND freeExports %r1;
LABEL _l8_:
    MOV %r3 freeExports;
    MOV %r2 %r3;
    JF %r3 _l14_;
    MOV_CTX %r4 "module";
    TYPE_OF %r4;
    MOV %r5 "object";
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l14_:
    MOV %r1 %r2;
    JF %r2 _l13_;
    MOV_CTX %r3 "module";
    LG_AND %r1 %r3;
LABEL _l13_:
    MOV %r0 %r1;
    JF %r1 _l12_;
    MOV_CTX %r3 "module";
    MOV %r4 "nodeType";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l12_:
    MOV @c0 %r0;
    JF %r0 _l11_;
    MOV_CTX %r1 "module";
    LG_AND @c0 %r1;
LABEL _l11_:
    MOV %r0 @c0;
    MOV @c26 %r0;
    JF %r0 _l15_;
    MOV %r3 @c0;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 freeExports;
    EQ %r1 %r2;
    LG_AND @c26 %r1;
LABEL _l15_:
    MOV %r0 @c26;
    MOV @c1 %r0;
    JF %r0 _l16_;
    MOV %r2 freeGlobal;
    MOV %r3 "process";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c1 %r1;
LABEL _l16_:
    FUNC %r0 @@f1;
    CALL_REG %r0 0 false;
    MOV nodeUtil $RET;
    MOV %r0 nodeUtil;
    MOV @c34 %r0;
    JF %r0 _l17_;
    MOV %r2 nodeUtil;
    MOV %r3 "isArrayBuffer";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c34 %r1;
LABEL _l17_:
    MOV %r0 nodeUtil;
    MOV @c36 %r0;
    JF %r0 _l18_;
    MOV %r2 nodeUtil;
    MOV %r3 "isDate";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c36 %r1;
LABEL _l18_:
    MOV %r0 nodeUtil;
    MOV @c37 %r0;
    JF %r0 _l19_;
    MOV %r2 nodeUtil;
    MOV %r3 "isMap";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c37 %r1;
LABEL _l19_:
    MOV %r0 nodeUtil;
    MOV @c38 %r0;
    JF %r0 _l20_;
    MOV %r2 nodeUtil;
    MOV %r3 "isRegExp";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c38 %r1;
LABEL _l20_:
    MOV %r0 nodeUtil;
    MOV @c39 %r0;
    JF %r0 _l21_;
    MOV %r2 nodeUtil;
    MOV %r3 "isSet";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c39 %r1;
LABEL _l21_:
    MOV %r0 nodeUtil;
    MOV @c40 %r0;
    JF %r0 _l22_;
    MOV %r2 nodeUtil;
    MOV %r3 "isTypedArray";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c40 %r1;
LABEL _l22_:
    MOV %r0 "length";
    PUSH %r0;
    CALL_REG @c457 1 false;
    MOV @c17 $RET;
    MOV %r0 deburredLetters;
    PUSH %r0;
    CALL_REG basePropertyOf 1 false;
    MOV @c423 $RET;
    MOV %r0 htmlEscapes;
    PUSH %r0;
    CALL_REG basePropertyOf 1 false;
    MOV @c426 $RET;
    MOV %r0 "====================================================1";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 htmlUnescapes;
    PUSH %r0;
    CALL_REG basePropertyOf 1 false;
    MOV @c450 $RET;
    CALL_REG @c43 0 false;
    MOV @c24 $RET;
    MOV_CTX %r2 "define";
    TYPE_OF %r2;
    MOV %r3 "function";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l26_;
    MOV_CTX %r5 "define";
    MOV %r6 "amd";
    MOV_PROP %r3 %r5 %r6;
    TYPE_OF %r3;
    MOV %r4 "object";
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l26_:
    MOV %r0 %r1;
    JF %r1 _l25_;
    MOV_CTX %r3 "define";
    MOV %r4 "amd";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l25_:
    JF %r0 _l23_;
    MOV %r1 @c24;
    MOV %r2 @c22;
    MOV %r3 "_";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f55;
    PUSH %r1;
    CALL_CTX 'define' 1 false;
    JMP _l24_;
LABEL _l23_:
    MOV %r1 @c0;
    JF %r1 _l27_;
    MOV %r2 @c24;
    MOV %r5 @c24;
    MOV %r6 @c0;
    MOV %r7 "exports";
    SET_KEY %r6 %r7 %r5;
    MOV %r3 %r5;
    MOV %r4 "_";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @c24;
    MOV %r3 freeExports;
    MOV %r4 "_";
    SET_KEY %r3 %r4 %r2;
    JMP _l24_;
LABEL _l27_:
    MOV %r2 @c24;
    MOV %r3 @c22;
    MOV %r4 "_";
    SET_KEY %r3 %r4 %r2;
LABEL _l24_:
}
func @@f1() {
    VAR types;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    TRY _l28_ _l29_;
    MOV %r1 @c0;
    MOV %r0 %r1;
    JF %r1 _l31_;
    MOV %r3 @c0;
    MOV %r4 "require";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l31_:
    MOV types %r0;
    JF %r0 _l30_;
    MOV %r4 "util";
    PUSH %r4;
    MOV %r4 @c0;
    MOV %r5 "require";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "types";
    MOV_PROP %r1 %r2 %r3;
    LG_AND types %r1;
LABEL _l30_:
    MOV %r0 types;
    JF %r0 _l32_;
    MOV %r1 types;
    MOV $RET %r1;
    RET;
    JMP _l33_;
LABEL _l32_:
LABEL _l33_:
    MOV %r2 @c1;
    MOV %r1 %r2;
    JF %r2 _l35_;
    MOV %r4 @c1;
    MOV %r5 "binding";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l35_:
    MOV %r0 %r1;
    JF %r1 _l34_;
    MOV %r3 "util";
    PUSH %r3;
    MOV %r3 @c1;
    MOV %r4 "binding";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l34_:
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l28_:
LABEL _l29_:
}
func @@f2(func, thisArg, args) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV %r1 args;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 0;
    JE %r0 %r1 _l37_;
    JMP _l38_;
LABEL _l37_:
    MOV %r3 thisArg;
    PUSH %r3;
    MOV %r3 func;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
LABEL _l38_:
    MOV %r2 1;
    JE %r0 %r2 _l39_;
    JMP _l40_;
LABEL _l39_:
    MOV %r5 args;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 thisArg;
    PUSH %r4;
    MOV %r4 func;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
LABEL _l40_:
    MOV %r3 2;
    JE %r0 %r3 _l41_;
    JMP _l42_;
LABEL _l41_:
    MOV %r6 args;
    MOV %r7 1;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r6 args;
    MOV %r7 0;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r5 thisArg;
    PUSH %r5;
    MOV %r5 func;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
LABEL _l42_:
    MOV %r4 3;
    JE %r0 %r4 _l43_;
    JMP _l44_;
LABEL _l43_:
    MOV %r7 args;
    MOV %r8 2;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 args;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 args;
    MOV %r8 0;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 thisArg;
    PUSH %r6;
    MOV %r6 func;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 4 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
LABEL _l44_:
LABEL _l36_:
    MOV %r1 args;
    PUSH %r1;
    MOV %r1 thisArg;
    PUSH %r1;
    MOV %r1 func;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f3(array, setter, iteratee, accumulator) {
    VAR index;
    VAR length;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l45_;
    MOV length 0;
    JMP _l46_;
LABEL _l45_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l46_:
LABEL _l47_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l48_;
LABEL _l50_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 array;
    PUSH %r1;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG iteratee 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 accumulator;
    PUSH %r1;
    CALL_REG setter 4 false;
    JMP _l47_;
LABEL _l48_:
    MOV %r0 accumulator;
    MOV $RET %r0;
    RET;
}
func @@f4(array, iteratee) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l51_;
    MOV length 0;
    JMP _l52_;
LABEL _l51_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l52_:
LABEL _l53_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l54_;
LABEL _l56_:
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    MOV %r4 array;
    MOV %r5 index;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG iteratee 3 false;
    MOV %r1 $RET;
    MOV %r2 false;
    EQ %r1 %r2;
    JF %r1 _l57_;
    JMP _l54_;
    JMP _l58_;
LABEL _l57_:
LABEL _l58_:
    JMP _l53_;
LABEL _l54_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f5(array, iteratee) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l59_;
    MOV length 0;
    JMP _l60_;
LABEL _l59_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l60_:
LABEL _l61_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l62_;
LABEL _l64_:
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 length;
    PUSH %r3;
    MOV %r4 array;
    MOV %r5 length;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG iteratee 3 false;
    MOV %r1 $RET;
    MOV %r2 false;
    EQ %r1 %r2;
    JF %r1 _l65_;
    JMP _l62_;
    JMP _l66_;
LABEL _l65_:
LABEL _l66_:
    JMP _l61_;
LABEL _l62_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f6(array, predicate) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l67_;
    MOV length 0;
    JMP _l68_;
LABEL _l67_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l68_:
LABEL _l69_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l70_;
LABEL _l72_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG predicate 3 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l73_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l74_;
LABEL _l73_:
LABEL _l74_:
    JMP _l69_;
LABEL _l70_:
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f7(array, predicate) {
    VAR index;
    VAR length;
    VAR resIndex;
    VAR result;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l75_;
    MOV length 0;
    JMP _l76_;
LABEL _l75_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l76_:
    MOV resIndex 0;
    NEW_ARR result;
LABEL _l77_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l78_;
LABEL _l80_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG predicate 3 false;
    MOV %r1 $RET;
    JF %r1 _l81_;
    MOV %r2 value;
    MOV %r3 result;
    MOV %r5 resIndex;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV resIndex %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l82_;
LABEL _l81_:
LABEL _l82_:
    JMP _l77_;
LABEL _l78_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f8(array, value) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l83_;
    MOV length 0;
    JMP _l84_;
LABEL _l83_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l84_:
    MOV %r1 length;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l85_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 array;
    PUSH %r4;
    CALL_REG @c2 3 false;
    MOV %r2 $RET;
    MOV %r3 1;
    MINUS %r3;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l85_:
    MOV $RET %r0;
    RET;
}
func @@f9(array, value, comparator) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l86_;
    MOV length 0;
    JMP _l87_;
LABEL _l86_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l87_:
LABEL _l88_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l89_;
LABEL _l91_:
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG comparator 2 false;
    MOV %r1 $RET;
    JF %r1 _l92_;
    MOV %r2 true;
    MOV $RET %r2;
    RET;
    JMP _l93_;
LABEL _l92_:
LABEL _l93_:
    JMP _l88_;
LABEL _l89_:
    MOV %r0 false;
    MOV $RET %r0;
    RET;
}
func @@f10(array, iteratee) {
    VAR index;
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l94_;
    MOV length 0;
    JMP _l95_;
LABEL _l94_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l95_:
    MOV %r0 length;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV result $RET;
LABEL _l96_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l97_;
LABEL _l99_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG iteratee 3 false;
    MOV %r1 $RET;
    MOV %r2 result;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l96_;
LABEL _l97_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f11(array, values) {
    VAR index;
    VAR length;
    VAR offset;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 values;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP offset %r0 %r1;
LABEL _l100_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l101_;
LABEL _l103_:
    MOV %r2 values;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 array;
    MOV %r3 offset;
    MOV %r4 index;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l100_;
LABEL _l101_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f12(array, iteratee, accumulator, initAccum) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l104_;
    MOV length 0;
    JMP _l105_;
LABEL _l104_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l105_:
    MOV %r1 initAccum;
    MOV %r0 %r1;
    JF %r1 _l108_;
    MOV %r2 length;
    LG_AND %r0 %r2;
LABEL _l108_:
    JF %r0 _l106_;
    MOV %r2 array;
    MOV %r4 index;
    ADD %r4 1;
    MOV %r3 %r4;
    MOV index %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV accumulator %r1;
    JMP _l107_;
LABEL _l106_:
LABEL _l107_:
LABEL _l109_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l110_;
LABEL _l112_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 accumulator;
    PUSH %r2;
    CALL_REG iteratee 4 false;
    MOV %r1 $RET;
    MOV accumulator %r1;
    JMP _l109_;
LABEL _l110_:
    MOV %r0 accumulator;
    MOV $RET %r0;
    RET;
}
func @@f13(array, iteratee, accumulator, initAccum) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l113_;
    MOV length 0;
    JMP _l114_;
LABEL _l113_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l114_:
    MOV %r1 initAccum;
    MOV %r0 %r1;
    JF %r1 _l117_;
    MOV %r2 length;
    LG_AND %r0 %r2;
LABEL _l117_:
    JF %r0 _l115_;
    MOV %r2 array;
    MOV %r4 length;
    SUB %r4 1;
    MOV %r3 %r4;
    MOV length %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV accumulator %r1;
    JMP _l116_;
LABEL _l115_:
LABEL _l116_:
LABEL _l118_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l119_;
LABEL _l121_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 length;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 length;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 accumulator;
    PUSH %r2;
    CALL_REG iteratee 4 false;
    MOV %r1 $RET;
    MOV accumulator %r1;
    JMP _l118_;
LABEL _l119_:
    MOV %r0 accumulator;
    MOV $RET %r0;
    RET;
}
func @@f14(array, predicate) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l122_;
    MOV length 0;
    JMP _l123_;
LABEL _l122_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l123_:
LABEL _l124_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l125_;
LABEL _l127_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG predicate 3 false;
    MOV %r1 $RET;
    JF %r1 _l128_;
    MOV %r2 true;
    MOV $RET %r2;
    RET;
    JMP _l129_;
LABEL _l128_:
LABEL _l129_:
    JMP _l124_;
LABEL _l125_:
    MOV %r0 false;
    MOV $RET %r0;
    RET;
}
func @@f15(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 string;
    MOV %r2 "split";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f16(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c3;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "match";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l130_;
    NEW_ARR %r2;
    LG_OR %r0 %r2;
LABEL _l130_:
    MOV $RET %r0;
    RET;
}
func @@f17(collection, predicate, eachFunc) {
    VAR @c48;
    ALLOC @c48;
    VAR %r0;
    ALLOC @c47;
    MOV @c47 predicate;
    FUNC %r0 @@f56;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG eachFunc 2 false;
    MOV %r0 @c48;
    MOV $RET %r0;
    RET;
}
func @@f18(array, predicate, fromIndex, fromRight) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV index fromIndex;
    MOV %r1 fromRight;
    JF %r1 _l131_;
    MOV %r0 1;
    JMP _l132_;
LABEL _l131_:
    MOV %r0 1;
    MINUS %r0;
LABEL _l132_:
    ADD index %r0;
LABEL _l133_:
    MOV %r1 fromRight;
    JF %r1 _l137_;
    MOV %r2 index;
    MOV %r0 %r2;
    SUB %r2 1;
    MOV index %r2;
    JMP _l138_;
LABEL _l137_:
    MOV %r3 index;
    ADD %r3 1;
    MOV %r0 %r3;
    MOV index %r3;
    MOV %r2 length;
    LT %r0 %r2;
LABEL _l138_:
    JF %r0 _l134_;
LABEL _l136_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG predicate 3 false;
    MOV %r1 $RET;
    JF %r1 _l139_;
    MOV %r2 index;
    MOV $RET %r2;
    RET;
    JMP _l140_;
LABEL _l139_:
LABEL _l140_:
    JMP _l133_;
LABEL _l134_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f19(array, value, fromIndex) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 value;
    MOV %r2 value;
    EQ %r1 %r2;
    JF %r1 _l141_;
    MOV %r2 fromIndex;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c4 3 false;
    MOV %r0 $RET;
    JMP _l142_;
LABEL _l141_:
    MOV %r2 fromIndex;
    PUSH %r2;
    MOV %r2 @c5;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c6 3 false;
    MOV %r0 $RET;
LABEL _l142_:
    MOV $RET %r0;
    RET;
}
func @@f20(array, value, fromIndex, comparator) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index fromIndex;
    MOV %r0 1;
    SUB index %r0;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l143_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l144_;
LABEL _l146_:
    MOV %r2 value;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG comparator 2 false;
    MOV %r1 $RET;
    JF %r1 _l147_;
    MOV %r2 index;
    MOV $RET %r2;
    RET;
    JMP _l148_;
LABEL _l147_:
LABEL _l148_:
    JMP _l143_;
LABEL _l144_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f21(value) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 value;
    NE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f22(array, iteratee) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l149_;
    MOV length 0;
    JMP _l150_;
LABEL _l149_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l150_:
    MOV %r1 length;
    JF %r1 _l151_;
    MOV %r3 iteratee;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c7 2 false;
    MOV %r0 $RET;
    MOV %r2 length;
    DIV %r0 %r2;
    JMP _l152_;
LABEL _l151_:
    MOV %r0 @c8;
LABEL _l152_:
    MOV $RET %r0;
    RET;
}
func @@f23(key) {
    VAR %r0;
    ALLOC @c49;
    MOV @c49 key;
    FUNC %r0 @@f57;
    MOV $RET %r0;
    RET;
}
func @@f24(object) {
    VAR %r0;
    ALLOC @c50;
    MOV @c50 object;
    FUNC %r0 @@f58;
    MOV $RET %r0;
    RET;
}
func @@f25(collection, iteratee, accumulator, initAccum, eachFunc) {
    VAR %r0;
    ALLOC @c53;
    MOV @c53 iteratee;
    ALLOC @c52;
    MOV @c52 accumulator;
    ALLOC @c51;
    MOV @c51 initAccum;
    FUNC %r0 @@f59;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG eachFunc 2 false;
    MOV %r0 @c52;
    MOV $RET %r0;
    RET;
}
func @@f26(array, comparer) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 comparer;
    PUSH %r0;
    MOV %r0 array;
    MOV %r1 "sort";
    CALL_VAR %r0 %r1 1 false;
LABEL _l153_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l154_;
LABEL _l156_:
    MOV %r4 array;
    MOV %r5 length;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "value";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 array;
    MOV %r3 length;
    SET_KEY %r2 %r3 %r1;
    JMP _l153_;
LABEL _l154_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f27(array, iteratee) {
    VAR result;
    VAR index;
    VAR length;
    VAR current;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l157_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l158_;
LABEL _l160_:
    MOV %r2 array;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG iteratee 1 false;
    MOV current $RET;
    MOV %r1 current;
    MOV %r2 @c9;
    NE %r1 %r2;
    JF %r1 _l161_;
    MOV %r3 result;
    MOV %r4 @c9;
    EQ %r3 %r4;
    JF %r3 _l163_;
    MOV %r2 current;
    JMP _l162_;
LABEL _l163_:
    MOV %r2 result;
    MOV %r4 current;
    ADD %r2 %r4;
    MOV result %r2;
    JMP _l162_;
LABEL _l161_:
LABEL _l162_:
    JMP _l157_;
LABEL _l158_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f28(n, iteratee) {
    VAR index;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 n;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV result $RET;
LABEL _l164_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 n;
    LT %r0 %r1;
    JF %r0 _l165_;
LABEL _l167_:
    MOV %r2 index;
    PUSH %r2;
    CALL_REG iteratee 1 false;
    MOV %r1 $RET;
    MOV %r2 result;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l164_;
LABEL _l165_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f29(object, props) {
    VAR %r0;
    VAR %r1;
    ALLOC @c54;
    MOV @c54 object;
    FUNC %r1 @@f60;
    PUSH %r1;
    MOV %r1 props;
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f30(func) {
    VAR %r0;
    ALLOC @c55;
    MOV @c55 func;
    FUNC %r0 @@f61;
    MOV $RET %r0;
    RET;
}
func @@f31(object, props) {
    VAR %r0;
    VAR %r1;
    ALLOC @c56;
    MOV @c56 object;
    FUNC %r1 @@f62;
    PUSH %r1;
    MOV %r1 props;
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f32(cache, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 cache;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f33(strSymbols, chrSymbols) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV index 1;
    MINUS index;
    MOV %r0 strSymbols;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l168_:
    MOV %r3 index;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV index %r3;
    MOV %r2 length;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l172_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r5 strSymbols;
    MOV %r6 index;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 chrSymbols;
    PUSH %r4;
    CALL_REG @c2 3 false;
    MOV %r2 $RET;
    MOV %r3 1;
    MINUS %r3;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l172_:
    JF %r0 _l169_;
LABEL _l171_:
    JMP _l168_;
LABEL _l169_:
    MOV %r0 index;
    MOV $RET %r0;
    RET;
}
func @@f34(strSymbols, chrSymbols) {
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 strSymbols;
    MOV %r1 "length";
    MOV_PROP index %r0 %r1;
LABEL _l173_:
    MOV %r2 index;
    MOV %r1 %r2;
    SUB %r2 1;
    MOV index %r2;
    MOV %r0 %r1;
    JF %r1 _l177_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r5 strSymbols;
    MOV %r6 index;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 chrSymbols;
    PUSH %r4;
    CALL_REG @c2 3 false;
    MOV %r2 $RET;
    MOV %r3 1;
    MINUS %r3;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l177_:
    JF %r0 _l174_;
LABEL _l176_:
    JMP _l173_;
LABEL _l174_:
    MOV %r0 index;
    MOV $RET %r0;
    RET;
}
func @@f35(array, placeholder) {
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV result 0;
LABEL _l178_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l179_;
LABEL _l181_:
    MOV %r3 array;
    MOV %r4 length;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 placeholder;
    EQ %r1 %r2;
    JF %r1 _l182_;
    MOV %r2 result;
    ADD %r2 1;
    MOV result %r2;
    JMP _l183_;
LABEL _l182_:
LABEL _l183_:
    JMP _l178_;
LABEL _l179_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f36(chr) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 "\\";
    MOV %r2 @c11;
    MOV %r3 chr;
    MOV_PROP %r1 %r2 %r3;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f37(object, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l184_;
    MOV %r0 @c9;
    JMP _l185_;
LABEL _l184_:
    MOV %r2 object;
    MOV %r3 key;
    MOV_PROP %r0 %r2 %r3;
LABEL _l185_:
    MOV $RET %r0;
    RET;
}
func @@f38(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 string;
    PUSH %r1;
    MOV %r1 @c12;
    MOV %r2 "test";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f39(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 string;
    PUSH %r1;
    MOV %r1 @c13;
    MOV %r2 "test";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f40(iterator) {
    VAR data;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    NEW_ARR result;
LABEL _l186_:
    MOV %r4 iterator;
    MOV %r5 "next";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV data %r3;
    MOV %r1 %r3;
    MOV %r2 "done";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l187_;
LABEL _l189_:
    MOV %r2 data;
    MOV %r3 "value";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 result;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l186_;
LABEL _l187_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f41(map) {
    VAR @c58;
    ALLOC @c58;
    VAR @c57;
    ALLOC @c57;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV @c58 1;
    MINUS index;
    MOV %r1 map;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV @c57 $RET;
    FUNC %r0 @@f63;
    PUSH %r0;
    MOV %r0 map;
    MOV %r1 "forEach";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c57;
    MOV $RET %r0;
    RET;
}
func @@f42(func, transform) {
    VAR %r0;
    ALLOC @c60;
    MOV @c60 func;
    ALLOC @c59;
    MOV @c59 transform;
    FUNC %r0 @@f64;
    MOV $RET %r0;
    RET;
}
func @@f43(array, placeholder) {
    VAR index;
    VAR length;
    VAR resIndex;
    VAR result;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV resIndex 0;
    NEW_ARR result;
LABEL _l190_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l191_;
LABEL _l193_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r2 value;
    MOV %r3 placeholder;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l196_;
    MOV %r3 value;
    MOV %r4 @c14;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l196_:
    JF %r1 _l194_;
    MOV %r2 @c14;
    MOV %r3 array;
    MOV %r4 index;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 index;
    MOV %r3 result;
    MOV %r5 resIndex;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV resIndex %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l195_;
LABEL _l194_:
LABEL _l195_:
    JMP _l190_;
LABEL _l191_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f44(object, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    MOV %r2 "__proto__";
    WEQ %r1 %r2;
    JF %r1 _l197_;
    MOV %r0 @c9;
    JMP _l198_;
LABEL _l197_:
    MOV %r2 object;
    MOV %r3 key;
    MOV_PROP %r0 %r2 %r3;
LABEL _l198_:
    MOV $RET %r0;
    RET;
}
func @@f45(set) {
    VAR @c62;
    ALLOC @c62;
    VAR @c61;
    ALLOC @c61;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV @c62 1;
    MINUS index;
    MOV %r1 set;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV @c61 $RET;
    FUNC %r0 @@f65;
    PUSH %r0;
    MOV %r0 set;
    MOV %r1 "forEach";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c61;
    MOV $RET %r0;
    RET;
}
func @@f46(set) {
    VAR @c64;
    ALLOC @c64;
    VAR @c63;
    ALLOC @c63;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV @c64 1;
    MINUS index;
    MOV %r1 set;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV @c63 $RET;
    FUNC %r0 @@f66;
    PUSH %r0;
    MOV %r0 set;
    MOV %r1 "forEach";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c63;
    MOV $RET %r0;
    RET;
}
func @@f47(array, value, fromIndex) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index fromIndex;
    MOV %r0 1;
    SUB index %r0;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l199_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l200_;
LABEL _l202_:
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 value;
    EQ %r1 %r2;
    JF %r1 _l203_;
    MOV %r2 index;
    MOV $RET %r2;
    RET;
    JMP _l204_;
LABEL _l203_:
LABEL _l204_:
    JMP _l199_;
LABEL _l200_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f48(array, value, fromIndex) {
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index fromIndex;
    MOV %r0 1;
    ADD index %r0;
LABEL _l205_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l206_;
LABEL _l208_:
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 value;
    EQ %r1 %r2;
    JF %r1 _l209_;
    MOV %r2 index;
    MOV $RET %r2;
    RET;
    JMP _l210_;
LABEL _l209_:
LABEL _l210_:
    JMP _l205_;
LABEL _l206_:
    MOV %r0 index;
    MOV $RET %r0;
    RET;
}
func @@f49(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c15 1 false;
    MOV %r1 $RET;
    JF %r1 _l211_;
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c16 1 false;
    MOV %r0 $RET;
    JMP _l212_;
LABEL _l211_:
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c17 1 false;
    MOV %r0 $RET;
LABEL _l212_:
    MOV $RET %r0;
    RET;
}
func @@f50(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c15 1 false;
    MOV %r1 $RET;
    JF %r1 _l213_;
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c18 1 false;
    MOV %r0 $RET;
    JMP _l214_;
LABEL _l213_:
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c19 1 false;
    MOV %r0 $RET;
LABEL _l214_:
    MOV $RET %r0;
    RET;
}
func @@f51(string) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 0;
    MOV %r1 @c20;
    MOV %r2 "lastIndex";
    SET_KEY %r1 %r2 %r0;
    MOV result %r0;
LABEL _l215_:
    MOV %r1 string;
    PUSH %r1;
    MOV %r1 @c20;
    MOV %r2 "test";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l216_;
LABEL _l218_:
    MOV %r1 result;
    ADD %r1 1;
    MOV result %r1;
    JMP _l215_;
LABEL _l216_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f52(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c20;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "match";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l219_;
    NEW_ARR %r2;
    LG_OR %r0 %r2;
LABEL _l219_:
    MOV $RET %r0;
    RET;
}
func @@f53(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c21;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "match";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l220_;
    NEW_ARR %r2;
    LG_OR %r0 %r2;
LABEL _l220_:
    MOV $RET %r0;
    RET;
}
func @@f54(context) {
    VAR @c107;
    ALLOC @c107;
    VAR Date;
    VAR @c391;
    ALLOC @c391;
    VAR @c665;
    ALLOC @c665;
    VAR @c256;
    ALLOC @c256;
    VAR @c66;
    ALLOC @c66;
    VAR @c437;
    ALLOC @c437;
    VAR @c94;
    ALLOC @c94;
    VAR @c133;
    ALLOC @c133;
    VAR @c465;
    ALLOC @c465;
    VAR funcProto;
    VAR @c265;
    ALLOC @c265;
    VAR @c65;
    ALLOC @c65;
    VAR @c324;
    ALLOC @c324;
    VAR @c72;
    ALLOC @c72;
    VAR @c459;
    ALLOC @c459;
    VAR @c314;
    ALLOC @c314;
    VAR @c283;
    ALLOC @c283;
    VAR @c392;
    ALLOC @c392;
    VAR @c456;
    ALLOC @c456;
    VAR @c174;
    ALLOC @c174;
    VAR Buffer;
    VAR Symbol;
    VAR @c231;
    ALLOC @c231;
    VAR @c230;
    ALLOC @c230;
    VAR @c285;
    ALLOC @c285;
    VAR @c466;
    ALLOC @c466;
    VAR @c382;
    ALLOC @c382;
    VAR @c84;
    ALLOC @c84;
    VAR @c309;
    ALLOC @c309;
    VAR @c395;
    ALLOC @c395;
    VAR @c152;
    ALLOC @c152;
    VAR @c106;
    ALLOC @c106;
    VAR ctxClearTimeout;
    VAR ctxNow;
    VAR ctxSetTimeout;
    VAR @c209;
    ALLOC @c209;
    VAR @c208;
    ALLOC @c208;
    VAR @c284;
    ALLOC @c284;
    VAR nativeIsBuffer;
    VAR @c384;
    ALLOC @c384;
    VAR @c331;
    ALLOC @c331;
    VAR @c186;
    ALLOC @c186;
    VAR @c155;
    ALLOC @c155;
    VAR @c77;
    ALLOC @c77;
    VAR @c590;
    ALLOC @c590;
    VAR @c431;
    ALLOC @c431;
    VAR @c207;
    ALLOC @c207;
    VAR @c337;
    ALLOC @c337;
    VAR DataView;
    VAR @c86;
    ALLOC @c86;
    VAR Promise;
    VAR @c257;
    ALLOC @c257;
    VAR WeakMap;
    VAR @c81;
    ALLOC @c81;
    VAR @c216;
    ALLOC @c216;
    VAR @c276;
    ALLOC @c276;
    VAR @c286;
    ALLOC @c286;
    VAR @c287;
    ALLOC @c287;
    VAR @c288;
    ALLOC @c288;
    VAR @c290;
    ALLOC @c290;
    VAR @c291;
    ALLOC @c291;
    VAR symbolProto;
    VAR @c234;
    ALLOC @c234;
    VAR @c222;
    ALLOC @c222;
    VAR @c277;
    ALLOC @c277;
    VAR @c295;
    ALLOC @c295;
    VAR @c347;
    ALLOC @c347;
    VAR @c71;
    ALLOC @c71;
    VAR @c70;
    ALLOC @c70;
    VAR lazyClone;
    VAR lazyReverse;
    VAR lazyValue;
    VAR @c85;
    ALLOC @c85;
    VAR hashClear;
    VAR hashDelete;
    VAR hashGet;
    VAR hashHas;
    VAR hashSet;
    VAR @c87;
    ALLOC @c87;
    VAR listCacheClear;
    VAR listCacheDelete;
    VAR listCacheGet;
    VAR listCacheHas;
    VAR listCacheSet;
    VAR @c89;
    ALLOC @c89;
    VAR mapCacheClear;
    VAR mapCacheDelete;
    VAR mapCacheGet;
    VAR mapCacheHas;
    VAR mapCacheSet;
    VAR @c138;
    ALLOC @c138;
    VAR setCacheAdd;
    VAR setCacheHas;
    VAR @c127;
    ALLOC @c127;
    VAR stackClear;
    VAR stackDelete;
    VAR stackGet;
    VAR stackHas;
    VAR stackSet;
    VAR @c411;
    ALLOC @c411;
    VAR @c214;
    ALLOC @c214;
    VAR @c360;
    ALLOC @c360;
    VAR @c362;
    ALLOC @c362;
    VAR @c194;
    ALLOC @c194;
    VAR @c215;
    ALLOC @c215;
    VAR @c83;
    ALLOC @c83;
    VAR @c512;
    ALLOC @c512;
    VAR @c123;
    ALLOC @c123;
    VAR @c121;
    ALLOC @c121;
    VAR @c101;
    ALLOC @c101;
    VAR @c335;
    ALLOC @c335;
    VAR @c98;
    ALLOC @c98;
    VAR @c380;
    ALLOC @c380;
    VAR @c455;
    ALLOC @c455;
    VAR @c381;
    ALLOC @c381;
    VAR @c373;
    ALLOC @c373;
    VAR @c227;
    ALLOC @c227;
    VAR @c102;
    ALLOC @c102;
    VAR @c353;
    ALLOC @c353;
    VAR @c349;
    ALLOC @c349;
    VAR @c461;
    ALLOC @c461;
    VAR @c328;
    ALLOC @c328;
    VAR @c350;
    ALLOC @c350;
    VAR @c143;
    ALLOC @c143;
    VAR @c145;
    ALLOC @c145;
    VAR @c146;
    ALLOC @c146;
    VAR @c156;
    ALLOC @c156;
    VAR @c406;
    ALLOC @c406;
    VAR @c407;
    ALLOC @c407;
    VAR @c203;
    ALLOC @c203;
    VAR @c275;
    ALLOC @c275;
    VAR @c160;
    ALLOC @c160;
    VAR @c460;
    ALLOC @c460;
    VAR @c408;
    ALLOC @c408;
    VAR @c410;
    ALLOC @c410;
    VAR @c418;
    ALLOC @c418;
    VAR @c330;
    ALLOC @c330;
    VAR @c559;
    ALLOC @c559;
    VAR @c609;
    ALLOC @c609;
    VAR baseIsArguments;
    VAR baseIsArrayBuffer;
    VAR baseIsDate;
    VAR @c163;
    ALLOC @c163;
    VAR @c164;
    ALLOC @c164;
    VAR baseIsMap;
    VAR @c387;
    ALLOC @c387;
    VAR @c282;
    ALLOC @c282;
    VAR baseIsRegExp;
    VAR baseIsSet;
    VAR baseIsTypedArray;
    VAR @c279;
    ALLOC @c279;
    VAR @c364;
    ALLOC @c364;
    VAR @c412;
    ALLOC @c412;
    VAR @c463;
    ALLOC @c463;
    VAR @c200;
    ALLOC @c200;
    VAR @c183;
    ALLOC @c183;
    VAR @c182;
    ALLOC @c182;
    VAR @c267;
    ALLOC @c267;
    VAR @c502;
    ALLOC @c502;
    VAR @c333;
    ALLOC @c333;
    VAR @c355;
    ALLOC @c355;
    VAR @c415;
    ALLOC @c415;
    VAR @c202;
    ALLOC @c202;
    VAR @c458;
    ALLOC @c458;
    VAR @c334;
    ALLOC @c334;
    VAR @c336;
    ALLOC @c336;
    VAR @c97;
    ALLOC @c97;
    VAR @c570;
    ALLOC @c570;
    VAR @c246;
    ALLOC @c246;
    VAR @c238;
    ALLOC @c238;
    VAR @c359;
    ALLOC @c359;
    VAR @c361;
    ALLOC @c361;
    VAR @c204;
    ALLOC @c204;
    VAR @c264;
    ALLOC @c264;
    VAR baseSetToString;
    VAR @c363;
    ALLOC @c363;
    VAR @c224;
    ALLOC @c224;
    VAR @c365;
    ALLOC @c365;
    VAR @c338;
    ALLOC @c338;
    VAR @c219;
    ALLOC @c219;
    VAR @c339;
    ALLOC @c339;
    VAR @c561;
    ALLOC @c561;
    VAR @c221;
    ALLOC @c221;
    VAR @c226;
    ALLOC @c226;
    VAR @c206;
    ALLOC @c206;
    VAR @c416;
    ALLOC @c416;
    VAR @c327;
    ALLOC @c327;
    VAR @c78;
    ALLOC @c78;
    VAR @c341;
    ALLOC @c341;
    VAR @c342;
    ALLOC @c342;
    VAR @c329;
    ALLOC @c329;
    VAR @c379;
    ALLOC @c379;
    VAR @c148;
    ALLOC @c148;
    VAR castRest;
    VAR @c249;
    ALLOC @c249;
    VAR @c635;
    ALLOC @c635;
    VAR @c117;
    ALLOC @c117;
    VAR @c232;
    ALLOC @c232;
    VAR @c296;
    ALLOC @c296;
    VAR @c306;
    ALLOC @c306;
    VAR @c307;
    ALLOC @c307;
    VAR @c196;
    ALLOC @c196;
    VAR @c235;
    ALLOC @c235;
    VAR @c506;
    ALLOC @c506;
    VAR @c317;
    ALLOC @c317;
    VAR @c319;
    ALLOC @c319;
    VAR @c75;
    ALLOC @c75;
    VAR @c104;
    ALLOC @c104;
    VAR @c124;
    ALLOC @c124;
    VAR @c122;
    ALLOC @c122;
    VAR createAggregator;
    VAR createAssigner;
    VAR createBaseEach;
    VAR createBaseFor;
    VAR @c260;
    ALLOC @c260;
    VAR createCaseFirst;
    VAR createCompounder;
    VAR @c240;
    ALLOC @c240;
    VAR @c261;
    ALLOC @c261;
    VAR createFind;
    VAR createFlow;
    VAR @c263;
    ALLOC @c263;
    VAR createInverter;
    VAR createMathOperation;
    VAR createOver;
    VAR @c429;
    ALLOC @c429;
    VAR @c262;
    ALLOC @c262;
    VAR createRange;
    VAR createRelationalOperation;
    VAR @c534;
    ALLOC @c534;
    VAR createRound;
    VAR @c223;
    ALLOC @c223;
    VAR createToPairs;
    VAR @c366;
    ALLOC @c366;
    VAR @c433;
    ALLOC @c433;
    VAR @c266;
    ALLOC @c266;
    VAR @c413;
    ALLOC @c413;
    VAR @c166;
    ALLOC @c166;
    VAR @c167;
    ALLOC @c167;
    VAR @c169;
    ALLOC @c169;
    VAR @c241;
    ALLOC @c241;
    VAR @c131;
    ALLOC @c131;
    VAR @c130;
    ALLOC @c130;
    VAR @c258;
    ALLOC @c258;
    VAR @c313;
    ALLOC @c313;
    VAR @c368;
    ALLOC @c368;
    VAR @c199;
    ALLOC @c199;
    VAR @c88;
    ALLOC @c88;
    VAR @c189;
    ALLOC @c189;
    VAR @c67;
    ALLOC @c67;
    VAR @c153;
    ALLOC @c153;
    VAR @c236;
    ALLOC @c236;
    VAR @c237;
    ALLOC @c237;
    VAR @c114;
    ALLOC @c114;
    VAR @c76;
    ALLOC @c76;
    VAR @c320;
    ALLOC @c320;
    VAR @c409;
    ALLOC @c409;
    VAR @c113;
    ALLOC @c113;
    VAR @c120;
    ALLOC @c120;
    VAR @c126;
    ALLOC @c126;
    VAR @c322;
    ALLOC @c322;
    VAR @c142;
    ALLOC @c142;
    VAR @c96;
    ALLOC @c96;
    VAR @c326;
    ALLOC @c326;
    VAR @c191;
    ALLOC @c191;
    VAR @c280;
    ALLOC @c280;
    VAR @c253;
    ALLOC @c253;
    VAR @c172;
    ALLOC @c172;
    VAR @c389;
    ALLOC @c389;
    VAR @c185;
    ALLOC @c185;
    VAR @c192;
    ALLOC @c192;
    VAR @c190;
    ALLOC @c190;
    VAR memoizeCapped;
    VAR @c259;
    ALLOC @c259;
    VAR @c187;
    ALLOC @c187;
    VAR @c154;
    ALLOC @c154;
    VAR @c211;
    ALLOC @c211;
    VAR @c157;
    ALLOC @c157;
    VAR @c553;
    ALLOC @c553;
    VAR @c254;
    ALLOC @c254;
    VAR @c134;
    ALLOC @c134;
    VAR @c212;
    ALLOC @c212;
    VAR @c255;
    ALLOC @c255;
    VAR shortOut;
    VAR @c99;
    ALLOC @c99;
    VAR @c229;
    ALLOC @c229;
    VAR @c149;
    ALLOC @c149;
    VAR @c176;
    ALLOC @c176;
    VAR @c321;
    ALLOC @c321;
    VAR @c73;
    ALLOC @c73;
    VAR chunk;
    VAR compact;
    VAR concat;
    VAR difference;
    VAR differenceBy;
    VAR differenceWith;
    VAR drop;
    VAR dropRight;
    VAR dropRightWhile;
    VAR dropWhile;
    VAR fill;
    VAR findIndex;
    VAR findLastIndex;
    VAR @c274;
    ALLOC @c274;
    VAR flattenDeep;
    VAR flattenDepth;
    VAR fromPairs;
    VAR head;
    VAR indexOf;
    VAR initial;
    VAR intersection;
    VAR intersectionBy;
    VAR intersectionWith;
    VAR join;
    VAR @c158;
    ALLOC @c158;
    VAR lastIndexOf;
    VAR nth;
    VAR pull;
    VAR pullAll;
    VAR pullAllBy;
    VAR pullAllWith;
    VAR pullAt;
    VAR remove;
    VAR @c348;
    ALLOC @c348;
    VAR slice;
    VAR sortedIndex;
    VAR sortedIndexBy;
    VAR sortedIndexOf;
    VAR sortedLastIndex;
    VAR sortedLastIndexBy;
    VAR sortedLastIndexOf;
    VAR sortedUniq;
    VAR sortedUniqBy;
    VAR tail;
    VAR take;
    VAR takeRight;
    VAR takeRightWhile;
    VAR takeWhile;
    VAR union;
    VAR unionBy;
    VAR unionWith;
    VAR uniq;
    VAR uniqBy;
    VAR uniqWith;
    VAR @c340;
    ALLOC @c340;
    VAR @c343;
    ALLOC @c343;
    VAR without;
    VAR xor;
    VAR xorBy;
    VAR xorWith;
    VAR zip;
    VAR zipObject;
    VAR zipObjectDeep;
    VAR zipWith;
    VAR @c345;
    ALLOC @c345;
    VAR tap;
    VAR @c344;
    ALLOC @c344;
    VAR wrapperAt;
    VAR wrapperChain;
    VAR wrapperCommit;
    VAR wrapperNext;
    VAR wrapperToIterator;
    VAR wrapperPlant;
    VAR wrapperReverse;
    VAR wrapperValue;
    VAR countBy;
    VAR every;
    VAR filter;
    VAR find;
    VAR findLast;
    VAR flatMap;
    VAR flatMapDeep;
    VAR flatMapDepth;
    VAR forEach;
    VAR forEachRight;
    VAR groupBy;
    VAR includes;
    VAR invokeMap;
    VAR keyBy;
    VAR @c351;
    ALLOC @c351;
    VAR orderBy;
    VAR partition;
    VAR reduce;
    VAR reduceRight;
    VAR reject;
    VAR sample;
    VAR sampleSize;
    VAR shuffle;
    VAR size;
    VAR some;
    VAR sortBy;
    VAR @c630;
    ALLOC @c630;
    VAR after;
    VAR @c378;
    ALLOC @c378;
    VAR @c374;
    ALLOC @c374;
    VAR @c367;
    ALLOC @c367;
    VAR @c369;
    ALLOC @c369;
    VAR @c370;
    ALLOC @c370;
    VAR @c371;
    ALLOC @c371;
    VAR @c377;
    ALLOC @c377;
    VAR defer;
    VAR delay;
    VAR flip;
    VAR @c315;
    ALLOC @c315;
    VAR @c358;
    ALLOC @c358;
    VAR once;
    VAR overArgs;
    VAR @c375;
    ALLOC @c375;
    VAR @c376;
    ALLOC @c376;
    VAR rearg;
    VAR rest;
    VAR spread;
    VAR throttle;
    VAR unary;
    VAR wrap;
    VAR castArray;
    VAR clone;
    VAR cloneWith;
    VAR cloneDeep;
    VAR cloneDeepWith;
    VAR conformsTo;
    VAR @c100;
    ALLOC @c100;
    VAR gt;
    VAR gte;
    VAR @c91;
    ALLOC @c91;
    VAR @c69;
    ALLOC @c69;
    VAR isArrayBuffer;
    VAR @c188;
    ALLOC @c188;
    VAR @c195;
    ALLOC @c195;
    VAR isBoolean;
    VAR @c92;
    ALLOC @c92;
    VAR isDate;
    VAR isElement;
    VAR isEmpty;
    VAR isEqual;
    VAR isEqualWith;
    VAR @c443;
    ALLOC @c443;
    VAR isFinite;
    VAR @c173;
    ALLOC @c173;
    VAR @c393;
    ALLOC @c393;
    VAR @c179;
    ALLOC @c179;
    VAR @c112;
    ALLOC @c112;
    VAR @c68;
    ALLOC @c68;
    VAR @c129;
    ALLOC @c129;
    VAR isMatch;
    VAR isMatchWith;
    VAR isNaN;
    VAR isNative;
    VAR isNull;
    VAR isNil;
    VAR @c388;
    ALLOC @c388;
    VAR @c197;
    ALLOC @c197;
    VAR @c432;
    ALLOC @c432;
    VAR isSafeInteger;
    VAR @c128;
    ALLOC @c128;
    VAR @c354;
    ALLOC @c354;
    VAR @c139;
    ALLOC @c139;
    VAR @c93;
    ALLOC @c93;
    VAR isUndefined;
    VAR isWeakMap;
    VAR isWeakSet;
    VAR lt;
    VAR lte;
    VAR @c346;
    ALLOC @c346;
    VAR @c398;
    ALLOC @c398;
    VAR @c140;
    ALLOC @c140;
    VAR @c141;
    ALLOC @c141;
    VAR @c372;
    ALLOC @c372;
    VAR @c198;
    ALLOC @c198;
    VAR toSafeInteger;
    VAR @c228;
    ALLOC @c228;
    VAR assign;
    VAR assignIn;
    VAR @c434;
    ALLOC @c434;
    VAR assignWith;
    VAR at;
    VAR create;
    VAR defaults;
    VAR defaultsDeep;
    VAR findKey;
    VAR findLastKey;
    VAR forIn;
    VAR forInRight;
    VAR forOwn;
    VAR forOwnRight;
    VAR functions;
    VAR functionsIn;
    VAR @c108;
    ALLOC @c108;
    VAR has;
    VAR @c496;
    ALLOC @c496;
    VAR invert;
    VAR invertBy;
    VAR invoke;
    VAR @c103;
    ALLOC @c103;
    VAR @c105;
    ALLOC @c105;
    VAR mapKeys;
    VAR mapValues;
    VAR merge;
    VAR @c404;
    ALLOC @c404;
    VAR omit;
    VAR omitBy;
    VAR pick;
    VAR @c414;
    ALLOC @c414;
    VAR result;
    VAR set;
    VAR setWith;
    VAR toPairs;
    VAR toPairsIn;
    VAR transform;
    VAR unset;
    VAR update;
    VAR updateWith;
    VAR @c213;
    ALLOC @c213;
    VAR valuesIn;
    VAR clamp;
    VAR inRange;
    VAR random;
    VAR camelCase;
    VAR @c420;
    ALLOC @c420;
    VAR @c527;
    ALLOC @c527;
    VAR endsWith;
    VAR escape;
    VAR escapeRegExp;
    VAR kebabCase;
    VAR lowerCase;
    VAR lowerFirst;
    VAR pad;
    VAR padEnd;
    VAR padStart;
    VAR parseInt;
    VAR repeat;
    VAR replace;
    VAR snakeCase;
    VAR split;
    VAR startCase;
    VAR startsWith;
    VAR template;
    VAR toLower;
    VAR toUpper;
    VAR trim;
    VAR trimEnd;
    VAR trimStart;
    VAR truncate;
    VAR unescape;
    VAR upperCase;
    VAR @c421;
    ALLOC @c421;
    VAR @c528;
    ALLOC @c528;
    VAR @c442;
    ALLOC @c442;
    VAR bindAll;
    VAR cond;
    VAR conforms;
    VAR @c217;
    ALLOC @c217;
    VAR defaultTo;
    VAR flow;
    VAR flowRight;
    VAR @c181;
    ALLOC @c181;
    VAR @c278;
    ALLOC @c278;
    VAR matches;
    VAR matchesProperty;
    VAR method;
    VAR methodOf;
    VAR mixin;
    VAR noConflict;
    VAR noop;
    VAR nthArg;
    VAR over;
    VAR overEvery;
    VAR overSome;
    VAR @c184;
    ALLOC @c184;
    VAR propertyOf;
    VAR range;
    VAR rangeRight;
    VAR stubArray;
    VAR stubFalse;
    VAR stubObject;
    VAR stubString;
    VAR stubTrue;
    VAR times;
    VAR toPath;
    VAR uniqueId;
    VAR add;
    VAR ceil;
    VAR divide;
    VAR floor;
    VAR max;
    VAR maxBy;
    VAR mean;
    VAR meanBy;
    VAR min;
    VAR minBy;
    VAR multiply;
    VAR round;
    VAR subtract;
    VAR sum;
    VAR sumBy;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    FUNC @c277 @@f69;
    FUNC @c347 @@f71;
    FUNC @c71 @@f72;
    FUNC @c70 @@f73;
    FUNC lazyClone @@f74;
    FUNC lazyReverse @@f75;
    FUNC lazyValue @@f76;
    FUNC @c85 @@f77;
    FUNC hashClear @@f78;
    FUNC hashDelete @@f79;
    FUNC hashGet @@f80;
    FUNC hashHas @@f81;
    FUNC hashSet @@f82;
    FUNC @c87 @@f83;
    FUNC listCacheClear @@f84;
    FUNC listCacheDelete @@f85;
    FUNC listCacheGet @@f86;
    FUNC listCacheHas @@f87;
    FUNC listCacheSet @@f88;
    FUNC @c89 @@f89;
    FUNC mapCacheClear @@f90;
    FUNC mapCacheDelete @@f91;
    FUNC mapCacheGet @@f92;
    FUNC mapCacheHas @@f93;
    FUNC mapCacheSet @@f94;
    FUNC @c138 @@f95;
    FUNC setCacheAdd @@f96;
    FUNC setCacheHas @@f97;
    FUNC @c127 @@f98;
    FUNC stackClear @@f99;
    FUNC stackDelete @@f100;
    FUNC stackGet @@f101;
    FUNC stackHas @@f102;
    FUNC stackSet @@f103;
    FUNC @c411 @@f104;
    FUNC @c214 @@f105;
    FUNC @c360 @@f106;
    FUNC @c362 @@f107;
    FUNC @c194 @@f108;
    FUNC @c215 @@f109;
    FUNC @c83 @@f110;
    FUNC @c512 @@f111;
    FUNC @c123 @@f112;
    FUNC @c121 @@f113;
    FUNC @c101 @@f114;
    FUNC @c335 @@f115;
    FUNC @c98 @@f116;
    FUNC @c380 @@f117;
    FUNC @c455 @@f118;
    FUNC @c381 @@f119;
    FUNC @c373 @@f120;
    FUNC @c227 @@f121;
    FUNC @c349 @@f122;
    FUNC @c461 @@f123;
    FUNC @c328 @@f124;
    FUNC @c350 @@f125;
    FUNC @c143 @@f126;
    FUNC @c156 @@f127;
    FUNC @c406 @@f128;
    FUNC @c407 @@f129;
    FUNC @c203 @@f130;
    FUNC @c275 @@f131;
    FUNC @c160 @@f132;
    FUNC @c460 @@f133;
    FUNC @c408 @@f134;
    FUNC @c410 @@f135;
    FUNC @c418 @@f136;
    FUNC @c330 @@f137;
    FUNC @c559 @@f138;
    FUNC @c609 @@f139;
    FUNC baseIsArguments @@f140;
    FUNC baseIsArrayBuffer @@f141;
    FUNC baseIsDate @@f142;
    FUNC @c163 @@f143;
    FUNC @c164 @@f144;
    FUNC baseIsMap @@f145;
    FUNC @c387 @@f146;
    FUNC @c282 @@f147;
    FUNC baseIsRegExp @@f148;
    FUNC baseIsSet @@f149;
    FUNC baseIsTypedArray @@f150;
    FUNC @c279 @@f151;
    FUNC @c364 @@f152;
    FUNC @c412 @@f153;
    FUNC @c463 @@f154;
    FUNC @c200 @@f155;
    FUNC @c183 @@f156;
    FUNC @c182 @@f157;
    FUNC @c267 @@f158;
    FUNC @c502 @@f159;
    FUNC @c333 @@f160;
    FUNC @c355 @@f161;
    FUNC @c415 @@f162;
    FUNC @c202 @@f163;
    FUNC @c458 @@f164;
    FUNC @c334 @@f165;
    FUNC @c336 @@f166;
    FUNC @c97 @@f167;
    FUNC @c570 @@f168;
    FUNC @c246 @@f169;
    FUNC @c238 @@f170;
    FUNC @c359 @@f171;
    FUNC @c361 @@f172;
    FUNC @c204 @@f173;
    FUNC @c264 @@f174;
    FUNC baseSetToString @@f175;
    FUNC @c363 @@f176;
    FUNC @c224 @@f177;
    FUNC @c365 @@f178;
    FUNC @c338 @@f179;
    FUNC @c219 @@f180;
    FUNC @c339 @@f181;
    FUNC @c561 @@f182;
    FUNC @c221 @@f183;
    FUNC @c226 @@f184;
    FUNC @c206 @@f185;
    FUNC @c416 @@f186;
    FUNC @c327 @@f187;
    FUNC @c78 @@f188;
    FUNC @c341 @@f189;
    FUNC @c342 @@f190;
    FUNC @c329 @@f191;
    FUNC @c379 @@f192;
    FUNC @c148 @@f193;
    FUNC @c249 @@f194;
    FUNC @c117 @@f196;
    FUNC @c232 @@f197;
    FUNC @c296 @@f198;
    FUNC @c306 @@f199;
    FUNC @c307 @@f200;
    FUNC @c196 @@f201;
    FUNC @c235 @@f202;
    FUNC @c506 @@f203;
    FUNC @c317 @@f204;
    FUNC @c319 @@f205;
    FUNC @c75 @@f206;
    FUNC @c104 @@f207;
    FUNC @c124 @@f208;
    FUNC @c122 @@f209;
    FUNC createAggregator @@f210;
    FUNC createAssigner @@f211;
    FUNC createBaseEach @@f212;
    FUNC createBaseFor @@f213;
    FUNC @c260 @@f214;
    FUNC createCaseFirst @@f215;
    FUNC createCompounder @@f216;
    FUNC @c240 @@f217;
    FUNC @c261 @@f218;
    FUNC createFind @@f219;
    FUNC createFlow @@f220;
    FUNC @c263 @@f221;
    FUNC createInverter @@f222;
    FUNC createMathOperation @@f223;
    FUNC createOver @@f224;
    FUNC @c429 @@f225;
    FUNC @c262 @@f226;
    FUNC createRange @@f227;
    FUNC createRelationalOperation @@f228;
    FUNC @c534 @@f229;
    FUNC createRound @@f230;
    FUNC @c223 @@f231;
    FUNC createToPairs @@f232;
    FUNC @c366 @@f233;
    FUNC @c433 @@f234;
    FUNC @c266 @@f235;
    FUNC @c413 @@f236;
    FUNC @c166 @@f237;
    FUNC @c167 @@f238;
    FUNC @c169 @@f239;
    FUNC @c241 @@f240;
    FUNC @c131 @@f241;
    FUNC @c130 @@f242;
    FUNC @c258 @@f243;
    FUNC @c313 @@f244;
    FUNC @c368 @@f245;
    FUNC @c199 @@f246;
    FUNC @c88 @@f247;
    FUNC @c189 @@f248;
    FUNC @c67 @@f249;
    FUNC @c153 @@f250;
    FUNC @c236 @@f251;
    FUNC @c237 @@f252;
    FUNC @c76 @@f254;
    FUNC @c320 @@f255;
    FUNC @c409 @@f256;
    FUNC @c113 @@f257;
    FUNC @c120 @@f258;
    FUNC @c126 @@f259;
    FUNC @c322 @@f260;
    FUNC @c142 @@f261;
    FUNC @c96 @@f262;
    FUNC @c326 @@f263;
    FUNC @c191 @@f264;
    FUNC @c280 @@f265;
    FUNC @c253 @@f266;
    FUNC @c172 @@f267;
    FUNC @c185 @@f268;
    FUNC @c192 @@f269;
    FUNC @c190 @@f270;
    FUNC memoizeCapped @@f271;
    FUNC @c259 @@f272;
    FUNC @c187 @@f273;
    FUNC @c154 @@f274;
    FUNC @c211 @@f275;
    FUNC @c157 @@f276;
    FUNC @c553 @@f277;
    FUNC @c255 @@f279;
    FUNC shortOut @@f280;
    FUNC @c99 @@f281;
    FUNC @c149 @@f283;
    FUNC @c176 @@f284;
    FUNC @c321 @@f285;
    FUNC @c73 @@f286;
    FUNC chunk @@f287;
    FUNC compact @@f288;
    FUNC concat @@f289;
    FUNC drop @@f293;
    FUNC dropRight @@f294;
    FUNC dropRightWhile @@f295;
    FUNC dropWhile @@f296;
    FUNC fill @@f297;
    FUNC findIndex @@f298;
    FUNC findLastIndex @@f299;
    FUNC @c274 @@f300;
    FUNC flattenDeep @@f301;
    FUNC flattenDepth @@f302;
    FUNC fromPairs @@f303;
    FUNC head @@f304;
    FUNC indexOf @@f305;
    FUNC initial @@f306;
    FUNC join @@f310;
    FUNC @c158 @@f311;
    FUNC lastIndexOf @@f312;
    FUNC nth @@f313;
    FUNC pullAll @@f314;
    FUNC pullAllBy @@f315;
    FUNC pullAllWith @@f316;
    FUNC remove @@f318;
    FUNC @c348 @@f319;
    FUNC slice @@f320;
    FUNC sortedIndex @@f321;
    FUNC sortedIndexBy @@f322;
    FUNC sortedIndexOf @@f323;
    FUNC sortedLastIndex @@f324;
    FUNC sortedLastIndexBy @@f325;
    FUNC sortedLastIndexOf @@f326;
    FUNC sortedUniq @@f327;
    FUNC sortedUniqBy @@f328;
    FUNC tail @@f329;
    FUNC take @@f330;
    FUNC takeRight @@f331;
    FUNC takeRightWhile @@f332;
    FUNC takeWhile @@f333;
    FUNC uniq @@f337;
    FUNC uniqBy @@f338;
    FUNC uniqWith @@f339;
    FUNC @c340 @@f340;
    FUNC @c343 @@f341;
    FUNC zipObject @@f346;
    FUNC zipObjectDeep @@f347;
    FUNC @c345 @@f349;
    FUNC tap @@f350;
    FUNC @c344 @@f351;
    FUNC wrapperChain @@f353;
    FUNC wrapperCommit @@f354;
    FUNC wrapperNext @@f355;
    FUNC wrapperToIterator @@f356;
    FUNC wrapperPlant @@f357;
    FUNC wrapperReverse @@f358;
    FUNC wrapperValue @@f359;
    FUNC every @@f361;
    FUNC filter @@f362;
    FUNC flatMap @@f363;
    FUNC flatMapDeep @@f364;
    FUNC flatMapDepth @@f365;
    FUNC forEach @@f366;
    FUNC forEachRight @@f367;
    FUNC includes @@f369;
    FUNC @c351 @@f372;
    FUNC orderBy @@f373;
    FUNC reduce @@f376;
    FUNC reduceRight @@f377;
    FUNC reject @@f378;
    FUNC sample @@f379;
    FUNC sampleSize @@f380;
    FUNC shuffle @@f381;
    FUNC size @@f382;
    FUNC some @@f383;
    FUNC after @@f386;
    FUNC @c378 @@f387;
    FUNC @c374 @@f388;
    FUNC @c370 @@f391;
    FUNC @c371 @@f392;
    FUNC @c377 @@f393;
    FUNC flip @@f396;
    FUNC @c315 @@f397;
    FUNC @c358 @@f398;
    FUNC once @@f399;
    FUNC rest @@f404;
    FUNC spread @@f405;
    FUNC throttle @@f406;
    FUNC unary @@f407;
    FUNC wrap @@f408;
    FUNC castArray @@f409;
    FUNC clone @@f410;
    FUNC cloneWith @@f411;
    FUNC cloneDeep @@f412;
    FUNC cloneDeepWith @@f413;
    FUNC conformsTo @@f414;
    FUNC @c100 @@f415;
    FUNC @c91 @@f418;
    FUNC @c188 @@f419;
    FUNC @c195 @@f420;
    FUNC isBoolean @@f421;
    FUNC isElement @@f422;
    FUNC isEmpty @@f423;
    FUNC isEqual @@f424;
    FUNC isEqualWith @@f425;
    FUNC @c443 @@f426;
    FUNC isFinite @@f427;
    FUNC @c173 @@f428;
    FUNC @c393 @@f429;
    FUNC @c179 @@f430;
    FUNC @c112 @@f431;
    FUNC @c68 @@f432;
    FUNC isMatch @@f433;
    FUNC isMatchWith @@f434;
    FUNC isNaN @@f435;
    FUNC isNative @@f436;
    FUNC isNull @@f437;
    FUNC isNil @@f438;
    FUNC @c388 @@f439;
    FUNC @c197 @@f440;
    FUNC isSafeInteger @@f441;
    FUNC @c354 @@f442;
    FUNC @c139 @@f443;
    FUNC isUndefined @@f444;
    FUNC isWeakMap @@f445;
    FUNC isWeakSet @@f446;
    FUNC @c346 @@f448;
    FUNC @c398 @@f449;
    FUNC @c140 @@f450;
    FUNC @c141 @@f451;
    FUNC @c372 @@f452;
    FUNC @c198 @@f453;
    FUNC toSafeInteger @@f454;
    FUNC @c228 @@f455;
    FUNC create @@f460;
    FUNC findKey @@f463;
    FUNC findLastKey @@f464;
    FUNC forIn @@f465;
    FUNC forInRight @@f466;
    FUNC forOwn @@f467;
    FUNC forOwnRight @@f468;
    FUNC functions @@f469;
    FUNC functionsIn @@f470;
    FUNC @c108 @@f471;
    FUNC has @@f472;
    FUNC @c496 @@f473;
    FUNC @c103 @@f476;
    FUNC @c105 @@f477;
    FUNC mapKeys @@f478;
    FUNC mapValues @@f479;
    FUNC omitBy @@f483;
    FUNC @c414 @@f485;
    FUNC result @@f486;
    FUNC set @@f487;
    FUNC setWith @@f488;
    FUNC transform @@f489;
    FUNC unset @@f490;
    FUNC update @@f491;
    FUNC updateWith @@f492;
    FUNC @c213 @@f493;
    FUNC valuesIn @@f494;
    FUNC clamp @@f495;
    FUNC inRange @@f496;
    FUNC random @@f497;
    FUNC @c420 @@f499;
    FUNC @c527 @@f500;
    FUNC endsWith @@f501;
    FUNC escape @@f502;
    FUNC escapeRegExp @@f503;
    FUNC pad @@f506;
    FUNC padEnd @@f507;
    FUNC padStart @@f508;
    FUNC parseInt @@f509;
    FUNC repeat @@f510;
    FUNC replace @@f511;
    FUNC split @@f513;
    FUNC startsWith @@f515;
    FUNC template @@f516;
    FUNC toLower @@f517;
    FUNC toUpper @@f518;
    FUNC trim @@f519;
    FUNC trimEnd @@f520;
    FUNC trimStart @@f521;
    FUNC truncate @@f522;
    FUNC unescape @@f523;
    FUNC @c528 @@f525;
    FUNC cond @@f528;
    FUNC conforms @@f529;
    FUNC @c217 @@f530;
    FUNC defaultTo @@f531;
    FUNC @c181 @@f532;
    FUNC @c278 @@f533;
    FUNC matches @@f534;
    FUNC matchesProperty @@f535;
    FUNC mixin @@f538;
    FUNC noConflict @@f539;
    FUNC noop @@f540;
    FUNC nthArg @@f541;
    FUNC @c184 @@f542;
    FUNC propertyOf @@f543;
    FUNC stubArray @@f544;
    FUNC stubFalse @@f545;
    FUNC stubObject @@f546;
    FUNC stubString @@f547;
    FUNC stubTrue @@f548;
    FUNC times @@f549;
    FUNC toPath @@f550;
    FUNC uniqueId @@f551;
    FUNC max @@f554;
    FUNC maxBy @@f555;
    FUNC mean @@f556;
    FUNC meanBy @@f557;
    FUNC min @@f558;
    FUNC minBy @@f559;
    FUNC sum @@f562;
    FUNC sumBy @@f563;
    MOV %r1 context;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l221_;
    MOV %r0 @c22;
    JMP _l222_;
LABEL _l221_:
    MOV %r3 @c23;
    PUSH %r3;
    MOV %r3 @c22;
    PUSH %r3;
    MOV %r3 @c24;
    MOV %r4 "pick";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 context;
    PUSH %r2;
    MOV %r3 @c22;
    MOV %r4 "Object";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @c24;
    MOV %r3 "defaults";
    CALL_VAR %r2 %r3 3 false;
    MOV %r0 $RET;
LABEL _l222_:
    MOV context %r0;
    MOV %r0 context;
    MOV %r1 "Array";
    MOV_PROP @c107 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "Date";
    MOV_PROP Date %r0 %r1;
    MOV %r0 context;
    MOV %r1 "Error";
    MOV_PROP @c391 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "Function";
    MOV_PROP @c665 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "Math";
    MOV_PROP @c256 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "Object";
    MOV_PROP @c66 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "RegExp";
    MOV_PROP @c437 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "String";
    MOV_PROP @c94 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "TypeError";
    MOV_PROP @c133 %r0 %r1;
    MOV %r0 @c107;
    MOV %r1 "prototype";
    MOV_PROP @c465 %r0 %r1;
    MOV %r0 @c665;
    MOV %r1 "prototype";
    MOV_PROP funcProto %r0 %r1;
    MOV %r0 @c66;
    MOV %r1 "prototype";
    MOV_PROP @c265 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "__core-js_shared__";
    MOV_PROP @c65 %r0 %r1;
    MOV %r0 funcProto;
    MOV %r1 "toString";
    MOV_PROP @c324 %r0 %r1;
    MOV %r0 "HERE IS DEFINING hasOwnProperty";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c265;
    MOV %r1 "hasOwnProperty";
    MOV_PROP @c72 %r0 %r1;
    MOV @c459 0;
    FUNC %r0 @@f67;
    CALL_REG %r0 0 false;
    MOV @c314 $RET;
    MOV %r0 "====================================================";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c265;
    MOV %r1 "toString";
    MOV_PROP @c283 %r0 %r1;
    MOV %r0 @c66;
    PUSH %r0;
    MOV %r0 @c324;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV @c392 $RET;
    MOV %r0 @c22;
    MOV %r1 "_";
    MOV_PROP @c456 %r0 %r1;
    MOV %r0 @c72;
    PUSH %r0;
    MOV %r0 "-------------HERER is HASX";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "^";
    MOV %r3 "$1.*?";
    PUSH %r3;
    NEW_REG %r3 "hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])" "g";
    PUSH %r3;
    MOV %r5 "\\$&";
    PUSH %r5;
    MOV %r5 @c25;
    PUSH %r5;
    MOV %r7 @c72;
    PUSH %r7;
    MOV %r7 @c324;
    MOV %r8 "call";
    CALL_VAR %r7 %r8 1 false;
    MOV %r5 $RET;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    MOV %r1 "$";
    ADD %r0 %r1;
    PUSH %r0;
    CALL_REG @c437 1 false;
    MOV @c174 $RET;
    MOV %r0 @c26;
    JF %r0 _l223_;
    MOV %r1 context;
    MOV %r2 "Buffer";
    MOV_PROP Buffer %r1 %r2;
    JMP _l224_;
LABEL _l223_:
    MOV Buffer @c9;
LABEL _l224_:
    MOV %r0 context;
    MOV %r1 "Symbol";
    MOV_PROP Symbol %r0 %r1;
    MOV %r0 context;
    MOV %r1 "Uint8Array";
    MOV_PROP @c231 %r0 %r1;
    MOV %r0 Buffer;
    JF %r0 _l225_;
    MOV %r1 Buffer;
    MOV %r2 "allocUnsafe";
    MOV_PROP @c230 %r1 %r2;
    JMP _l226_;
LABEL _l225_:
    MOV @c230 @c9;
LABEL _l226_:
    MOV %r0 @c66;
    PUSH %r0;
    MOV %r1 @c66;
    MOV %r2 "getPrototypeOf";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c27 2 false;
    MOV @c285 $RET;
    MOV %r0 @c66;
    MOV %r1 "create";
    MOV_PROP @c466 %r0 %r1;
    MOV %r0 @c265;
    MOV %r1 "propertyIsEnumerable";
    MOV_PROP @c382 %r0 %r1;
    MOV %r0 @c465;
    MOV %r1 "splice";
    MOV_PROP @c84 %r0 %r1;
    MOV %r0 Symbol;
    JF %r0 _l227_;
    MOV %r1 Symbol;
    MOV %r2 "isConcatSpreadable";
    MOV_PROP @c309 %r1 %r2;
    JMP _l228_;
LABEL _l227_:
    MOV @c309 @c9;
LABEL _l228_:
    MOV %r0 Symbol;
    JF %r0 _l229_;
    MOV %r1 Symbol;
    MOV %r2 "iterator";
    MOV_PROP @c395 %r1 %r2;
    JMP _l230_;
LABEL _l229_:
    MOV @c395 @c9;
LABEL _l230_:
    MOV %r0 Symbol;
    JF %r0 _l231_;
    MOV %r1 Symbol;
    MOV %r2 "toStringTag";
    MOV_PROP @c152 %r1 %r2;
    JMP _l232_;
LABEL _l231_:
    MOV @c152 @c9;
LABEL _l232_:
    FUNC %r0 @@f68;
    CALL_REG %r0 0 false;
    MOV @c106 $RET;
    MOV %r2 context;
    MOV %r3 "clearTimeout";
    MOV_PROP %r0 %r2 %r3;
    MOV %r2 @c22;
    MOV %r3 "clearTimeout";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    MOV ctxClearTimeout %r0;
    JF %r0 _l233_;
    MOV %r2 context;
    MOV %r3 "clearTimeout";
    MOV_PROP %r1 %r2 %r3;
    LG_AND ctxClearTimeout %r1;
LABEL _l233_:
    MOV %r1 Date;
    MOV %r0 %r1;
    JF %r1 _l235_;
    MOV %r4 Date;
    MOV %r5 "now";
    MOV_PROP %r2 %r4 %r5;
    MOV %r6 @c22;
    MOV %r7 "Date";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "now";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l235_:
    MOV ctxNow %r0;
    JF %r0 _l234_;
    MOV %r2 Date;
    MOV %r3 "now";
    MOV_PROP %r1 %r2 %r3;
    LG_AND ctxNow %r1;
LABEL _l234_:
    MOV %r2 context;
    MOV %r3 "setTimeout";
    MOV_PROP %r0 %r2 %r3;
    MOV %r2 @c22;
    MOV %r3 "setTimeout";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    MOV ctxSetTimeout %r0;
    JF %r0 _l236_;
    MOV %r2 context;
    MOV %r3 "setTimeout";
    MOV_PROP %r1 %r2 %r3;
    LG_AND ctxSetTimeout %r1;
LABEL _l236_:
    MOV %r0 @c256;
    MOV %r1 "ceil";
    MOV_PROP @c209 %r0 %r1;
    MOV %r0 @c256;
    MOV %r1 "floor";
    MOV_PROP @c208 %r0 %r1;
    MOV %r0 @c66;
    MOV %r1 "getOwnPropertySymbols";
    MOV_PROP @c284 %r0 %r1;
    MOV %r0 Buffer;
    JF %r0 _l237_;
    MOV %r1 Buffer;
    MOV %r2 "isBuffer";
    MOV_PROP nativeIsBuffer %r1 %r2;
    JMP _l238_;
LABEL _l237_:
    MOV nativeIsBuffer @c9;
LABEL _l238_:
    MOV %r0 context;
    MOV %r1 "isFinite";
    MOV_PROP @c384 %r0 %r1;
    MOV %r0 @c465;
    MOV %r1 "join";
    MOV_PROP @c331 %r0 %r1;
    MOV %r0 @c66;
    PUSH %r0;
    MOV %r1 @c66;
    MOV %r2 "keys";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c27 2 false;
    MOV @c186 $RET;
    MOV %r0 @c256;
    MOV %r1 "max";
    MOV_PROP @c155 %r0 %r1;
    MOV %r0 @c256;
    MOV %r1 "min";
    MOV_PROP @c77 %r0 %r1;
    MOV %r0 Date;
    MOV %r1 "now";
    MOV_PROP @c590 %r0 %r1;
    MOV %r0 context;
    MOV %r1 "parseInt";
    MOV_PROP @c431 %r0 %r1;
    MOV %r0 @c256;
    MOV %r1 "random";
    MOV_PROP @c207 %r0 %r1;
    MOV %r0 @c465;
    MOV %r1 "reverse";
    MOV_PROP @c337 %r0 %r1;
    MOV %r0 "DataView";
    PUSH %r0;
    MOV %r0 context;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV DataView $RET;
    MOV %r0 "Map";
    PUSH %r0;
    MOV %r0 context;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV @c86 $RET;
    MOV %r0 "Promise";
    PUSH %r0;
    MOV %r0 context;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV Promise $RET;
    MOV %r0 "Set";
    PUSH %r0;
    MOV %r0 context;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV @c257 $RET;
    MOV %r0 "WeakMap";
    PUSH %r0;
    MOV %r0 context;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV WeakMap $RET;
    MOV %r0 "create";
    PUSH %r0;
    MOV %r0 @c66;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV @c81 $RET;
    MOV %r0 WeakMap;
    MOV @c216 %r0;
    JF %r0 _l239_;
    CALL_REG WeakMap 0 true;
    MOV %r1 $RET;
    LG_AND @c216 %r1;
LABEL _l239_:
    NEW_OBJ @c276;
    MOV %r0 DataView;
    PUSH %r0;
    CALL_REG @c176 1 false;
    MOV @c286 $RET;
    MOV %r0 @c86;
    PUSH %r0;
    CALL_REG @c176 1 false;
    MOV @c287 $RET;
    MOV %r0 Promise;
    PUSH %r0;
    CALL_REG @c176 1 false;
    MOV @c288 $RET;
    MOV %r0 @c257;
    PUSH %r0;
    CALL_REG @c176 1 false;
    MOV @c290 $RET;
    MOV %r0 WeakMap;
    PUSH %r0;
    CALL_REG @c176 1 false;
    MOV @c291 $RET;
    MOV %r0 Symbol;
    JF %r0 _l240_;
    MOV %r1 Symbol;
    MOV %r2 "prototype";
    MOV_PROP symbolProto %r1 %r2;
    JMP _l241_;
LABEL _l240_:
    MOV symbolProto @c9;
LABEL _l241_:
    MOV %r0 symbolProto;
    JF %r0 _l242_;
    MOV %r1 symbolProto;
    MOV %r2 "valueOf";
    MOV_PROP @c234 %r1 %r2;
    JMP _l243_;
LABEL _l242_:
    MOV @c234 @c9;
LABEL _l243_:
    MOV %r0 symbolProto;
    JF %r0 _l244_;
    MOV %r1 symbolProto;
    MOV %r2 "toString";
    MOV_PROP @c222 %r1 %r2;
    JMP _l245_;
LABEL _l244_:
    MOV @c222 @c9;
LABEL _l245_:
    FUNC %r0 @@f70;
    CALL_REG %r0 0 false;
    MOV @c295 $RET;
    NEW_OBJ %r0;
    MOV %r1 @c28;
    SET_KEY %r0 'escape' %r1;
    MOV %r1 @c29;
    SET_KEY %r0 'evaluate' %r1;
    MOV %r1 @c30;
    SET_KEY %r0 'interpolate' %r1;
    MOV %r1 "";
    SET_KEY %r0 'variable' %r1;
    NEW_OBJ %r1;
    MOV %r2 @c277;
    SET_KEY %r1 '_' %r2;
    SET_KEY %r0 'imports' %r1;
    MOV %r1 @c277;
    MOV %r2 "templateSettings";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @c347;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 @c277;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c277;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "constructor";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 @c347;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c295 1 false;
    MOV %r0 $RET;
    MOV %r1 @c71;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c71;
    MOV %r3 @c71;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "constructor";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 @c347;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c295 1 false;
    MOV %r0 $RET;
    MOV %r1 @c70;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c70;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "constructor";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 hashClear;
    MOV %r3 @c85;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "clear";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 hashDelete;
    MOV %r3 @c85;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "delete";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 hashGet;
    MOV %r3 @c85;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 hashHas;
    MOV %r3 @c85;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 hashSet;
    MOV %r3 @c85;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "set";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 listCacheClear;
    MOV %r3 @c87;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "clear";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 listCacheDelete;
    MOV %r3 @c87;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "delete";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 listCacheGet;
    MOV %r3 @c87;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 listCacheHas;
    MOV %r3 @c87;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 listCacheSet;
    MOV %r3 @c87;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "set";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapCacheClear;
    MOV %r3 @c89;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "clear";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapCacheDelete;
    MOV %r3 @c89;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "delete";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapCacheGet;
    MOV %r3 @c89;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapCacheHas;
    MOV %r3 @c89;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapCacheSet;
    MOV %r3 @c89;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "set";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 setCacheAdd;
    MOV %r4 @c138;
    MOV %r3 "prototype";
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 "push";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r3 @c138;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "add";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 setCacheHas;
    MOV %r3 @c138;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stackClear;
    MOV %r3 @c127;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "clear";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stackDelete;
    MOV %r3 @c127;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "delete";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stackGet;
    MOV %r3 @c127;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stackHas;
    MOV %r3 @c127;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stackSet;
    MOV %r3 @c127;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "set";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c156;
    PUSH %r0;
    CALL_REG createBaseEach 1 false;
    MOV @c102 $RET;
    MOV %r0 true;
    PUSH %r0;
    MOV %r0 @c406;
    PUSH %r0;
    CALL_REG createBaseEach 2 false;
    MOV @c353 $RET;
    CALL_REG createBaseFor 0 false;
    MOV @c145 $RET;
    MOV %r0 true;
    PUSH %r0;
    CALL_REG createBaseFor 1 false;
    MOV @c146 $RET;
    MOV %r0 @c216;
    NEG %r0;
    JF %r0 _l246_;
    MOV @c264 @c181;
    JMP _l247_;
LABEL _l246_:
LABEL _l247_:
    MOV %r0 @c106;
    NEG %r0;
    JF %r0 _l248_;
    MOV baseSetToString @c181;
    JMP _l249_;
LABEL _l248_:
LABEL _l249_:
    MOV castRest @c238;
    MOV %r0 ctxClearTimeout;
    MOV @c635 %r0;
    JIF %r0 _l250_;
    FUNC %r1 @@f195;
    LG_OR @c635 %r1;
LABEL _l250_:
    MOV %r0 "............................................";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r1 @c257;
    MOV %r0 %r1;
    JF %r1 _l253_;
    MOV %r2 1;
    NEW_ARR %r8;
    MOV %r9 0;
    MINUS %r9;
    SET_KEY %r8 1 %r9;
    PUSH %r8;
    CALL_REG @c257 1 true;
    MOV %r7 $RET;
    PUSH %r7;
    CALL_REG @c31 1 false;
    MOV %r5 $RET;
    MOV %r6 1;
    MOV_PROP %r4 %r5 %r6;
    DIV %r2 %r4;
    MOV %r3 @c32;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l253_:
    NEG %r0;
    JF %r0 _l251_;
    MOV @c223 noop;
    JMP _l252_;
LABEL _l251_:
LABEL _l252_:
    MOV %r0 "----------------------------------------------------?";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c216;
    NEG %r0;
    JF %r0 _l254_;
    MOV @c258 noop;
    JMP _l255_;
LABEL _l254_:
LABEL _l255_:
    MOV %r0 @c284;
    NEG %r0;
    JF %r0 _l256_;
    MOV @c236 stubArray;
    JMP _l257_;
LABEL _l256_:
LABEL _l257_:
    MOV %r0 @c284;
    NEG %r0;
    JF %r0 _l258_;
    MOV @c237 stubArray;
    JMP _l259_;
LABEL _l258_:
LABEL _l259_:
    MOV @c114 @c160;
    MOV %r0 @c114;
    PUSH %r0;
    MOV %r0 DataView;
    PUSH %r0;
    MOV %r0 "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 DataView;
    MOV %r0 %r1;
    JF %r1 _l262_;
    MOV %r6 1;
    PUSH %r6;
    CALL_CTX 'ArrayBuffer' 1 true;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG DataView 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @c114 1 false;
    MOV %r2 $RET;
    MOV %r3 @c33;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l262_:
    JF %r0 _l260_;
    MOV %r1 "INSIDE...";
    PUSH %r1;
    MOV_CTX %r1 "console";
    MOV %r2 "log";
    CALL_VAR %r1 %r2 1 false;
    FUNC %r1 @@f253;
    MOV @c114 %r1;
    JMP _l261_;
LABEL _l260_:
LABEL _l261_:
    MOV %r0 "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK2";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c65;
    JF %r0 _l263_;
    MOV @c389 @c173;
    JMP _l264_;
LABEL _l263_:
    MOV @c389 stubFalse;
LABEL _l264_:
    MOV %r0 @c264;
    PUSH %r0;
    CALL_REG shortOut 1 false;
    MOV @c254 $RET;
    MOV %r0 ctxSetTimeout;
    MOV @c134 %r0;
    JIF %r0 _l265_;
    FUNC %r1 @@f278;
    LG_OR @c134 %r1;
LABEL _l265_:
    MOV %r0 baseSetToString;
    PUSH %r0;
    CALL_REG shortOut 1 false;
    MOV @c212 $RET;
    FUNC %r0 @@f282;
    PUSH %r0;
    CALL_REG memoizeCapped 1 false;
    MOV @c229 $RET;
    FUNC %r0 @@f290;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV difference $RET;
    FUNC %r0 @@f291;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV differenceBy $RET;
    FUNC %r0 @@f292;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV differenceWith $RET;
    FUNC %r0 @@f307;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV intersection $RET;
    FUNC %r0 @@f308;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV intersectionBy $RET;
    FUNC %r0 @@f309;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV intersectionWith $RET;
    MOV %r0 pullAll;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV pull $RET;
    FUNC %r0 @@f317;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV pullAt $RET;
    FUNC %r0 @@f334;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV union $RET;
    FUNC %r0 @@f335;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV unionBy $RET;
    FUNC %r0 @@f336;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV unionWith $RET;
    FUNC %r0 @@f342;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV without $RET;
    FUNC %r0 @@f343;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV xor $RET;
    FUNC %r0 @@f344;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV xorBy $RET;
    FUNC %r0 @@f345;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV xorWith $RET;
    MOV %r0 @c340;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV zip $RET;
    FUNC %r0 @@f348;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV zipWith $RET;
    FUNC %r0 @@f352;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV wrapperAt $RET;
    FUNC %r0 @@f360;
    PUSH %r0;
    CALL_REG createAggregator 1 false;
    MOV countBy $RET;
    MOV %r0 findIndex;
    PUSH %r0;
    CALL_REG createFind 1 false;
    MOV find $RET;
    MOV %r0 findLastIndex;
    PUSH %r0;
    CALL_REG createFind 1 false;
    MOV findLast $RET;
    FUNC %r0 @@f368;
    PUSH %r0;
    CALL_REG createAggregator 1 false;
    MOV groupBy $RET;
    FUNC %r0 @@f370;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV invokeMap $RET;
    FUNC %r0 @@f371;
    PUSH %r0;
    CALL_REG createAggregator 1 false;
    MOV keyBy $RET;
    FUNC %r0 @@f374;
    PUSH %r0;
    FUNC %r0 @@f375;
    PUSH %r0;
    CALL_REG createAggregator 2 false;
    MOV partition $RET;
    FUNC %r0 @@f384;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV sortBy $RET;
    MOV %r0 ctxNow;
    MOV @c630 %r0;
    JIF %r0 _l266_;
    FUNC %r1 @@f385;
    LG_OR @c630 %r1;
LABEL _l266_:
    FUNC %r0 @@f389;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV @c367 $RET;
    FUNC %r0 @@f390;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV @c369 $RET;
    FUNC %r0 @@f394;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV defer $RET;
    FUNC %r0 @@f395;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV delay $RET;
    MOV %r0 @c89;
    MOV %r1 @c315;
    MOV %r2 "Cache";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f400;
    PUSH %r0;
    CALL_REG castRest 1 false;
    MOV overArgs $RET;
    FUNC %r0 @@f401;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV @c375 $RET;
    FUNC %r0 @@f402;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV @c376 $RET;
    FUNC %r0 @@f403;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV rearg $RET;
    MOV %r0 @c460;
    PUSH %r0;
    CALL_REG createRelationalOperation 1 false;
    MOV gt $RET;
    FUNC %r0 @@f416;
    PUSH %r0;
    CALL_REG createRelationalOperation 1 false;
    MOV gte $RET;
    FUNC %r2 @@f417;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG baseIsArguments 1 false;
    MOV %r0 $RET;
    JF %r0 _l267_;
    MOV @c91 baseIsArguments;
    JMP _l268_;
LABEL _l267_:
LABEL _l268_:
    MOV %r0 @c107;
    MOV %r1 "isArray";
    MOV_PROP @c69 %r0 %r1;
    MOV %r0 @c34;
    JF %r0 _l269_;
    MOV %r1 @c34;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV isArrayBuffer $RET;
    JMP _l270_;
LABEL _l269_:
    MOV isArrayBuffer baseIsArrayBuffer;
LABEL _l270_:
    MOV %r0 nativeIsBuffer;
    MOV @c92 %r0;
    JIF %r0 _l271_;
    MOV %r1 stubFalse;
    LG_OR @c92 %r1;
LABEL _l271_:
    MOV %r0 @c36;
    JF %r0 _l272_;
    MOV %r1 @c36;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV isDate $RET;
    JMP _l273_;
LABEL _l272_:
    MOV isDate baseIsDate;
LABEL _l273_:
    MOV %r0 @c37;
    JF %r0 _l274_;
    MOV %r1 @c37;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV @c129 $RET;
    JMP _l275_;
LABEL _l274_:
    MOV @c129 baseIsMap;
LABEL _l275_:
    MOV %r0 @c38;
    JF %r0 _l276_;
    MOV %r1 @c38;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV @c432 $RET;
    JMP _l277_;
LABEL _l276_:
    MOV @c432 baseIsRegExp;
LABEL _l277_:
    MOV %r0 @c39;
    JF %r0 _l278_;
    MOV %r1 @c39;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV @c128 $RET;
    JMP _l279_;
LABEL _l278_:
    MOV @c128 baseIsSet;
LABEL _l279_:
    MOV %r0 @c40;
    JF %r0 _l280_;
    MOV %r1 @c40;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV @c93 $RET;
    JMP _l281_;
LABEL _l280_:
    MOV @c93 baseIsTypedArray;
LABEL _l281_:
    MOV %r0 @c463;
    PUSH %r0;
    CALL_REG createRelationalOperation 1 false;
    MOV lt $RET;
    FUNC %r0 @@f447;
    PUSH %r0;
    CALL_REG createRelationalOperation 1 false;
    MOV lte $RET;
    FUNC %r0 @@f456;
    PUSH %r0;
    CALL_REG createAssigner 1 false;
    MOV assign $RET;
    FUNC %r0 @@f457;
    PUSH %r0;
    CALL_REG createAssigner 1 false;
    MOV assignIn $RET;
    FUNC %r0 @@f458;
    PUSH %r0;
    CALL_REG createAssigner 1 false;
    MOV @c434 $RET;
    FUNC %r0 @@f459;
    PUSH %r0;
    CALL_REG createAssigner 1 false;
    MOV assignWith $RET;
    MOV %r0 @c335;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV at $RET;
    FUNC %r0 @@f461;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV defaults $RET;
    FUNC %r0 @@f462;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV defaultsDeep $RET;
    MOV %r1 @c181;
    PUSH %r1;
    CALL_REG @c217 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f474;
    PUSH %r0;
    CALL_REG createInverter 2 false;
    MOV invert $RET;
    MOV %r0 @c199;
    PUSH %r0;
    FUNC %r0 @@f475;
    PUSH %r0;
    CALL_REG createInverter 2 false;
    MOV invertBy $RET;
    MOV %r0 @c609;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV invoke $RET;
    FUNC %r0 @@f480;
    PUSH %r0;
    CALL_REG createAssigner 1 false;
    MOV merge $RET;
    FUNC %r0 @@f481;
    PUSH %r0;
    CALL_REG createAssigner 1 false;
    MOV @c404 $RET;
    FUNC %r0 @@f482;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV omit $RET;
    FUNC %r0 @@f484;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV pick $RET;
    MOV %r0 @c103;
    PUSH %r0;
    CALL_REG createToPairs 1 false;
    MOV toPairs $RET;
    MOV %r0 @c105;
    PUSH %r0;
    CALL_REG createToPairs 1 false;
    MOV toPairsIn $RET;
    FUNC %r0 @@f498;
    PUSH %r0;
    CALL_REG createCompounder 1 false;
    MOV camelCase $RET;
    FUNC %r0 @@f504;
    PUSH %r0;
    CALL_REG createCompounder 1 false;
    MOV kebabCase $RET;
    FUNC %r0 @@f505;
    PUSH %r0;
    CALL_REG createCompounder 1 false;
    MOV lowerCase $RET;
    MOV %r0 "toLowerCase";
    PUSH %r0;
    CALL_REG createCaseFirst 1 false;
    MOV lowerFirst $RET;
    FUNC %r0 @@f512;
    PUSH %r0;
    CALL_REG createCompounder 1 false;
    MOV snakeCase $RET;
    FUNC %r0 @@f514;
    PUSH %r0;
    CALL_REG createCompounder 1 false;
    MOV startCase $RET;
    FUNC %r0 @@f524;
    PUSH %r0;
    CALL_REG createCompounder 1 false;
    MOV upperCase $RET;
    MOV %r0 "toUpperCase";
    PUSH %r0;
    CALL_REG createCaseFirst 1 false;
    MOV @c421 $RET;
    FUNC %r0 @@f526;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV @c442 $RET;
    FUNC %r0 @@f527;
    PUSH %r0;
    CALL_REG @c241 1 false;
    MOV bindAll $RET;
    CALL_REG createFlow 0 false;
    MOV flow $RET;
    MOV %r0 true;
    PUSH %r0;
    CALL_REG createFlow 1 false;
    MOV flowRight $RET;
    FUNC %r0 @@f536;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV method $RET;
    FUNC %r0 @@f537;
    PUSH %r0;
    CALL_REG @c238 1 false;
    MOV methodOf $RET;
    MOV %r0 @c10;
    PUSH %r0;
    CALL_REG createOver 1 false;
    MOV over $RET;
    MOV %r0 @c41;
    PUSH %r0;
    CALL_REG createOver 1 false;
    MOV overEvery $RET;
    MOV %r0 @c42;
    PUSH %r0;
    CALL_REG createOver 1 false;
    MOV overSome $RET;
    CALL_REG createRange 0 false;
    MOV range $RET;
    MOV %r0 true;
    PUSH %r0;
    CALL_REG createRange 1 false;
    MOV rangeRight $RET;
    MOV %r0 0;
    PUSH %r0;
    FUNC %r0 @@f552;
    PUSH %r0;
    CALL_REG createMathOperation 2 false;
    MOV add $RET;
    MOV %r0 "ceil";
    PUSH %r0;
    CALL_REG createRound 1 false;
    MOV ceil $RET;
    MOV %r0 1;
    PUSH %r0;
    FUNC %r0 @@f553;
    PUSH %r0;
    CALL_REG createMathOperation 2 false;
    MOV divide $RET;
    MOV %r0 "floor";
    PUSH %r0;
    CALL_REG createRound 1 false;
    MOV floor $RET;
    MOV %r0 1;
    PUSH %r0;
    FUNC %r0 @@f560;
    PUSH %r0;
    CALL_REG createMathOperation 2 false;
    MOV multiply $RET;
    MOV %r0 "round";
    PUSH %r0;
    CALL_REG createRound 1 false;
    MOV round $RET;
    MOV %r0 0;
    PUSH %r0;
    FUNC %r0 @@f561;
    PUSH %r0;
    CALL_REG createMathOperation 2 false;
    MOV subtract $RET;
    MOV %r0 after;
    MOV %r1 @c277;
    MOV %r2 "after";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c378;
    MOV %r1 @c277;
    MOV %r2 "ary";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 assign;
    MOV %r1 @c277;
    MOV %r2 "assign";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 assignIn;
    MOV %r1 @c277;
    MOV %r2 "assignIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c434;
    MOV %r1 @c277;
    MOV %r2 "assignInWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 assignWith;
    MOV %r1 @c277;
    MOV %r2 "assignWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 at;
    MOV %r1 @c277;
    MOV %r2 "at";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c374;
    MOV %r1 @c277;
    MOV %r2 "before";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c367;
    MOV %r1 @c277;
    MOV %r2 "bind";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 bindAll;
    MOV %r1 @c277;
    MOV %r2 "bindAll";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c369;
    MOV %r1 @c277;
    MOV %r2 "bindKey";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 castArray;
    MOV %r1 @c277;
    MOV %r2 "castArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c345;
    MOV %r1 @c277;
    MOV %r2 "chain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 chunk;
    MOV %r1 @c277;
    MOV %r2 "chunk";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 compact;
    MOV %r1 @c277;
    MOV %r2 "compact";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 concat;
    MOV %r1 @c277;
    MOV %r2 "concat";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 cond;
    MOV %r1 @c277;
    MOV %r2 "cond";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 conforms;
    MOV %r1 @c277;
    MOV %r2 "conforms";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c217;
    MOV %r1 @c277;
    MOV %r2 "constant";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 countBy;
    MOV %r1 @c277;
    MOV %r2 "countBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 create;
    MOV %r1 @c277;
    MOV %r2 "create";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c370;
    MOV %r1 @c277;
    MOV %r2 "curry";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c371;
    MOV %r1 @c277;
    MOV %r2 "curryRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c377;
    MOV %r1 @c277;
    MOV %r2 "debounce";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 defaults;
    MOV %r1 @c277;
    MOV %r2 "defaults";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 defaultsDeep;
    MOV %r1 @c277;
    MOV %r2 "defaultsDeep";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 defer;
    MOV %r1 @c277;
    MOV %r2 "defer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 delay;
    MOV %r1 @c277;
    MOV %r2 "delay";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 difference;
    MOV %r1 @c277;
    MOV %r2 "difference";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 differenceBy;
    MOV %r1 @c277;
    MOV %r2 "differenceBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 differenceWith;
    MOV %r1 @c277;
    MOV %r2 "differenceWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 drop;
    MOV %r1 @c277;
    MOV %r2 "drop";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 dropRight;
    MOV %r1 @c277;
    MOV %r2 "dropRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 dropRightWhile;
    MOV %r1 @c277;
    MOV %r2 "dropRightWhile";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 dropWhile;
    MOV %r1 @c277;
    MOV %r2 "dropWhile";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 fill;
    MOV %r1 @c277;
    MOV %r2 "fill";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 filter;
    MOV %r1 @c277;
    MOV %r2 "filter";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flatMap;
    MOV %r1 @c277;
    MOV %r2 "flatMap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flatMapDeep;
    MOV %r1 @c277;
    MOV %r2 "flatMapDeep";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flatMapDepth;
    MOV %r1 @c277;
    MOV %r2 "flatMapDepth";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c274;
    MOV %r1 @c277;
    MOV %r2 "flatten";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flattenDeep;
    MOV %r1 @c277;
    MOV %r2 "flattenDeep";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flattenDepth;
    MOV %r1 @c277;
    MOV %r2 "flattenDepth";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flip;
    MOV %r1 @c277;
    MOV %r2 "flip";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flow;
    MOV %r1 @c277;
    MOV %r2 "flow";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flowRight;
    MOV %r1 @c277;
    MOV %r2 "flowRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 fromPairs;
    MOV %r1 @c277;
    MOV %r2 "fromPairs";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 functions;
    MOV %r1 @c277;
    MOV %r2 "functions";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 functionsIn;
    MOV %r1 @c277;
    MOV %r2 "functionsIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 groupBy;
    MOV %r1 @c277;
    MOV %r2 "groupBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 initial;
    MOV %r1 @c277;
    MOV %r2 "initial";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 intersection;
    MOV %r1 @c277;
    MOV %r2 "intersection";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 intersectionBy;
    MOV %r1 @c277;
    MOV %r2 "intersectionBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 intersectionWith;
    MOV %r1 @c277;
    MOV %r2 "intersectionWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 invert;
    MOV %r1 @c277;
    MOV %r2 "invert";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 invertBy;
    MOV %r1 @c277;
    MOV %r2 "invertBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 invokeMap;
    MOV %r1 @c277;
    MOV %r2 "invokeMap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c278;
    MOV %r1 @c277;
    MOV %r2 "iteratee";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 keyBy;
    MOV %r1 @c277;
    MOV %r2 "keyBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c103;
    MOV %r1 @c277;
    MOV %r2 "keys";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c105;
    MOV %r1 @c277;
    MOV %r2 "keysIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c351;
    MOV %r1 @c277;
    MOV %r2 "map";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapKeys;
    MOV %r1 @c277;
    MOV %r2 "mapKeys";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mapValues;
    MOV %r1 @c277;
    MOV %r2 "mapValues";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 matches;
    MOV %r1 @c277;
    MOV %r2 "matches";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 matchesProperty;
    MOV %r1 @c277;
    MOV %r2 "matchesProperty";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c315;
    MOV %r1 @c277;
    MOV %r2 "memoize";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 merge;
    MOV %r1 @c277;
    MOV %r2 "merge";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c404;
    MOV %r1 @c277;
    MOV %r2 "mergeWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 method;
    MOV %r1 @c277;
    MOV %r2 "method";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 methodOf;
    MOV %r1 @c277;
    MOV %r2 "methodOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mixin;
    MOV %r1 @c277;
    MOV %r2 "mixin";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c358;
    MOV %r1 @c277;
    MOV %r2 "negate";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 nthArg;
    MOV %r1 @c277;
    MOV %r2 "nthArg";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 omit;
    MOV %r1 @c277;
    MOV %r2 "omit";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 omitBy;
    MOV %r1 @c277;
    MOV %r2 "omitBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 once;
    MOV %r1 @c277;
    MOV %r2 "once";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 orderBy;
    MOV %r1 @c277;
    MOV %r2 "orderBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 over;
    MOV %r1 @c277;
    MOV %r2 "over";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 overArgs;
    MOV %r1 @c277;
    MOV %r2 "overArgs";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 overEvery;
    MOV %r1 @c277;
    MOV %r2 "overEvery";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 overSome;
    MOV %r1 @c277;
    MOV %r2 "overSome";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c375;
    MOV %r1 @c277;
    MOV %r2 "partial";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c376;
    MOV %r1 @c277;
    MOV %r2 "partialRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 partition;
    MOV %r1 @c277;
    MOV %r2 "partition";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pick;
    MOV %r1 @c277;
    MOV %r2 "pick";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c414;
    MOV %r1 @c277;
    MOV %r2 "pickBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c184;
    MOV %r1 @c277;
    MOV %r2 "property";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 propertyOf;
    MOV %r1 @c277;
    MOV %r2 "propertyOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pull;
    MOV %r1 @c277;
    MOV %r2 "pull";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pullAll;
    MOV %r1 @c277;
    MOV %r2 "pullAll";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pullAllBy;
    MOV %r1 @c277;
    MOV %r2 "pullAllBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pullAllWith;
    MOV %r1 @c277;
    MOV %r2 "pullAllWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pullAt;
    MOV %r1 @c277;
    MOV %r2 "pullAt";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 range;
    MOV %r1 @c277;
    MOV %r2 "range";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 rangeRight;
    MOV %r1 @c277;
    MOV %r2 "rangeRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 rearg;
    MOV %r1 @c277;
    MOV %r2 "rearg";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 reject;
    MOV %r1 @c277;
    MOV %r2 "reject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 remove;
    MOV %r1 @c277;
    MOV %r2 "remove";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 rest;
    MOV %r1 @c277;
    MOV %r2 "rest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c348;
    MOV %r1 @c277;
    MOV %r2 "reverse";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sampleSize;
    MOV %r1 @c277;
    MOV %r2 "sampleSize";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 set;
    MOV %r1 @c277;
    MOV %r2 "set";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 setWith;
    MOV %r1 @c277;
    MOV %r2 "setWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 shuffle;
    MOV %r1 @c277;
    MOV %r2 "shuffle";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 slice;
    MOV %r1 @c277;
    MOV %r2 "slice";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortBy;
    MOV %r1 @c277;
    MOV %r2 "sortBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedUniq;
    MOV %r1 @c277;
    MOV %r2 "sortedUniq";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedUniqBy;
    MOV %r1 @c277;
    MOV %r2 "sortedUniqBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 split;
    MOV %r1 @c277;
    MOV %r2 "split";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 spread;
    MOV %r1 @c277;
    MOV %r2 "spread";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 tail;
    MOV %r1 @c277;
    MOV %r2 "tail";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 take;
    MOV %r1 @c277;
    MOV %r2 "take";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 takeRight;
    MOV %r1 @c277;
    MOV %r2 "takeRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 takeRightWhile;
    MOV %r1 @c277;
    MOV %r2 "takeRightWhile";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 takeWhile;
    MOV %r1 @c277;
    MOV %r2 "takeWhile";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 tap;
    MOV %r1 @c277;
    MOV %r2 "tap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 throttle;
    MOV %r1 @c277;
    MOV %r2 "throttle";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c344;
    MOV %r1 @c277;
    MOV %r2 "thru";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c346;
    MOV %r1 @c277;
    MOV %r2 "toArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toPairs;
    MOV %r1 @c277;
    MOV %r2 "toPairs";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toPairsIn;
    MOV %r1 @c277;
    MOV %r2 "toPairsIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toPath;
    MOV %r1 @c277;
    MOV %r2 "toPath";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c198;
    MOV %r1 @c277;
    MOV %r2 "toPlainObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 transform;
    MOV %r1 @c277;
    MOV %r2 "transform";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 unary;
    MOV %r1 @c277;
    MOV %r2 "unary";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 union;
    MOV %r1 @c277;
    MOV %r2 "union";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 unionBy;
    MOV %r1 @c277;
    MOV %r2 "unionBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 unionWith;
    MOV %r1 @c277;
    MOV %r2 "unionWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 uniq;
    MOV %r1 @c277;
    MOV %r2 "uniq";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 uniqBy;
    MOV %r1 @c277;
    MOV %r2 "uniqBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 uniqWith;
    MOV %r1 @c277;
    MOV %r2 "uniqWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 unset;
    MOV %r1 @c277;
    MOV %r2 "unset";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c340;
    MOV %r1 @c277;
    MOV %r2 "unzip";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c343;
    MOV %r1 @c277;
    MOV %r2 "unzipWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 update;
    MOV %r1 @c277;
    MOV %r2 "update";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 updateWith;
    MOV %r1 @c277;
    MOV %r2 "updateWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c213;
    MOV %r1 @c277;
    MOV %r2 "values";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 valuesIn;
    MOV %r1 @c277;
    MOV %r2 "valuesIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 without;
    MOV %r1 @c277;
    MOV %r2 "without";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c528;
    MOV %r1 @c277;
    MOV %r2 "words";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrap;
    MOV %r1 @c277;
    MOV %r2 "wrap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 xor;
    MOV %r1 @c277;
    MOV %r2 "xor";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 xorBy;
    MOV %r1 @c277;
    MOV %r2 "xorBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 xorWith;
    MOV %r1 @c277;
    MOV %r2 "xorWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 zip;
    MOV %r1 @c277;
    MOV %r2 "zip";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 zipObject;
    MOV %r1 @c277;
    MOV %r2 "zipObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 zipObjectDeep;
    MOV %r1 @c277;
    MOV %r2 "zipObjectDeep";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 zipWith;
    MOV %r1 @c277;
    MOV %r2 "zipWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toPairs;
    MOV %r1 @c277;
    MOV %r2 "entries";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toPairsIn;
    MOV %r1 @c277;
    MOV %r2 "entriesIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 assignIn;
    MOV %r1 @c277;
    MOV %r2 "extend";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c434;
    MOV %r1 @c277;
    MOV %r2 "extendWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c277;
    PUSH %r0;
    MOV %r0 @c277;
    PUSH %r0;
    CALL_REG mixin 2 false;
    MOV %r0 add;
    MOV %r1 @c277;
    MOV %r2 "add";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c442;
    MOV %r1 @c277;
    MOV %r2 "attempt";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 camelCase;
    MOV %r1 @c277;
    MOV %r2 "camelCase";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c420;
    MOV %r1 @c277;
    MOV %r2 "capitalize";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 ceil;
    MOV %r1 @c277;
    MOV %r2 "ceil";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 clamp;
    MOV %r1 @c277;
    MOV %r2 "clamp";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 clone;
    MOV %r1 @c277;
    MOV %r2 "clone";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 cloneDeep;
    MOV %r1 @c277;
    MOV %r2 "cloneDeep";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 cloneDeepWith;
    MOV %r1 @c277;
    MOV %r2 "cloneDeepWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 cloneWith;
    MOV %r1 @c277;
    MOV %r2 "cloneWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 conformsTo;
    MOV %r1 @c277;
    MOV %r2 "conformsTo";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c527;
    MOV %r1 @c277;
    MOV %r2 "deburr";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 defaultTo;
    MOV %r1 @c277;
    MOV %r2 "defaultTo";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 divide;
    MOV %r1 @c277;
    MOV %r2 "divide";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 endsWith;
    MOV %r1 @c277;
    MOV %r2 "endsWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c100;
    MOV %r1 @c277;
    MOV %r2 "eq";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 escape;
    MOV %r1 @c277;
    MOV %r2 "escape";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 escapeRegExp;
    MOV %r1 @c277;
    MOV %r2 "escapeRegExp";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 every;
    MOV %r1 @c277;
    MOV %r2 "every";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 find;
    MOV %r1 @c277;
    MOV %r2 "find";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 findIndex;
    MOV %r1 @c277;
    MOV %r2 "findIndex";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 findKey;
    MOV %r1 @c277;
    MOV %r2 "findKey";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 findLast;
    MOV %r1 @c277;
    MOV %r2 "findLast";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 findLastIndex;
    MOV %r1 @c277;
    MOV %r2 "findLastIndex";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 findLastKey;
    MOV %r1 @c277;
    MOV %r2 "findLastKey";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 floor;
    MOV %r1 @c277;
    MOV %r2 "floor";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forEach;
    MOV %r1 @c277;
    MOV %r2 "forEach";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forEachRight;
    MOV %r1 @c277;
    MOV %r2 "forEachRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forIn;
    MOV %r1 @c277;
    MOV %r2 "forIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forInRight;
    MOV %r1 @c277;
    MOV %r2 "forInRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forOwn;
    MOV %r1 @c277;
    MOV %r2 "forOwn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forOwnRight;
    MOV %r1 @c277;
    MOV %r2 "forOwnRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c108;
    MOV %r1 @c277;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 gt;
    MOV %r1 @c277;
    MOV %r2 "gt";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 gte;
    MOV %r1 @c277;
    MOV %r2 "gte";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 has;
    MOV %r1 @c277;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c496;
    MOV %r1 @c277;
    MOV %r2 "hasIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 head;
    MOV %r1 @c277;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c181;
    MOV %r1 @c277;
    MOV %r2 "identity";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 includes;
    MOV %r1 @c277;
    MOV %r2 "includes";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 indexOf;
    MOV %r1 @c277;
    MOV %r2 "indexOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 inRange;
    MOV %r1 @c277;
    MOV %r2 "inRange";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 invoke;
    MOV %r1 @c277;
    MOV %r2 "invoke";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c91;
    MOV %r1 @c277;
    MOV %r2 "isArguments";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c69;
    MOV %r1 @c277;
    MOV %r2 "isArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isArrayBuffer;
    MOV %r1 @c277;
    MOV %r2 "isArrayBuffer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c188;
    MOV %r1 @c277;
    MOV %r2 "isArrayLike";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c195;
    MOV %r1 @c277;
    MOV %r2 "isArrayLikeObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isBoolean;
    MOV %r1 @c277;
    MOV %r2 "isBoolean";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c92;
    MOV %r1 @c277;
    MOV %r2 "isBuffer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isDate;
    MOV %r1 @c277;
    MOV %r2 "isDate";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isElement;
    MOV %r1 @c277;
    MOV %r2 "isElement";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isEmpty;
    MOV %r1 @c277;
    MOV %r2 "isEmpty";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isEqual;
    MOV %r1 @c277;
    MOV %r2 "isEqual";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isEqualWith;
    MOV %r1 @c277;
    MOV %r2 "isEqualWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c443;
    MOV %r1 @c277;
    MOV %r2 "isError";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isFinite;
    MOV %r1 @c277;
    MOV %r2 "isFinite";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c173;
    MOV %r1 @c277;
    MOV %r2 "isFunction";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c393;
    MOV %r1 @c277;
    MOV %r2 "isInteger";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c179;
    MOV %r1 @c277;
    MOV %r2 "isLength";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c129;
    MOV %r1 @c277;
    MOV %r2 "isMap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isMatch;
    MOV %r1 @c277;
    MOV %r2 "isMatch";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isMatchWith;
    MOV %r1 @c277;
    MOV %r2 "isMatchWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isNaN;
    MOV %r1 @c277;
    MOV %r2 "isNaN";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isNative;
    MOV %r1 @c277;
    MOV %r2 "isNative";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isNil;
    MOV %r1 @c277;
    MOV %r2 "isNil";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isNull;
    MOV %r1 @c277;
    MOV %r2 "isNull";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c388;
    MOV %r1 @c277;
    MOV %r2 "isNumber";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c112;
    MOV %r1 @c277;
    MOV %r2 "isObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c68;
    MOV %r1 @c277;
    MOV %r2 "isObjectLike";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c197;
    MOV %r1 @c277;
    MOV %r2 "isPlainObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c432;
    MOV %r1 @c277;
    MOV %r2 "isRegExp";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isSafeInteger;
    MOV %r1 @c277;
    MOV %r2 "isSafeInteger";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c128;
    MOV %r1 @c277;
    MOV %r2 "isSet";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c354;
    MOV %r1 @c277;
    MOV %r2 "isString";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c139;
    MOV %r1 @c277;
    MOV %r2 "isSymbol";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c93;
    MOV %r1 @c277;
    MOV %r2 "isTypedArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isUndefined;
    MOV %r1 @c277;
    MOV %r2 "isUndefined";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isWeakMap;
    MOV %r1 @c277;
    MOV %r2 "isWeakMap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 isWeakSet;
    MOV %r1 @c277;
    MOV %r2 "isWeakSet";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 join;
    MOV %r1 @c277;
    MOV %r2 "join";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 kebabCase;
    MOV %r1 @c277;
    MOV %r2 "kebabCase";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c158;
    MOV %r1 @c277;
    MOV %r2 "last";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lastIndexOf;
    MOV %r1 @c277;
    MOV %r2 "lastIndexOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lowerCase;
    MOV %r1 @c277;
    MOV %r2 "lowerCase";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lowerFirst;
    MOV %r1 @c277;
    MOV %r2 "lowerFirst";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lt;
    MOV %r1 @c277;
    MOV %r2 "lt";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lte;
    MOV %r1 @c277;
    MOV %r2 "lte";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 max;
    MOV %r1 @c277;
    MOV %r2 "max";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 maxBy;
    MOV %r1 @c277;
    MOV %r2 "maxBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 mean;
    MOV %r1 @c277;
    MOV %r2 "mean";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 meanBy;
    MOV %r1 @c277;
    MOV %r2 "meanBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 min;
    MOV %r1 @c277;
    MOV %r2 "min";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 minBy;
    MOV %r1 @c277;
    MOV %r2 "minBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stubArray;
    MOV %r1 @c277;
    MOV %r2 "stubArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stubFalse;
    MOV %r1 @c277;
    MOV %r2 "stubFalse";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stubObject;
    MOV %r1 @c277;
    MOV %r2 "stubObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stubString;
    MOV %r1 @c277;
    MOV %r2 "stubString";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 stubTrue;
    MOV %r1 @c277;
    MOV %r2 "stubTrue";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 multiply;
    MOV %r1 @c277;
    MOV %r2 "multiply";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 nth;
    MOV %r1 @c277;
    MOV %r2 "nth";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 noConflict;
    MOV %r1 @c277;
    MOV %r2 "noConflict";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 noop;
    MOV %r1 @c277;
    MOV %r2 "noop";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c630;
    MOV %r1 @c277;
    MOV %r2 "now";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 pad;
    MOV %r1 @c277;
    MOV %r2 "pad";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 padEnd;
    MOV %r1 @c277;
    MOV %r2 "padEnd";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 padStart;
    MOV %r1 @c277;
    MOV %r2 "padStart";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 parseInt;
    MOV %r1 @c277;
    MOV %r2 "parseInt";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 random;
    MOV %r1 @c277;
    MOV %r2 "random";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 reduce;
    MOV %r1 @c277;
    MOV %r2 "reduce";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 reduceRight;
    MOV %r1 @c277;
    MOV %r2 "reduceRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 repeat;
    MOV %r1 @c277;
    MOV %r2 "repeat";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 replace;
    MOV %r1 @c277;
    MOV %r2 "replace";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV %r1 @c277;
    MOV %r2 "result";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 round;
    MOV %r1 @c277;
    MOV %r2 "round";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c43;
    MOV %r1 @c277;
    MOV %r2 "runInContext";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sample;
    MOV %r1 @c277;
    MOV %r2 "sample";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 size;
    MOV %r1 @c277;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 snakeCase;
    MOV %r1 @c277;
    MOV %r2 "snakeCase";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 some;
    MOV %r1 @c277;
    MOV %r2 "some";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedIndex;
    MOV %r1 @c277;
    MOV %r2 "sortedIndex";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedIndexBy;
    MOV %r1 @c277;
    MOV %r2 "sortedIndexBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedIndexOf;
    MOV %r1 @c277;
    MOV %r2 "sortedIndexOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedLastIndex;
    MOV %r1 @c277;
    MOV %r2 "sortedLastIndex";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedLastIndexBy;
    MOV %r1 @c277;
    MOV %r2 "sortedLastIndexBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sortedLastIndexOf;
    MOV %r1 @c277;
    MOV %r2 "sortedLastIndexOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 startCase;
    MOV %r1 @c277;
    MOV %r2 "startCase";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 startsWith;
    MOV %r1 @c277;
    MOV %r2 "startsWith";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 subtract;
    MOV %r1 @c277;
    MOV %r2 "subtract";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sum;
    MOV %r1 @c277;
    MOV %r2 "sum";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 sumBy;
    MOV %r1 @c277;
    MOV %r2 "sumBy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 template;
    MOV %r1 @c277;
    MOV %r2 "template";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 times;
    MOV %r1 @c277;
    MOV %r2 "times";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c398;
    MOV %r1 @c277;
    MOV %r2 "toFinite";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c140;
    MOV %r1 @c277;
    MOV %r2 "toInteger";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c141;
    MOV %r1 @c277;
    MOV %r2 "toLength";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toLower;
    MOV %r1 @c277;
    MOV %r2 "toLower";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c372;
    MOV %r1 @c277;
    MOV %r2 "toNumber";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toSafeInteger;
    MOV %r1 @c277;
    MOV %r2 "toSafeInteger";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c228;
    MOV %r1 @c277;
    MOV %r2 "toString";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 toUpper;
    MOV %r1 @c277;
    MOV %r2 "toUpper";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 trim;
    MOV %r1 @c277;
    MOV %r2 "trim";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 trimEnd;
    MOV %r1 @c277;
    MOV %r2 "trimEnd";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 trimStart;
    MOV %r1 @c277;
    MOV %r2 "trimStart";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 truncate;
    MOV %r1 @c277;
    MOV %r2 "truncate";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 unescape;
    MOV %r1 @c277;
    MOV %r2 "unescape";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 uniqueId;
    MOV %r1 @c277;
    MOV %r2 "uniqueId";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 upperCase;
    MOV %r1 @c277;
    MOV %r2 "upperCase";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c421;
    MOV %r1 @c277;
    MOV %r2 "upperFirst";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forEach;
    MOV %r1 @c277;
    MOV %r2 "each";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 forEachRight;
    MOV %r1 @c277;
    MOV %r2 "eachRight";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 head;
    MOV %r1 @c277;
    MOV %r2 "first";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r1 false;
    SET_KEY %r0 'chain' %r1;
    PUSH %r0;
    FUNC %r1 @@f564;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c277;
    PUSH %r0;
    CALL_REG mixin 3 false;
    MOV %r0 @c44;
    MOV %r1 @c277;
    MOV %r2 "VERSION";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f565;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r1 "bind";
    SET_KEY %r0 0 %r1;
    MOV %r1 "bindKey";
    SET_KEY %r0 1 %r1;
    MOV %r1 "curry";
    SET_KEY %r0 2 %r1;
    MOV %r1 "curryRight";
    SET_KEY %r0 3 %r1;
    MOV %r1 "partial";
    SET_KEY %r0 4 %r1;
    MOV %r1 "partialRight";
    SET_KEY %r0 5 %r1;
    PUSH %r0;
    CALL_REG @c45 2 false;
    FUNC %r0 @@f566;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r1 "drop";
    SET_KEY %r0 0 %r1;
    MOV %r1 "take";
    SET_KEY %r0 1 %r1;
    PUSH %r0;
    CALL_REG @c45 2 false;
    FUNC %r0 @@f567;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r1 "filter";
    SET_KEY %r0 0 %r1;
    MOV %r1 "map";
    SET_KEY %r0 1 %r1;
    MOV %r1 "takeWhile";
    SET_KEY %r0 2 %r1;
    PUSH %r0;
    CALL_REG @c45 2 false;
    FUNC %r0 @@f568;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r1 "head";
    SET_KEY %r0 0 %r1;
    MOV %r1 "last";
    SET_KEY %r0 1 %r1;
    PUSH %r0;
    CALL_REG @c45 2 false;
    FUNC %r0 @@f569;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r1 "initial";
    SET_KEY %r0 0 %r1;
    MOV %r1 "tail";
    SET_KEY %r0 1 %r1;
    PUSH %r0;
    CALL_REG @c45 2 false;
    FUNC %r0 @@f570;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "compact";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f571;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "find";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f572;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "findLast";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f573;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "invokeMap";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f574;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "reject";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f575;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "slice";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f576;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "takeRightWhile";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f577;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "toArray";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f578;
    PUSH %r0;
    MOV %r1 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c156 2 false;
    FUNC %r0 @@f579;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r1 "pop";
    SET_KEY %r0 0 %r1;
    MOV %r1 "push";
    SET_KEY %r0 1 %r1;
    MOV %r1 "shift";
    SET_KEY %r0 2 %r1;
    MOV %r1 "sort";
    SET_KEY %r0 3 %r1;
    MOV %r1 "splice";
    SET_KEY %r0 4 %r1;
    MOV %r1 "unshift";
    SET_KEY %r0 5 %r1;
    PUSH %r0;
    CALL_REG @c45 2 false;
    FUNC %r0 @@f580;
    PUSH %r0;
    MOV %r1 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c156 2 false;
    NEW_ARR %r0;
    NEW_OBJ %r1;
    MOV %r2 "wrapper";
    SET_KEY %r1 'name' %r2;
    MOV %r2 @c9;
    SET_KEY %r1 'func' %r2;
    SET_KEY %r0 0 %r1;
    MOV %r1 @c276;
    MOV %r4 @c46;
    PUSH %r4;
    MOV %r4 @c9;
    PUSH %r4;
    CALL_REG @c263 2 false;
    MOV %r1 $RET;
    MOV %r3 "name";
    MOV_PROP %r2 %r1 %r3;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lazyClone;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "clone";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lazyReverse;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "reverse";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 lazyValue;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "value";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrapperAt;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "at";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrapperChain;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "chain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrapperCommit;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "commit";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrapperNext;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "next";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrapperPlant;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "plant";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wrapperReverse;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "reverse";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 wrapperValue;
    MOV %r5 @c277;
    MOV %r4 "prototype";
    MOV_PROP %r3 %r5 %r4;
    MOV %r4 "value";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV %r4 @c277;
    MOV %r3 "prototype";
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 "valueOf";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "toJSON";
    SET_KEY %r1 %r2 %r0;
    MOV %r3 @c277;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "head";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "first";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c395;
    JF %r0 _l282_;
    MOV %r1 wrapperToIterator;
    MOV %r4 @c277;
    MOV %r3 "prototype";
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 @c395;
    SET_KEY %r2 %r3 %r1;
    JMP _l283_;
LABEL _l282_:
LABEL _l283_:
    MOV %r0 @c277;
    MOV $RET %r0;
    RET;
}
func @@f55() {
    VAR %r0;
    MOV %r0 @c24;
    MOV $RET %r0;
    RET;
}
func @@f56(value, key, collection) {
    VAR %r0;
    VAR %r1;
    MOV %r1 collection;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c47 3 false;
    MOV %r0 $RET;
    JF %r0 _l284_;
    MOV %r1 key;
    MOV @c48 %r1;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l285_;
LABEL _l284_:
LABEL _l285_:
}
func @@f57(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l286_;
    MOV %r0 @c9;
    JMP _l287_;
LABEL _l286_:
    MOV %r2 object;
    MOV %r3 @c49;
    MOV_PROP %r0 %r2 %r3;
LABEL _l287_:
    MOV $RET %r0;
    RET;
}
func @@f58(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c50;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l288_;
    MOV %r0 @c9;
    JMP _l289_;
LABEL _l288_:
    MOV %r2 @c50;
    MOV %r3 key;
    MOV_PROP %r0 %r2 %r3;
LABEL _l289_:
    MOV $RET %r0;
    RET;
}
func @@f59(value, index, collection) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c51;
    JF %r1 _l290_;
    MOV %r2 false;
    MOV @c51 %r2;
    MOV %r0 value;
    JMP _l291_;
LABEL _l290_:
    MOV %r2 collection;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 @c52;
    PUSH %r2;
    CALL_REG @c53 4 false;
    MOV %r0 $RET;
LABEL _l291_:
    MOV @c52 %r0;
}
func @@f60(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    NEW_ARR %r0;
    MOV %r1 key;
    SET_KEY %r0 0 %r1;
    MOV %r2 @c54;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    SET_KEY %r0 1 %r1;
    MOV $RET %r0;
    RET;
}
func @@f61(value) {
    VAR %r0;
    VAR %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c55 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f62(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c56;
    MOV %r2 key;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f63(value, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    NEW_ARR %r0;
    MOV %r1 key;
    SET_KEY %r0 0 %r1;
    MOV %r1 value;
    SET_KEY %r0 1 %r1;
    MOV %r1 @c57;
    MOV %r3 @c58;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV @c58 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f64(arg) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 arg;
    PUSH %r2;
    CALL_REG @c59 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c60 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f65(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 value;
    MOV %r1 @c61;
    MOV %r3 @c62;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV @c62 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f66(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    NEW_ARR %r0;
    MOV %r1 value;
    SET_KEY %r0 0 %r1;
    MOV %r1 value;
    SET_KEY %r0 1 %r1;
    MOV %r1 @c63;
    MOV %r3 @c64;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV @c64 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f67() {
    VAR uid;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r3 @c65;
    MOV %r2 %r3;
    JF %r3 _l294_;
    MOV %r5 @c65;
    MOV %r6 "keys";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l294_:
    MOV %r1 %r2;
    JF %r2 _l293_;
    MOV %r6 @c65;
    MOV %r7 "keys";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "IE_PROTO";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l293_:
    MOV %r0 %r1;
    JIF %r1 _l292_;
    MOV %r2 "";
    LG_OR %r0 %r2;
LABEL _l292_:
    PUSH %r0;
    NEW_REG %r0 "[^.]+$" "";
    MOV %r1 "exec";
    CALL_VAR %r0 %r1 1 false;
    MOV uid $RET;
    MOV %r1 uid;
    JF %r1 _l295_;
    MOV %r0 "Symbol(src)_1.";
    MOV %r2 uid;
    ADD %r0 %r2;
    JMP _l296_;
LABEL _l295_:
    MOV %r0 "";
LABEL _l296_:
    MOV $RET %r0;
    RET;
}
func @@f68() {
    VAR func;
    VAR %r0;
    TRY _l297_ _l298_;
    MOV %r0 "defineProperty";
    PUSH %r0;
    MOV %r0 @c66;
    PUSH %r0;
    CALL_REG @c67 2 false;
    MOV func $RET;
    NEW_OBJ %r0;
    PUSH %r0;
    MOV %r0 "";
    PUSH %r0;
    NEW_OBJ %r0;
    PUSH %r0;
    CALL_REG func 3 false;
    MOV %r0 func;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l297_:
LABEL _l298_:
}
func @@f69(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c68 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l302_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c69 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l302_:
    MOV %r0 %r1;
    JF %r1 _l301_;
    MOV %r2 value;
    MOV %r3 @c70;
    INST_OF %r2 %r3;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l301_:
    JF %r0 _l299_;
    MOV %r1 value;
    MOV %r2 @c71;
    INST_OF %r1 %r2;
    JF %r1 _l303_;
    MOV %r2 value;
    MOV $RET %r2;
    RET;
    JMP _l300_;
LABEL _l303_:
    MOV %r2 "__wrapped__";
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 @c72;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    JF %r1 _l304_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c73 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l300_;
LABEL _l304_:
    JMP _l300_;
LABEL _l299_:
LABEL _l300_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c71 1 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f70() {
    VAR @c467;
    ALLOC @c467;
    VAR %r0;
    FUNC @c467 @@f581;
    FUNC %r0 @@f582;
    MOV $RET %r0;
    RET;
}
func @@f71() {
}
func @@f72(value, chainAll) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 value;
    MOV_THIS %r1;
    MOV %r2 "__wrapped__";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "__actions__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 chainAll;
    NEG %r0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "__chain__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "__index__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c9;
    MOV_THIS %r1;
    MOV %r2 "__values__";
    SET_KEY %r1 %r2 %r0;
}
func @@f73(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 value;
    MOV_THIS %r1;
    MOV %r2 "__wrapped__";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "__actions__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    MOV_THIS %r1;
    MOV %r2 "__dir__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 false;
    MOV_THIS %r1;
    MOV %r2 "__filtered__";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "__iteratees__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c74;
    MOV_THIS %r1;
    MOV %r2 "__takeCount__";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "__views__";
    SET_KEY %r1 %r2 %r0;
}
func @@f74() {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r1;
    MOV %r2 "__wrapped__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c70 1 true;
    MOV result $RET;
    MOV_THIS %r2;
    MOV %r3 "__actions__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c75 1 false;
    MOV %r0 $RET;
    MOV %r1 result;
    MOV %r2 "__actions__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "__dir__";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "__dir__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "__filtered__";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "__filtered__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r2;
    MOV %r3 "__iteratees__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c75 1 false;
    MOV %r0 $RET;
    MOV %r1 result;
    MOV %r2 "__iteratees__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "__takeCount__";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "__takeCount__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r2;
    MOV %r3 "__views__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c75 1 false;
    MOV %r0 $RET;
    MOV %r1 result;
    MOV %r2 "__views__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f75() {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_THIS %r1;
    MOV %r2 "__filtered__";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l305_;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @c70 1 true;
    MOV result $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 result;
    MOV %r3 "__dir__";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 true;
    MOV %r2 result;
    MOV %r3 "__filtered__";
    SET_KEY %r2 %r3 %r1;
    JMP _l306_;
LABEL _l305_:
    MOV_THIS %r2;
    MOV %r3 "clone";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV result %r1;
    MOV %r1 1;
    MINUS %r1;
    MOV %r3 result;
    MOV %r4 "__dir__";
    MOV_PROP %r2 %r3 %r4;
    MUL %r2 %r1;
    MOV %r3 result;
    MOV %r4 "__dir__";
    SET_KEY %r3 %r4 %r2;
LABEL _l306_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f76() {
    VAR array;
    VAR dir;
    VAR isArr;
    VAR isRight;
    VAR arrLength;
    VAR view;
    VAR start;
    VAR end;
    VAR length;
    VAR index;
    VAR iteratees;
    VAR iterLength;
    VAR resIndex;
    VAR takeCount;
    VAR result;
    VAR iterIndex;
    VAR value;
    VAR data;
    VAR @c278;
    ALLOC @c278;
    VAR type;
    VAR computed;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV_THIS %r2;
    MOV %r1 "__wrapped__";
    MOV_PROP %r0 %r2 %r1;
    MOV %r1 "value";
    CALL_VAR %r0 %r1 0 false;
    MOV array $RET;
    MOV_THIS %r0;
    MOV %r1 "__dir__";
    MOV_PROP dir %r0 %r1;
    MOV %r0 array;
    PUSH %r0;
    CALL_REG @c69 1 false;
    MOV isArr $RET;
    MOV isRight dir;
    MOV %r0 0;
    LT isRight %r0;
    MOV %r0 isArr;
    JF %r0 _l307_;
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP arrLength %r1 %r2;
    JMP _l308_;
LABEL _l307_:
    MOV arrLength 0;
LABEL _l308_:
    MOV_THIS %r1;
    MOV %r2 "__views__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 arrLength;
    PUSH %r0;
    MOV %r0 0;
    PUSH %r0;
    CALL_REG @c76 3 false;
    MOV view $RET;
    MOV %r0 view;
    MOV %r1 "start";
    MOV_PROP start %r0 %r1;
    MOV %r0 view;
    MOV %r1 "end";
    MOV_PROP end %r0 %r1;
    MOV length end;
    MOV %r0 start;
    SUB length %r0;
    MOV %r0 isRight;
    JF %r0 _l309_;
    MOV index end;
    JMP _l310_;
LABEL _l309_:
    MOV index start;
    MOV %r1 1;
    SUB index %r1;
LABEL _l310_:
    MOV_THIS %r0;
    MOV %r1 "__iteratees__";
    MOV_PROP iteratees %r0 %r1;
    MOV %r0 iteratees;
    MOV %r1 "length";
    MOV_PROP iterLength %r0 %r1;
    MOV resIndex 0;
    MOV_THIS %r1;
    MOV %r2 "__takeCount__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c77 2 false;
    MOV takeCount $RET;
    MOV %r1 isArr;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l313_;
    MOV %r4 isRight;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l315_;
    MOV %r5 arrLength;
    MOV %r6 length;
    WEQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l315_:
    MOV %r2 %r3;
    JF %r3 _l314_;
    MOV %r4 takeCount;
    MOV %r5 length;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l314_:
    LG_OR %r0 %r2;
LABEL _l313_:
    JF %r0 _l311_;
    MOV_THIS %r3;
    MOV %r4 "__actions__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c78 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l312_;
LABEL _l311_:
LABEL _l312_:
    NEW_ARR result;
LABEL _l317_:
    MOV %r2 length;
    MOV %r1 %r2;
    SUB %r2 1;
    MOV length %r2;
    MOV %r0 %r1;
    JF %r1 _l321_;
    MOV %r2 resIndex;
    MOV %r3 takeCount;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l321_:
    JF %r0 _l316_;
LABEL _l320_:
    MOV %r1 dir;
    MOV %r2 index;
    ADD %r2 %r1;
    MOV index %r2;
    MOV iterIndex 1;
    MINUS iterIndex;
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
LABEL _l322_:
    MOV %r3 iterIndex;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV iterIndex %r3;
    MOV %r2 iterLength;
    LT %r1 %r2;
    JF %r1 _l323_;
LABEL _l325_:
    MOV %r2 iteratees;
    MOV %r3 iterIndex;
    MOV_PROP data %r2 %r3;
    MOV %r2 data;
    MOV %r3 "iteratee";
    MOV_PROP @c278 %r2 %r3;
    MOV %r2 data;
    MOV %r3 "type";
    MOV_PROP type %r2 %r3;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c278 1 false;
    MOV computed $RET;
    MOV %r2 type;
    MOV %r3 @c79;
    WEQ %r2 %r3;
    JF %r2 _l326_;
    MOV %r3 computed;
    MOV value %r3;
    JMP _l327_;
LABEL _l326_:
    MOV %r3 computed;
    NEG %r3;
    JF %r3 _l328_;
    MOV %r4 type;
    MOV %r5 @c80;
    WEQ %r4 %r5;
    JF %r4 _l329_;
    JMP _l317_;
    JMP _l327_;
LABEL _l329_:
    JMP _l316_;
    JMP _l327_;
LABEL _l328_:
LABEL _l327_:
    JMP _l322_;
LABEL _l323_:
    MOV %r1 value;
    MOV %r2 result;
    MOV %r4 resIndex;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV resIndex %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l317_;
LABEL _l316_:
LABEL _l316_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f77(entries) {
    VAR index;
    VAR length;
    VAR entry;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 entries;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l330_;
    MOV length 0;
    JMP _l331_;
LABEL _l330_:
    MOV %r1 entries;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l331_:
    MOV_THIS %r0;
    MOV %r1 "clear";
    CALL_VAR %r0 %r1 0 false;
LABEL _l332_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l333_;
LABEL _l335_:
    MOV %r1 entries;
    MOV %r2 index;
    MOV_PROP entry %r1 %r2;
    MOV %r2 entry;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 entry;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "set";
    CALL_VAR %r1 %r2 2 false;
    JMP _l332_;
LABEL _l333_:
}
func @@f78() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c81;
    JF %r1 _l336_;
    MOV %r2 null;
    PUSH %r2;
    CALL_REG @c81 1 false;
    MOV %r0 $RET;
    JMP _l337_;
LABEL _l336_:
    NEW_OBJ %r0;
LABEL _l337_:
    MOV_THIS %r1;
    MOV %r2 "__data__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
}
func @@f79(key) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 key;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV result %r0;
    JF %r0 _l338_;
    MOV_THIS %r4;
    MOV %r3 "__data__";
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 key;
    DEL %r2 %r3;
    LG_AND result %r1;
LABEL _l338_:
    MOV %r1 result;
    JF %r1 _l339_;
    MOV %r0 1;
    JMP _l340_;
LABEL _l339_:
    MOV %r0 0;
LABEL _l340_:
    MOV_THIS %r2;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 %r0;
    MOV_THIS %r2;
    MOV %r3 "size";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f80(key) {
    VAR data;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r0 @c81;
    JF %r0 _l341_;
    MOV %r1 data;
    MOV %r2 key;
    MOV_PROP result %r1 %r2;
    MOV %r2 result;
    MOV %r3 @c82;
    EQ %r2 %r3;
    JF %r2 _l343_;
    MOV %r1 @c9;
    JMP _l342_;
LABEL _l343_:
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l342_;
LABEL _l341_:
LABEL _l342_:
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 data;
    PUSH %r2;
    MOV %r2 @c72;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    JF %r1 _l344_;
    MOV %r2 data;
    MOV %r3 key;
    MOV_PROP %r0 %r2 %r3;
    JMP _l345_;
LABEL _l344_:
    MOV %r0 @c9;
LABEL _l345_:
    MOV $RET %r0;
    RET;
}
func @@f81(key) {
    VAR data;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r1 @c81;
    JF %r1 _l346_;
    MOV %r3 data;
    MOV %r4 key;
    MOV_PROP %r0 %r3 %r4;
    MOV %r2 @c9;
    NE %r0 %r2;
    JMP _l347_;
LABEL _l346_:
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 data;
    PUSH %r2;
    MOV %r2 @c72;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l347_:
    MOV $RET %r0;
    RET;
}
func @@f82(key, value) {
    VAR data;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r2 key;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "has";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l348_;
    MOV %r0 0;
    JMP _l349_;
LABEL _l348_:
    MOV %r0 1;
LABEL _l349_:
    MOV_THIS %r2;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV_THIS %r2;
    MOV %r3 "size";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 @c81;
    MOV %r1 %r2;
    JF %r2 _l352_;
    MOV %r3 value;
    MOV %r4 @c9;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l352_:
    JF %r1 _l350_;
    MOV %r0 @c82;
    JMP _l351_;
LABEL _l350_:
    MOV %r0 value;
LABEL _l351_:
    MOV %r1 data;
    MOV %r2 key;
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f83(entries) {
    VAR index;
    VAR length;
    VAR entry;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 entries;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l353_;
    MOV length 0;
    JMP _l354_;
LABEL _l353_:
    MOV %r1 entries;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l354_:
    MOV_THIS %r0;
    MOV %r1 "clear";
    CALL_VAR %r0 %r1 0 false;
LABEL _l355_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l356_;
LABEL _l358_:
    MOV %r1 entries;
    MOV %r2 index;
    MOV_PROP entry %r1 %r2;
    MOV %r2 entry;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 entry;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "set";
    CALL_VAR %r1 %r2 2 false;
    JMP _l355_;
LABEL _l356_:
}
func @@f84() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "__data__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
}
func @@f85(key) {
    VAR data;
    VAR index;
    VAR lastIndex;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 data;
    PUSH %r0;
    CALL_REG @c83 2 false;
    MOV index $RET;
    MOV %r0 index;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l359_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l360_;
LABEL _l359_:
LABEL _l360_:
    MOV %r1 data;
    MOV %r2 "length";
    MOV_PROP lastIndex %r1 %r2;
    MOV %r0 1;
    SUB lastIndex %r0;
    MOV %r0 index;
    MOV %r1 lastIndex;
    WEQ %r0 %r1;
    JF %r0 _l361_;
    MOV %r1 data;
    MOV %r2 "pop";
    CALL_VAR %r1 %r2 0 false;
    JMP _l362_;
LABEL _l361_:
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    MOV %r1 data;
    PUSH %r1;
    MOV %r1 @c84;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
LABEL _l362_:
    MOV_THIS %r1;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f86(key) {
    VAR data;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 data;
    PUSH %r0;
    CALL_REG @c83 2 false;
    MOV index $RET;
    MOV %r1 index;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l363_;
    MOV %r0 @c9;
    JMP _l364_;
LABEL _l363_:
    MOV %r4 data;
    MOV %r5 index;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    MOV_PROP %r0 %r2 %r3;
LABEL _l364_:
    MOV $RET %r0;
    RET;
}
func @@f87(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 key;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "__data__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c83 2 false;
    MOV %r0 $RET;
    MOV %r1 1;
    MINUS %r1;
    GT %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f88(key, value) {
    VAR data;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 data;
    PUSH %r0;
    CALL_REG @c83 2 false;
    MOV index $RET;
    MOV %r0 index;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l365_;
    MOV_THIS %r2;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV_THIS %r2;
    MOV %r3 "size";
    SET_KEY %r2 %r3 %r1;
    NEW_ARR %r1;
    MOV %r2 key;
    SET_KEY %r1 0 %r2;
    MOV %r2 value;
    SET_KEY %r1 1 %r2;
    PUSH %r1;
    MOV %r1 data;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l366_;
LABEL _l365_:
    MOV %r1 value;
    MOV %r4 data;
    MOV %r3 index;
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 1;
    SET_KEY %r2 %r3 %r1;
LABEL _l366_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f89(entries) {
    VAR index;
    VAR length;
    VAR entry;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 entries;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l367_;
    MOV length 0;
    JMP _l368_;
LABEL _l367_:
    MOV %r1 entries;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l368_:
    MOV_THIS %r0;
    MOV %r1 "clear";
    CALL_VAR %r0 %r1 0 false;
LABEL _l369_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l370_;
LABEL _l372_:
    MOV %r1 entries;
    MOV %r2 index;
    MOV_PROP entry %r1 %r2;
    MOV %r2 entry;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 entry;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "set";
    CALL_VAR %r1 %r2 2 false;
    JMP _l369_;
LABEL _l370_:
}
func @@f90() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    CALL_REG @c85 0 true;
    MOV %r1 $RET;
    SET_KEY %r0 'hash' %r1;
    MOV %r3 @c86;
    MOV %r2 %r3;
    JIF %r3 _l373_;
    MOV %r4 @c87;
    LG_OR %r2 %r4;
LABEL _l373_:
    CALL_REG %r2 0 true;
    MOV %r1 $RET;
    SET_KEY %r0 'map' %r1;
    CALL_REG @c85 0 true;
    MOV %r1 $RET;
    SET_KEY %r0 'string' %r1;
    MOV_THIS %r1;
    MOV %r2 "__data__";
    SET_KEY %r1 %r2 %r0;
}
func @@f91(key) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 key;
    PUSH %r0;
    MOV %r2 key;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    CALL_REG @c88 2 false;
    MOV %r0 $RET;
    MOV %r1 "delete";
    CALL_VAR %r0 %r1 1 false;
    MOV result $RET;
    MOV %r1 result;
    JF %r1 _l374_;
    MOV %r0 1;
    JMP _l375_;
LABEL _l374_:
    MOV %r0 0;
LABEL _l375_:
    MOV_THIS %r2;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 %r0;
    MOV_THIS %r2;
    MOV %r3 "size";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f92(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    MOV %r3 key;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @c88 2 false;
    MOV %r1 $RET;
    MOV %r2 "get";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f93(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    MOV %r3 key;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @c88 2 false;
    MOV %r1 $RET;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f94(key, value) {
    VAR data;
    VAR size;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 key;
    PUSH %r0;
    MOV_THIS %r0;
    PUSH %r0;
    CALL_REG @c88 2 false;
    MOV data $RET;
    MOV %r0 data;
    MOV %r1 "size";
    MOV_PROP size %r0 %r1;
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 data;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV %r3 data;
    MOV %r4 "size";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 size;
    WEQ %r1 %r2;
    JF %r1 _l376_;
    MOV %r0 0;
    JMP _l377_;
LABEL _l376_:
    MOV %r0 1;
LABEL _l377_:
    MOV_THIS %r2;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV_THIS %r2;
    MOV %r3 "size";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f95(values) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 @c213;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l378_;
    MOV length 0;
    JMP _l379_;
LABEL _l378_:
    MOV %r1 @c213;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l379_:
    CALL_REG @c89 0 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "__data__";
    SET_KEY %r1 %r2 %r0;
LABEL _l380_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l381_;
LABEL _l383_:
    MOV %r2 @c213;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "add";
    CALL_VAR %r1 %r2 1 false;
    JMP _l380_;
LABEL _l381_:
}
func @@f96(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c82;
    PUSH %r0;
    MOV %r0 value;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r1 "__data__";
    MOV_PROP %r0 %r2 %r1;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f97(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r2 "__data__";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f98(entries) {
    VAR data;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 entries;
    PUSH %r1;
    CALL_REG @c87 1 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "__data__";
    SET_KEY %r1 %r2 %r0;
    MOV data %r0;
    MOV %r1 data;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
}
func @@f99() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    CALL_REG @c87 0 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "__data__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
}
func @@f100(key) {
    VAR data;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 data;
    MOV %r1 "delete";
    CALL_VAR %r0 %r1 1 false;
    MOV result $RET;
    MOV %r1 data;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f101(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r2 "__data__";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "get";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f102(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r2 "__data__";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f103(key, value) {
    VAR data;
    VAR pairs;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV_THIS %r0;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r0 data;
    MOV %r1 @c87;
    INST_OF %r0 %r1;
    JF %r0 _l384_;
    MOV %r1 data;
    MOV %r2 "__data__";
    MOV_PROP pairs %r1 %r2;
    MOV %r2 @c86;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l387_;
    MOV %r5 pairs;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 @c90;
    MOV %r5 1;
    SUB %r4 %r5;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l387_:
    JF %r1 _l386_;
    NEW_ARR %r2;
    MOV %r3 key;
    SET_KEY %r2 0 %r3;
    MOV %r3 value;
    SET_KEY %r2 1 %r3;
    PUSH %r2;
    MOV %r2 pairs;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r4 data;
    MOV %r5 "size";
    MOV_PROP %r3 %r4 %r5;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV %r4 data;
    MOV %r5 "size";
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r3;
    MOV %r4 "size";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r2;
    MOV $RET %r2;
    RET;
    JMP _l385_;
LABEL _l386_:
    MOV %r3 pairs;
    PUSH %r3;
    CALL_REG @c89 1 true;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "__data__";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV data %r1;
    JMP _l385_;
LABEL _l384_:
LABEL _l385_:
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 data;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 data;
    MOV %r2 "size";
    MOV_PROP %r0 %r1 %r2;
    MOV_THIS %r1;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f104(value, inherited) {
    VAR isArr;
    VAR isArg;
    VAR isBuff;
    VAR isType;
    VAR skipIndexes;
    VAR result;
    VAR length;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    VAR %r13;
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c69 1 false;
    MOV isArr $RET;
    MOV %r0 isArr;
    NEG %r0;
    MOV isArg %r0;
    JF %r0 _l388_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c91 1 false;
    MOV %r1 $RET;
    LG_AND isArg %r1;
LABEL _l388_:
    MOV %r1 isArr;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l390_;
    MOV %r2 isArg;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l390_:
    MOV isBuff %r0;
    JF %r0 _l389_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c92 1 false;
    MOV %r1 $RET;
    LG_AND isBuff %r1;
LABEL _l389_:
    MOV %r2 isArr;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l393_;
    MOV %r3 isArg;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l393_:
    MOV %r0 %r1;
    JF %r1 _l392_;
    MOV %r2 isBuff;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l392_:
    MOV isType %r0;
    JF %r0 _l391_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c93 1 false;
    MOV %r1 $RET;
    LG_AND isType %r1;
LABEL _l391_:
    MOV %r2 isArr;
    MOV %r1 %r2;
    JIF %r2 _l396_;
    MOV %r3 isArg;
    LG_OR %r1 %r3;
LABEL _l396_:
    MOV %r0 %r1;
    JIF %r1 _l395_;
    MOV %r2 isBuff;
    LG_OR %r0 %r2;
LABEL _l395_:
    MOV skipIndexes %r0;
    JIF %r0 _l394_;
    MOV %r1 isType;
    LG_OR skipIndexes %r1;
LABEL _l394_:
    MOV %r0 skipIndexes;
    JF %r0 _l397_;
    MOV %r1 @c94;
    PUSH %r1;
    MOV %r2 value;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c95 2 false;
    MOV result $RET;
    JMP _l398_;
LABEL _l397_:
    NEW_ARR result;
LABEL _l398_:
    MOV %r0 result;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r2 inherited;
    MOV %r1 %r2;
    JIF %r2 _l402_;
    MOV %r4 key;
    PUSH %r4;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 @c72;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l402_:
    MOV %r0 %r1;
    JF %r1 _l401_;
    MOV %r3 skipIndexes;
    MOV %r2 %r3;
    JF %r3 _l403_;
    MOV %r7 key;
    MOV %r8 "length";
    WEQ %r7 %r8;
    MOV %r6 %r7;
    JIF %r7 _l406_;
    MOV %r9 isBuff;
    MOV %r8 %r9;
    JF %r9 _l407_;
    MOV %r11 key;
    MOV %r12 "offset";
    WEQ %r11 %r12;
    MOV %r10 %r11;
    JIF %r11 _l408_;
    MOV %r12 key;
    MOV %r13 "parent";
    WEQ %r12 %r13;
    LG_OR %r10 %r12;
LABEL _l408_:
    LG_AND %r8 %r10;
LABEL _l407_:
    LG_OR %r6 %r8;
LABEL _l406_:
    MOV %r5 %r6;
    JIF %r6 _l405_;
    MOV %r8 isType;
    MOV %r7 %r8;
    JF %r8 _l409_;
    MOV %r11 key;
    MOV %r12 "buffer";
    WEQ %r11 %r12;
    MOV %r10 %r11;
    JIF %r11 _l411_;
    MOV %r12 key;
    MOV %r13 "byteLength";
    WEQ %r12 %r13;
    LG_OR %r10 %r12;
LABEL _l411_:
    MOV %r9 %r10;
    JIF %r10 _l410_;
    MOV %r11 key;
    MOV %r12 "byteOffset";
    WEQ %r11 %r12;
    LG_OR %r9 %r11;
LABEL _l410_:
    LG_AND %r7 %r9;
LABEL _l409_:
    LG_OR %r5 %r7;
LABEL _l405_:
    MOV %r4 %r5;
    JIF %r5 _l404_;
    MOV %r7 length;
    PUSH %r7;
    MOV %r7 key;
    PUSH %r7;
    CALL_REG @c96 2 false;
    MOV %r6 $RET;
    LG_OR %r4 %r6;
LABEL _l404_:
    LG_AND %r2 %r4;
LABEL _l403_:
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l401_:
    JF %r0 _l399_;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l400_;
LABEL _l399_:
LABEL _l400_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f105(array) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r1 length;
    JF %r1 _l412_;
    MOV %r2 array;
    MOV %r4 length;
    MOV %r5 1;
    SUB %r4 %r5;
    PUSH %r4;
    MOV %r4 0;
    PUSH %r4;
    CALL_REG @c97 2 false;
    MOV %r3 $RET;
    MOV_PROP %r0 %r2 %r3;
    JMP _l413_;
LABEL _l412_:
    MOV %r0 @c9;
LABEL _l413_:
    MOV $RET %r0;
    RET;
}
func @@f106(array, n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c98 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c75 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c99 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f107(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c75 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c99 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f108(object, key, value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r2 value;
    MOV %r3 @c9;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l417_;
    MOV %r4 value;
    PUSH %r4;
    MOV %r5 object;
    MOV %r6 key;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c100 2 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l417_:
    MOV %r0 %r1;
    JIF %r1 _l416_;
    MOV %r3 value;
    MOV %r4 @c9;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l418_;
    MOV %r4 key;
    MOV %r5 object;
    IN %r4 %r5;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l418_:
    LG_OR %r0 %r2;
LABEL _l416_:
    JF %r0 _l414_;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c101 3 false;
    JMP _l415_;
LABEL _l414_:
LABEL _l415_:
}
func @@f109(object, key, value) {
    VAR objValue;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 object;
    MOV %r1 key;
    MOV_PROP objValue %r0 %r1;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 @c72;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l422_;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 objValue;
    PUSH %r4;
    CALL_REG @c100 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l422_:
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l421_;
    MOV %r3 value;
    MOV %r4 @c9;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l423_;
    MOV %r4 key;
    MOV %r5 object;
    IN %r4 %r5;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l423_:
    LG_OR %r0 %r2;
LABEL _l421_:
    JF %r0 _l419_;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c101 3 false;
    JMP _l420_;
LABEL _l419_:
LABEL _l420_:
}
func @@f110(array, key) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l424_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l425_;
LABEL _l427_:
    MOV %r2 key;
    PUSH %r2;
    MOV %r5 array;
    MOV %r6 length;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c100 2 false;
    MOV %r1 $RET;
    JF %r1 _l428_;
    MOV %r2 length;
    MOV $RET %r2;
    RET;
    JMP _l429_;
LABEL _l428_:
LABEL _l429_:
    JMP _l424_;
LABEL _l425_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f111(collection, setter, iteratee, accumulator) {
    VAR %r0;
    ALLOC @c470;
    MOV @c470 setter;
    ALLOC @c468;
    MOV @c468 iteratee;
    ALLOC @c469;
    MOV @c469 accumulator;
    FUNC %r0 @@f583;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c102 2 false;
    MOV %r0 @c469;
    MOV $RET %r0;
    RET;
}
func @@f112(object, source) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r0 %r1;
    JF %r1 _l430_;
    MOV %r3 object;
    PUSH %r3;
    MOV %r4 source;
    PUSH %r4;
    CALL_REG @c103 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 source;
    PUSH %r3;
    CALL_REG @c104 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l430_:
    MOV $RET %r0;
    RET;
}
func @@f113(object, source) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r0 %r1;
    JF %r1 _l431_;
    MOV %r3 object;
    PUSH %r3;
    MOV %r4 source;
    PUSH %r4;
    CALL_REG @c105 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 source;
    PUSH %r3;
    CALL_REG @c104 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l431_:
    MOV $RET %r0;
    RET;
}
func @@f114(object, key, value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    MOV %r2 "__proto__";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l434_;
    MOV %r2 @c106;
    LG_AND %r0 %r2;
LABEL _l434_:
    JF %r0 _l432_;
    NEW_OBJ %r1;
    MOV %r2 true;
    SET_KEY %r1 'configurable' %r2;
    MOV %r2 true;
    SET_KEY %r1 'enumerable' %r2;
    MOV %r2 value;
    SET_KEY %r1 'value' %r2;
    MOV %r2 true;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c106 3 false;
    JMP _l433_;
LABEL _l432_:
    MOV %r1 value;
    MOV %r2 object;
    MOV %r3 key;
    SET_KEY %r2 %r3 %r1;
LABEL _l433_:
}
func @@f115(object, paths) {
    VAR index;
    VAR length;
    VAR result;
    VAR skip;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 paths;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
    MOV skip object;
    MOV %r0 null;
    WEQ skip %r0;
LABEL _l435_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l436_;
LABEL _l438_:
    MOV %r2 skip;
    JF %r2 _l439_;
    MOV %r1 @c9;
    JMP _l440_;
LABEL _l439_:
    MOV %r4 paths;
    MOV %r5 index;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c108 2 false;
    MOV %r1 $RET;
LABEL _l440_:
    MOV %r2 result;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l435_;
LABEL _l436_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f116(number, lower, upper) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 number;
    MOV %r1 number;
    EQ %r0 %r1;
    JF %r0 _l441_;
    MOV %r1 upper;
    MOV %r2 @c9;
    NE %r1 %r2;
    JF %r1 _l443_;
    MOV %r3 number;
    MOV %r4 upper;
    LE %r3 %r4;
    JF %r3 _l444_;
    MOV %r2 number;
    JMP _l442_;
LABEL _l444_:
    MOV %r2 upper;
    MOV number %r2;
    JMP _l442_;
LABEL _l443_:
    MOV %r1 lower;
    MOV %r2 @c9;
    NE %r1 %r2;
    JF %r1 _l445_;
    MOV %r3 number;
    MOV %r4 lower;
    GE %r3 %r4;
    JF %r3 _l446_;
    MOV %r2 number;
    JMP _l442_;
LABEL _l446_:
    MOV %r2 lower;
    MOV number %r2;
    JMP _l442_;
LABEL _l445_:
    JMP _l442_;
LABEL _l441_:
LABEL _l442_:
    MOV %r0 number;
    MOV $RET %r0;
    RET;
}
func @@f117(value, bitmask, customizer, key, object, stack) {
    VAR @c475;
    ALLOC @c475;
    VAR isDeep;
    VAR isFlat;
    VAR isFull;
    VAR isArr;
    VAR tag;
    VAR isFunc;
    VAR stacked;
    VAR keysFunc;
    VAR @c476;
    ALLOC @c476;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    ALLOC @c472;
    MOV @c472 value;
    ALLOC @c474;
    MOV @c474 bitmask;
    ALLOC @c473;
    MOV @c473 customizer;
    ALLOC @c471;
    MOV @c471 stack;
    MOV isDeep @c474;
    MOV %r0 @c109;
    AND isDeep %r0;
    MOV isFlat @c474;
    MOV %r0 @c110;
    AND isFlat %r0;
    MOV isFull @c474;
    MOV %r0 @c111;
    AND isFull %r0;
    MOV %r0 @c473;
    JF %r0 _l447_;
    MOV %r2 object;
    JF %r2 _l449_;
    MOV %r3 @c471;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 @c472;
    PUSH %r3;
    CALL_REG @c473 4 false;
    MOV %r1 $RET;
    JMP _l448_;
LABEL _l449_:
    MOV %r3 @c472;
    PUSH %r3;
    CALL_REG @c473 1 false;
    MOV %r1 $RET;
    MOV @c475 %r1;
    JMP _l448_;
LABEL _l447_:
LABEL _l448_:
    MOV %r0 @c475;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l450_;
    MOV %r1 @c475;
    MOV $RET %r1;
    RET;
    JMP _l451_;
LABEL _l450_:
LABEL _l451_:
    MOV %r1 @c472;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l452_;
    MOV %r1 @c472;
    MOV $RET %r1;
    RET;
    JMP _l453_;
LABEL _l452_:
LABEL _l453_:
    MOV %r0 @c472;
    PUSH %r0;
    CALL_REG @c69 1 false;
    MOV isArr $RET;
    MOV %r0 isArr;
    JF %r0 _l454_;
    MOV %r2 @c472;
    PUSH %r2;
    CALL_REG @c113 1 false;
    MOV %r1 $RET;
    MOV @c475 %r1;
    MOV %r1 isDeep;
    NEG %r1;
    JF %r1 _l456_;
    MOV %r3 @c475;
    PUSH %r3;
    MOV %r3 @c472;
    PUSH %r3;
    CALL_REG @c75 2 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l455_;
LABEL _l456_:
    JMP _l455_;
LABEL _l454_:
    MOV %r1 @c472;
    PUSH %r1;
    CALL_REG @c114 1 false;
    MOV tag $RET;
    MOV %r1 tag;
    MOV %r2 @c115;
    WEQ %r1 %r2;
    MOV isFunc %r1;
    JIF %r1 _l457_;
    MOV %r2 tag;
    MOV %r3 @c116;
    WEQ %r2 %r3;
    LG_OR isFunc %r2;
LABEL _l457_:
    MOV %r2 @c472;
    PUSH %r2;
    CALL_REG @c92 1 false;
    MOV %r1 $RET;
    JF %r1 _l458_;
    MOV %r3 isDeep;
    PUSH %r3;
    MOV %r3 @c472;
    PUSH %r3;
    CALL_REG @c117 2 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l455_;
LABEL _l458_:
    MOV %r3 tag;
    MOV %r4 @c118;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l461_;
    MOV %r4 tag;
    MOV %r5 @c119;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l461_:
    MOV %r1 %r2;
    JIF %r2 _l460_;
    MOV %r4 isFunc;
    MOV %r3 %r4;
    JF %r4 _l462_;
    MOV %r5 object;
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l462_:
    LG_OR %r1 %r3;
LABEL _l460_:
    JF %r1 _l459_;
    MOV %r4 isFlat;
    MOV %r3 %r4;
    JIF %r4 _l464_;
    MOV %r5 isFunc;
    LG_OR %r3 %r5;
LABEL _l464_:
    JF %r3 _l463_;
    NEW_OBJ %r2;
    JMP _l455_;
LABEL _l463_:
    MOV %r4 @c472;
    PUSH %r4;
    CALL_REG @c120 1 false;
    MOV %r2 $RET;
    MOV @c475 %r2;
    MOV %r2 isDeep;
    NEG %r2;
    JF %r2 _l465_;
    MOV %r4 isFlat;
    JF %r4 _l466_;
    MOV %r6 @c472;
    PUSH %r6;
    MOV %r6 @c475;
    PUSH %r6;
    CALL_REG @c121 2 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @c472;
    PUSH %r5;
    CALL_REG @c122 2 false;
    MOV %r3 $RET;
    JMP _l455_;
LABEL _l466_:
    MOV %r6 @c472;
    PUSH %r6;
    MOV %r6 @c475;
    PUSH %r6;
    CALL_REG @c123 2 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @c472;
    PUSH %r5;
    CALL_REG @c124 2 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l455_;
LABEL _l465_:
    JMP _l455_;
LABEL _l459_:
    MOV %r3 @c125;
    MOV %r4 tag;
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    JF %r2 _l467_;
    MOV %r4 object;
    JF %r4 _l468_;
    MOV %r3 @c472;
    JMP _l455_;
LABEL _l468_:
    NEW_OBJ %r3;
    MOV $RET %r3;
    RET;
    JMP _l455_;
LABEL _l467_:
    MOV %r3 isDeep;
    PUSH %r3;
    MOV %r3 tag;
    PUSH %r3;
    MOV %r3 @c472;
    PUSH %r3;
    CALL_REG @c126 3 false;
    MOV %r2 $RET;
    MOV @c475 %r2;
LABEL _l455_:
    MOV %r0 @c471;
    JIF %r0 _l469_;
    CALL_REG @c127 0 true;
    MOV %r2 $RET;
    MOV @c471 %r2;
    MOV %r1 %r2;
LABEL _l469_:
    MOV %r0 @c472;
    PUSH %r0;
    MOV %r0 @c471;
    MOV %r1 "get";
    CALL_VAR %r0 %r1 1 false;
    MOV stacked $RET;
    MOV %r0 stacked;
    JF %r0 _l470_;
    MOV %r1 stacked;
    MOV $RET %r1;
    RET;
    JMP _l471_;
LABEL _l470_:
LABEL _l471_:
    MOV %r0 @c475;
    PUSH %r0;
    MOV %r0 @c472;
    PUSH %r0;
    MOV %r0 @c471;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 @c472;
    PUSH %r1;
    CALL_REG @c128 1 false;
    MOV %r0 $RET;
    JF %r0 _l472_;
    FUNC %r1 @@f584;
    PUSH %r1;
    MOV %r1 @c472;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 @c475;
    MOV $RET %r1;
    RET;
    JMP _l473_;
LABEL _l472_:
LABEL _l473_:
    MOV %r1 @c472;
    PUSH %r1;
    CALL_REG @c129 1 false;
    MOV %r0 $RET;
    JF %r0 _l474_;
    FUNC %r1 @@f585;
    PUSH %r1;
    MOV %r1 @c472;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 @c475;
    MOV $RET %r1;
    RET;
    JMP _l475_;
LABEL _l474_:
LABEL _l475_:
    MOV %r0 isFull;
    JF %r0 _l476_;
    MOV %r1 isFlat;
    JF %r1 _l478_;
    MOV keysFunc @c130;
    JMP _l477_;
LABEL _l478_:
    MOV keysFunc @c131;
    JMP _l477_;
LABEL _l476_:
    MOV %r1 isFlat;
    JF %r1 _l479_;
    MOV keysFunc @c105;
    JMP _l477_;
LABEL _l479_:
    MOV keysFunc @c103;
LABEL _l477_:
    MOV %r0 isArr;
    JF %r0 _l480_;
    MOV @c476 @c9;
    JMP _l481_;
LABEL _l480_:
    MOV %r1 @c472;
    PUSH %r1;
    CALL_REG keysFunc 1 false;
    MOV @c476 $RET;
LABEL _l481_:
    FUNC %r0 @@f586;
    PUSH %r0;
    MOV %r1 @c476;
    MOV %r0 %r1;
    JIF %r1 _l482_;
    MOV %r2 @c472;
    LG_OR %r0 %r2;
LABEL _l482_:
    PUSH %r0;
    CALL_REG @c45 2 false;
    MOV %r0 @c475;
    MOV $RET %r0;
    RET;
}
func @@f118(source) {
    VAR @c477;
    ALLOC @c477;
    VAR %r0;
    ALLOC @c478;
    MOV @c478 source;
    MOV %r0 @c478;
    PUSH %r0;
    CALL_REG @c103 1 false;
    MOV @c477 $RET;
    FUNC %r0 @@f587;
    MOV $RET %r0;
    RET;
}
func @@f119(object, source, props) {
    VAR length;
    VAR key;
    VAR predicate;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 props;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 object;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l483_;
    MOV %r1 length;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l484_;
LABEL _l483_:
LABEL _l484_:
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c66 1 false;
    MOV %r0 $RET;
    MOV object %r0;
LABEL _l485_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l486_;
LABEL _l488_:
    MOV %r1 props;
    MOV %r2 length;
    MOV_PROP key %r1 %r2;
    MOV %r1 source;
    MOV %r2 key;
    MOV_PROP predicate %r1 %r2;
    MOV %r1 object;
    MOV %r2 key;
    MOV_PROP value %r1 %r2;
    MOV %r3 value;
    MOV %r4 @c9;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l492_;
    MOV %r4 key;
    MOV %r5 object;
    IN %r4 %r5;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l492_:
    MOV %r1 %r2;
    JIF %r2 _l491_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG predicate 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l491_:
    JF %r1 _l489_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l490_;
LABEL _l489_:
LABEL _l490_:
    JMP _l485_;
LABEL _l486_:
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f120(func, wait, args) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c480;
    MOV @c480 func;
    ALLOC @c479;
    MOV @c479 args;
    MOV %r0 @c480;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l493_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l494_;
LABEL _l493_:
LABEL _l494_:
    MOV %r1 wait;
    PUSH %r1;
    FUNC %r1 @@f588;
    PUSH %r1;
    CALL_REG @c134 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f121(array, values, iteratee, comparator) {
    VAR index;
    VAR includes;
    VAR isCommon;
    VAR length;
    VAR result;
    VAR valuesLength;
    VAR value;
    VAR computed;
    VAR valuesIndex;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV index 1;
    MINUS index;
    MOV includes @c135;
    MOV isCommon true;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    NEW_ARR result;
    MOV %r0 @c213;
    MOV %r1 "length";
    MOV_PROP valuesLength %r0 %r1;
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l495_;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l496_;
LABEL _l495_:
LABEL _l496_:
    MOV %r0 @c278;
    JF %r0 _l497_;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c35 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @c213;
    PUSH %r2;
    CALL_REG @c10 2 false;
    MOV %r1 $RET;
    MOV @c213 %r1;
    JMP _l498_;
LABEL _l497_:
LABEL _l498_:
    MOV %r0 comparator;
    JF %r0 _l499_;
    MOV %r1 @c136;
    MOV includes %r1;
    MOV %r1 false;
    MOV isCommon %r1;
    JMP _l500_;
LABEL _l499_:
    MOV %r3 @c213;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 @c90;
    GE %r1 %r2;
    JF %r1 _l501_;
    MOV %r2 @c137;
    MOV includes %r2;
    MOV %r2 false;
    MOV isCommon %r2;
    MOV %r3 @c213;
    PUSH %r3;
    CALL_REG @c138 1 true;
    MOV %r2 $RET;
    MOV @c213 %r2;
    JMP _l500_;
LABEL _l501_:
LABEL _l500_:
LABEL _l503_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l502_;
LABEL _l506_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 @c278;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l507_;
    MOV computed value;
    JMP _l508_;
LABEL _l507_:
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c278 1 false;
    MOV computed $RET;
LABEL _l508_:
    MOV %r3 comparator;
    MOV %r2 %r3;
    JIF %r3 _l511_;
    MOV %r4 value;
    MOV %r5 0;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l511_:
    JF %r2 _l509_;
    MOV %r1 value;
    JMP _l510_;
LABEL _l509_:
    MOV %r1 0;
LABEL _l510_:
    MOV value %r1;
    MOV %r2 isCommon;
    MOV %r1 %r2;
    JF %r2 _l514_;
    MOV %r3 computed;
    MOV %r4 computed;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l514_:
    JF %r1 _l512_;
    MOV valuesIndex valuesLength;
LABEL _l515_:
    MOV %r3 valuesIndex;
    MOV %r2 %r3;
    SUB %r3 1;
    MOV valuesIndex %r3;
    JF %r2 _l516_;
LABEL _l518_:
    MOV %r5 @c213;
    MOV %r6 valuesIndex;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 computed;
    EQ %r3 %r4;
    JF %r3 _l519_;
    JMP _l503_;
    JMP _l513_;
LABEL _l519_:
    JMP _l515_;
LABEL _l516_:
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l513_;
LABEL _l512_:
    MOV %r3 comparator;
    PUSH %r3;
    MOV %r3 computed;
    PUSH %r3;
    MOV %r3 @c213;
    PUSH %r3;
    CALL_REG includes 3 false;
    MOV %r2 $RET;
    NEG %r2;
    JF %r2 _l520_;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 result;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l513_;
LABEL _l520_:
LABEL _l513_:
    JMP _l503_;
LABEL _l502_:
LABEL _l502_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f122(collection, predicate) {
    VAR @c482;
    ALLOC @c482;
    VAR %r0;
    ALLOC @c481;
    MOV @c481 predicate;
    MOV @c482 true;
    FUNC %r0 @@f589;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c102 2 false;
    MOV %r0 @c482;
    MOV $RET %r0;
    RET;
}
func @@f123(array, iteratee, comparator) {
    VAR index;
    VAR length;
    VAR value;
    VAR current;
    VAR computed;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l521_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l522_;
LABEL _l524_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c278 1 false;
    MOV current $RET;
    MOV %r2 current;
    MOV %r3 null;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l527_;
    MOV %r4 computed;
    MOV %r5 @c9;
    EQ %r4 %r5;
    JF %r4 _l528_;
    MOV %r5 current;
    MOV %r6 current;
    EQ %r5 %r6;
    MOV %r3 %r5;
    JF %r5 _l529_;
    MOV %r7 current;
    PUSH %r7;
    CALL_REG @c139 1 false;
    MOV %r6 $RET;
    NEG %r6;
    LG_AND %r3 %r6;
LABEL _l529_:
    JMP _l526_;
LABEL _l528_:
    MOV %r5 computed;
    PUSH %r5;
    MOV %r5 current;
    PUSH %r5;
    CALL_REG comparator 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l527_:
    JF %r1 _l525_;
    MOV computed current;
    MOV result value;
    JMP _l526_;
LABEL _l525_:
LABEL _l526_:
    JMP _l521_;
LABEL _l522_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f124(array, value, start, end) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r1 start;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV start %r0;
    MOV %r0 start;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l530_;
    MOV %r2 start;
    MINUS %r2;
    MOV %r3 length;
    GT %r2 %r3;
    JF %r2 _l532_;
    MOV %r1 0;
    JMP _l531_;
LABEL _l532_:
    MOV %r1 length;
    MOV %r3 start;
    ADD %r1 %r3;
    MOV start %r1;
    JMP _l531_;
LABEL _l530_:
LABEL _l531_:
    MOV %r2 end;
    MOV %r3 @c9;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l535_;
    MOV %r3 end;
    MOV %r4 length;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l535_:
    JF %r1 _l533_;
    MOV %r0 length;
    JMP _l534_;
LABEL _l533_:
    MOV %r2 end;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l534_:
    MOV end %r0;
    MOV %r0 end;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l536_;
    MOV %r1 length;
    MOV %r2 end;
    ADD %r2 %r1;
    MOV end %r2;
    JMP _l537_;
LABEL _l536_:
LABEL _l537_:
    MOV %r1 start;
    MOV %r2 end;
    GT %r1 %r2;
    JF %r1 _l538_;
    MOV %r0 0;
    JMP _l539_;
LABEL _l538_:
    MOV %r2 end;
    PUSH %r2;
    CALL_REG @c141 1 false;
    MOV %r0 $RET;
LABEL _l539_:
    MOV end %r0;
LABEL _l540_:
    MOV %r0 start;
    MOV %r1 end;
    LT %r0 %r1;
    JF %r0 _l541_;
LABEL _l543_:
    MOV %r1 value;
    MOV %r2 array;
    MOV %r4 start;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV start %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l540_;
LABEL _l541_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f125(collection, predicate) {
    VAR @c484;
    ALLOC @c484;
    VAR %r0;
    ALLOC @c483;
    MOV @c483 predicate;
    NEW_ARR @c484;
    FUNC %r0 @@f590;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c102 2 false;
    MOV %r0 @c484;
    MOV $RET %r0;
    RET;
}
func @@f126(array, depth, predicate, isStrict, result) {
    VAR index;
    VAR length;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 predicate;
    JIF %r0 _l544_;
    MOV %r2 @c142;
    MOV predicate %r2;
    MOV %r1 %r2;
LABEL _l544_:
    MOV %r0 result;
    JIF %r0 _l545_;
    NEW_ARR %r2;
    MOV result %r2;
    MOV %r1 %r2;
LABEL _l545_:
LABEL _l546_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l547_;
LABEL _l549_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r2 depth;
    MOV %r3 0;
    GT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l552_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG predicate 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l552_:
    JF %r1 _l550_;
    MOV %r2 depth;
    MOV %r3 1;
    GT %r2 %r3;
    JF %r2 _l553_;
    MOV %r3 result;
    PUSH %r3;
    MOV %r3 isStrict;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    MOV %r3 depth;
    MOV %r4 1;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c143 5 false;
    JMP _l551_;
LABEL _l553_:
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 result;
    PUSH %r3;
    CALL_REG @c144 2 false;
    JMP _l551_;
LABEL _l550_:
    MOV %r2 isStrict;
    NEG %r2;
    JF %r2 _l554_;
    MOV %r3 value;
    MOV %r4 result;
    MOV %r4 result;
    MOV %r6 "length";
    MOV_PROP %r5 %r4 %r6;
    SET_KEY %r4 %r5 %r3;
    JMP _l551_;
LABEL _l554_:
LABEL _l551_:
    JMP _l546_;
LABEL _l547_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f127(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r0 %r1;
    JF %r1 _l555_;
    MOV %r3 @c103;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c145 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l555_:
    MOV $RET %r0;
    RET;
}
func @@f128(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r0 %r1;
    JF %r1 _l556_;
    MOV %r3 @c103;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c146 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l556_:
    MOV $RET %r0;
    RET;
}
func @@f129(object, props) {
    VAR %r0;
    VAR %r1;
    ALLOC @c485;
    MOV @c485 object;
    FUNC %r1 @@f591;
    PUSH %r1;
    MOV %r1 props;
    PUSH %r1;
    CALL_REG @c147 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f130(object, path) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV index 0;
    MOV %r0 path;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l557_:
    MOV %r1 object;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l561_;
    MOV %r2 index;
    MOV %r3 length;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l561_:
    JF %r0 _l558_;
LABEL _l560_:
    MOV %r2 object;
    MOV %r5 path;
    MOV %r7 index;
    MOV %r6 %r7;
    ADD %r7 1;
    MOV index %r7;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c149 1 false;
    MOV %r3 $RET;
    MOV_PROP %r1 %r2 %r3;
    MOV object %r1;
    JMP _l557_;
LABEL _l558_:
    MOV %r2 index;
    MOV %r1 %r2;
    JF %r2 _l564_;
    MOV %r3 index;
    MOV %r4 length;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l564_:
    JF %r1 _l562_;
    MOV %r0 object;
    JMP _l563_;
LABEL _l562_:
    MOV %r0 @c9;
LABEL _l563_:
    MOV $RET %r0;
    RET;
}
func @@f131(object, keysFunc, symbolsFunc) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG keysFunc 1 false;
    MOV result $RET;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c69 1 false;
    MOV %r1 $RET;
    JF %r1 _l565_;
    MOV %r0 result;
    JMP _l566_;
LABEL _l565_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG symbolsFunc 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c144 2 false;
    MOV %r0 $RET;
LABEL _l566_:
    MOV $RET %r0;
    RET;
}
func @@f132(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 "1";
    PUSH %r0;
    MOV %r0 "baseGetTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 value;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l567_;
    MOV %r2 value;
    MOV %r3 @c9;
    EQ %r2 %r3;
    JF %r2 _l569_;
    MOV %r1 @c150;
    JMP _l568_;
LABEL _l569_:
    MOV %r1 @c151;
    MOV $RET %r1;
    RET;
    JMP _l568_;
LABEL _l567_:
LABEL _l568_:
    MOV %r0 @c66;
    PUSH %r0;
    MOV %r0 "2";
    PUSH %r0;
    MOV %r0 "baseGetTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 3 false;
    MOV %r2 @c152;
    MOV %r1 %r2;
    JF %r2 _l572_;
    MOV %r3 @c152;
    MOV %r5 value;
    PUSH %r5;
    CALL_REG @c66 1 false;
    MOV %r4 $RET;
    IN %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l572_:
    JF %r1 _l570_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c153 1 false;
    MOV %r0 $RET;
    JMP _l571_;
LABEL _l570_:
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c154 1 false;
    MOV %r0 $RET;
LABEL _l571_:
    MOV $RET %r0;
    RET;
}
func @@f133(value, other) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 other;
    GT %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f134(object, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l573_;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 @c72;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l573_:
    MOV $RET %r0;
    RET;
}
func @@f135(object, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l574_;
    MOV %r2 key;
    MOV %r4 object;
    PUSH %r4;
    CALL_REG @c66 1 false;
    MOV %r3 $RET;
    IN %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l574_:
    MOV $RET %r0;
    RET;
}
func @@f136(number, start, end) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 number;
    MOV %r3 end;
    PUSH %r3;
    MOV %r3 start;
    PUSH %r3;
    CALL_REG @c77 2 false;
    MOV %r2 $RET;
    GE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l575_;
    MOV %r2 number;
    MOV %r4 end;
    PUSH %r4;
    MOV %r4 start;
    PUSH %r4;
    CALL_REG @c155 2 false;
    MOV %r3 $RET;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l575_:
    MOV $RET %r0;
    RET;
}
func @@f137(arrays, iteratee, comparator) {
    VAR includes;
    VAR length;
    VAR othLength;
    VAR othIndex;
    VAR caches;
    VAR maxLength;
    VAR result;
    VAR array;
    VAR index;
    VAR seen;
    VAR value;
    VAR computed;
    VAR cache;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    MOV %r0 comparator;
    JF %r0 _l576_;
    MOV includes @c136;
    JMP _l577_;
LABEL _l576_:
    MOV includes @c135;
LABEL _l577_:
    MOV %r2 arrays;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 arrays;
    MOV %r1 "length";
    MOV_PROP othLength %r0 %r1;
    MOV othIndex othLength;
    MOV %r0 othLength;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV caches $RET;
    MOV maxLength Infinity;
    NEW_ARR result;
LABEL _l578_:
    MOV %r1 othIndex;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV othIndex %r1;
    JF %r0 _l579_;
LABEL _l581_:
    MOV %r1 arrays;
    MOV %r2 othIndex;
    MOV_PROP array %r1 %r2;
    MOV %r2 othIndex;
    MOV %r1 %r2;
    JF %r2 _l584_;
    MOV %r3 @c278;
    LG_AND %r1 %r3;
LABEL _l584_:
    JF %r1 _l582_;
    MOV %r4 @c278;
    PUSH %r4;
    CALL_REG @c35 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c10 2 false;
    MOV %r2 $RET;
    MOV array %r2;
    JMP _l583_;
LABEL _l582_:
LABEL _l583_:
    MOV %r2 maxLength;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c77 2 false;
    MOV %r1 $RET;
    MOV maxLength %r1;
    MOV %r3 comparator;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l587_;
    MOV %r5 @c278;
    MOV %r4 %r5;
    JIF %r5 _l588_;
    MOV %r7 length;
    MOV %r8 120;
    GE %r7 %r8;
    MOV %r6 %r7;
    JF %r7 _l589_;
    MOV %r10 array;
    MOV %r11 "length";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 120;
    GE %r8 %r9;
    LG_AND %r6 %r8;
LABEL _l589_:
    LG_OR %r4 %r6;
LABEL _l588_:
    LG_AND %r2 %r4;
LABEL _l587_:
    JF %r2 _l585_;
    MOV %r4 othIndex;
    MOV %r3 %r4;
    JF %r4 _l590_;
    MOV %r5 array;
    LG_AND %r3 %r5;
LABEL _l590_:
    PUSH %r3;
    CALL_REG @c138 1 true;
    MOV %r1 $RET;
    JMP _l586_;
LABEL _l585_:
    MOV %r1 @c9;
LABEL _l586_:
    MOV %r2 caches;
    MOV %r3 othIndex;
    SET_KEY %r2 %r3 %r1;
    JMP _l578_;
LABEL _l579_:
    MOV %r1 arrays;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV array %r0;
    MOV index 1;
    MINUS index;
    MOV %r0 caches;
    MOV %r1 0;
    MOV_PROP seen %r0 %r1;
LABEL _l592_:
    MOV %r3 index;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV index %r3;
    MOV %r2 length;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l596_;
    MOV %r4 result;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 maxLength;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l596_:
    JF %r0 _l591_;
LABEL _l595_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 @c278;
    JF %r1 _l597_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c278 1 false;
    MOV computed $RET;
    JMP _l598_;
LABEL _l597_:
    MOV computed value;
LABEL _l598_:
    MOV %r3 comparator;
    MOV %r2 %r3;
    JIF %r3 _l601_;
    MOV %r4 value;
    MOV %r5 0;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l601_:
    JF %r2 _l599_;
    MOV %r1 value;
    JMP _l600_;
LABEL _l599_:
    MOV %r1 0;
LABEL _l600_:
    MOV value %r1;
    MOV %r2 seen;
    JF %r2 _l604_;
    MOV %r3 computed;
    PUSH %r3;
    MOV %r3 seen;
    PUSH %r3;
    CALL_REG @c137 2 false;
    MOV %r1 $RET;
    JMP _l603_;
LABEL _l604_:
    MOV %r3 comparator;
    PUSH %r3;
    MOV %r3 computed;
    PUSH %r3;
    MOV %r3 result;
    PUSH %r3;
    CALL_REG includes 3 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l602_;
    MOV %r2 othLength;
    MOV othIndex %r2;
LABEL _l605_:
    MOV %r3 othIndex;
    SUB %r3 1;
    MOV %r2 %r3;
    MOV othIndex %r3;
    JF %r2 _l606_;
LABEL _l608_:
    MOV %r3 caches;
    MOV %r4 othIndex;
    MOV_PROP cache %r3 %r4;
    MOV %r4 cache;
    JF %r4 _l610_;
    MOV %r5 computed;
    PUSH %r5;
    MOV %r5 cache;
    PUSH %r5;
    CALL_REG @c137 2 false;
    MOV %r3 $RET;
    JMP _l603_;
LABEL _l610_:
    MOV %r5 comparator;
    PUSH %r5;
    MOV %r5 computed;
    PUSH %r5;
    MOV %r6 arrays;
    MOV %r7 othIndex;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG includes 3 false;
    MOV %r3 $RET;
    NEG %r3;
    JF %r3 _l609_;
    JMP _l592_;
    JMP _l603_;
LABEL _l609_:
    JMP _l605_;
LABEL _l606_:
    MOV %r2 seen;
    JF %r2 _l611_;
    MOV %r3 computed;
    PUSH %r3;
    MOV %r3 seen;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l603_;
LABEL _l611_:
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l603_;
LABEL _l602_:
LABEL _l603_:
    JMP _l592_;
LABEL _l591_:
LABEL _l591_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f138(object, setter, iteratee, accumulator) {
    VAR %r0;
    ALLOC @c488;
    MOV @c488 setter;
    ALLOC @c486;
    MOV @c486 iteratee;
    ALLOC @c487;
    MOV @c487 accumulator;
    FUNC %r0 @@f592;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c156 2 false;
    MOV %r0 @c487;
    MOV $RET %r0;
    RET;
}
func @@f139(object, path, args) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c157 2 false;
    MOV %r0 $RET;
    MOV object %r0;
    MOV %r0 object;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l612_;
    MOV func object;
    JMP _l613_;
LABEL _l612_:
    MOV %r1 object;
    MOV %r4 path;
    PUSH %r4;
    CALL_REG @c158 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c149 1 false;
    MOV %r2 $RET;
    MOV_PROP func %r1 %r2;
LABEL _l613_:
    MOV %r1 func;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l614_;
    MOV %r0 @c9;
    JMP _l615_;
LABEL _l614_:
    MOV %r2 args;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    MOV %r2 func;
    PUSH %r2;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
LABEL _l615_:
    MOV $RET %r0;
    RET;
}
func @@f140(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l616_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c160 1 false;
    MOV %r2 $RET;
    MOV %r3 @c119;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l616_:
    MOV $RET %r0;
    RET;
}
func @@f141(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l617_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c160 1 false;
    MOV %r2 $RET;
    MOV %r3 @c161;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l617_:
    MOV $RET %r0;
    RET;
}
func @@f142(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l618_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c160 1 false;
    MOV %r2 $RET;
    MOV %r3 @c162;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l618_:
    MOV $RET %r0;
    RET;
}
func @@f143(value, other, bitmask, customizer, stack) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 value;
    MOV %r1 other;
    EQ %r0 %r1;
    JF %r0 _l619_;
    MOV %r1 true;
    MOV $RET %r1;
    RET;
    JMP _l620_;
LABEL _l619_:
LABEL _l620_:
    MOV %r2 value;
    MOV %r3 null;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l624_;
    MOV %r3 other;
    MOV %r4 null;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l624_:
    MOV %r0 %r1;
    JIF %r1 _l623_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c68 1 false;
    MOV %r3 $RET;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l625_;
    MOV %r5 other;
    PUSH %r5;
    CALL_REG @c68 1 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l625_:
    LG_OR %r0 %r2;
LABEL _l623_:
    JF %r0 _l621_;
    MOV %r2 value;
    MOV %r3 value;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l626_;
    MOV %r3 other;
    MOV %r4 other;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l626_:
    MOV $RET %r1;
    RET;
    JMP _l622_;
LABEL _l621_:
LABEL _l622_:
    MOV %r1 stack;
    PUSH %r1;
    MOV %r1 @c163;
    PUSH %r1;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 other;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c164 6 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f144(object, other, bitmask, customizer, equalFunc, stack) {
    VAR objIsArr;
    VAR othIsArr;
    VAR objTag;
    VAR othTag;
    VAR objIsObj;
    VAR othIsObj;
    VAR isSameTag;
    VAR objIsWrapped;
    VAR othIsWrapped;
    VAR objUnwrapped;
    VAR othUnwrapped;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c69 1 false;
    MOV objIsArr $RET;
    MOV %r0 other;
    PUSH %r0;
    CALL_REG @c69 1 false;
    MOV othIsArr $RET;
    MOV %r0 objIsArr;
    JF %r0 _l627_;
    MOV objTag @c165;
    JMP _l628_;
LABEL _l627_:
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c114 1 false;
    MOV objTag $RET;
LABEL _l628_:
    MOV %r0 othIsArr;
    JF %r0 _l629_;
    MOV othTag @c165;
    JMP _l630_;
LABEL _l629_:
    MOV %r1 other;
    PUSH %r1;
    CALL_REG @c114 1 false;
    MOV othTag $RET;
LABEL _l630_:
    MOV %r1 objTag;
    MOV %r2 @c119;
    WEQ %r1 %r2;
    JF %r1 _l631_;
    MOV %r0 @c118;
    JMP _l632_;
LABEL _l631_:
    MOV %r0 objTag;
LABEL _l632_:
    MOV objTag %r0;
    MOV %r1 othTag;
    MOV %r2 @c119;
    WEQ %r1 %r2;
    JF %r1 _l633_;
    MOV %r0 @c118;
    JMP _l634_;
LABEL _l633_:
    MOV %r0 othTag;
LABEL _l634_:
    MOV othTag %r0;
    MOV objIsObj objTag;
    MOV %r0 @c118;
    WEQ objIsObj %r0;
    MOV othIsObj othTag;
    MOV %r0 @c118;
    WEQ othIsObj %r0;
    MOV isSameTag objTag;
    MOV %r0 othTag;
    WEQ isSameTag %r0;
    MOV %r1 isSameTag;
    MOV %r0 %r1;
    JF %r1 _l637_;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c92 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l637_:
    JF %r0 _l635_;
    MOV %r2 other;
    PUSH %r2;
    CALL_REG @c92 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l638_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l636_;
LABEL _l638_:
    MOV %r1 true;
    MOV objIsArr %r1;
    MOV %r1 false;
    MOV objIsObj %r1;
    JMP _l636_;
LABEL _l635_:
LABEL _l636_:
    MOV %r1 isSameTag;
    MOV %r0 %r1;
    JF %r1 _l641_;
    MOV %r2 objIsObj;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l641_:
    JF %r0 _l639_;
    MOV %r1 stack;
    JIF %r1 _l642_;
    CALL_REG @c127 0 true;
    MOV %r3 $RET;
    MOV stack %r3;
    MOV %r2 %r3;
LABEL _l642_:
    MOV %r3 objIsArr;
    MOV %r2 %r3;
    JIF %r3 _l644_;
    MOV %r5 object;
    PUSH %r5;
    CALL_REG @c93 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l644_:
    JF %r2 _l643_;
    MOV %r3 stack;
    PUSH %r3;
    MOV %r3 equalFunc;
    PUSH %r3;
    MOV %r3 customizer;
    PUSH %r3;
    MOV %r3 bitmask;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c166 6 false;
    MOV %r1 $RET;
    JMP _l640_;
LABEL _l643_:
    MOV %r3 stack;
    PUSH %r3;
    MOV %r3 equalFunc;
    PUSH %r3;
    MOV %r3 customizer;
    PUSH %r3;
    MOV %r3 bitmask;
    PUSH %r3;
    MOV %r3 objTag;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c167 7 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l640_;
LABEL _l639_:
LABEL _l640_:
    MOV %r0 bitmask;
    MOV %r1 @c168;
    AND %r0 %r1;
    NEG %r0;
    JF %r0 _l645_;
    MOV %r1 objIsObj;
    MOV objIsWrapped %r1;
    JF %r1 _l647_;
    MOV %r3 "__wrapped__";
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 @c72;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND objIsWrapped %r2;
LABEL _l647_:
    MOV %r1 othIsObj;
    MOV othIsWrapped %r1;
    JF %r1 _l648_;
    MOV %r3 "__wrapped__";
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 @c72;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND othIsWrapped %r2;
LABEL _l648_:
    MOV %r2 objIsWrapped;
    MOV %r1 %r2;
    JIF %r2 _l650_;
    MOV %r3 othIsWrapped;
    LG_OR %r1 %r3;
LABEL _l650_:
    JF %r1 _l649_;
    MOV %r2 objIsWrapped;
    JF %r2 _l651_;
    MOV %r3 object;
    MOV %r4 "value";
    CALL_VAR %r3 %r4 0 false;
    MOV objUnwrapped $RET;
    JMP _l646_;
LABEL _l651_:
    MOV objUnwrapped object;
    MOV %r2 othIsWrapped;
    JF %r2 _l652_;
    MOV %r3 other;
    MOV %r4 "value";
    CALL_VAR %r3 %r4 0 false;
    MOV othUnwrapped $RET;
    JMP _l646_;
LABEL _l652_:
    MOV othUnwrapped other;
    MOV %r2 stack;
    JIF %r2 _l653_;
    CALL_REG @c127 0 true;
    MOV %r4 $RET;
    MOV stack %r4;
    MOV %r3 %r4;
LABEL _l653_:
    MOV %r3 stack;
    PUSH %r3;
    MOV %r3 customizer;
    PUSH %r3;
    MOV %r3 bitmask;
    PUSH %r3;
    MOV %r3 othUnwrapped;
    PUSH %r3;
    MOV %r3 objUnwrapped;
    PUSH %r3;
    CALL_REG equalFunc 5 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l646_;
LABEL _l649_:
    JMP _l646_;
LABEL _l645_:
LABEL _l646_:
    MOV %r0 isSameTag;
    NEG %r0;
    JF %r0 _l654_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l655_;
LABEL _l654_:
LABEL _l655_:
    MOV %r0 stack;
    JIF %r0 _l656_;
    CALL_REG @c127 0 true;
    MOV %r2 $RET;
    MOV stack %r2;
    MOV %r1 %r2;
LABEL _l656_:
    MOV %r1 stack;
    PUSH %r1;
    MOV %r1 equalFunc;
    PUSH %r1;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 other;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c169 6 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f145(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l657_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c114 1 false;
    MOV %r2 $RET;
    MOV %r3 @c170;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l657_:
    MOV $RET %r0;
    RET;
}
func @@f146(object, source, matchData, customizer) {
    VAR index;
    VAR length;
    VAR noCustomizer;
    VAR data;
    VAR key;
    VAR objValue;
    VAR srcValue;
    VAR stack;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r0 matchData;
    MOV %r1 "length";
    MOV_PROP index %r0 %r1;
    MOV length index;
    MOV noCustomizer customizer;
    NEG noCustomizer;
    MOV %r0 object;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l658_;
    MOV %r1 length;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l659_;
LABEL _l658_:
LABEL _l659_:
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c66 1 false;
    MOV %r0 $RET;
    MOV object %r0;
LABEL _l660_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l661_;
LABEL _l663_:
    MOV %r1 matchData;
    MOV %r2 index;
    MOV_PROP data %r1 %r2;
    MOV %r3 noCustomizer;
    MOV %r2 %r3;
    JF %r3 _l667_;
    MOV %r5 data;
    MOV %r6 2;
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l667_:
    JF %r2 _l666_;
    MOV %r4 data;
    MOV %r5 1;
    MOV_PROP %r1 %r4 %r5;
    MOV %r4 object;
    MOV %r7 data;
    MOV %r6 0;
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r3 %r4 %r5;
    NE %r1 %r3;
    JMP _l665_;
LABEL _l666_:
    MOV %r4 data;
    MOV %r5 0;
    MOV_PROP %r1 %r4 %r5;
    MOV %r3 object;
    IN %r1 %r3;
    NEG %r1;
    JF %r1 _l664_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l665_;
LABEL _l664_:
LABEL _l665_:
    JMP _l660_;
LABEL _l661_:
LABEL _l668_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l669_;
LABEL _l671_:
    MOV %r2 matchData;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV data %r1;
    MOV %r1 data;
    MOV %r2 0;
    MOV_PROP key %r1 %r2;
    MOV %r1 object;
    MOV %r2 key;
    MOV_PROP objValue %r1 %r2;
    MOV %r1 data;
    MOV %r2 1;
    MOV_PROP srcValue %r1 %r2;
    MOV %r2 noCustomizer;
    MOV %r1 %r2;
    JF %r2 _l674_;
    MOV %r4 data;
    MOV %r5 2;
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l674_:
    JF %r1 _l672_;
    MOV %r3 objValue;
    MOV %r4 @c9;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l676_;
    MOV %r4 key;
    MOV %r5 object;
    IN %r4 %r5;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l676_:
    JF %r2 _l675_;
    MOV %r3 false;
    MOV $RET %r3;
    RET;
    JMP _l673_;
LABEL _l675_:
    JMP _l673_;
LABEL _l672_:
    CALL_REG @c127 0 true;
    MOV stack $RET;
    MOV %r2 customizer;
    JF %r2 _l677_;
    MOV %r3 stack;
    PUSH %r3;
    MOV %r3 source;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 srcValue;
    PUSH %r3;
    MOV %r3 objValue;
    PUSH %r3;
    CALL_REG customizer 6 false;
    MOV result $RET;
    JMP _l673_;
LABEL _l677_:
    MOV %r3 result;
    MOV %r4 @c9;
    EQ %r3 %r4;
    JF %r3 _l679_;
    MOV %r4 stack;
    PUSH %r4;
    MOV %r4 customizer;
    PUSH %r4;
    MOV %r4 @c168;
    MOV %r5 @c171;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 objValue;
    PUSH %r4;
    MOV %r4 srcValue;
    PUSH %r4;
    CALL_REG @c163 5 false;
    MOV %r2 $RET;
    JMP _l673_;
LABEL _l679_:
    MOV %r2 result;
    NEG %r2;
    JF %r2 _l678_;
    MOV %r3 false;
    MOV $RET %r3;
    RET;
    JMP _l673_;
LABEL _l678_:
LABEL _l673_:
    JMP _l668_;
LABEL _l669_:
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f147(value) {
    VAR pattern;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c112 1 false;
    MOV %r1 $RET;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l682_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c172 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l682_:
    JF %r0 _l680_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l681_;
LABEL _l680_:
LABEL _l681_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c173 1 false;
    MOV %r0 $RET;
    JF %r0 _l683_;
    MOV pattern @c174;
    JMP _l684_;
LABEL _l683_:
    MOV pattern @c175;
LABEL _l684_:
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c176 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 pattern;
    MOV %r2 "test";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f148(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l685_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c160 1 false;
    MOV %r2 $RET;
    MOV %r3 @c177;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l685_:
    MOV $RET %r0;
    RET;
}
func @@f149(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l686_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c114 1 false;
    MOV %r2 $RET;
    MOV %r3 @c178;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l686_:
    MOV $RET %r0;
    RET;
}
func @@f150(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c68 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l688_;
    MOV %r5 value;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c179 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l688_:
    MOV %r0 %r1;
    JF %r1 _l687_;
    MOV %r3 @c180;
    MOV %r5 value;
    PUSH %r5;
    CALL_REG @c160 1 false;
    MOV %r4 $RET;
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l687_:
    MOV $RET %r0;
    RET;
}
func @@f151(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 value;
    TYPE_OF %r0;
    MOV %r1 "function";
    WEQ %r0 %r1;
    JF %r0 _l689_;
    MOV %r1 value;
    MOV $RET %r1;
    RET;
    JMP _l690_;
LABEL _l689_:
LABEL _l690_:
    MOV %r0 value;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l691_;
    MOV %r1 @c181;
    MOV $RET %r1;
    RET;
    JMP _l692_;
LABEL _l691_:
LABEL _l692_:
    MOV %r0 value;
    TYPE_OF %r0;
    MOV %r1 "object";
    WEQ %r0 %r1;
    JF %r0 _l693_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c69 1 false;
    MOV %r2 $RET;
    JF %r2 _l695_;
    MOV %r4 value;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r4 value;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c182 2 false;
    MOV %r1 $RET;
    JMP _l694_;
LABEL _l695_:
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c183 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l694_;
LABEL _l693_:
LABEL _l694_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c184 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f152(object) {
    VAR result;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c185 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l696_;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c186 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l697_;
LABEL _l696_:
LABEL _l697_:
    NEW_ARR result;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c66 1 false;
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    MOV %r2 @c72;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l700_;
    MOV %r2 key;
    MOV %r3 "constructor";
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l700_:
    JF %r0 _l698_;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l699_;
LABEL _l698_:
LABEL _l699_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f153(object) {
    VAR isProto;
    VAR result;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l701_;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c187 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l702_;
LABEL _l701_:
LABEL _l702_:
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c185 1 false;
    MOV isProto $RET;
    NEW_ARR result;
    MOV %r1 key;
    MOV %r2 "constructor";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l705_;
    MOV %r3 isProto;
    MOV %r2 %r3;
    JIF %r3 _l706_;
    MOV %r5 key;
    PUSH %r5;
    MOV %r5 object;
    PUSH %r5;
    MOV %r5 @c72;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l706_:
    LG_AND %r0 %r2;
LABEL _l705_:
    NEG %r0;
    JF %r0 _l703_;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l704_;
LABEL _l703_:
LABEL _l704_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f154(value, other) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 other;
    LT %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f155(collection, iteratee) {
    VAR @c491;
    ALLOC @c491;
    VAR @c490;
    ALLOC @c490;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    ALLOC @c489;
    MOV @c489 iteratee;
    MOV @c491 1;
    MINUS index;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c188 1 false;
    MOV %r0 $RET;
    JF %r0 _l707_;
    MOV %r2 collection;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c107 1 false;
    MOV @c490 $RET;
    JMP _l708_;
LABEL _l707_:
    NEW_ARR @c490;
LABEL _l708_:
    FUNC %r0 @@f593;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c102 2 false;
    MOV %r0 @c490;
    MOV $RET %r0;
    RET;
}
func @@f156(source) {
    VAR @c493;
    ALLOC @c493;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    ALLOC @c492;
    MOV @c492 source;
    MOV %r0 @c492;
    PUSH %r0;
    CALL_REG @c189 1 false;
    MOV @c493 $RET;
    MOV %r3 @c493;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 1;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l711_;
    MOV %r5 @c493;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 2;
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l711_:
    JF %r0 _l709_;
    MOV %r5 @c493;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r5 @c493;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c190 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l710_;
LABEL _l709_:
LABEL _l710_:
    FUNC %r0 @@f594;
    MOV $RET %r0;
    RET;
}
func @@f157(path, srcValue) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    ALLOC @c494;
    MOV @c494 path;
    ALLOC @c495;
    MOV @c495 srcValue;
    MOV %r2 @c494;
    PUSH %r2;
    CALL_REG @c191 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l714_;
    MOV %r3 @c495;
    PUSH %r3;
    CALL_REG @c192 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l714_:
    JF %r0 _l712_;
    MOV %r2 @c495;
    PUSH %r2;
    MOV %r3 @c494;
    PUSH %r3;
    CALL_REG @c149 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c190 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l713_;
LABEL _l712_:
LABEL _l713_:
    FUNC %r0 @@f595;
    MOV $RET %r0;
    RET;
}
func @@f158(object, source, srcIndex, customizer, stack) {
    VAR %r0;
    VAR %r1;
    ALLOC @c501;
    MOV @c501 object;
    ALLOC @c500;
    MOV @c500 source;
    ALLOC @c499;
    MOV @c499 srcIndex;
    ALLOC @c498;
    MOV @c498 customizer;
    ALLOC @c497;
    MOV @c497 stack;
    MOV %r0 @c501;
    MOV %r1 @c500;
    EQ %r0 %r1;
    JF %r0 _l715_;
    RET;
    JMP _l716_;
LABEL _l715_:
LABEL _l716_:
    MOV %r0 @c105;
    PUSH %r0;
    FUNC %r0 @@f596;
    PUSH %r0;
    MOV %r0 @c500;
    PUSH %r0;
    CALL_REG @c145 3 false;
}
func @@f159(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    VAR objValue;
    VAR srcValue;
    VAR stacked;
    VAR newValue;
    VAR isCommon;
    VAR isArr;
    VAR isBuff;
    VAR isTyped;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c193 2 false;
    MOV objValue $RET;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 source;
    PUSH %r0;
    CALL_REG @c193 2 false;
    MOV srcValue $RET;
    MOV %r0 srcValue;
    PUSH %r0;
    MOV %r0 stack;
    MOV %r1 "get";
    CALL_VAR %r0 %r1 1 false;
    MOV stacked $RET;
    MOV %r0 stacked;
    JF %r0 _l717_;
    MOV %r1 stacked;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c194 3 false;
    RET;
    JMP _l718_;
LABEL _l717_:
LABEL _l718_:
    MOV %r0 customizer;
    JF %r0 _l719_;
    MOV %r1 stack;
    PUSH %r1;
    MOV %r1 source;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 key;
    MOV %r2 "";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 objValue;
    PUSH %r1;
    CALL_REG customizer 6 false;
    MOV newValue $RET;
    JMP _l720_;
LABEL _l719_:
    MOV newValue @c9;
LABEL _l720_:
    MOV isCommon newValue;
    MOV %r0 @c9;
    EQ isCommon %r0;
    MOV %r0 isCommon;
    JF %r0 _l721_;
    MOV %r1 srcValue;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV isArr $RET;
    MOV %r1 isArr;
    NEG %r1;
    MOV isBuff %r1;
    JF %r1 _l723_;
    MOV %r3 srcValue;
    PUSH %r3;
    CALL_REG @c92 1 false;
    MOV %r2 $RET;
    LG_AND isBuff %r2;
LABEL _l723_:
    MOV %r2 isArr;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l725_;
    MOV %r3 isBuff;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l725_:
    MOV isTyped %r1;
    JF %r1 _l724_;
    MOV %r3 srcValue;
    PUSH %r3;
    CALL_REG @c93 1 false;
    MOV %r2 $RET;
    LG_AND isTyped %r2;
LABEL _l724_:
    MOV %r1 srcValue;
    MOV newValue %r1;
    MOV %r3 isArr;
    MOV %r2 %r3;
    JIF %r3 _l728_;
    MOV %r4 isBuff;
    LG_OR %r2 %r4;
LABEL _l728_:
    MOV %r1 %r2;
    JIF %r2 _l727_;
    MOV %r3 isTyped;
    LG_OR %r1 %r3;
LABEL _l727_:
    JF %r1 _l726_;
    MOV %r3 objValue;
    PUSH %r3;
    CALL_REG @c69 1 false;
    MOV %r2 $RET;
    JF %r2 _l729_;
    MOV %r3 objValue;
    MOV newValue %r3;
    JMP _l722_;
LABEL _l729_:
    MOV %r4 objValue;
    PUSH %r4;
    CALL_REG @c195 1 false;
    MOV %r3 $RET;
    JF %r3 _l730_;
    MOV %r5 objValue;
    PUSH %r5;
    CALL_REG @c75 1 false;
    MOV %r4 $RET;
    MOV newValue %r4;
    JMP _l722_;
LABEL _l730_:
    MOV %r4 isBuff;
    JF %r4 _l731_;
    MOV %r5 false;
    MOV isCommon %r5;
    MOV %r6 true;
    PUSH %r6;
    MOV %r6 srcValue;
    PUSH %r6;
    CALL_REG @c117 2 false;
    MOV %r5 $RET;
    MOV newValue %r5;
    JMP _l722_;
LABEL _l731_:
    MOV %r5 isTyped;
    JF %r5 _l732_;
    MOV %r6 false;
    MOV isCommon %r6;
    MOV %r7 true;
    PUSH %r7;
    MOV %r7 srcValue;
    PUSH %r7;
    CALL_REG @c196 2 false;
    MOV %r6 $RET;
    MOV newValue %r6;
    JMP _l722_;
LABEL _l732_:
    NEW_ARR %r6;
    MOV newValue %r6;
    JMP _l722_;
LABEL _l726_:
    MOV %r4 srcValue;
    PUSH %r4;
    CALL_REG @c197 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JIF %r3 _l734_;
    MOV %r5 srcValue;
    PUSH %r5;
    CALL_REG @c91 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l734_:
    JF %r2 _l733_;
    MOV %r3 objValue;
    MOV newValue %r3;
    MOV %r4 objValue;
    PUSH %r4;
    CALL_REG @c91 1 false;
    MOV %r3 $RET;
    JF %r3 _l735_;
    MOV %r5 objValue;
    PUSH %r5;
    CALL_REG @c198 1 false;
    MOV %r4 $RET;
    MOV newValue %r4;
    JMP _l722_;
LABEL _l735_:
    MOV %r6 objValue;
    PUSH %r6;
    CALL_REG @c112 1 false;
    MOV %r5 $RET;
    NEG %r5;
    MOV %r4 %r5;
    JIF %r5 _l737_;
    MOV %r7 srcIndex;
    MOV %r6 %r7;
    JF %r7 _l738_;
    MOV %r9 objValue;
    PUSH %r9;
    CALL_REG @c173 1 false;
    MOV %r8 $RET;
    LG_AND %r6 %r8;
LABEL _l738_:
    LG_OR %r4 %r6;
LABEL _l737_:
    JF %r4 _l736_;
    MOV %r6 srcValue;
    PUSH %r6;
    CALL_REG @c120 1 false;
    MOV %r5 $RET;
    MOV newValue %r5;
    JMP _l722_;
LABEL _l736_:
    JMP _l722_;
LABEL _l733_:
    MOV %r3 false;
    MOV isCommon %r3;
    JMP _l722_;
LABEL _l721_:
LABEL _l722_:
    MOV %r0 isCommon;
    JF %r0 _l739_;
    MOV %r1 newValue;
    PUSH %r1;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 stack;
    MOV %r2 "set";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 stack;
    PUSH %r1;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r1 srcIndex;
    PUSH %r1;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 newValue;
    PUSH %r1;
    CALL_REG mergeFunc 5 false;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 stack;
    MOV %r2 "delete";
    CALL_VAR %r1 %r2 1 false;
    JMP _l740_;
LABEL _l739_:
LABEL _l740_:
    MOV %r0 newValue;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c194 3 false;
}
func @@f160(array, n) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l741_;
    RET;
    JMP _l742_;
LABEL _l741_:
LABEL _l742_:
    MOV %r1 n;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l743_;
    MOV %r0 length;
    JMP _l744_;
LABEL _l743_:
    MOV %r0 0;
LABEL _l744_:
    MOV %r1 n;
    ADD %r1 %r0;
    MOV n %r1;
    MOV %r2 length;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c96 2 false;
    MOV %r1 $RET;
    JF %r1 _l745_;
    MOV %r2 array;
    MOV %r3 n;
    MOV_PROP %r0 %r2 %r3;
    JMP _l746_;
LABEL _l745_:
    MOV %r0 @c9;
LABEL _l746_:
    MOV $RET %r0;
    RET;
}
func @@f161(collection, iteratees, orders) {
    VAR @c504;
    ALLOC @c504;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    ALLOC @c503;
    MOV @c503 iteratees;
    ALLOC @c505;
    MOV @c505 orders;
    MOV @c504 1;
    MINUS index;
    CALL_REG @c199 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r3 @c503;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l747_;
    MOV %r1 @c503;
    JMP _l748_;
LABEL _l747_:
    NEW_ARR %r1;
    MOV %r3 @c181;
    SET_KEY %r1 0 %r3;
LABEL _l748_:
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV @c503 %r0;
    FUNC %r0 @@f597;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c200 2 false;
    MOV result $RET;
    FUNC %r1 @@f598;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c201 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f162(object, paths) {
    VAR %r0;
    VAR %r1;
    ALLOC @c507;
    MOV @c507 object;
    FUNC %r1 @@f599;
    PUSH %r1;
    MOV %r1 paths;
    PUSH %r1;
    MOV %r1 @c507;
    PUSH %r1;
    CALL_REG @c202 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f163(object, paths, predicate) {
    VAR index;
    VAR length;
    VAR result;
    VAR path;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 paths;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    NEW_OBJ result;
LABEL _l749_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l750_;
LABEL _l752_:
    MOV %r1 paths;
    MOV %r2 index;
    MOV_PROP path %r1 %r2;
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c203 2 false;
    MOV value $RET;
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG predicate 2 false;
    MOV %r1 $RET;
    JF %r1 _l753_;
    MOV %r2 value;
    PUSH %r2;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 path;
    PUSH %r3;
    CALL_REG @c148 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c204 3 false;
    JMP _l754_;
LABEL _l753_:
LABEL _l754_:
    JMP _l749_;
LABEL _l750_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f164(path) {
    VAR %r0;
    ALLOC @c508;
    MOV @c508 path;
    FUNC %r0 @@f600;
    MOV $RET %r0;
    RET;
}
func @@f165(array, values, iteratee, comparator) {
    VAR indexOf;
    VAR index;
    VAR length;
    VAR seen;
    VAR fromIndex;
    VAR value;
    VAR computed;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 comparator;
    JF %r0 _l755_;
    MOV indexOf @c205;
    JMP _l756_;
LABEL _l755_:
    MOV indexOf @c2;
LABEL _l756_:
    MOV index 1;
    MINUS index;
    MOV %r0 @c213;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV seen array;
    MOV %r0 array;
    MOV %r1 @c213;
    EQ %r0 %r1;
    JF %r0 _l757_;
    MOV %r2 @c213;
    PUSH %r2;
    CALL_REG @c75 1 false;
    MOV %r1 $RET;
    MOV @c213 %r1;
    JMP _l758_;
LABEL _l757_:
LABEL _l758_:
    MOV %r0 @c278;
    JF %r0 _l759_;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c35 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c10 2 false;
    MOV %r1 $RET;
    MOV seen %r1;
    JMP _l760_;
LABEL _l759_:
LABEL _l760_:
LABEL _l761_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l762_;
LABEL _l764_:
    MOV fromIndex 0;
    MOV %r1 @c213;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 @c278;
    JF %r1 _l765_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c278 1 false;
    MOV computed $RET;
    JMP _l766_;
LABEL _l765_:
    MOV computed value;
LABEL _l766_:
LABEL _l767_:
    MOV %r4 comparator;
    PUSH %r4;
    MOV %r4 fromIndex;
    PUSH %r4;
    MOV %r4 computed;
    PUSH %r4;
    MOV %r4 seen;
    PUSH %r4;
    CALL_REG indexOf 4 false;
    MOV %r3 $RET;
    MOV fromIndex %r3;
    MOV %r1 %r3;
    MOV %r2 1;
    MINUS %r2;
    GT %r1 %r2;
    JF %r1 _l768_;
LABEL _l770_:
    MOV %r2 seen;
    MOV %r3 array;
    NE %r2 %r3;
    JF %r2 _l771_;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 fromIndex;
    PUSH %r3;
    MOV %r3 seen;
    PUSH %r3;
    MOV %r3 @c84;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 3 false;
    JMP _l772_;
LABEL _l771_:
LABEL _l772_:
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 fromIndex;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 @c84;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 3 false;
    JMP _l767_;
LABEL _l768_:
    JMP _l761_;
LABEL _l762_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f166(array, indexes) {
    VAR length;
    VAR lastIndex;
    VAR index;
    VAR previous;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    JF %r0 _l773_;
    MOV %r1 indexes;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
    JMP _l774_;
LABEL _l773_:
    MOV length 0;
LABEL _l774_:
    MOV lastIndex length;
    MOV %r0 1;
    SUB lastIndex %r0;
LABEL _l775_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l776_;
LABEL _l778_:
    MOV %r1 indexes;
    MOV %r2 length;
    MOV_PROP index %r1 %r2;
    MOV %r2 length;
    MOV %r3 lastIndex;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l781_;
    MOV %r3 index;
    MOV %r4 previous;
    NE %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l781_:
    JF %r1 _l779_;
    MOV previous index;
    MOV %r3 index;
    PUSH %r3;
    CALL_REG @c96 1 false;
    MOV %r2 $RET;
    JF %r2 _l782_;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 @c84;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 3 false;
    JMP _l780_;
LABEL _l782_:
    MOV %r3 index;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c206 2 false;
    JMP _l780_;
LABEL _l779_:
LABEL _l780_:
    JMP _l775_;
LABEL _l776_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f167(lower, upper) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 lower;
    CALL_REG @c207 0 false;
    MOV %r2 $RET;
    MOV %r3 upper;
    MOV %r5 lower;
    SUB %r3 %r5;
    MOV %r4 1;
    ADD %r3 %r4;
    MUL %r2 %r3;
    PUSH %r2;
    CALL_REG @c208 1 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f168(start, end, step, fromRight) {
    VAR index;
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 0;
    PUSH %r0;
    MOV %r1 end;
    MOV %r3 start;
    SUB %r1 %r3;
    MOV %r3 step;
    MOV %r2 %r3;
    JIF %r3 _l783_;
    MOV %r4 1;
    LG_OR %r2 %r4;
LABEL _l783_:
    DIV %r1 %r2;
    PUSH %r1;
    CALL_REG @c209 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @c155 2 false;
    MOV length $RET;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
LABEL _l784_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l785_;
LABEL _l787_:
    MOV %r1 start;
    MOV %r2 result;
    MOV %r4 fromRight;
    JF %r4 _l788_;
    MOV %r3 length;
    JMP _l789_;
LABEL _l788_:
    MOV %r5 index;
    ADD %r5 1;
    MOV %r3 %r5;
    MOV index %r5;
LABEL _l789_:
    SET_KEY %r2 %r3 %r1;
    MOV %r1 step;
    MOV %r2 start;
    ADD %r2 %r1;
    MOV start %r2;
    JMP _l784_;
LABEL _l785_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f169(string, n) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV result "";
    MOV %r2 string;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l793_;
    MOV %r3 n;
    MOV %r4 1;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l793_:
    MOV %r0 %r1;
    JIF %r1 _l792_;
    MOV %r2 n;
    MOV %r3 @c210;
    GT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l792_:
    JF %r0 _l790_;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l791_;
LABEL _l790_:
LABEL _l791_:
    JMP _l797_;
LABEL _l794_:
    MOV %r0 n;
    JF %r0 _l795_;
LABEL _l797_:
    MOV %r1 n;
    MOV %r2 2;
    MOD %r1 %r2;
    JF %r1 _l798_;
    MOV %r2 string;
    MOV %r3 result;
    ADD %r3 %r2;
    MOV result %r3;
    JMP _l799_;
LABEL _l798_:
LABEL _l799_:
    MOV %r2 n;
    MOV %r3 2;
    DIV %r2 %r3;
    PUSH %r2;
    CALL_REG @c208 1 false;
    MOV %r1 $RET;
    MOV n %r1;
    MOV %r1 n;
    JF %r1 _l800_;
    MOV %r2 string;
    MOV %r3 string;
    ADD %r3 %r2;
    MOV string %r3;
    JMP _l801_;
LABEL _l800_:
LABEL _l801_:
    JMP _l794_;
LABEL _l795_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f170(func, start) {
    VAR o;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c181;
    PUSH %r0;
    MOV %r0 start;
    PUSH %r0;
    MOV %r0 func;
    PUSH %r0;
    CALL_REG @c211 3 false;
    MOV o $RET;
    MOV %r0 o;
    PUSH %r0;
    MOV %r0 "func 1 ----------->";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 func;
    MOV %r2 "";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 o;
    PUSH %r1;
    CALL_REG @c212 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f171(collection) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c213 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c214 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f172(collection, n) {
    VAR array;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c213 1 false;
    MOV array $RET;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c98 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c99 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f173(object, path, value, customizer) {
    VAR index;
    VAR length;
    VAR lastIndex;
    VAR nested;
    VAR key;
    VAR newValue;
    VAR objValue;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l802_;
    MOV %r1 object;
    MOV $RET %r1;
    RET;
    JMP _l803_;
LABEL _l802_:
LABEL _l803_:
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV index 1;
    MINUS index;
    MOV %r0 path;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV lastIndex length;
    MOV %r0 1;
    SUB lastIndex %r0;
    MOV nested object;
LABEL _l804_:
    MOV %r1 nested;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l808_;
    MOV %r4 index;
    ADD %r4 1;
    MOV %r2 %r4;
    MOV index %r4;
    MOV %r3 length;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l808_:
    JF %r0 _l805_;
LABEL _l807_:
    MOV %r2 path;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c149 1 false;
    MOV key $RET;
    MOV newValue value;
    MOV %r1 index;
    MOV %r2 lastIndex;
    WNE %r1 %r2;
    JF %r1 _l809_;
    MOV %r2 nested;
    MOV %r3 key;
    MOV_PROP objValue %r2 %r3;
    MOV %r3 customizer;
    JF %r3 _l811_;
    MOV %r4 nested;
    PUSH %r4;
    MOV %r4 key;
    PUSH %r4;
    MOV %r4 objValue;
    PUSH %r4;
    CALL_REG customizer 3 false;
    MOV %r2 $RET;
    JMP _l810_;
LABEL _l811_:
    MOV %r2 @c9;
    MOV newValue %r2;
    MOV %r2 newValue;
    MOV %r3 @c9;
    EQ %r2 %r3;
    JF %r2 _l812_;
    MOV %r5 objValue;
    PUSH %r5;
    CALL_REG @c112 1 false;
    MOV %r4 $RET;
    JF %r4 _l813_;
    MOV %r3 objValue;
    JMP _l810_;
LABEL _l813_:
    MOV %r7 path;
    MOV %r8 index;
    MOV %r9 1;
    ADD %r8 %r9;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    CALL_REG @c96 1 false;
    MOV %r5 $RET;
    JF %r5 _l814_;
    NEW_ARR %r3;
    JMP _l810_;
LABEL _l814_:
    NEW_OBJ %r3;
    MOV newValue %r3;
    JMP _l810_;
LABEL _l812_:
    JMP _l810_;
LABEL _l809_:
LABEL _l810_:
    MOV %r1 newValue;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 nested;
    PUSH %r1;
    CALL_REG @c215 3 false;
    MOV %r2 nested;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    MOV nested %r1;
    JMP _l804_;
LABEL _l805_:
    MOV %r0 object;
    MOV $RET %r0;
    RET;
}
func @@f174(func, data) {
    VAR %r0;
    VAR %r1;
    MOV %r0 data;
    PUSH %r0;
    MOV %r0 func;
    PUSH %r0;
    MOV %r0 @c216;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 func;
    MOV $RET %r0;
    RET;
}
func @@f175(func, string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 func;
    PUSH %r0;
    MOV %r0 "BSSE--->";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    NEW_OBJ %r1;
    MOV %r2 true;
    SET_KEY %r1 'configurable' %r2;
    MOV %r2 false;
    SET_KEY %r1 'enumerable' %r2;
    MOV %r3 string;
    PUSH %r3;
    CALL_REG @c217 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'value' %r2;
    MOV %r2 true;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    MOV %r1 "toString";
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c106 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    MOV %r0 "BSSE--->feile";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
}
func @@f176(collection) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c213 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c99 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f177(array, start, end) {
    VAR index;
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 start;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l815_;
    MOV %r2 start;
    MINUS %r2;
    MOV %r3 length;
    GT %r2 %r3;
    JF %r2 _l817_;
    MOV %r1 0;
    JMP _l816_;
LABEL _l817_:
    MOV %r1 length;
    MOV %r3 start;
    ADD %r1 %r3;
    MOV start %r1;
    JMP _l816_;
LABEL _l815_:
LABEL _l816_:
    MOV %r1 end;
    MOV %r2 length;
    GT %r1 %r2;
    JF %r1 _l818_;
    MOV %r0 length;
    JMP _l819_;
LABEL _l818_:
    MOV %r0 end;
LABEL _l819_:
    MOV end %r0;
    MOV %r0 end;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l820_;
    MOV %r1 length;
    MOV %r2 end;
    ADD %r2 %r1;
    MOV end %r2;
    JMP _l821_;
LABEL _l820_:
LABEL _l821_:
    MOV %r1 start;
    MOV %r2 end;
    GT %r1 %r2;
    JF %r1 _l822_;
    MOV %r0 0;
    JMP _l823_;
LABEL _l822_:
    MOV %r0 end;
    MOV %r3 start;
    SUB %r0 %r3;
    MOV %r2 0;
    ZSHR %r0 %r2;
LABEL _l823_:
    MOV length %r0;
    MOV %r0 0;
    MOV %r1 start;
    ZSHR %r1 %r0;
    MOV start %r1;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
LABEL _l824_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l825_;
LABEL _l827_:
    MOV %r2 array;
    MOV %r3 index;
    MOV %r4 start;
    ADD %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l824_;
LABEL _l825_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f178(collection, predicate) {
    VAR @c510;
    ALLOC @c510;
    VAR %r0;
    ALLOC @c509;
    MOV @c509 predicate;
    FUNC %r0 @@f601;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c102 2 false;
    MOV %r0 @c510;
    NEG %r0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f179(array, value, retHighest) {
    VAR low;
    VAR high;
    VAR mid;
    VAR computed;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV low 0;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l828_;
    MOV high low;
    JMP _l829_;
LABEL _l828_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP high %r1 %r2;
LABEL _l829_:
    MOV %r2 value;
    TYPE_OF %r2;
    MOV %r3 "number";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l833_;
    MOV %r3 value;
    MOV %r4 value;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l833_:
    MOV %r0 %r1;
    JF %r1 _l832_;
    MOV %r2 high;
    MOV %r3 @c218;
    LE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l832_:
    JF %r0 _l830_;
LABEL _l834_:
    MOV %r1 low;
    MOV %r2 high;
    LT %r1 %r2;
    JF %r1 _l835_;
LABEL _l837_:
    MOV mid low;
    MOV %r3 high;
    ADD mid %r3;
    MOV %r2 1;
    ZSHR mid %r2;
    MOV %r2 array;
    MOV %r3 mid;
    MOV_PROP computed %r2 %r3;
    MOV %r4 computed;
    MOV %r5 null;
    NE %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l840_;
    MOV %r6 computed;
    PUSH %r6;
    CALL_REG @c139 1 false;
    MOV %r5 $RET;
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l840_:
    MOV %r2 %r3;
    JF %r3 _l839_;
    MOV %r5 retHighest;
    JF %r5 _l841_;
    MOV %r4 computed;
    MOV %r6 value;
    LE %r4 %r6;
    JMP _l831_;
LABEL _l841_:
    MOV %r4 computed;
    MOV %r6 value;
    LT %r4 %r6;
    LG_AND %r2 %r4;
LABEL _l839_:
    JF %r2 _l838_;
    MOV %r3 mid;
    MOV %r4 1;
    ADD %r3 %r4;
    MOV low %r3;
    JMP _l831_;
LABEL _l838_:
    MOV %r3 mid;
    MOV high %r3;
    JMP _l834_;
LABEL _l835_:
    MOV %r1 high;
    MOV $RET %r1;
    RET;
    JMP _l831_;
LABEL _l830_:
LABEL _l831_:
    MOV %r1 retHighest;
    PUSH %r1;
    MOV %r1 @c181;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c219 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f180(array, value, iteratee, retHighest) {
    VAR low;
    VAR high;
    VAR valIsNaN;
    VAR valIsNull;
    VAR valIsSymbol;
    VAR valIsUndefined;
    VAR mid;
    VAR computed;
    VAR othIsDefined;
    VAR othIsNull;
    VAR othIsReflexive;
    VAR othIsSymbol;
    VAR setLow;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c278 1 false;
    MOV %r0 $RET;
    MOV value %r0;
    MOV low 0;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l842_;
    MOV high 0;
    JMP _l843_;
LABEL _l842_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP high %r1 %r2;
LABEL _l843_:
    MOV valIsNaN value;
    MOV %r0 value;
    NE valIsNaN %r0;
    MOV valIsNull value;
    MOV %r0 null;
    EQ valIsNull %r0;
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c139 1 false;
    MOV valIsSymbol $RET;
    MOV valIsUndefined value;
    MOV %r0 @c9;
    EQ valIsUndefined %r0;
LABEL _l844_:
    MOV %r0 low;
    MOV %r1 high;
    LT %r0 %r1;
    JF %r0 _l845_;
LABEL _l847_:
    MOV %r1 low;
    MOV %r3 high;
    ADD %r1 %r3;
    MOV %r2 2;
    DIV %r1 %r2;
    PUSH %r1;
    CALL_REG @c208 1 false;
    MOV mid $RET;
    MOV %r2 array;
    MOV %r3 mid;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c278 1 false;
    MOV computed $RET;
    MOV othIsDefined computed;
    MOV %r1 @c9;
    NE othIsDefined %r1;
    MOV othIsNull computed;
    MOV %r1 null;
    EQ othIsNull %r1;
    MOV othIsReflexive computed;
    MOV %r1 computed;
    EQ othIsReflexive %r1;
    MOV %r1 computed;
    PUSH %r1;
    CALL_REG @c139 1 false;
    MOV othIsSymbol $RET;
    MOV %r1 valIsNaN;
    JF %r1 _l848_;
    MOV %r2 retHighest;
    MOV setLow %r2;
    JIF %r2 _l850_;
    MOV %r3 othIsReflexive;
    LG_OR setLow %r3;
LABEL _l850_:
    JMP _l849_;
LABEL _l848_:
    MOV %r2 valIsUndefined;
    JF %r2 _l851_;
    MOV %r4 othIsReflexive;
    MOV %r3 %r4;
    JF %r4 _l852_;
    MOV %r6 retHighest;
    MOV %r5 %r6;
    JIF %r6 _l853_;
    MOV %r7 othIsDefined;
    LG_OR %r5 %r7;
LABEL _l853_:
    LG_AND %r3 %r5;
LABEL _l852_:
    MOV setLow %r3;
    JMP _l849_;
LABEL _l851_:
    MOV %r3 valIsNull;
    JF %r3 _l854_;
    MOV %r6 othIsReflexive;
    MOV %r5 %r6;
    JF %r6 _l856_;
    MOV %r7 othIsDefined;
    LG_AND %r5 %r7;
LABEL _l856_:
    MOV %r4 %r5;
    JF %r5 _l855_;
    MOV %r7 retHighest;
    MOV %r6 %r7;
    JIF %r7 _l857_;
    MOV %r8 othIsNull;
    NEG %r8;
    LG_OR %r6 %r8;
LABEL _l857_:
    LG_AND %r4 %r6;
LABEL _l855_:
    MOV setLow %r4;
    JMP _l849_;
LABEL _l854_:
    MOV %r4 valIsSymbol;
    JF %r4 _l858_;
    MOV %r8 othIsReflexive;
    MOV %r7 %r8;
    JF %r8 _l861_;
    MOV %r9 othIsDefined;
    LG_AND %r7 %r9;
LABEL _l861_:
    MOV %r6 %r7;
    JF %r7 _l860_;
    MOV %r8 othIsNull;
    NEG %r8;
    LG_AND %r6 %r8;
LABEL _l860_:
    MOV %r5 %r6;
    JF %r6 _l859_;
    MOV %r8 retHighest;
    MOV %r7 %r8;
    JIF %r8 _l862_;
    MOV %r9 othIsSymbol;
    NEG %r9;
    LG_OR %r7 %r9;
LABEL _l862_:
    LG_AND %r5 %r7;
LABEL _l859_:
    MOV setLow %r5;
    JMP _l849_;
LABEL _l858_:
    MOV %r6 othIsNull;
    MOV %r5 %r6;
    JIF %r6 _l864_;
    MOV %r7 othIsSymbol;
    LG_OR %r5 %r7;
LABEL _l864_:
    JF %r5 _l863_;
    MOV %r6 false;
    MOV setLow %r6;
    JMP _l849_;
LABEL _l863_:
    MOV %r7 retHighest;
    JF %r7 _l865_;
    MOV %r6 computed;
    MOV %r8 value;
    LE %r6 %r8;
    JMP _l849_;
LABEL _l865_:
    MOV %r6 computed;
    MOV %r8 value;
    LT %r6 %r8;
    MOV setLow %r6;
LABEL _l849_:
    MOV %r1 setLow;
    JF %r1 _l866_;
    MOV %r2 mid;
    MOV %r3 1;
    ADD %r2 %r3;
    MOV low %r2;
    JMP _l867_;
LABEL _l866_:
    MOV %r2 mid;
    MOV high %r2;
LABEL _l867_:
    JMP _l844_;
LABEL _l845_:
    MOV %r1 @c220;
    PUSH %r1;
    MOV %r1 high;
    PUSH %r1;
    CALL_REG @c77 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f181(array, iteratee) {
    VAR index;
    VAR length;
    VAR resIndex;
    VAR result;
    VAR value;
    VAR computed;
    VAR seen;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV resIndex 0;
    NEW_ARR result;
LABEL _l868_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l869_;
LABEL _l871_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 @c278;
    JF %r1 _l872_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c278 1 false;
    MOV computed $RET;
    JMP _l873_;
LABEL _l872_:
    MOV computed value;
LABEL _l873_:
    MOV %r2 index;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l876_;
    MOV %r4 seen;
    PUSH %r4;
    MOV %r4 computed;
    PUSH %r4;
    CALL_REG @c100 2 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l876_:
    JF %r1 _l874_;
    MOV seen computed;
    MOV %r3 value;
    MOV %r4 0;
    EQ %r3 %r4;
    JF %r3 _l877_;
    MOV %r2 0;
    JMP _l875_;
LABEL _l877_:
    MOV %r2 value;
    MOV %r3 result;
    MOV %r5 resIndex;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV resIndex %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l875_;
LABEL _l874_:
LABEL _l875_:
    JMP _l868_;
LABEL _l869_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f182(value) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    TYPE_OF %r0;
    MOV %r1 "number";
    WEQ %r0 %r1;
    JF %r0 _l878_;
    MOV %r1 value;
    MOV $RET %r1;
    RET;
    JMP _l879_;
LABEL _l878_:
LABEL _l879_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c139 1 false;
    MOV %r0 $RET;
    JF %r0 _l880_;
    MOV %r1 @c8;
    MOV $RET %r1;
    RET;
    JMP _l881_;
LABEL _l880_:
LABEL _l881_:
    MOV %r0 value;
    PLUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f183(value) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 value;
    TYPE_OF %r0;
    MOV %r1 "string";
    WEQ %r0 %r1;
    JF %r0 _l882_;
    MOV %r1 value;
    MOV $RET %r1;
    RET;
    JMP _l883_;
LABEL _l882_:
LABEL _l883_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l884_;
    MOV %r3 @c221;
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c10 2 false;
    MOV %r1 $RET;
    MOV %r2 "";
    ADD %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l885_;
LABEL _l884_:
LABEL _l885_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c139 1 false;
    MOV %r0 $RET;
    JF %r0 _l886_;
    MOV %r2 @c222;
    JF %r2 _l888_;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 @c222;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l887_;
LABEL _l888_:
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l887_;
LABEL _l886_:
LABEL _l887_:
    MOV result value;
    MOV %r0 "";
    ADD result %r0;
    MOV %r2 result;
    MOV %r3 "0";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l891_;
    MOV %r3 1;
    MOV %r5 value;
    DIV %r3 %r5;
    MOV %r4 @c32;
    MINUS %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l891_:
    JF %r1 _l889_;
    MOV %r0 "-0";
    JMP _l890_;
LABEL _l889_:
    MOV %r0 result;
LABEL _l890_:
    MOV $RET %r0;
    RET;
}
func @@f184(array, iteratee, comparator) {
    VAR index;
    VAR includes;
    VAR length;
    VAR isCommon;
    VAR result;
    VAR seen;
    VAR set;
    VAR value;
    VAR computed;
    VAR seenIndex;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV index 1;
    MINUS index;
    MOV includes @c135;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV isCommon true;
    NEW_ARR result;
    MOV seen result;
    MOV %r0 comparator;
    JF %r0 _l892_;
    MOV %r1 false;
    MOV isCommon %r1;
    MOV %r1 @c136;
    MOV includes %r1;
    JMP _l893_;
LABEL _l892_:
    MOV %r1 length;
    MOV %r2 @c90;
    GE %r1 %r2;
    JF %r1 _l894_;
    MOV %r2 @c278;
    JF %r2 _l895_;
    MOV set null;
    JMP _l893_;
LABEL _l895_:
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c223 1 false;
    MOV set $RET;
    MOV %r2 set;
    JF %r2 _l896_;
    MOV %r4 set;
    PUSH %r4;
    CALL_REG @c31 1 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l893_;
LABEL _l896_:
    MOV %r2 false;
    MOV isCommon %r2;
    MOV %r2 @c137;
    MOV includes %r2;
    CALL_REG @c138 0 true;
    MOV %r2 $RET;
    MOV seen %r2;
    JMP _l893_;
LABEL _l894_:
    MOV %r3 @c278;
    JF %r3 _l897_;
    NEW_ARR %r2;
    JMP _l893_;
LABEL _l897_:
    MOV %r2 result;
    MOV seen %r2;
LABEL _l893_:
LABEL _l899_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l898_;
LABEL _l902_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 @c278;
    JF %r1 _l903_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c278 1 false;
    MOV computed $RET;
    JMP _l904_;
LABEL _l903_:
    MOV computed value;
LABEL _l904_:
    MOV %r3 comparator;
    MOV %r2 %r3;
    JIF %r3 _l907_;
    MOV %r4 value;
    MOV %r5 0;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l907_:
    JF %r2 _l905_;
    MOV %r1 value;
    JMP _l906_;
LABEL _l905_:
    MOV %r1 0;
LABEL _l906_:
    MOV value %r1;
    MOV %r2 isCommon;
    MOV %r1 %r2;
    JF %r2 _l910_;
    MOV %r3 computed;
    MOV %r4 computed;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l910_:
    JF %r1 _l908_;
    MOV %r2 seen;
    MOV %r3 "length";
    MOV_PROP seenIndex %r2 %r3;
LABEL _l911_:
    MOV %r3 seenIndex;
    MOV %r2 %r3;
    SUB %r3 1;
    MOV seenIndex %r3;
    JF %r2 _l912_;
LABEL _l914_:
    MOV %r5 seen;
    MOV %r6 seenIndex;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 computed;
    EQ %r3 %r4;
    JF %r3 _l915_;
    JMP _l899_;
    JMP _l909_;
LABEL _l915_:
    JMP _l911_;
LABEL _l912_:
    MOV %r2 @c278;
    JF %r2 _l916_;
    MOV %r3 computed;
    PUSH %r3;
    MOV %r3 seen;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l909_;
LABEL _l916_:
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l909_;
LABEL _l908_:
    MOV %r3 comparator;
    PUSH %r3;
    MOV %r3 computed;
    PUSH %r3;
    MOV %r3 seen;
    PUSH %r3;
    CALL_REG includes 3 false;
    MOV %r2 $RET;
    NEG %r2;
    JF %r2 _l917_;
    MOV %r3 seen;
    MOV %r4 result;
    NE %r3 %r4;
    JF %r3 _l918_;
    MOV %r4 computed;
    PUSH %r4;
    MOV %r4 seen;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 1 false;
    JMP _l909_;
LABEL _l918_:
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 result;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l909_;
LABEL _l917_:
LABEL _l909_:
    JMP _l899_;
LABEL _l898_:
LABEL _l898_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f185(object, path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c157 2 false;
    MOV %r0 $RET;
    MOV object %r0;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l919_;
    MOV %r3 object;
    MOV %r6 path;
    PUSH %r6;
    CALL_REG @c158 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @c149 1 false;
    MOV %r4 $RET;
    DEL %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l919_:
    MOV $RET %r0;
    RET;
}
func @@f186(object, path, updater, customizer) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r3 path;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c203 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG updater 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c204 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f187(array, predicate, isDrop, fromRight) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 fromRight;
    JF %r0 _l920_;
    MOV index length;
    JMP _l921_;
LABEL _l920_:
    MOV index 1;
    MINUS index;
LABEL _l921_:
LABEL _l922_:
    MOV %r2 fromRight;
    JF %r2 _l927_;
    MOV %r3 index;
    MOV %r1 %r3;
    SUB %r3 1;
    MOV index %r3;
    JMP _l928_;
LABEL _l927_:
    MOV %r4 index;
    ADD %r4 1;
    MOV %r1 %r4;
    MOV index %r4;
    MOV %r3 length;
    LT %r1 %r3;
LABEL _l928_:
    MOV %r0 %r1;
    JF %r1 _l926_;
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    MOV %r4 array;
    MOV %r5 index;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG predicate 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l926_:
    JF %r0 _l923_;
LABEL _l925_:
    JMP _l922_;
LABEL _l923_:
    MOV %r1 isDrop;
    JF %r1 _l929_;
    MOV %r3 fromRight;
    JF %r3 _l931_;
    MOV %r2 index;
    MOV %r4 1;
    ADD %r2 %r4;
    JMP _l930_;
LABEL _l931_:
    MOV %r2 length;
    PUSH %r2;
    MOV %r3 fromRight;
    JF %r3 _l932_;
    MOV %r2 0;
    JMP _l930_;
LABEL _l932_:
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    JMP _l930_;
LABEL _l929_:
    MOV %r3 fromRight;
    JF %r3 _l933_;
    MOV %r2 length;
    JMP _l930_;
LABEL _l933_:
    MOV %r2 index;
    PUSH %r2;
    MOV %r3 fromRight;
    JF %r3 _l934_;
    MOV %r2 index;
    MOV %r4 1;
    ADD %r2 %r4;
    JMP _l930_;
LABEL _l934_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
LABEL _l930_:
    MOV $RET %r0;
    RET;
}
func @@f188(value, actions) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV result value;
    MOV %r0 result;
    MOV %r1 @c70;
    INST_OF %r0 %r1;
    JF %r0 _l935_;
    MOV %r2 result;
    MOV %r3 "value";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV result %r1;
    JMP _l936_;
LABEL _l935_:
LABEL _l936_:
    MOV %r1 result;
    PUSH %r1;
    FUNC %r1 @@f602;
    PUSH %r1;
    MOV %r1 actions;
    PUSH %r1;
    CALL_REG @c225 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f189(arrays, iteratee, comparator) {
    VAR length;
    VAR index;
    VAR result;
    VAR array;
    VAR othIndex;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r0 arrays;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    MOV %r1 2;
    LT %r0 %r1;
    JF %r0 _l937_;
    MOV %r2 length;
    JF %r2 _l939_;
    MOV %r4 arrays;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c226 1 false;
    MOV %r1 $RET;
    JMP _l938_;
LABEL _l939_:
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l938_;
LABEL _l937_:
LABEL _l938_:
    MOV index 1;
    MINUS index;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
LABEL _l940_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l941_;
LABEL _l943_:
    MOV %r1 arrays;
    MOV %r2 index;
    MOV_PROP array %r1 %r2;
    MOV othIndex 1;
    MINUS othIndex;
LABEL _l944_:
    MOV %r3 othIndex;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV othIndex %r3;
    MOV %r2 length;
    LT %r1 %r2;
    JF %r1 _l945_;
LABEL _l947_:
    MOV %r2 othIndex;
    MOV %r3 index;
    WNE %r2 %r3;
    JF %r2 _l948_;
    MOV %r4 comparator;
    PUSH %r4;
    MOV %r4 @c278;
    PUSH %r4;
    MOV %r5 arrays;
    MOV %r6 othIndex;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r6 result;
    MOV %r7 index;
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l950_;
    MOV %r6 array;
    LG_OR %r4 %r6;
LABEL _l950_:
    PUSH %r4;
    CALL_REG @c227 4 false;
    MOV %r3 $RET;
    MOV %r4 result;
    MOV %r5 index;
    SET_KEY %r4 %r5 %r3;
    JMP _l949_;
LABEL _l948_:
LABEL _l949_:
    JMP _l944_;
LABEL _l945_:
    JMP _l940_;
LABEL _l941_:
    MOV %r1 comparator;
    PUSH %r1;
    MOV %r1 @c278;
    PUSH %r1;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c143 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c226 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f190(props, values, assignFunc) {
    VAR index;
    VAR length;
    VAR valsLength;
    VAR result;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 props;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 @c213;
    MOV %r1 "length";
    MOV_PROP valsLength %r0 %r1;
    NEW_OBJ result;
LABEL _l951_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l952_;
LABEL _l954_:
    MOV %r1 index;
    MOV %r2 valsLength;
    LT %r1 %r2;
    JF %r1 _l955_;
    MOV %r2 @c213;
    MOV %r3 index;
    MOV_PROP value %r2 %r3;
    JMP _l956_;
LABEL _l955_:
    MOV value @c9;
LABEL _l956_:
    MOV %r1 value;
    PUSH %r1;
    MOV %r2 props;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG assignFunc 3 false;
    JMP _l951_;
LABEL _l952_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f191(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c195 1 false;
    MOV %r1 $RET;
    JF %r1 _l957_;
    MOV %r0 value;
    JMP _l958_;
LABEL _l957_:
    NEW_ARR %r0;
LABEL _l958_:
    MOV $RET %r0;
    RET;
}
func @@f192(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l959_;
    MOV %r0 value;
    JMP _l960_;
LABEL _l959_:
    MOV %r0 @c181;
LABEL _l960_:
    MOV $RET %r0;
    RET;
}
func @@f193(value, object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l961_;
    MOV %r1 value;
    MOV $RET %r1;
    RET;
    JMP _l962_;
LABEL _l961_:
LABEL _l962_:
    MOV %r2 object;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c191 2 false;
    MOV %r1 $RET;
    JF %r1 _l963_;
    NEW_ARR %r0;
    MOV %r2 value;
    SET_KEY %r0 0 %r2;
    JMP _l964_;
LABEL _l963_:
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c228 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c229 1 false;
    MOV %r0 $RET;
LABEL _l964_:
    MOV $RET %r0;
    RET;
}
func @@f194(array, start, end) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r1 end;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l965_;
    MOV %r0 length;
    JMP _l966_;
LABEL _l965_:
    MOV %r0 end;
LABEL _l966_:
    MOV end %r0;
    MOV %r2 start;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l969_;
    MOV %r3 end;
    MOV %r4 length;
    GE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l969_:
    JF %r1 _l967_;
    MOV %r0 array;
    JMP _l968_;
LABEL _l967_:
    MOV %r2 end;
    PUSH %r2;
    MOV %r2 start;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
LABEL _l968_:
    MOV $RET %r0;
    RET;
}
func @@f195(id) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 id;
    PUSH %r1;
    MOV %r1 @c22;
    MOV %r2 "clearTimeout";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f196(buffer, isDeep) {
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 isDeep;
    JF %r0 _l970_;
    MOV %r2 buffer;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l971_;
LABEL _l970_:
LABEL _l971_:
    MOV %r0 buffer;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 @c230;
    JF %r0 _l972_;
    MOV %r1 length;
    PUSH %r1;
    CALL_REG @c230 1 false;
    MOV result $RET;
    JMP _l973_;
LABEL _l972_:
    MOV %r1 length;
    PUSH %r1;
    MOV %r1 buffer;
    MOV %r2 "constructor";
    CALL_VAR %r1 %r2 1 true;
    MOV result $RET;
LABEL _l973_:
    MOV %r0 result;
    PUSH %r0;
    MOV %r0 buffer;
    MOV %r1 "copy";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f197(arrayBuffer) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 arrayBuffer;
    MOV %r2 "byteLength";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 arrayBuffer;
    MOV %r1 "constructor";
    CALL_VAR %r0 %r1 1 true;
    MOV result $RET;
    MOV %r1 arrayBuffer;
    PUSH %r1;
    CALL_REG @c231 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c231 1 true;
    MOV %r0 $RET;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f198(dataView, isDeep) {
    VAR buffer;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 isDeep;
    JF %r0 _l974_;
    MOV %r2 dataView;
    MOV %r3 "buffer";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c232 1 false;
    MOV buffer $RET;
    JMP _l975_;
LABEL _l974_:
    MOV %r1 dataView;
    MOV %r2 "buffer";
    MOV_PROP buffer %r1 %r2;
LABEL _l975_:
    MOV %r2 dataView;
    MOV %r3 "byteLength";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 dataView;
    MOV %r3 "byteOffset";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 buffer;
    PUSH %r1;
    MOV %r1 dataView;
    MOV %r2 "constructor";
    CALL_VAR %r1 %r2 3 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f199(regexp) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 regexp;
    PUSH %r1;
    MOV %r1 @c233;
    MOV %r2 "exec";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 regexp;
    MOV %r2 "source";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 regexp;
    MOV %r1 "constructor";
    CALL_VAR %r0 %r1 2 true;
    MOV result $RET;
    MOV %r1 regexp;
    MOV %r2 "lastIndex";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "lastIndex";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f200(symbol) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 @c234;
    JF %r1 _l976_;
    MOV %r3 symbol;
    PUSH %r3;
    MOV %r3 @c234;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c66 1 false;
    MOV %r0 $RET;
    JMP _l977_;
LABEL _l976_:
    NEW_OBJ %r0;
LABEL _l977_:
    MOV $RET %r0;
    RET;
}
func @@f201(typedArray, isDeep) {
    VAR buffer;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 isDeep;
    JF %r0 _l978_;
    MOV %r2 typedArray;
    MOV %r3 "buffer";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c232 1 false;
    MOV buffer $RET;
    JMP _l979_;
LABEL _l978_:
    MOV %r1 typedArray;
    MOV %r2 "buffer";
    MOV_PROP buffer %r1 %r2;
LABEL _l979_:
    MOV %r2 typedArray;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 typedArray;
    MOV %r3 "byteOffset";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 buffer;
    PUSH %r1;
    MOV %r1 typedArray;
    MOV %r2 "constructor";
    CALL_VAR %r1 %r2 3 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f202(value, other) {
    VAR valIsDefined;
    VAR valIsNull;
    VAR valIsReflexive;
    VAR valIsSymbol;
    VAR othIsDefined;
    VAR othIsNull;
    VAR othIsReflexive;
    VAR othIsSymbol;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    MOV %r0 value;
    MOV %r1 other;
    NE %r0 %r1;
    JF %r0 _l980_;
    MOV valIsDefined value;
    MOV %r1 @c9;
    NE valIsDefined %r1;
    MOV valIsNull value;
    MOV %r1 null;
    EQ valIsNull %r1;
    MOV valIsReflexive value;
    MOV %r1 value;
    EQ valIsReflexive %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c139 1 false;
    MOV valIsSymbol $RET;
    MOV othIsDefined other;
    MOV %r1 @c9;
    NE othIsDefined %r1;
    MOV othIsNull other;
    MOV %r1 null;
    EQ othIsNull %r1;
    MOV othIsReflexive other;
    MOV %r1 other;
    EQ othIsReflexive %r1;
    MOV %r1 other;
    PUSH %r1;
    CALL_REG @c139 1 false;
    MOV othIsSymbol $RET;
    MOV %r8 othIsNull;
    NEG %r8;
    MOV %r7 %r8;
    JF %r8 _l989_;
    MOV %r9 othIsSymbol;
    NEG %r9;
    LG_AND %r7 %r9;
LABEL _l989_:
    MOV %r6 %r7;
    JF %r7 _l988_;
    MOV %r8 valIsSymbol;
    NEG %r8;
    LG_AND %r6 %r8;
LABEL _l988_:
    MOV %r5 %r6;
    JF %r6 _l987_;
    MOV %r7 value;
    MOV %r8 other;
    GT %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l987_:
    MOV %r4 %r5;
    JIF %r5 _l986_;
    MOV %r10 valIsSymbol;
    MOV %r9 %r10;
    JF %r10 _l993_;
    MOV %r11 othIsDefined;
    LG_AND %r9 %r11;
LABEL _l993_:
    MOV %r8 %r9;
    JF %r9 _l992_;
    MOV %r10 othIsReflexive;
    LG_AND %r8 %r10;
LABEL _l992_:
    MOV %r7 %r8;
    JF %r8 _l991_;
    MOV %r9 othIsNull;
    NEG %r9;
    LG_AND %r7 %r9;
LABEL _l991_:
    MOV %r6 %r7;
    JF %r7 _l990_;
    MOV %r8 othIsSymbol;
    NEG %r8;
    LG_AND %r6 %r8;
LABEL _l990_:
    LG_OR %r4 %r6;
LABEL _l986_:
    MOV %r3 %r4;
    JIF %r4 _l985_;
    MOV %r7 valIsNull;
    MOV %r6 %r7;
    JF %r7 _l995_;
    MOV %r8 othIsDefined;
    LG_AND %r6 %r8;
LABEL _l995_:
    MOV %r5 %r6;
    JF %r6 _l994_;
    MOV %r7 othIsReflexive;
    LG_AND %r5 %r7;
LABEL _l994_:
    LG_OR %r3 %r5;
LABEL _l985_:
    MOV %r2 %r3;
    JIF %r3 _l984_;
    MOV %r5 valIsDefined;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l996_;
    MOV %r6 othIsReflexive;
    LG_AND %r4 %r6;
LABEL _l996_:
    LG_OR %r2 %r4;
LABEL _l984_:
    MOV %r1 %r2;
    JIF %r2 _l983_;
    MOV %r3 valIsReflexive;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l983_:
    JF %r1 _l982_;
    MOV %r2 1;
    MOV $RET %r2;
    RET;
    JMP _l981_;
LABEL _l982_:
    MOV %r8 valIsNull;
    NEG %r8;
    MOV %r7 %r8;
    JF %r8 _l1004_;
    MOV %r9 valIsSymbol;
    NEG %r9;
    LG_AND %r7 %r9;
LABEL _l1004_:
    MOV %r6 %r7;
    JF %r7 _l1003_;
    MOV %r8 othIsSymbol;
    NEG %r8;
    LG_AND %r6 %r8;
LABEL _l1003_:
    MOV %r5 %r6;
    JF %r6 _l1002_;
    MOV %r7 value;
    MOV %r8 other;
    LT %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l1002_:
    MOV %r4 %r5;
    JIF %r5 _l1001_;
    MOV %r10 othIsSymbol;
    MOV %r9 %r10;
    JF %r10 _l1008_;
    MOV %r11 valIsDefined;
    LG_AND %r9 %r11;
LABEL _l1008_:
    MOV %r8 %r9;
    JF %r9 _l1007_;
    MOV %r10 valIsReflexive;
    LG_AND %r8 %r10;
LABEL _l1007_:
    MOV %r7 %r8;
    JF %r8 _l1006_;
    MOV %r9 valIsNull;
    NEG %r9;
    LG_AND %r7 %r9;
LABEL _l1006_:
    MOV %r6 %r7;
    JF %r7 _l1005_;
    MOV %r8 valIsSymbol;
    NEG %r8;
    LG_AND %r6 %r8;
LABEL _l1005_:
    LG_OR %r4 %r6;
LABEL _l1001_:
    MOV %r3 %r4;
    JIF %r4 _l1000_;
    MOV %r7 othIsNull;
    MOV %r6 %r7;
    JF %r7 _l1010_;
    MOV %r8 valIsDefined;
    LG_AND %r6 %r8;
LABEL _l1010_:
    MOV %r5 %r6;
    JF %r6 _l1009_;
    MOV %r7 valIsReflexive;
    LG_AND %r5 %r7;
LABEL _l1009_:
    LG_OR %r3 %r5;
LABEL _l1000_:
    MOV %r2 %r3;
    JIF %r3 _l999_;
    MOV %r5 othIsDefined;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l1011_;
    MOV %r6 valIsReflexive;
    LG_AND %r4 %r6;
LABEL _l1011_:
    LG_OR %r2 %r4;
LABEL _l999_:
    MOV %r1 %r2;
    JIF %r2 _l998_;
    MOV %r3 othIsReflexive;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l998_:
    JF %r1 _l997_;
    MOV %r2 1;
    MINUS %r2;
    MOV $RET %r2;
    RET;
    JMP _l981_;
LABEL _l997_:
    JMP _l981_;
LABEL _l980_:
LABEL _l981_:
    MOV %r0 0;
    MOV $RET %r0;
    RET;
}
func @@f203(object, other, orders) {
    VAR index;
    VAR objCriteria;
    VAR othCriteria;
    VAR length;
    VAR ordersLength;
    VAR result;
    VAR order;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 object;
    MOV %r1 "criteria";
    MOV_PROP objCriteria %r0 %r1;
    MOV %r0 other;
    MOV %r1 "criteria";
    MOV_PROP othCriteria %r0 %r1;
    MOV %r0 objCriteria;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 orders;
    MOV %r1 "length";
    MOV_PROP ordersLength %r0 %r1;
LABEL _l1012_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1013_;
LABEL _l1015_:
    MOV %r2 othCriteria;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 objCriteria;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c235 2 false;
    MOV result $RET;
    MOV %r1 result;
    JF %r1 _l1016_;
    MOV %r2 index;
    MOV %r3 ordersLength;
    GE %r2 %r3;
    JF %r2 _l1018_;
    MOV %r3 result;
    MOV $RET %r3;
    RET;
    JMP _l1017_;
LABEL _l1018_:
    MOV %r2 orders;
    MOV %r3 index;
    MOV_PROP order %r2 %r3;
    MOV %r2 result;
    MOV %r4 order;
    MOV %r5 "desc";
    WEQ %r4 %r5;
    JF %r4 _l1019_;
    MOV %r3 1;
    MINUS %r3;
    JMP _l1017_;
LABEL _l1019_:
    MOV %r3 1;
    MUL %r2 %r3;
    MOV $RET %r2;
    RET;
    JMP _l1017_;
LABEL _l1016_:
LABEL _l1017_:
    JMP _l1012_;
LABEL _l1013_:
    MOV %r2 object;
    MOV %r3 "index";
    MOV_PROP %r0 %r2 %r3;
    MOV %r2 other;
    MOV %r3 "index";
    MOV_PROP %r1 %r2 %r3;
    SUB %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f204(args, partials, holders, isCurried) {
    VAR argsIndex;
    VAR argsLength;
    VAR holdersLength;
    VAR leftIndex;
    VAR leftLength;
    VAR rangeLength;
    VAR result;
    VAR isUncurried;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV argsIndex 1;
    MINUS argsIndex;
    MOV %r0 args;
    MOV %r1 "length";
    MOV_PROP argsLength %r0 %r1;
    MOV %r0 holders;
    MOV %r1 "length";
    MOV_PROP holdersLength %r0 %r1;
    MOV leftIndex 1;
    MINUS leftIndex;
    MOV %r0 partials;
    MOV %r1 "length";
    MOV_PROP leftLength %r0 %r1;
    MOV %r0 0;
    PUSH %r0;
    MOV %r0 argsLength;
    MOV %r1 holdersLength;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_REG @c155 2 false;
    MOV rangeLength $RET;
    MOV %r0 leftLength;
    MOV %r1 rangeLength;
    ADD %r0 %r1;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
    MOV isUncurried isCurried;
    NEG isUncurried;
LABEL _l1020_:
    MOV %r2 leftIndex;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV leftIndex %r2;
    MOV %r1 leftLength;
    LT %r0 %r1;
    JF %r0 _l1021_;
LABEL _l1023_:
    MOV %r2 partials;
    MOV %r3 leftIndex;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r3 leftIndex;
    SET_KEY %r2 %r3 %r1;
    JMP _l1020_;
LABEL _l1021_:
LABEL _l1024_:
    MOV %r2 argsIndex;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV argsIndex %r2;
    MOV %r1 holdersLength;
    LT %r0 %r1;
    JF %r0 _l1025_;
LABEL _l1027_:
    MOV %r2 isUncurried;
    MOV %r1 %r2;
    JIF %r2 _l1030_;
    MOV %r3 argsIndex;
    MOV %r4 argsLength;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1030_:
    JF %r1 _l1028_;
    MOV %r3 args;
    MOV %r4 argsIndex;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 result;
    MOV %r3 holders;
    MOV %r5 argsIndex;
    MOV_PROP %r4 %r3 %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l1029_;
LABEL _l1028_:
LABEL _l1029_:
    JMP _l1024_;
LABEL _l1025_:
LABEL _l1031_:
    MOV %r1 rangeLength;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV rangeLength %r1;
    JF %r0 _l1032_;
LABEL _l1034_:
    MOV %r2 args;
    MOV %r4 argsIndex;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV argsIndex %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r4 leftIndex;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV leftIndex %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l1031_;
LABEL _l1032_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f205(args, partials, holders, isCurried) {
    VAR argsIndex;
    VAR argsLength;
    VAR holdersIndex;
    VAR holdersLength;
    VAR rightIndex;
    VAR rightLength;
    VAR rangeLength;
    VAR result;
    VAR isUncurried;
    VAR offset;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV argsIndex 1;
    MINUS argsIndex;
    MOV %r0 args;
    MOV %r1 "length";
    MOV_PROP argsLength %r0 %r1;
    MOV holdersIndex 1;
    MINUS holdersIndex;
    MOV %r0 holders;
    MOV %r1 "length";
    MOV_PROP holdersLength %r0 %r1;
    MOV rightIndex 1;
    MINUS rightIndex;
    MOV %r0 partials;
    MOV %r1 "length";
    MOV_PROP rightLength %r0 %r1;
    MOV %r0 0;
    PUSH %r0;
    MOV %r0 argsLength;
    MOV %r1 holdersLength;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_REG @c155 2 false;
    MOV rangeLength $RET;
    MOV %r0 rangeLength;
    MOV %r1 rightLength;
    ADD %r0 %r1;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
    MOV isUncurried isCurried;
    NEG isUncurried;
LABEL _l1035_:
    MOV %r2 argsIndex;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV argsIndex %r2;
    MOV %r1 rangeLength;
    LT %r0 %r1;
    JF %r0 _l1036_;
LABEL _l1038_:
    MOV %r2 args;
    MOV %r3 argsIndex;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r3 argsIndex;
    SET_KEY %r2 %r3 %r1;
    JMP _l1035_;
LABEL _l1036_:
    MOV offset argsIndex;
LABEL _l1039_:
    MOV %r2 rightIndex;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV rightIndex %r2;
    MOV %r1 rightLength;
    LT %r0 %r1;
    JF %r0 _l1040_;
LABEL _l1042_:
    MOV %r2 partials;
    MOV %r3 rightIndex;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r3 offset;
    MOV %r4 rightIndex;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l1039_;
LABEL _l1040_:
LABEL _l1043_:
    MOV %r2 holdersIndex;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV holdersIndex %r2;
    MOV %r1 holdersLength;
    LT %r0 %r1;
    JF %r0 _l1044_;
LABEL _l1046_:
    MOV %r2 isUncurried;
    MOV %r1 %r2;
    JIF %r2 _l1049_;
    MOV %r3 argsIndex;
    MOV %r4 argsLength;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1049_:
    JF %r1 _l1047_;
    MOV %r3 args;
    MOV %r5 argsIndex;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV argsIndex %r5;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 result;
    MOV %r4 offset;
    MOV %r3 holders;
    MOV %r4 holdersIndex;
    MOV_PROP %r5 %r3 %r4;
    ADD %r4 %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l1048_;
LABEL _l1047_:
LABEL _l1048_:
    JMP _l1043_;
LABEL _l1044_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f206(source, array) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 source;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 array;
    JIF %r0 _l1050_;
    MOV %r3 length;
    PUSH %r3;
    CALL_REG @c107 1 false;
    MOV %r2 $RET;
    MOV array %r2;
    MOV %r1 %r2;
LABEL _l1050_:
LABEL _l1051_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1052_;
LABEL _l1054_:
    MOV %r2 source;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 array;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l1051_;
LABEL _l1052_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f207(source, props, object, customizer) {
    VAR isNew;
    VAR index;
    VAR length;
    VAR key;
    VAR newValue;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV isNew object;
    NEG isNew;
    MOV %r0 object;
    JIF %r0 _l1055_;
    NEW_OBJ %r2;
    MOV object %r2;
    MOV %r1 %r2;
LABEL _l1055_:
    MOV index 1;
    MINUS index;
    MOV %r0 props;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l1056_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1057_;
LABEL _l1059_:
    MOV %r1 props;
    MOV %r2 index;
    MOV_PROP key %r1 %r2;
    MOV %r1 customizer;
    JF %r1 _l1060_;
    MOV %r2 source;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    MOV %r2 key;
    PUSH %r2;
    MOV %r3 source;
    MOV %r4 key;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r3 object;
    MOV %r4 key;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG customizer 5 false;
    MOV newValue $RET;
    JMP _l1061_;
LABEL _l1060_:
    MOV newValue @c9;
LABEL _l1061_:
    MOV %r1 newValue;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1062_;
    MOV %r3 source;
    MOV %r4 key;
    MOV_PROP %r2 %r3 %r4;
    MOV newValue %r2;
    JMP _l1063_;
LABEL _l1062_:
LABEL _l1063_:
    MOV %r1 isNew;
    JF %r1 _l1064_;
    MOV %r2 newValue;
    PUSH %r2;
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c101 3 false;
    JMP _l1065_;
LABEL _l1064_:
    MOV %r2 newValue;
    PUSH %r2;
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c215 3 false;
LABEL _l1065_:
    JMP _l1056_;
LABEL _l1057_:
    MOV %r0 object;
    MOV $RET %r0;
    RET;
}
func @@f208(source, object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 object;
    PUSH %r1;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c236 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c104 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f209(source, object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 object;
    PUSH %r1;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c237 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c104 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f210(setter, initializer) {
    VAR %r0;
    ALLOC @c514;
    MOV @c514 setter;
    ALLOC @c513;
    MOV @c513 initializer;
    FUNC %r0 @@f603;
    MOV $RET %r0;
    RET;
}
func @@f211(assigner) {
    VAR %r0;
    VAR %r1;
    ALLOC @c515;
    MOV @c515 assigner;
    FUNC %r1 @@f604;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f212(eachFunc, fromRight) {
    VAR %r0;
    ALLOC @c516;
    MOV @c516 eachFunc;
    ALLOC @c517;
    MOV @c517 fromRight;
    FUNC %r0 @@f605;
    MOV $RET %r0;
    RET;
}
func @@f213(fromRight) {
    VAR %r0;
    ALLOC @c518;
    MOV @c518 fromRight;
    FUNC %r0 @@f606;
    MOV $RET %r0;
    RET;
}
func @@f214(func, bitmask, thisArg) {
    VAR @c522;
    ALLOC @c522;
    VAR @c520;
    ALLOC @c520;
    VAR @c519;
    ALLOC @c519;
    VAR %r0;
    FUNC @c519 @@f607;
    ALLOC @c521;
    MOV @c521 func;
    ALLOC @c523;
    MOV @c523 thisArg;
    MOV @c522 bitmask;
    MOV %r0 @c239;
    AND @c522 %r0;
    MOV %r0 @c521;
    PUSH %r0;
    CALL_REG @c240 1 false;
    MOV @c520 $RET;
    MOV %r0 @c519;
    MOV $RET %r0;
    RET;
}
func @@f215(methodName) {
    VAR %r0;
    ALLOC @c524;
    MOV @c524 methodName;
    FUNC %r0 @@f608;
    MOV $RET %r0;
    RET;
}
func @@f216(callback) {
    VAR %r0;
    ALLOC @c525;
    MOV @c525 callback;
    FUNC %r0 @@f609;
    MOV $RET %r0;
    RET;
}
func @@f217(Ctor) {
    VAR %r0;
    ALLOC @c529;
    MOV @c529 Ctor;
    FUNC %r0 @@f610;
    MOV $RET %r0;
    RET;
}
func @@f218(func, bitmask, arity) {
    VAR @c535;
    ALLOC @c535;
    VAR @c530;
    ALLOC @c530;
    VAR %r0;
    FUNC @c530 @@f611;
    ALLOC @c533;
    MOV @c533 func;
    ALLOC @c532;
    MOV @c532 bitmask;
    ALLOC @c531;
    MOV @c531 arity;
    MOV %r0 @c533;
    PUSH %r0;
    CALL_REG @c240 1 false;
    MOV @c535 $RET;
    MOV %r0 @c530;
    MOV $RET %r0;
    RET;
}
func @@f219(findIndexFunc) {
    VAR %r0;
    ALLOC @c536;
    MOV @c536 findIndexFunc;
    FUNC %r0 @@f612;
    MOV $RET %r0;
    RET;
}
func @@f220(fromRight) {
    VAR %r0;
    VAR %r1;
    ALLOC @c537;
    MOV @c537 fromRight;
    FUNC %r1 @@f613;
    PUSH %r1;
    CALL_REG @c241 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f221(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    VAR @c555;
    ALLOC @c555;
    VAR @c551;
    ALLOC @c551;
    VAR @c552;
    ALLOC @c552;
    VAR @c538;
    ALLOC @c538;
    VAR @c554;
    ALLOC @c554;
    VAR @c556;
    ALLOC @c556;
    VAR @c539;
    ALLOC @c539;
    VAR %r0;
    VAR %r1;
    FUNC @c539 @@f614;
    ALLOC @c550;
    MOV @c550 func;
    ALLOC @c549;
    MOV @c549 bitmask;
    ALLOC @c548;
    MOV @c548 thisArg;
    ALLOC @c541;
    MOV @c541 partials;
    ALLOC @c542;
    MOV @c542 holders;
    ALLOC @c543;
    MOV @c543 partialsRight;
    ALLOC @c544;
    MOV @c544 holdersRight;
    ALLOC @c547;
    MOV @c547 argPos;
    ALLOC @c546;
    MOV @c546 ary;
    ALLOC @c545;
    MOV @c545 arity;
    MOV @c555 @c549;
    MOV %r0 @c242;
    AND @c555 %r0;
    MOV @c551 @c549;
    MOV %r0 @c239;
    AND @c551 %r0;
    MOV @c552 @c549;
    MOV %r0 @c46;
    AND @c552 %r0;
    MOV @c538 @c549;
    MOV %r0 @c243;
    MOV %r1 @c244;
    OR %r0 %r1;
    AND @c538 %r0;
    MOV @c554 @c549;
    MOV %r0 @c245;
    AND @c554 %r0;
    MOV %r0 @c552;
    JF %r0 _l1066_;
    MOV @c556 @c9;
    JMP _l1067_;
LABEL _l1066_:
    MOV %r1 @c550;
    PUSH %r1;
    CALL_REG @c240 1 false;
    MOV @c556 $RET;
LABEL _l1067_:
    MOV %r0 @c539;
    MOV $RET %r0;
    RET;
}
func @@f222(setter, toIteratee) {
    VAR %r0;
    ALLOC @c558;
    MOV @c558 setter;
    ALLOC @c557;
    MOV @c557 toIteratee;
    FUNC %r0 @@f615;
    MOV $RET %r0;
    RET;
}
func @@f223(operator, defaultValue) {
    VAR %r0;
    ALLOC @c562;
    MOV @c562 operator;
    ALLOC @c560;
    MOV @c560 defaultValue;
    FUNC %r0 @@f616;
    MOV $RET %r0;
    RET;
}
func @@f224(arrayFunc) {
    VAR %r0;
    VAR %r1;
    ALLOC @c703;
    MOV @c703 arrayFunc;
    FUNC %r1 @@f617;
    PUSH %r1;
    CALL_REG @c241 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f225(length, chars) {
    VAR charsLength;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 chars;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1068_;
    MOV %r0 " ";
    JMP _l1069_;
LABEL _l1068_:
    MOV %r2 chars;
    PUSH %r2;
    CALL_REG @c221 1 false;
    MOV %r0 $RET;
LABEL _l1069_:
    MOV chars %r0;
    MOV %r0 chars;
    MOV %r1 "length";
    MOV_PROP charsLength %r0 %r1;
    MOV %r0 charsLength;
    MOV %r1 2;
    LT %r0 %r1;
    JF %r0 _l1070_;
    MOV %r2 charsLength;
    JF %r2 _l1072_;
    MOV %r3 length;
    PUSH %r3;
    MOV %r3 chars;
    PUSH %r3;
    CALL_REG @c246 2 false;
    MOV %r1 $RET;
    JMP _l1071_;
LABEL _l1072_:
    MOV %r1 chars;
    MOV $RET %r1;
    RET;
    JMP _l1071_;
LABEL _l1070_:
LABEL _l1071_:
    MOV %r1 length;
    MOV %r3 chars;
    PUSH %r3;
    CALL_REG @c247 1 false;
    MOV %r2 $RET;
    DIV %r1 %r2;
    PUSH %r1;
    CALL_REG @c209 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 chars;
    PUSH %r0;
    CALL_REG @c246 2 false;
    MOV result $RET;
    MOV %r2 chars;
    PUSH %r2;
    CALL_REG @c15 1 false;
    MOV %r1 $RET;
    JF %r1 _l1073_;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 length;
    PUSH %r4;
    MOV %r4 0;
    PUSH %r4;
    MOV %r5 result;
    PUSH %r5;
    CALL_REG @c248 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @c249 3 false;
    MOV %r2 $RET;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1074_;
LABEL _l1073_:
    MOV %r2 length;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l1074_:
    MOV $RET %r0;
    RET;
}
func @@f226(func, bitmask, thisArg, partials) {
    VAR @c567;
    ALLOC @c567;
    VAR @c565;
    ALLOC @c565;
    VAR @c564;
    ALLOC @c564;
    VAR %r0;
    FUNC @c564 @@f618;
    ALLOC @c566;
    MOV @c566 func;
    ALLOC @c568;
    MOV @c568 thisArg;
    ALLOC @c563;
    MOV @c563 partials;
    MOV @c567 bitmask;
    MOV %r0 @c239;
    AND @c567 %r0;
    MOV %r0 @c566;
    PUSH %r0;
    CALL_REG @c240 1 false;
    MOV @c565 $RET;
    MOV %r0 @c564;
    MOV $RET %r0;
    RET;
}
func @@f227(fromRight) {
    VAR %r0;
    ALLOC @c569;
    MOV @c569 fromRight;
    FUNC %r0 @@f619;
    MOV $RET %r0;
    RET;
}
func @@f228(operator) {
    VAR %r0;
    ALLOC @c571;
    MOV @c571 operator;
    FUNC %r0 @@f620;
    MOV $RET %r0;
    RET;
}
func @@f229(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    VAR isCurry;
    VAR newHolders;
    VAR newHoldersRight;
    VAR newPartials;
    VAR newPartialsRight;
    VAR newData;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV isCurry bitmask;
    MOV %r0 @c243;
    AND isCurry %r0;
    MOV %r0 isCurry;
    JF %r0 _l1075_;
    MOV newHolders holders;
    JMP _l1076_;
LABEL _l1075_:
    MOV newHolders @c9;
LABEL _l1076_:
    MOV %r0 isCurry;
    JF %r0 _l1077_;
    MOV newHoldersRight @c9;
    JMP _l1078_;
LABEL _l1077_:
    MOV newHoldersRight holders;
LABEL _l1078_:
    MOV %r0 isCurry;
    JF %r0 _l1079_;
    MOV newPartials partials;
    JMP _l1080_;
LABEL _l1079_:
    MOV newPartials @c9;
LABEL _l1080_:
    MOV %r0 isCurry;
    JF %r0 _l1081_;
    MOV newPartialsRight @c9;
    JMP _l1082_;
LABEL _l1081_:
    MOV newPartialsRight partials;
LABEL _l1082_:
    MOV %r1 isCurry;
    JF %r1 _l1083_;
    MOV %r0 @c250;
    JMP _l1084_;
LABEL _l1083_:
    MOV %r0 @c251;
LABEL _l1084_:
    MOV %r1 bitmask;
    OR %r1 %r0;
    MOV bitmask %r1;
    MOV %r1 isCurry;
    JF %r1 _l1085_;
    MOV %r0 @c251;
    JMP _l1086_;
LABEL _l1085_:
    MOV %r0 @c250;
LABEL _l1086_:
    NOT %r0;
    MOV %r1 bitmask;
    AND %r1 %r0;
    MOV bitmask %r1;
    MOV %r0 bitmask;
    MOV %r1 @c252;
    AND %r0 %r1;
    NEG %r0;
    JF %r0 _l1087_;
    MOV %r1 @c239;
    MOV %r2 @c46;
    OR %r1 %r2;
    NOT %r1;
    MOV %r2 bitmask;
    AND %r2 %r1;
    MOV bitmask %r2;
    JMP _l1088_;
LABEL _l1087_:
LABEL _l1088_:
    NEW_ARR newData;
    MOV %r0 func;
    SET_KEY newData 0 %r0;
    MOV %r0 bitmask;
    SET_KEY newData 1 %r0;
    MOV %r0 thisArg;
    SET_KEY newData 2 %r0;
    MOV %r0 newPartials;
    SET_KEY newData 3 %r0;
    MOV %r0 newHolders;
    SET_KEY newData 4 %r0;
    MOV %r0 newPartialsRight;
    SET_KEY newData 5 %r0;
    MOV %r0 newHoldersRight;
    SET_KEY newData 6 %r0;
    MOV %r0 argPos;
    SET_KEY newData 7 %r0;
    MOV %r0 @c378;
    SET_KEY newData 8 %r0;
    MOV %r0 arity;
    SET_KEY newData 9 %r0;
    MOV %r0 newData;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 wrapFunc;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV result $RET;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c253 1 false;
    MOV %r0 $RET;
    JF %r0 _l1089_;
    MOV %r1 newData;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c254 2 false;
    JMP _l1090_;
LABEL _l1089_:
LABEL _l1090_:
    MOV %r0 placeholder;
    MOV %r1 result;
    MOV %r2 "placeholder";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c255 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f230(methodName) {
    VAR @c572;
    ALLOC @c572;
    VAR %r0;
    VAR %r1;
    MOV %r0 @c256;
    MOV %r1 methodName;
    MOV_PROP @c572 %r0 %r1;
    FUNC %r0 @@f621;
    MOV $RET %r0;
    RET;
}
func @@f231(values) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c213;
    PUSH %r1;
    CALL_REG @c257 1 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f232(keysFunc) {
    VAR %r0;
    ALLOC @c574;
    MOV @c574 keysFunc;
    FUNC %r0 @@f622;
    MOV $RET %r0;
    RET;
}
func @@f233(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    VAR isBindKey;
    VAR length;
    VAR partialsRight;
    VAR holdersRight;
    VAR data;
    VAR newData;
    VAR result;
    VAR setter;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV isBindKey bitmask;
    MOV %r0 @c46;
    AND isBindKey %r0;
    MOV %r1 isBindKey;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1093_;
    MOV %r2 func;
    TYPE_OF %r2;
    MOV %r3 "function";
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1093_:
    JF %r0 _l1091_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1092_;
LABEL _l1091_:
LABEL _l1092_:
    MOV %r0 partials;
    JF %r0 _l1094_;
    MOV %r1 partials;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
    JMP _l1095_;
LABEL _l1094_:
    MOV length 0;
LABEL _l1095_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1096_;
    MOV %r1 @c250;
    MOV %r2 @c251;
    OR %r1 %r2;
    NOT %r1;
    MOV %r2 bitmask;
    AND %r2 %r1;
    MOV bitmask %r2;
    MOV %r2 @c9;
    MOV holders %r2;
    MOV %r1 %r2;
    MOV partials %r1;
    JMP _l1097_;
LABEL _l1096_:
LABEL _l1097_:
    MOV %r1 @c378;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1098_;
    MOV %r0 @c378;
    JMP _l1099_;
LABEL _l1098_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 @c378;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r0 $RET;
LABEL _l1099_:
    MOV @c378 %r0;
    MOV %r1 arity;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1100_;
    MOV %r0 arity;
    JMP _l1101_;
LABEL _l1100_:
    MOV %r2 arity;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1101_:
    MOV arity %r0;
    MOV %r1 holders;
    JF %r1 _l1102_;
    MOV %r2 holders;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    JMP _l1103_;
LABEL _l1102_:
    MOV %r0 0;
LABEL _l1103_:
    MOV %r1 length;
    SUB %r1 %r0;
    MOV length %r1;
    MOV %r0 bitmask;
    MOV %r1 @c251;
    AND %r0 %r1;
    JF %r0 _l1104_;
    MOV partialsRight partials;
    MOV holdersRight holders;
    MOV %r2 @c9;
    MOV holders %r2;
    MOV %r1 %r2;
    MOV partials %r1;
    JMP _l1105_;
LABEL _l1104_:
LABEL _l1105_:
    MOV %r0 isBindKey;
    JF %r0 _l1106_;
    MOV data @c9;
    JMP _l1107_;
LABEL _l1106_:
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c258 1 false;
    MOV data $RET;
LABEL _l1107_:
    NEW_ARR newData;
    MOV %r0 func;
    SET_KEY newData 0 %r0;
    MOV %r0 bitmask;
    SET_KEY newData 1 %r0;
    MOV %r0 thisArg;
    SET_KEY newData 2 %r0;
    MOV %r0 partials;
    SET_KEY newData 3 %r0;
    MOV %r0 holders;
    SET_KEY newData 4 %r0;
    MOV %r0 partialsRight;
    SET_KEY newData 5 %r0;
    MOV %r0 holdersRight;
    SET_KEY newData 6 %r0;
    MOV %r0 argPos;
    SET_KEY newData 7 %r0;
    MOV %r0 @c378;
    SET_KEY newData 8 %r0;
    MOV %r0 arity;
    SET_KEY newData 9 %r0;
    MOV %r0 data;
    JF %r0 _l1108_;
    MOV %r1 data;
    PUSH %r1;
    MOV %r1 newData;
    PUSH %r1;
    CALL_REG @c259 2 false;
    JMP _l1109_;
LABEL _l1108_:
LABEL _l1109_:
    MOV %r1 newData;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV func %r0;
    MOV %r1 newData;
    MOV %r2 1;
    MOV_PROP %r0 %r1 %r2;
    MOV bitmask %r0;
    MOV %r1 newData;
    MOV %r2 2;
    MOV_PROP %r0 %r1 %r2;
    MOV thisArg %r0;
    MOV %r1 newData;
    MOV %r2 3;
    MOV_PROP %r0 %r1 %r2;
    MOV partials %r0;
    MOV %r1 newData;
    MOV %r2 4;
    MOV_PROP %r0 %r1 %r2;
    MOV holders %r0;
    MOV %r4 newData;
    MOV %r5 9;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 @c9;
    EQ %r2 %r3;
    JF %r2 _l1110_;
    MOV %r3 isBindKey;
    JF %r3 _l1112_;
    MOV %r1 0;
    JMP _l1111_;
LABEL _l1112_:
    MOV %r4 func;
    MOV %r5 "length";
    MOV_PROP %r1 %r4 %r5;
    JMP _l1111_;
LABEL _l1110_:
    MOV %r3 0;
    PUSH %r3;
    MOV %r5 newData;
    MOV %r6 9;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 length;
    SUB %r3 %r4;
    PUSH %r3;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
LABEL _l1111_:
    MOV %r2 newData;
    MOV %r3 9;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV arity %r0;
    MOV %r1 arity;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1115_;
    MOV %r2 bitmask;
    MOV %r3 @c243;
    MOV %r4 @c244;
    OR %r3 %r4;
    AND %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1115_:
    JF %r0 _l1113_;
    MOV %r1 @c243;
    MOV %r2 @c244;
    OR %r1 %r2;
    NOT %r1;
    MOV %r2 bitmask;
    AND %r2 %r1;
    MOV bitmask %r2;
    JMP _l1114_;
LABEL _l1113_:
LABEL _l1114_:
    MOV %r1 bitmask;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l1118_;
    MOV %r2 bitmask;
    MOV %r3 @c239;
    WEQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1118_:
    JF %r0 _l1116_;
    MOV %r1 thisArg;
    PUSH %r1;
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c260 3 false;
    MOV result $RET;
    JMP _l1117_;
LABEL _l1116_:
    MOV %r2 bitmask;
    MOV %r3 @c243;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l1120_;
    MOV %r3 bitmask;
    MOV %r4 @c244;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1120_:
    JF %r1 _l1119_;
    MOV %r3 arity;
    PUSH %r3;
    MOV %r3 bitmask;
    PUSH %r3;
    MOV %r3 func;
    PUSH %r3;
    CALL_REG @c261 3 false;
    MOV %r2 $RET;
    MOV result %r2;
    JMP _l1117_;
LABEL _l1119_:
    MOV %r4 bitmask;
    MOV %r5 @c250;
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l1123_;
    MOV %r5 bitmask;
    MOV %r6 @c239;
    MOV %r7 @c250;
    OR %r6 %r7;
    WEQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l1123_:
    MOV %r2 %r3;
    JF %r3 _l1122_;
    MOV %r5 holders;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l1122_:
    JF %r2 _l1121_;
    MOV %r4 partials;
    PUSH %r4;
    MOV %r4 thisArg;
    PUSH %r4;
    MOV %r4 bitmask;
    PUSH %r4;
    MOV %r4 func;
    PUSH %r4;
    CALL_REG @c262 4 false;
    MOV %r3 $RET;
    MOV result %r3;
    JMP _l1117_;
LABEL _l1121_:
    MOV %r4 newData;
    PUSH %r4;
    MOV %r4 @c9;
    PUSH %r4;
    MOV %r4 @c263;
    MOV %r5 "apply";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV result %r3;
LABEL _l1117_:
    MOV %r0 data;
    JF %r0 _l1124_;
    MOV setter @c264;
    JMP _l1125_;
LABEL _l1124_:
    MOV setter @c254;
LABEL _l1125_:
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    MOV %r2 newData;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG setter 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c255 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f234(objValue, srcValue, key, object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 objValue;
    MOV %r2 @c9;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1128_;
    MOV %r5 @c265;
    MOV %r6 key;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 objValue;
    PUSH %r4;
    CALL_REG @c100 2 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l1129_;
    MOV %r5 key;
    PUSH %r5;
    MOV %r5 object;
    PUSH %r5;
    MOV %r5 @c72;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l1129_:
    LG_OR %r0 %r2;
LABEL _l1128_:
    JF %r0 _l1126_;
    MOV %r1 srcValue;
    MOV $RET %r1;
    RET;
    JMP _l1127_;
LABEL _l1126_:
LABEL _l1127_:
    MOV %r0 objValue;
    MOV $RET %r0;
    RET;
}
func @@f235(objValue, srcValue, key, object, source, stack) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 objValue;
    PUSH %r2;
    CALL_REG @c112 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l1132_;
    MOV %r3 srcValue;
    PUSH %r3;
    CALL_REG @c112 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1132_:
    JF %r0 _l1130_;
    MOV %r1 objValue;
    PUSH %r1;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 stack;
    MOV %r2 "set";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 stack;
    PUSH %r1;
    MOV %r1 @c266;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 objValue;
    PUSH %r1;
    CALL_REG @c267 5 false;
    MOV %r1 srcValue;
    PUSH %r1;
    MOV %r1 stack;
    MOV %r2 "delete";
    CALL_VAR %r1 %r2 1 false;
    JMP _l1131_;
LABEL _l1130_:
LABEL _l1131_:
    MOV %r0 objValue;
    MOV $RET %r0;
    RET;
}
func @@f236(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c197 1 false;
    MOV %r1 $RET;
    JF %r1 _l1133_;
    MOV %r0 @c9;
    JMP _l1134_;
LABEL _l1133_:
    MOV %r0 value;
LABEL _l1134_:
    MOV $RET %r0;
    RET;
}
func @@f237(array, other, bitmask, customizer, equalFunc, stack) {
    VAR isPartial;
    VAR arrLength;
    VAR othLength;
    VAR stacked;
    VAR index;
    VAR result;
    VAR @c576;
    ALLOC @c576;
    VAR @c577;
    ALLOC @c577;
    VAR othValue;
    VAR compared;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    ALLOC @c580;
    MOV @c580 bitmask;
    ALLOC @c579;
    MOV @c579 customizer;
    ALLOC @c581;
    MOV @c581 equalFunc;
    ALLOC @c578;
    MOV @c578 stack;
    MOV isPartial @c580;
    MOV %r0 @c168;
    AND isPartial %r0;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP arrLength %r0 %r1;
    MOV %r0 other;
    MOV %r1 "length";
    MOV_PROP othLength %r0 %r1;
    MOV %r1 arrLength;
    MOV %r2 othLength;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1137_;
    MOV %r3 isPartial;
    MOV %r2 %r3;
    JF %r3 _l1138_;
    MOV %r4 othLength;
    MOV %r5 arrLength;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1138_:
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1137_:
    JF %r0 _l1135_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1136_;
LABEL _l1135_:
LABEL _l1136_:
    MOV %r0 array;
    PUSH %r0;
    MOV %r0 @c578;
    MOV %r1 "get";
    CALL_VAR %r0 %r1 1 false;
    MOV stacked $RET;
    MOV %r1 stacked;
    MOV %r0 %r1;
    JF %r1 _l1141_;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 @c578;
    MOV %r4 "get";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1141_:
    JF %r0 _l1139_;
    MOV %r1 stacked;
    MOV %r2 other;
    WEQ %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l1140_;
LABEL _l1139_:
LABEL _l1140_:
    MOV index 1;
    MINUS index;
    MOV result true;
    MOV %r0 @c580;
    MOV %r1 @c171;
    AND %r0 %r1;
    JF %r0 _l1142_;
    CALL_REG @c138 0 true;
    MOV @c576 $RET;
    JMP _l1143_;
LABEL _l1142_:
    MOV @c576 @c9;
LABEL _l1143_:
    MOV %r0 other;
    PUSH %r0;
    MOV %r0 array;
    PUSH %r0;
    MOV %r0 @c578;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 array;
    PUSH %r0;
    MOV %r0 other;
    PUSH %r0;
    MOV %r0 @c578;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
LABEL _l1144_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 arrLength;
    LT %r0 %r1;
    JF %r0 _l1145_;
LABEL _l1147_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP @c577 %r1 %r2;
    MOV %r1 other;
    MOV %r2 index;
    MOV_PROP othValue %r1 %r2;
    MOV %r1 @c579;
    JF %r1 _l1148_;
    MOV %r2 isPartial;
    JF %r2 _l1150_;
    MOV %r3 @c578;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    MOV %r3 @c577;
    PUSH %r3;
    MOV %r3 othValue;
    PUSH %r3;
    CALL_REG @c579 6 false;
    MOV compared $RET;
    JMP _l1149_;
LABEL _l1150_:
    MOV %r3 @c578;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    MOV %r3 othValue;
    PUSH %r3;
    MOV %r3 @c577;
    PUSH %r3;
    CALL_REG @c579 6 false;
    MOV compared $RET;
    JMP _l1149_;
LABEL _l1148_:
LABEL _l1149_:
    MOV %r1 compared;
    MOV %r2 @c9;
    NE %r1 %r2;
    JF %r1 _l1151_;
    MOV %r2 compared;
    JF %r2 _l1153_;
    JMP _l1144_;
    JMP _l1152_;
LABEL _l1153_:
    MOV %r2 false;
    MOV result %r2;
    JMP _l1145_;
    JMP _l1152_;
LABEL _l1151_:
LABEL _l1152_:
    MOV %r1 @c576;
    JF %r1 _l1154_;
    FUNC %r3 @@f623;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    CALL_REG @c42 2 false;
    MOV %r2 $RET;
    NEG %r2;
    JF %r2 _l1156_;
    MOV %r3 false;
    MOV result %r3;
    JMP _l1145_;
    JMP _l1155_;
LABEL _l1156_:
    JMP _l1155_;
LABEL _l1154_:
    MOV %r3 @c577;
    MOV %r4 othValue;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1158_;
    MOV %r5 @c578;
    PUSH %r5;
    MOV %r5 @c579;
    PUSH %r5;
    MOV %r5 @c580;
    PUSH %r5;
    MOV %r5 othValue;
    PUSH %r5;
    MOV %r5 @c577;
    PUSH %r5;
    CALL_REG @c581 5 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l1158_:
    NEG %r2;
    JF %r2 _l1157_;
    MOV %r3 false;
    MOV result %r3;
    JMP _l1145_;
    JMP _l1155_;
LABEL _l1157_:
LABEL _l1155_:
    JMP _l1144_;
LABEL _l1145_:
    MOV %r0 array;
    PUSH %r0;
    MOV %r0 @c578;
    MOV %r1 "delete";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 other;
    PUSH %r0;
    MOV %r0 @c578;
    MOV %r1 "delete";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f238(object, other, tag, bitmask, customizer, equalFunc, stack) {
    VAR convert;
    VAR isPartial;
    VAR stacked;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    VAR %r13;
    VAR %r14;
    VAR %r15;
    VAR %r16;
    MOV %r0 tag;
    MOV %r1 @c33;
    JE %r0 %r1 _l1160_;
    JMP _l1161_;
LABEL _l1160_:
    MOV %r5 object;
    MOV %r6 "byteLength";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 other;
    MOV %r6 "byteLength";
    MOV_PROP %r4 %r5 %r6;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1164_;
    MOV %r6 object;
    MOV %r7 "byteOffset";
    MOV_PROP %r4 %r6 %r7;
    MOV %r6 other;
    MOV %r7 "byteOffset";
    MOV_PROP %r5 %r6 %r7;
    WNE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1164_:
    JF %r2 _l1162_;
    MOV %r3 false;
    MOV $RET %r3;
    RET;
    JMP _l1163_;
LABEL _l1162_:
LABEL _l1163_:
    MOV %r3 object;
    MOV %r4 "buffer";
    MOV_PROP %r2 %r3 %r4;
    MOV object %r2;
    MOV %r3 other;
    MOV %r4 "buffer";
    MOV_PROP %r2 %r3 %r4;
    MOV other %r2;
LABEL _l1161_:
    MOV %r2 @c161;
    JE %r0 %r2 _l1165_;
    JMP _l1166_;
LABEL _l1165_:
    MOV %r6 object;
    MOV %r7 "byteLength";
    MOV_PROP %r4 %r6 %r7;
    MOV %r6 other;
    MOV %r7 "byteLength";
    MOV_PROP %r5 %r6 %r7;
    WNE %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l1169_;
    MOV %r7 other;
    PUSH %r7;
    CALL_REG @c231 1 true;
    MOV %r6 $RET;
    PUSH %r6;
    MOV %r7 object;
    PUSH %r7;
    CALL_REG @c231 1 true;
    MOV %r6 $RET;
    PUSH %r6;
    CALL_REG equalFunc 2 false;
    MOV %r5 $RET;
    NEG %r5;
    LG_OR %r3 %r5;
LABEL _l1169_:
    JF %r3 _l1167_;
    MOV %r4 false;
    MOV $RET %r4;
    RET;
    JMP _l1168_;
LABEL _l1167_:
LABEL _l1168_:
    MOV %r3 true;
    MOV $RET %r3;
    RET;
LABEL _l1166_:
    MOV %r3 @c268;
    JE %r0 %r3 _l1170_;
    JMP _l1171_;
LABEL _l1170_:
LABEL _l1171_:
    MOV %r4 @c162;
    JE %r0 %r4 _l1172_;
    JMP _l1173_;
LABEL _l1172_:
LABEL _l1173_:
    MOV %r5 @c269;
    JE %r0 %r5 _l1174_;
    JMP _l1175_;
LABEL _l1174_:
    MOV %r7 other;
    PLUS %r7;
    PUSH %r7;
    MOV %r7 object;
    PLUS %r7;
    PUSH %r7;
    CALL_REG @c100 2 false;
    MOV %r6 $RET;
    MOV $RET %r6;
    RET;
LABEL _l1175_:
    MOV %r6 @c270;
    JE %r0 %r6 _l1176_;
    JMP _l1177_;
LABEL _l1176_:
    MOV %r10 object;
    MOV %r11 "name";
    MOV_PROP %r8 %r10 %r11;
    MOV %r10 other;
    MOV %r11 "name";
    MOV_PROP %r9 %r10 %r11;
    WEQ %r8 %r9;
    MOV %r7 %r8;
    JF %r8 _l1178_;
    MOV %r11 object;
    MOV %r12 "message";
    MOV_PROP %r9 %r11 %r12;
    MOV %r11 other;
    MOV %r12 "message";
    MOV_PROP %r10 %r11 %r12;
    WEQ %r9 %r10;
    LG_AND %r7 %r9;
LABEL _l1178_:
    MOV $RET %r7;
    RET;
LABEL _l1177_:
    MOV %r7 @c177;
    JE %r0 %r7 _l1179_;
    JMP _l1180_;
LABEL _l1179_:
LABEL _l1180_:
    MOV %r8 @c271;
    JE %r0 %r8 _l1181_;
    JMP _l1182_;
LABEL _l1181_:
    MOV %r9 object;
    MOV %r10 other;
    MOV %r11 "";
    ADD %r10 %r11;
    WEQ %r9 %r10;
    MOV $RET %r9;
    RET;
LABEL _l1182_:
    MOV %r9 @c170;
    JE %r0 %r9 _l1183_;
    JMP _l1184_;
LABEL _l1183_:
    MOV convert @c272;
LABEL _l1184_:
    MOV %r10 @c178;
    JE %r0 %r10 _l1185_;
    JMP _l1186_;
LABEL _l1185_:
    MOV isPartial bitmask;
    MOV %r11 @c168;
    AND isPartial %r11;
    MOV %r11 convert;
    JIF %r11 _l1187_;
    MOV %r13 @c31;
    MOV convert %r13;
    MOV %r12 %r13;
LABEL _l1187_:
    MOV %r14 object;
    MOV %r15 "size";
    MOV_PROP %r12 %r14 %r15;
    MOV %r14 other;
    MOV %r15 "size";
    MOV_PROP %r13 %r14 %r15;
    WNE %r12 %r13;
    MOV %r11 %r12;
    JF %r12 _l1190_;
    MOV %r13 isPartial;
    NEG %r13;
    LG_AND %r11 %r13;
LABEL _l1190_:
    JF %r11 _l1188_;
    MOV %r12 false;
    MOV $RET %r12;
    RET;
    JMP _l1189_;
LABEL _l1188_:
LABEL _l1189_:
    MOV %r11 object;
    PUSH %r11;
    MOV %r11 stack;
    MOV %r12 "get";
    CALL_VAR %r11 %r12 1 false;
    MOV stacked $RET;
    MOV %r11 stacked;
    JF %r11 _l1191_;
    MOV %r12 stacked;
    MOV %r13 other;
    WEQ %r12 %r13;
    MOV $RET %r12;
    RET;
    JMP _l1192_;
LABEL _l1191_:
LABEL _l1192_:
    MOV %r11 @c171;
    MOV %r12 bitmask;
    OR %r12 %r11;
    MOV bitmask %r12;
    MOV %r11 other;
    PUSH %r11;
    MOV %r11 object;
    PUSH %r11;
    MOV %r11 stack;
    MOV %r12 "set";
    CALL_VAR %r11 %r12 2 false;
    MOV %r11 stack;
    PUSH %r11;
    MOV %r11 equalFunc;
    PUSH %r11;
    MOV %r11 customizer;
    PUSH %r11;
    MOV %r11 bitmask;
    PUSH %r11;
    MOV %r12 other;
    PUSH %r12;
    CALL_REG convert 1 false;
    MOV %r11 $RET;
    PUSH %r11;
    MOV %r12 object;
    PUSH %r12;
    CALL_REG convert 1 false;
    MOV %r11 $RET;
    PUSH %r11;
    CALL_REG @c166 6 false;
    MOV result $RET;
    MOV %r11 object;
    PUSH %r11;
    MOV %r11 stack;
    MOV %r12 "delete";
    CALL_VAR %r11 %r12 1 false;
    MOV %r11 result;
    MOV $RET %r11;
    RET;
LABEL _l1186_:
    MOV %r11 @c273;
    JE %r0 %r11 _l1193_;
    JMP _l1194_;
LABEL _l1193_:
    MOV %r12 @c234;
    JF %r12 _l1195_;
    MOV %r15 object;
    PUSH %r15;
    MOV %r15 @c234;
    MOV %r16 "call";
    CALL_VAR %r15 %r16 1 false;
    MOV %r13 $RET;
    MOV %r15 other;
    PUSH %r15;
    MOV %r15 @c234;
    MOV %r16 "call";
    CALL_VAR %r15 %r16 1 false;
    MOV %r14 $RET;
    WEQ %r13 %r14;
    MOV $RET %r13;
    RET;
    JMP _l1196_;
LABEL _l1195_:
LABEL _l1196_:
LABEL _l1194_:
LABEL _l1159_:
    MOV %r0 false;
    MOV $RET %r0;
    RET;
}
func @@f239(object, other, bitmask, customizer, equalFunc, stack) {
    VAR isPartial;
    VAR objProps;
    VAR objLength;
    VAR othProps;
    VAR othLength;
    VAR index;
    VAR key;
    VAR stacked;
    VAR result;
    VAR skipCtor;
    VAR objValue;
    VAR othValue;
    VAR compared;
    VAR objCtor;
    VAR othCtor;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV isPartial bitmask;
    MOV %r0 @c168;
    AND isPartial %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c131 1 false;
    MOV objProps $RET;
    MOV %r0 objProps;
    MOV %r1 "length";
    MOV_PROP objLength %r0 %r1;
    MOV %r0 other;
    PUSH %r0;
    CALL_REG @c131 1 false;
    MOV othProps $RET;
    MOV %r0 othProps;
    MOV %r1 "length";
    MOV_PROP othLength %r0 %r1;
    MOV %r1 objLength;
    MOV %r2 othLength;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1199_;
    MOV %r2 isPartial;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1199_:
    JF %r0 _l1197_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1198_;
LABEL _l1197_:
LABEL _l1198_:
    MOV index objLength;
LABEL _l1200_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l1201_;
LABEL _l1203_:
    MOV %r1 objProps;
    MOV %r2 index;
    MOV_PROP key %r1 %r2;
    MOV %r2 isPartial;
    JF %r2 _l1206_;
    MOV %r1 key;
    MOV %r3 other;
    IN %r1 %r3;
    JMP _l1205_;
LABEL _l1206_:
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 @c72;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l1204_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l1205_;
LABEL _l1204_:
LABEL _l1205_:
    JMP _l1200_;
LABEL _l1201_:
    MOV %r0 object;
    PUSH %r0;
    MOV %r0 stack;
    MOV %r1 "get";
    CALL_VAR %r0 %r1 1 false;
    MOV stacked $RET;
    MOV %r1 stacked;
    MOV %r0 %r1;
    JF %r1 _l1209_;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 stack;
    MOV %r4 "get";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1209_:
    JF %r0 _l1207_;
    MOV %r1 stacked;
    MOV %r2 other;
    WEQ %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l1208_;
LABEL _l1207_:
LABEL _l1208_:
    MOV result true;
    MOV %r0 other;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    MOV %r0 stack;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 object;
    PUSH %r0;
    MOV %r0 other;
    PUSH %r0;
    MOV %r0 stack;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
    MOV skipCtor isPartial;
LABEL _l1210_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 objLength;
    LT %r0 %r1;
    JF %r0 _l1211_;
LABEL _l1213_:
    MOV %r2 objProps;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV key %r1;
    MOV %r1 object;
    MOV %r2 key;
    MOV_PROP objValue %r1 %r2;
    MOV %r1 other;
    MOV %r2 key;
    MOV_PROP othValue %r1 %r2;
    MOV %r1 customizer;
    JF %r1 _l1214_;
    MOV %r2 isPartial;
    JF %r2 _l1216_;
    MOV %r3 stack;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 objValue;
    PUSH %r3;
    MOV %r3 othValue;
    PUSH %r3;
    CALL_REG customizer 6 false;
    MOV compared $RET;
    JMP _l1215_;
LABEL _l1216_:
    MOV %r3 stack;
    PUSH %r3;
    MOV %r3 other;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 othValue;
    PUSH %r3;
    MOV %r3 objValue;
    PUSH %r3;
    CALL_REG customizer 6 false;
    MOV compared $RET;
    JMP _l1215_;
LABEL _l1214_:
LABEL _l1215_:
    MOV %r2 compared;
    MOV %r3 @c9;
    EQ %r2 %r3;
    JF %r2 _l1219_;
    MOV %r3 objValue;
    MOV %r4 othValue;
    EQ %r3 %r4;
    MOV %r1 %r3;
    JIF %r3 _l1220_;
    MOV %r5 stack;
    PUSH %r5;
    MOV %r5 customizer;
    PUSH %r5;
    MOV %r5 bitmask;
    PUSH %r5;
    MOV %r5 othValue;
    PUSH %r5;
    MOV %r5 objValue;
    PUSH %r5;
    CALL_REG equalFunc 5 false;
    MOV %r4 $RET;
    LG_OR %r1 %r4;
LABEL _l1220_:
    JMP _l1218_;
LABEL _l1219_:
    MOV %r1 compared;
    NEG %r1;
    JF %r1 _l1217_;
    MOV %r2 false;
    MOV result %r2;
    JMP _l1211_;
    JMP _l1218_;
LABEL _l1217_:
LABEL _l1218_:
    MOV %r1 skipCtor;
    JIF %r1 _l1221_;
    MOV %r3 key;
    MOV %r4 "constructor";
    WEQ %r3 %r4;
    MOV skipCtor %r3;
    MOV %r2 %r3;
LABEL _l1221_:
    JMP _l1210_;
LABEL _l1211_:
    MOV %r1 result;
    MOV %r0 %r1;
    JF %r1 _l1224_;
    MOV %r2 skipCtor;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1224_:
    JF %r0 _l1222_;
    MOV %r1 object;
    MOV %r2 "constructor";
    MOV_PROP objCtor %r1 %r2;
    MOV %r1 other;
    MOV %r2 "constructor";
    MOV_PROP othCtor %r1 %r2;
    MOV %r3 objCtor;
    MOV %r4 othCtor;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1227_;
    MOV %r5 "constructor";
    MOV %r6 object;
    IN %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l1228_;
    MOV %r6 "constructor";
    MOV %r7 other;
    IN %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l1228_:
    LG_AND %r2 %r4;
LABEL _l1227_:
    MOV %r1 %r2;
    JF %r2 _l1226_;
    MOV %r6 objCtor;
    TYPE_OF %r6;
    MOV %r7 "function";
    WEQ %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l1231_;
    MOV %r7 objCtor;
    MOV %r8 objCtor;
    INST_OF %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l1231_:
    MOV %r4 %r5;
    JF %r5 _l1230_;
    MOV %r6 othCtor;
    TYPE_OF %r6;
    MOV %r7 "function";
    WEQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l1230_:
    MOV %r3 %r4;
    JF %r4 _l1229_;
    MOV %r5 othCtor;
    MOV %r6 othCtor;
    INST_OF %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l1229_:
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l1226_:
    JF %r1 _l1225_;
    MOV %r2 false;
    MOV result %r2;
    JMP _l1223_;
LABEL _l1225_:
    JMP _l1223_;
LABEL _l1222_:
LABEL _l1223_:
    MOV %r0 object;
    PUSH %r0;
    MOV %r0 stack;
    MOV %r1 "delete";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 other;
    PUSH %r0;
    MOV %r0 stack;
    MOV %r1 "delete";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f240(func) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 func;
    MOV %r2 "";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r2 @c274;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 func;
    PUSH %r2;
    CALL_REG @c211 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c212 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f241(object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c236;
    PUSH %r1;
    MOV %r1 @c103;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c275 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f242(object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c237;
    PUSH %r1;
    MOV %r1 @c105;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c275 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f243(func) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 func;
    PUSH %r1;
    MOV %r1 @c216;
    MOV %r2 "get";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f244(func) {
    VAR result;
    VAR array;
    VAR length;
    VAR data;
    VAR otherFunc;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 func;
    MOV %r2 "name";
    MOV_PROP result %r1 %r2;
    MOV %r0 "";
    ADD result %r0;
    MOV %r0 @c276;
    MOV %r1 result;
    MOV_PROP array %r0 %r1;
    MOV %r1 result;
    PUSH %r1;
    MOV %r1 @c276;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l1232_;
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
    JMP _l1233_;
LABEL _l1232_:
    MOV length 0;
LABEL _l1233_:
LABEL _l1234_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l1235_;
LABEL _l1237_:
    MOV %r1 array;
    MOV %r2 length;
    MOV_PROP data %r1 %r2;
    MOV %r1 data;
    MOV %r2 "func";
    MOV_PROP otherFunc %r1 %r2;
    MOV %r2 otherFunc;
    MOV %r3 null;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l1240_;
    MOV %r3 otherFunc;
    MOV %r4 func;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1240_:
    JF %r1 _l1238_;
    MOV %r3 data;
    MOV %r4 "name";
    MOV_PROP %r2 %r3 %r4;
    MOV $RET %r2;
    RET;
    JMP _l1239_;
LABEL _l1238_:
LABEL _l1239_:
    JMP _l1234_;
LABEL _l1235_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f245(func) {
    VAR object;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 "placeholder";
    PUSH %r1;
    MOV %r1 @c277;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l1241_;
    MOV object @c277;
    JMP _l1242_;
LABEL _l1241_:
    MOV object func;
LABEL _l1242_:
    MOV %r1 object;
    MOV %r2 "placeholder";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f246() {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 @c277;
    MOV %r2 "iteratee";
    MOV_PROP %r0 %r1 %r2;
    MOV result %r0;
    JIF %r0 _l1243_;
    MOV %r1 @c278;
    LG_OR result %r1;
LABEL _l1243_:
    MOV %r1 result;
    MOV %r2 @c278;
    EQ %r1 %r2;
    JF %r1 _l1244_;
    MOV %r0 @c279;
    JMP _l1245_;
LABEL _l1244_:
    MOV %r0 result;
LABEL _l1245_:
    MOV result %r0;
    MOV_CTX %r2 "arguments";
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1246_;
    MOV_CTX %r3 "arguments";
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_CTX %r3 "arguments";
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG result 2 false;
    MOV %r0 $RET;
    JMP _l1247_;
LABEL _l1246_:
    MOV %r0 result;
LABEL _l1247_:
    MOV $RET %r0;
    RET;
}
func @@f247(map, key) {
    VAR data;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 @c351;
    MOV %r1 "__data__";
    MOV_PROP data %r0 %r1;
    MOV %r2 key;
    PUSH %r2;
    CALL_REG @c280 1 false;
    MOV %r1 $RET;
    JF %r1 _l1248_;
    MOV %r2 data;
    MOV %r4 key;
    TYPE_OF %r4;
    MOV %r5 "string";
    WEQ %r4 %r5;
    JF %r4 _l1250_;
    MOV %r3 "string";
    JMP _l1249_;
LABEL _l1250_:
    MOV %r3 "hash";
    MOV_PROP %r0 %r2 %r3;
    JMP _l1249_;
LABEL _l1248_:
    MOV %r2 data;
    MOV %r3 "map";
    MOV_PROP %r0 %r2 %r3;
LABEL _l1249_:
    MOV $RET %r0;
    RET;
}
func @@f248(object) {
    VAR result;
    VAR length;
    VAR key;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c103 1 false;
    MOV result $RET;
    MOV %r0 result;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l1251_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l1252_;
LABEL _l1254_:
    MOV %r1 result;
    MOV %r2 length;
    MOV_PROP key %r1 %r2;
    MOV %r1 object;
    MOV %r2 key;
    MOV_PROP value %r1 %r2;
    NEW_ARR %r1;
    MOV %r2 key;
    SET_KEY %r1 0 %r2;
    MOV %r2 value;
    SET_KEY %r1 1 %r2;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c192 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 2 %r2;
    MOV %r2 result;
    MOV %r3 length;
    SET_KEY %r2 %r3 %r1;
    JMP _l1251_;
LABEL _l1252_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f249(object, key) {
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c281 2 false;
    MOV value $RET;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c282 1 false;
    MOV %r1 $RET;
    JF %r1 _l1255_;
    MOV %r0 value;
    JMP _l1256_;
LABEL _l1255_:
    MOV %r0 @c9;
LABEL _l1256_:
    MOV $RET %r0;
    RET;
}
func @@f250(value) {
    VAR isOwn;
    VAR tag;
    VAR unmasked;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 "RUNNING GET W";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @c152;
    PUSH %r0;
    MOV %r0 1;
    PUSH %r0;
    MOV %r0 "getRawTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 3 false;
    MOV %r0 @c152;
    PUSH %r0;
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 @c72;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV isOwn $RET;
    MOV %r0 value;
    MOV %r1 @c152;
    MOV_PROP tag %r0 %r1;
    MOV %r0 2;
    PUSH %r0;
    MOV %r0 "getRawTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    TRY _l1257_ _l1258_;
    MOV %r0 @c9;
    MOV %r1 value;
    MOV %r2 @c152;
    SET_KEY %r1 %r2 %r0;
    MOV unmasked true;
    MOV %r0 3;
    PUSH %r0;
    MOV %r0 "getRawTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    TRY_END;
LABEL _l1257_:
LABEL _l1258_:
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 @c283;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV result $RET;
    MOV %r0 4;
    PUSH %r0;
    MOV %r0 "getRawTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 unmasked;
    JF %r0 _l1259_;
    MOV %r1 isOwn;
    JF %r1 _l1261_;
    MOV %r2 tag;
    MOV %r3 value;
    MOV %r4 @c152;
    SET_KEY %r3 %r4 %r2;
    JMP _l1260_;
LABEL _l1261_:
    MOV %r2 value;
    MOV %r3 @c152;
    DEL %r2 %r3;
    JMP _l1260_;
LABEL _l1259_:
LABEL _l1260_:
    MOV %r0 5;
    PUSH %r0;
    MOV %r0 "getRawTag";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f251(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c582;
    MOV @c582 object;
    MOV %r0 @c582;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1262_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1263_;
LABEL _l1262_:
LABEL _l1263_:
    MOV %r1 @c582;
    PUSH %r1;
    CALL_REG @c66 1 false;
    MOV %r0 $RET;
    MOV @c582 %r0;
    FUNC %r1 @@f624;
    PUSH %r1;
    MOV %r2 @c582;
    PUSH %r2;
    CALL_REG @c284 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c147 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f252(object) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    NEW_ARR result;
LABEL _l1264_:
    MOV %r0 object;
    JF %r0 _l1265_;
LABEL _l1267_:
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c236 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c144 2 false;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c285 1 false;
    MOV %r1 $RET;
    MOV object %r1;
    JMP _l1264_;
LABEL _l1265_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f253(value) {
    VAR result;
    VAR Ctor;
    VAR ctorString;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c160 1 false;
    MOV result $RET;
    MOV %r0 result;
    MOV %r1 @c118;
    WEQ %r0 %r1;
    JF %r0 _l1268_;
    MOV %r1 value;
    MOV %r2 "constructor";
    MOV_PROP Ctor %r1 %r2;
    JMP _l1269_;
LABEL _l1268_:
    MOV Ctor @c9;
LABEL _l1269_:
    MOV %r0 Ctor;
    JF %r0 _l1270_;
    MOV %r1 Ctor;
    PUSH %r1;
    CALL_REG @c176 1 false;
    MOV ctorString $RET;
    JMP _l1271_;
LABEL _l1270_:
    MOV ctorString "";
LABEL _l1271_:
    MOV %r0 ctorString;
    JF %r0 _l1272_;
    MOV %r1 ctorString;
    MOV %r2 @c286;
    JE %r1 %r2 _l1275_;
    JMP _l1276_;
LABEL _l1275_:
    MOV %r3 @c33;
    MOV $RET %r3;
    RET;
LABEL _l1276_:
    MOV %r3 @c287;
    JE %r1 %r3 _l1277_;
    JMP _l1278_;
LABEL _l1277_:
    MOV %r4 @c170;
    MOV $RET %r4;
    RET;
LABEL _l1278_:
    MOV %r4 @c288;
    JE %r1 %r4 _l1279_;
    JMP _l1280_;
LABEL _l1279_:
    MOV %r5 @c289;
    MOV $RET %r5;
    RET;
LABEL _l1280_:
    MOV %r5 @c290;
    JE %r1 %r5 _l1281_;
    JMP _l1282_;
LABEL _l1281_:
    MOV %r6 @c178;
    MOV $RET %r6;
    RET;
LABEL _l1282_:
    MOV %r6 @c291;
    JE %r1 %r6 _l1283_;
    JMP _l1284_;
LABEL _l1283_:
    MOV %r7 @c292;
    MOV $RET %r7;
    RET;
LABEL _l1284_:
LABEL _l1274_:
    JMP _l1273_;
LABEL _l1272_:
LABEL _l1273_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f254(start, end, transforms) {
    VAR index;
    VAR length;
    VAR data;
    VAR size;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV index 1;
    MINUS index;
    MOV %r0 transforms;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l1285_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1286_;
LABEL _l1288_:
    MOV %r1 transforms;
    MOV %r2 index;
    MOV_PROP data %r1 %r2;
    MOV %r1 data;
    MOV %r2 "size";
    MOV_PROP size %r1 %r2;
    MOV %r2 data;
    MOV %r3 "type";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 "drop";
    JE %r1 %r2 _l1290_;
    JMP _l1291_;
LABEL _l1290_:
    MOV %r3 size;
    MOV %r4 start;
    ADD %r4 %r3;
    MOV start %r4;
    MOV %r2 %r4;
    JMP _l1289_;
LABEL _l1291_:
    MOV %r3 "dropRight";
    JE %r1 %r3 _l1292_;
    JMP _l1293_;
LABEL _l1292_:
    MOV %r4 size;
    MOV %r5 end;
    SUB %r5 %r4;
    MOV end %r5;
    MOV %r3 %r5;
    JMP _l1289_;
LABEL _l1293_:
    MOV %r4 "take";
    JE %r1 %r4 _l1294_;
    JMP _l1295_;
LABEL _l1294_:
    MOV %r6 start;
    MOV %r7 size;
    ADD %r6 %r7;
    PUSH %r6;
    MOV %r6 end;
    PUSH %r6;
    CALL_REG @c77 2 false;
    MOV %r5 $RET;
    MOV end %r5;
    MOV %r4 %r5;
    JMP _l1289_;
LABEL _l1295_:
    MOV %r5 "takeRight";
    JE %r1 %r5 _l1296_;
    JMP _l1297_;
LABEL _l1296_:
    MOV %r7 end;
    MOV %r8 size;
    SUB %r7 %r8;
    PUSH %r7;
    MOV %r7 start;
    PUSH %r7;
    CALL_REG @c155 2 false;
    MOV %r6 $RET;
    MOV start %r6;
    MOV %r5 %r6;
    JMP _l1289_;
LABEL _l1297_:
LABEL _l1289_:
    JMP _l1285_;
LABEL _l1286_:
    NEW_OBJ %r0;
    MOV %r1 start;
    SET_KEY %r0 'start' %r1;
    MOV %r1 end;
    SET_KEY %r0 'end' %r1;
    MOV $RET %r0;
    RET;
}
func @@f255(source) {
    VAR match;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 @c293;
    PUSH %r0;
    MOV %r0 source;
    MOV %r1 "match";
    CALL_VAR %r0 %r1 1 false;
    MOV match $RET;
    MOV %r1 match;
    JF %r1 _l1298_;
    MOV %r2 @c294;
    PUSH %r2;
    MOV %r4 match;
    MOV %r3 1;
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 "split";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1299_;
LABEL _l1298_:
    NEW_ARR %r0;
LABEL _l1299_:
    MOV $RET %r0;
    RET;
}
func @@f256(object, path, hasFunc) {
    VAR index;
    VAR length;
    VAR result;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV index 1;
    MINUS index;
    MOV %r0 path;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV result false;
LABEL _l1300_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1301_;
LABEL _l1303_:
    MOV %r2 path;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c149 1 false;
    MOV key $RET;
    MOV %r3 object;
    MOV %r4 null;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1306_;
    MOV %r5 key;
    PUSH %r5;
    MOV %r5 object;
    PUSH %r5;
    CALL_REG hasFunc 2 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l1306_:
    MOV result %r2;
    MOV %r1 %r2;
    NEG %r1;
    JF %r1 _l1304_;
    JMP _l1301_;
    JMP _l1305_;
LABEL _l1304_:
LABEL _l1305_:
    MOV %r2 object;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    MOV object %r1;
    JMP _l1300_;
LABEL _l1301_:
    MOV %r1 result;
    MOV %r0 %r1;
    JIF %r1 _l1309_;
    MOV %r4 index;
    ADD %r4 1;
    MOV %r2 %r4;
    MOV index %r4;
    MOV %r3 length;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1309_:
    JF %r0 _l1307_;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l1308_;
LABEL _l1307_:
LABEL _l1308_:
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l1310_;
    MOV %r0 0;
    JMP _l1311_;
LABEL _l1310_:
    MOV %r2 object;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
LABEL _l1311_:
    MOV length %r0;
    MOV %r3 length;
    NEG %r3;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l1314_;
    MOV %r5 length;
    PUSH %r5;
    CALL_REG @c179 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l1314_:
    MOV %r1 %r2;
    JF %r2 _l1313_;
    MOV %r4 length;
    PUSH %r4;
    MOV %r4 key;
    PUSH %r4;
    CALL_REG @c96 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1313_:
    MOV %r0 %r1;
    JF %r1 _l1312_;
    MOV %r4 object;
    PUSH %r4;
    CALL_REG @c69 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JIF %r3 _l1315_;
    MOV %r5 object;
    PUSH %r5;
    CALL_REG @c91 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l1315_:
    LG_AND %r0 %r2;
LABEL _l1312_:
    MOV $RET %r0;
    RET;
}
func @@f257(array) {
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    PUSH %r0;
    MOV %r0 array;
    MOV %r1 "constructor";
    CALL_VAR %r0 %r1 1 true;
    MOV result $RET;
    MOV %r2 length;
    MOV %r1 %r2;
    JF %r2 _l1319_;
    MOV %r5 array;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    TYPE_OF %r3;
    MOV %r4 "string";
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1319_:
    MOV %r0 %r1;
    JF %r1 _l1318_;
    MOV %r3 "index";
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    MOV %r3 @c72;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1318_:
    JF %r0 _l1316_;
    MOV %r2 array;
    MOV %r3 "index";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r3 "index";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 array;
    MOV %r3 "input";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r3 "input";
    SET_KEY %r2 %r3 %r1;
    JMP _l1317_;
LABEL _l1316_:
LABEL _l1317_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f258(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r4 object;
    MOV %r5 "constructor";
    MOV_PROP %r2 %r4 %r5;
    TYPE_OF %r2;
    MOV %r3 "function";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1322_;
    MOV %r4 object;
    PUSH %r4;
    CALL_REG @c185 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l1322_:
    JF %r1 _l1320_;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c285 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c295 1 false;
    MOV %r0 $RET;
    JMP _l1321_;
LABEL _l1320_:
    NEW_OBJ %r0;
LABEL _l1321_:
    MOV $RET %r0;
    RET;
}
func @@f259(object, tag, isDeep) {
    VAR Ctor;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    VAR %r13;
    VAR %r14;
    VAR %r15;
    VAR %r16;
    VAR %r17;
    VAR %r18;
    VAR %r19;
    VAR %r20;
    VAR %r21;
    MOV %r0 object;
    MOV %r1 "constructor";
    MOV_PROP Ctor %r0 %r1;
    MOV %r0 tag;
    MOV %r1 @c161;
    JE %r0 %r1 _l1324_;
    JMP _l1325_;
LABEL _l1324_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c232 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
LABEL _l1325_:
    MOV %r2 @c268;
    JE %r0 %r2 _l1326_;
    JMP _l1327_;
LABEL _l1326_:
LABEL _l1327_:
    MOV %r3 @c162;
    JE %r0 %r3 _l1328_;
    JMP _l1329_;
LABEL _l1328_:
    MOV %r5 object;
    PLUS %r5;
    PUSH %r5;
    CALL_REG Ctor 1 true;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
LABEL _l1329_:
    MOV %r4 @c33;
    JE %r0 %r4 _l1330_;
    JMP _l1331_;
LABEL _l1330_:
    MOV %r6 isDeep;
    PUSH %r6;
    MOV %r6 object;
    PUSH %r6;
    CALL_REG @c296 2 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
LABEL _l1331_:
    MOV %r5 @c297;
    JE %r0 %r5 _l1332_;
    JMP _l1333_;
LABEL _l1332_:
LABEL _l1333_:
    MOV %r6 @c298;
    JE %r0 %r6 _l1334_;
    JMP _l1335_;
LABEL _l1334_:
LABEL _l1335_:
    MOV %r7 @c299;
    JE %r0 %r7 _l1336_;
    JMP _l1337_;
LABEL _l1336_:
LABEL _l1337_:
    MOV %r8 @c300;
    JE %r0 %r8 _l1338_;
    JMP _l1339_;
LABEL _l1338_:
LABEL _l1339_:
    MOV %r9 @c301;
    JE %r0 %r9 _l1340_;
    JMP _l1341_;
LABEL _l1340_:
LABEL _l1341_:
    MOV %r10 @c302;
    JE %r0 %r10 _l1342_;
    JMP _l1343_;
LABEL _l1342_:
LABEL _l1343_:
    MOV %r11 @c303;
    JE %r0 %r11 _l1344_;
    JMP _l1345_;
LABEL _l1344_:
LABEL _l1345_:
    MOV %r12 @c304;
    JE %r0 %r12 _l1346_;
    JMP _l1347_;
LABEL _l1346_:
LABEL _l1347_:
    MOV %r13 @c305;
    JE %r0 %r13 _l1348_;
    JMP _l1349_;
LABEL _l1348_:
    MOV %r15 isDeep;
    PUSH %r15;
    MOV %r15 object;
    PUSH %r15;
    CALL_REG @c196 2 false;
    MOV %r14 $RET;
    MOV $RET %r14;
    RET;
LABEL _l1349_:
    MOV %r14 @c170;
    JE %r0 %r14 _l1350_;
    JMP _l1351_;
LABEL _l1350_:
    CALL_REG Ctor 0 true;
    MOV %r15 $RET;
    MOV $RET %r15;
    RET;
LABEL _l1351_:
    MOV %r15 @c269;
    JE %r0 %r15 _l1352_;
    JMP _l1353_;
LABEL _l1352_:
LABEL _l1353_:
    MOV %r16 @c271;
    JE %r0 %r16 _l1354_;
    JMP _l1355_;
LABEL _l1354_:
    MOV %r18 object;
    PUSH %r18;
    CALL_REG Ctor 1 true;
    MOV %r17 $RET;
    MOV $RET %r17;
    RET;
LABEL _l1355_:
    MOV %r17 @c177;
    JE %r0 %r17 _l1356_;
    JMP _l1357_;
LABEL _l1356_:
    MOV %r19 object;
    PUSH %r19;
    CALL_REG @c306 1 false;
    MOV %r18 $RET;
    MOV $RET %r18;
    RET;
LABEL _l1357_:
    MOV %r18 @c178;
    JE %r0 %r18 _l1358_;
    JMP _l1359_;
LABEL _l1358_:
    CALL_REG Ctor 0 true;
    MOV %r19 $RET;
    MOV $RET %r19;
    RET;
LABEL _l1359_:
    MOV %r19 @c273;
    JE %r0 %r19 _l1360_;
    JMP _l1361_;
LABEL _l1360_:
    MOV %r21 object;
    PUSH %r21;
    CALL_REG @c307 1 false;
    MOV %r20 $RET;
    MOV $RET %r20;
    RET;
LABEL _l1361_:
LABEL _l1323_:
}
func @@f260(source, details) {
    VAR length;
    VAR lastIndex;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 details;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1362_;
    MOV %r1 source;
    MOV $RET %r1;
    RET;
    JMP _l1363_;
LABEL _l1362_:
LABEL _l1363_:
    MOV lastIndex length;
    MOV %r0 1;
    SUB lastIndex %r0;
    MOV %r2 length;
    MOV %r3 1;
    GT %r2 %r3;
    JF %r2 _l1364_;
    MOV %r0 "& ";
    JMP _l1365_;
LABEL _l1364_:
    MOV %r0 "";
LABEL _l1365_:
    MOV %r2 details;
    MOV %r3 lastIndex;
    MOV_PROP %r1 %r2 %r3;
    ADD %r0 %r1;
    MOV %r1 details;
    MOV %r2 lastIndex;
    SET_KEY %r1 %r2 %r0;
    MOV %r2 length;
    MOV %r3 2;
    GT %r2 %r3;
    JF %r2 _l1366_;
    MOV %r1 ", ";
    JMP _l1367_;
LABEL _l1366_:
    MOV %r1 " ";
LABEL _l1367_:
    PUSH %r1;
    MOV %r1 details;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV details %r0;
    MOV %r1 "{
/* [wrapped with ";
    MOV %r3 details;
    ADD %r1 %r3;
    MOV %r2 "] */
";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 @c308;
    PUSH %r1;
    MOV %r1 source;
    MOV %r2 "replace";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f261(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c69 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l1369_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c91 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l1369_:
    MOV %r0 %r1;
    JIF %r1 _l1368_;
    MOV %r4 @c309;
    MOV %r3 %r4;
    JF %r4 _l1371_;
    MOV %r5 value;
    LG_AND %r3 %r5;
LABEL _l1371_:
    MOV %r2 %r3;
    JF %r3 _l1370_;
    MOV %r5 value;
    MOV %r6 @c309;
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l1370_:
    NEG %r2;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l1368_:
    MOV $RET %r0;
    RET;
}
func @@f262(value, length) {
    VAR type;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    MOV type value;
    TYPE_OF type;
    MOV %r1 length;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l1372_;
    MOV %r0 @c210;
    JMP _l1373_;
LABEL _l1372_:
    MOV %r0 length;
LABEL _l1373_:
    MOV length %r0;
    MOV %r2 length;
    NEG %r2;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l1375_;
    MOV %r4 type;
    MOV %r5 "number";
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l1376_;
    MOV %r6 type;
    MOV %r7 "symbol";
    WNE %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l1377_;
    MOV %r8 value;
    PUSH %r8;
    MOV %r8 @c310;
    MOV %r9 "test";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    LG_AND %r5 %r7;
LABEL _l1377_:
    LG_OR %r3 %r5;
LABEL _l1376_:
    LG_AND %r1 %r3;
LABEL _l1375_:
    MOV %r0 %r1;
    JF %r1 _l1374_;
    MOV %r4 value;
    MOV %r5 1;
    MINUS %r5;
    GT %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l1379_;
    MOV %r5 value;
    MOV %r7 1;
    MOD %r5 %r7;
    MOV %r6 0;
    WEQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l1379_:
    MOV %r2 %r3;
    JF %r3 _l1378_;
    MOV %r4 value;
    MOV %r5 length;
    LT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1378_:
    LG_AND %r0 %r2;
LABEL _l1374_:
    MOV $RET %r0;
    RET;
}
func @@f263(value, index, object) {
    VAR type;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1380_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1381_;
LABEL _l1380_:
LABEL _l1381_:
    MOV type index;
    TYPE_OF type;
    MOV %r1 type;
    MOV %r2 "number";
    WEQ %r1 %r2;
    JF %r1 _l1384_;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c188 1 false;
    MOV %r2 $RET;
    MOV %r0 %r2;
    JF %r2 _l1385_;
    MOV %r5 object;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 index;
    PUSH %r4;
    CALL_REG @c96 2 false;
    MOV %r3 $RET;
    LG_AND %r0 %r3;
LABEL _l1385_:
    JMP _l1383_;
LABEL _l1384_:
    MOV %r2 type;
    MOV %r3 "string";
    WEQ %r2 %r3;
    MOV %r0 %r2;
    JF %r2 _l1386_;
    MOV %r3 index;
    MOV %r4 object;
    IN %r3 %r4;
    LG_AND %r0 %r3;
LABEL _l1386_:
    JF %r0 _l1382_;
    MOV %r2 value;
    PUSH %r2;
    MOV %r3 object;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c100 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1383_;
LABEL _l1382_:
LABEL _l1383_:
    MOV %r0 false;
    MOV $RET %r0;
    RET;
}
func @@f264(value, object) {
    VAR type;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1387_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1388_;
LABEL _l1387_:
LABEL _l1388_:
    MOV type value;
    TYPE_OF type;
    MOV %r4 type;
    MOV %r5 "number";
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l1394_;
    MOV %r5 type;
    MOV %r6 "symbol";
    WEQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l1394_:
    MOV %r2 %r3;
    JIF %r3 _l1393_;
    MOV %r4 type;
    MOV %r5 "boolean";
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1393_:
    MOV %r1 %r2;
    JIF %r2 _l1392_;
    MOV %r3 value;
    MOV %r4 null;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1392_:
    MOV %r0 %r1;
    JIF %r1 _l1391_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c139 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1391_:
    JF %r0 _l1389_;
    MOV %r1 true;
    MOV $RET %r1;
    RET;
    JMP _l1390_;
LABEL _l1389_:
LABEL _l1390_:
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 @c311;
    MOV %r4 "test";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l1396_;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 @c312;
    MOV %r5 "test";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l1396_:
    MOV %r0 %r1;
    JIF %r1 _l1395_;
    MOV %r3 object;
    MOV %r4 null;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1397_;
    MOV %r4 value;
    MOV %r6 object;
    PUSH %r6;
    CALL_REG @c66 1 false;
    MOV %r5 $RET;
    IN %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1397_:
    LG_OR %r0 %r2;
LABEL _l1395_:
    MOV $RET %r0;
    RET;
}
func @@f265(value) {
    VAR type;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV type value;
    TYPE_OF type;
    MOV %r4 type;
    MOV %r5 "string";
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l1402_;
    MOV %r5 type;
    MOV %r6 "number";
    WEQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l1402_:
    MOV %r2 %r3;
    JIF %r3 _l1401_;
    MOV %r4 type;
    MOV %r5 "symbol";
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1401_:
    MOV %r1 %r2;
    JIF %r2 _l1400_;
    MOV %r3 type;
    MOV %r4 "boolean";
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1400_:
    JF %r1 _l1398_;
    MOV %r0 value;
    MOV %r2 "__proto__";
    NE %r0 %r2;
    JMP _l1399_;
LABEL _l1398_:
    MOV %r0 value;
    MOV %r2 null;
    EQ %r0 %r2;
LABEL _l1399_:
    MOV $RET %r0;
    RET;
}
func @@f266(func) {
    VAR funcName;
    VAR other;
    VAR data;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 func;
    PUSH %r0;
    CALL_REG @c313 1 false;
    MOV funcName $RET;
    MOV %r0 @c277;
    MOV %r1 funcName;
    MOV_PROP other %r0 %r1;
    MOV %r1 other;
    TYPE_OF %r1;
    MOV %r2 "function";
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1405_;
    MOV %r2 funcName;
    MOV %r4 @c70;
    MOV %r5 "prototype";
    MOV_PROP %r3 %r4 %r5;
    IN %r2 %r3;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l1405_:
    JF %r0 _l1403_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1404_;
LABEL _l1403_:
LABEL _l1404_:
    MOV %r0 func;
    MOV %r1 other;
    EQ %r0 %r1;
    JF %r0 _l1406_;
    MOV %r1 true;
    MOV $RET %r1;
    RET;
    JMP _l1407_;
LABEL _l1406_:
LABEL _l1407_:
    MOV %r0 other;
    PUSH %r0;
    CALL_REG @c258 1 false;
    MOV data $RET;
    MOV %r1 data;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1408_;
    MOV %r2 func;
    MOV %r4 data;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1408_:
    MOV $RET %r0;
    RET;
}
func @@f267(func) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c314;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1409_;
    MOV %r2 @c314;
    MOV %r3 func;
    IN %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1409_:
    MOV $RET %r0;
    RET;
}
func @@f268(value) {
    VAR Ctor;
    VAR proto;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 value;
    MOV Ctor %r0;
    JF %r0 _l1410_;
    MOV %r2 value;
    MOV %r3 "constructor";
    MOV_PROP %r1 %r2 %r3;
    LG_AND Ctor %r1;
LABEL _l1410_:
    MOV %r1 Ctor;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1412_;
    MOV %r3 Ctor;
    MOV %r4 "prototype";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1412_:
    MOV proto %r0;
    JIF %r0 _l1411_;
    MOV %r1 @c265;
    LG_OR proto %r1;
LABEL _l1411_:
    MOV %r0 value;
    MOV %r1 proto;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f269(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    MOV %r2 value;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1413_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c112 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1413_:
    MOV $RET %r0;
    RET;
}
func @@f270(key, srcValue) {
    VAR %r0;
    ALLOC @c583;
    MOV @c583 key;
    ALLOC @c584;
    MOV @c584 srcValue;
    FUNC %r0 @@f625;
    MOV $RET %r0;
    RET;
}
func @@f271(func) {
    VAR result;
    VAR @c585;
    ALLOC @c585;
    VAR %r0;
    VAR %r1;
    FUNC %r0 @@f626;
    PUSH %r0;
    MOV %r0 func;
    PUSH %r0;
    CALL_REG @c315 2 false;
    MOV result $RET;
    MOV %r0 result;
    MOV %r1 "cache";
    MOV_PROP @c585 %r0 %r1;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f272(data, source) {
    VAR bitmask;
    VAR srcBitmask;
    VAR newBitmask;
    VAR isCommon;
    VAR isCombo;
    VAR value;
    VAR partials;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    MOV %r0 data;
    MOV %r1 1;
    MOV_PROP bitmask %r0 %r1;
    MOV %r0 source;
    MOV %r1 1;
    MOV_PROP srcBitmask %r0 %r1;
    MOV newBitmask bitmask;
    MOV %r0 srcBitmask;
    OR newBitmask %r0;
    MOV isCommon newBitmask;
    MOV %r0 @c239;
    MOV %r2 @c46;
    OR %r0 %r2;
    MOV %r1 @c242;
    OR %r0 %r1;
    LT isCommon %r0;
    MOV %r2 srcBitmask;
    MOV %r3 @c242;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1416_;
    MOV %r3 bitmask;
    MOV %r4 @c243;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1416_:
    MOV %r0 %r1;
    JIF %r1 _l1415_;
    MOV %r4 srcBitmask;
    MOV %r5 @c242;
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l1418_;
    MOV %r5 bitmask;
    MOV %r6 @c316;
    WEQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l1418_:
    MOV %r2 %r3;
    JF %r3 _l1417_;
    MOV %r8 data;
    MOV %r9 7;
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r6 source;
    MOV %r7 8;
    MOV_PROP %r5 %r6 %r7;
    LE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1417_:
    LG_OR %r0 %r2;
LABEL _l1415_:
    MOV isCombo %r0;
    JIF %r0 _l1414_;
    MOV %r3 srcBitmask;
    MOV %r4 @c242;
    MOV %r5 @c316;
    OR %r4 %r5;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1420_;
    MOV %r8 source;
    MOV %r9 7;
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r6 source;
    MOV %r7 8;
    MOV_PROP %r5 %r6 %r7;
    LE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1420_:
    MOV %r1 %r2;
    JF %r2 _l1419_;
    MOV %r3 bitmask;
    MOV %r4 @c243;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1419_:
    LG_OR isCombo %r1;
LABEL _l1414_:
    MOV %r1 isCommon;
    MOV %r0 %r1;
    JIF %r1 _l1423_;
    MOV %r2 isCombo;
    LG_OR %r0 %r2;
LABEL _l1423_:
    NEG %r0;
    JF %r0 _l1421_;
    MOV %r1 data;
    MOV $RET %r1;
    RET;
    JMP _l1422_;
LABEL _l1421_:
LABEL _l1422_:
    MOV %r0 srcBitmask;
    MOV %r1 @c239;
    AND %r0 %r1;
    JF %r0 _l1424_;
    MOV %r2 source;
    MOV %r3 2;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 data;
    MOV %r3 2;
    SET_KEY %r2 %r3 %r1;
    MOV %r2 bitmask;
    MOV %r3 @c239;
    AND %r2 %r3;
    JF %r2 _l1426_;
    MOV %r1 0;
    JMP _l1425_;
LABEL _l1426_:
    MOV %r1 @c252;
    MOV %r2 newBitmask;
    OR %r2 %r1;
    MOV newBitmask %r2;
    JMP _l1425_;
LABEL _l1424_:
LABEL _l1425_:
    MOV %r0 source;
    MOV %r1 3;
    MOV_PROP value %r0 %r1;
    MOV %r0 value;
    JF %r0 _l1427_;
    MOV %r1 data;
    MOV %r2 3;
    MOV_PROP partials %r1 %r2;
    MOV %r2 partials;
    JF %r2 _l1429_;
    MOV %r4 source;
    MOV %r5 4;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 partials;
    PUSH %r3;
    CALL_REG @c317 3 false;
    MOV %r1 $RET;
    JMP _l1428_;
LABEL _l1429_:
    MOV %r1 value;
    MOV %r2 data;
    MOV %r3 3;
    SET_KEY %r2 %r3 %r1;
    MOV %r2 partials;
    JF %r2 _l1430_;
    MOV %r3 @c14;
    PUSH %r3;
    MOV %r4 data;
    MOV %r5 3;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c318 2 false;
    MOV %r1 $RET;
    JMP _l1428_;
LABEL _l1430_:
    MOV %r3 source;
    MOV %r4 4;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 data;
    MOV %r3 4;
    SET_KEY %r2 %r3 %r1;
    JMP _l1428_;
LABEL _l1427_:
LABEL _l1428_:
    MOV %r1 source;
    MOV %r2 5;
    MOV_PROP %r0 %r1 %r2;
    MOV value %r0;
    MOV %r0 value;
    JF %r0 _l1431_;
    MOV %r2 data;
    MOV %r3 5;
    MOV_PROP %r1 %r2 %r3;
    MOV partials %r1;
    MOV %r2 partials;
    JF %r2 _l1433_;
    MOV %r4 source;
    MOV %r5 6;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 partials;
    PUSH %r3;
    CALL_REG @c319 3 false;
    MOV %r1 $RET;
    JMP _l1432_;
LABEL _l1433_:
    MOV %r1 value;
    MOV %r2 data;
    MOV %r3 5;
    SET_KEY %r2 %r3 %r1;
    MOV %r2 partials;
    JF %r2 _l1434_;
    MOV %r3 @c14;
    PUSH %r3;
    MOV %r4 data;
    MOV %r5 5;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c318 2 false;
    MOV %r1 $RET;
    JMP _l1432_;
LABEL _l1434_:
    MOV %r3 source;
    MOV %r4 6;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 data;
    MOV %r3 6;
    SET_KEY %r2 %r3 %r1;
    JMP _l1432_;
LABEL _l1431_:
LABEL _l1432_:
    MOV %r1 source;
    MOV %r2 7;
    MOV_PROP %r0 %r1 %r2;
    MOV value %r0;
    MOV %r0 value;
    JF %r0 _l1435_;
    MOV %r1 value;
    MOV %r2 data;
    MOV %r3 7;
    SET_KEY %r2 %r3 %r1;
    JMP _l1436_;
LABEL _l1435_:
LABEL _l1436_:
    MOV %r0 srcBitmask;
    MOV %r1 @c242;
    AND %r0 %r1;
    JF %r0 _l1437_;
    MOV %r4 data;
    MOV %r5 8;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 null;
    WEQ %r2 %r3;
    JF %r2 _l1439_;
    MOV %r3 source;
    MOV %r4 8;
    MOV_PROP %r1 %r3 %r4;
    JMP _l1438_;
LABEL _l1439_:
    MOV %r4 source;
    MOV %r5 8;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r4 data;
    MOV %r5 8;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c77 2 false;
    MOV %r1 $RET;
    MOV %r2 data;
    MOV %r3 8;
    SET_KEY %r2 %r3 %r1;
    JMP _l1438_;
LABEL _l1437_:
LABEL _l1438_:
    MOV %r2 data;
    MOV %r3 9;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1440_;
    MOV %r2 source;
    MOV %r3 9;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 data;
    MOV %r3 9;
    SET_KEY %r2 %r3 %r1;
    JMP _l1441_;
LABEL _l1440_:
LABEL _l1441_:
    MOV %r1 source;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 data;
    MOV %r2 0;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 newBitmask;
    MOV %r1 data;
    MOV %r2 1;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 data;
    MOV $RET %r0;
    RET;
}
func @@f273(object) {
    VAR result;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    NEW_ARR result;
    MOV %r0 object;
    MOV %r1 null;
    WNE %r0 %r1;
    JF %r0 _l1442_;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c66 1 false;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l1443_;
LABEL _l1442_:
LABEL _l1443_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f274(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 @c283;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f275(func, start, transform) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    ALLOC @c589;
    MOV @c589 func;
    ALLOC @c587;
    MOV @c587 start;
    ALLOC @c588;
    MOV @c588 transform;
    MOV %r1 0;
    PUSH %r1;
    MOV %r2 @c587;
    MOV %r3 @c9;
    EQ %r2 %r3;
    JF %r2 _l1444_;
    MOV %r4 @c589;
    MOV %r5 "length";
    MOV_PROP %r1 %r4 %r5;
    MOV %r3 1;
    SUB %r1 %r3;
    JMP _l1445_;
LABEL _l1444_:
    MOV %r1 @c587;
LABEL _l1445_:
    PUSH %r1;
    CALL_REG @c155 2 false;
    MOV %r0 $RET;
    MOV @c587 %r0;
    FUNC %r0 @@f627;
    MOV $RET %r0;
    RET;
}
func @@f276(object, path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 path;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 2;
    LT %r1 %r2;
    JF %r1 _l1446_;
    MOV %r0 object;
    JMP _l1447_;
LABEL _l1446_:
    MOV %r3 1;
    MINUS %r3;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 path;
    PUSH %r3;
    CALL_REG @c224 3 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c203 2 false;
    MOV %r0 $RET;
LABEL _l1447_:
    MOV $RET %r0;
    RET;
}
func @@f277(array, indexes) {
    VAR arrLength;
    VAR length;
    VAR oldArray;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP arrLength %r0 %r1;
    MOV %r0 arrLength;
    PUSH %r0;
    MOV %r1 indexes;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c77 2 false;
    MOV length $RET;
    MOV %r0 array;
    PUSH %r0;
    CALL_REG @c75 1 false;
    MOV oldArray $RET;
LABEL _l1448_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l1449_;
LABEL _l1451_:
    MOV %r1 indexes;
    MOV %r2 length;
    MOV_PROP index %r1 %r2;
    MOV %r3 arrLength;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    CALL_REG @c96 2 false;
    MOV %r2 $RET;
    JF %r2 _l1452_;
    MOV %r3 oldArray;
    MOV %r4 index;
    MOV_PROP %r1 %r3 %r4;
    JMP _l1453_;
LABEL _l1452_:
    MOV %r1 @c9;
LABEL _l1453_:
    MOV %r2 array;
    MOV %r3 length;
    SET_KEY %r2 %r3 %r1;
    JMP _l1448_;
LABEL _l1449_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f278(func, wait) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 wait;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    MOV %r1 @c22;
    MOV %r2 "setTimeout";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f279(wrapper, reference, bitmask) {
    VAR source;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV source reference;
    MOV %r0 "";
    ADD source %r0;
    MOV %r0 wrapper;
    PUSH %r0;
    MOV %r0 "wrapper -> ";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV %r3 bitmask;
    PUSH %r3;
    MOV %r4 source;
    PUSH %r4;
    CALL_REG @c320 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c321 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c322 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 wrapper;
    PUSH %r1;
    CALL_REG @c212 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f280(func) {
    VAR @c593;
    ALLOC @c593;
    VAR @c592;
    ALLOC @c592;
    VAR %r0;
    ALLOC @c595;
    MOV @c595 func;
    MOV @c593 0;
    MOV @c592 0;
    FUNC %r0 @@f628;
    MOV $RET %r0;
    RET;
}
func @@f281(array, size) {
    VAR index;
    VAR length;
    VAR lastIndex;
    VAR rand;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV lastIndex length;
    MOV %r0 1;
    SUB lastIndex %r0;
    MOV %r1 size;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1454_;
    MOV %r0 length;
    JMP _l1455_;
LABEL _l1454_:
    MOV %r0 size;
LABEL _l1455_:
    MOV size %r0;
LABEL _l1456_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 size;
    LT %r0 %r1;
    JF %r0 _l1457_;
LABEL _l1459_:
    MOV %r1 lastIndex;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    CALL_REG @c97 2 false;
    MOV rand $RET;
    MOV %r1 array;
    MOV %r2 rand;
    MOV_PROP value %r1 %r2;
    MOV %r2 array;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 array;
    MOV %r3 rand;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 value;
    MOV %r2 array;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l1456_;
LABEL _l1457_:
    MOV %r0 size;
    MOV %r1 array;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f282(string) {
    VAR @c597;
    ALLOC @c597;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    NEW_ARR @c597;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "charCodeAt";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 46;
    EQ %r0 %r1;
    JF %r0 _l1460_;
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 @c597;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l1461_;
LABEL _l1460_:
LABEL _l1461_:
    FUNC %r0 @@f629;
    PUSH %r0;
    MOV %r0 @c323;
    PUSH %r0;
    MOV %r0 string;
    MOV %r1 "replace";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 @c597;
    MOV $RET %r0;
    RET;
}
func @@f283(value) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "string";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1464_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c139 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1464_:
    JF %r0 _l1462_;
    MOV %r1 value;
    MOV $RET %r1;
    RET;
    JMP _l1463_;
LABEL _l1462_:
LABEL _l1463_:
    MOV result value;
    MOV %r0 "";
    ADD result %r0;
    MOV %r2 result;
    MOV %r3 "0";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1467_;
    MOV %r3 1;
    MOV %r5 value;
    DIV %r3 %r5;
    MOV %r4 @c32;
    MINUS %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1467_:
    JF %r1 _l1465_;
    MOV %r0 "-0";
    JMP _l1466_;
LABEL _l1465_:
    MOV %r0 result;
LABEL _l1466_:
    MOV $RET %r0;
    RET;
}
func @@f284(func) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 func;
    MOV %r1 null;
    WNE %r0 %r1;
    JF %r0 _l1468_;
    TRY _l1470_ _l1471_;
    MOV %r2 func;
    PUSH %r2;
    MOV %r2 @c324;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    TRY_END;
LABEL _l1470_:
LABEL _l1471_:
    TRY _l1472_ _l1473_;
    MOV %r1 func;
    MOV %r2 "";
    ADD %r1 %r2;
    MOV $RET %r1;
    RET;
    TRY_END;
LABEL _l1472_:
LABEL _l1473_:
    JMP _l1469_;
LABEL _l1468_:
LABEL _l1469_:
    MOV %r0 "";
    MOV $RET %r0;
    RET;
}
func @@f285(details, bitmask) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c599;
    MOV @c599 details;
    ALLOC @c598;
    MOV @c598 bitmask;
    FUNC %r0 @@f630;
    PUSH %r0;
    MOV %r0 @c325;
    PUSH %r0;
    CALL_REG @c45 2 false;
    MOV %r1 @c599;
    MOV %r2 "sort";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f286(wrapper) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 wrapper;
    MOV %r1 @c70;
    INST_OF %r0 %r1;
    JF %r0 _l1474_;
    MOV %r2 wrapper;
    MOV %r3 "clone";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1475_;
LABEL _l1474_:
LABEL _l1475_:
    MOV %r1 wrapper;
    MOV %r2 "__chain__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 wrapper;
    MOV %r2 "__wrapped__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c71 2 true;
    MOV result $RET;
    MOV %r2 wrapper;
    MOV %r3 "__actions__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c75 1 false;
    MOV %r0 $RET;
    MOV %r1 result;
    MOV %r2 "__actions__";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 wrapper;
    MOV %r2 "__index__";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "__index__";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 wrapper;
    MOV %r2 "__values__";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "__values__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f287(array, size, guard) {
    VAR length;
    VAR index;
    VAR resIndex;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 guard;
    JF %r1 _l1478_;
    MOV %r2 guard;
    PUSH %r2;
    MOV %r2 size;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c326 3 false;
    MOV %r0 $RET;
    JMP _l1477_;
LABEL _l1478_:
    MOV %r0 size;
    MOV %r2 @c9;
    EQ %r0 %r2;
    JF %r0 _l1476_;
    MOV %r1 1;
    MOV size %r1;
    JMP _l1477_;
LABEL _l1476_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 size;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    MOV size %r1;
LABEL _l1477_:
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1479_;
    MOV length 0;
    JMP _l1480_;
LABEL _l1479_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1480_:
    MOV %r1 length;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l1483_;
    MOV %r2 size;
    MOV %r3 1;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1483_:
    JF %r0 _l1481_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1482_;
LABEL _l1481_:
LABEL _l1482_:
    MOV index 0;
    MOV resIndex 0;
    MOV %r1 length;
    MOV %r2 size;
    DIV %r1 %r2;
    PUSH %r1;
    CALL_REG @c209 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV result $RET;
LABEL _l1484_:
    MOV %r0 index;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1485_;
LABEL _l1487_:
    MOV %r3 size;
    MOV %r4 index;
    ADD %r4 %r3;
    MOV index %r4;
    MOV %r2 %r4;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c224 3 false;
    MOV %r1 $RET;
    MOV %r2 result;
    MOV %r4 resIndex;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV resIndex %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l1484_;
LABEL _l1485_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f288(array) {
    VAR index;
    VAR length;
    VAR resIndex;
    VAR result;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1488_;
    MOV length 0;
    JMP _l1489_;
LABEL _l1488_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1489_:
    MOV resIndex 0;
    NEW_ARR result;
LABEL _l1490_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1491_;
LABEL _l1493_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r1 value;
    JF %r1 _l1494_;
    MOV %r2 value;
    MOV %r3 result;
    MOV %r5 resIndex;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV resIndex %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l1495_;
LABEL _l1494_:
LABEL _l1495_:
    JMP _l1490_;
LABEL _l1491_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f289() {
    VAR length;
    VAR args;
    VAR array;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_CTX %r0 "arguments";
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1496_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1497_;
LABEL _l1496_:
LABEL _l1497_:
    MOV %r0 length;
    MOV %r1 1;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV args $RET;
    MOV_CTX %r0 "arguments";
    MOV %r1 0;
    MOV_PROP array %r0 %r1;
    MOV index length;
LABEL _l1498_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l1499_;
LABEL _l1501_:
    MOV_CTX %r2 "arguments";
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 args;
    MOV %r3 index;
    MOV %r4 1;
    SUB %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l1498_;
LABEL _l1499_:
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 args;
    PUSH %r2;
    CALL_REG @c143 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c69 1 false;
    MOV %r2 $RET;
    JF %r2 _l1502_;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c75 1 false;
    MOV %r1 $RET;
    JMP _l1503_;
LABEL _l1502_:
    NEW_ARR %r1;
    MOV %r3 array;
    SET_KEY %r1 0 %r3;
LABEL _l1503_:
    PUSH %r1;
    CALL_REG @c144 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f290(array, values) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c195 1 false;
    MOV %r1 $RET;
    JF %r1 _l1504_;
    MOV %r3 true;
    PUSH %r3;
    MOV %r3 @c195;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 @c213;
    PUSH %r3;
    CALL_REG @c143 4 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c227 2 false;
    MOV %r0 $RET;
    JMP _l1505_;
LABEL _l1504_:
    NEW_ARR %r0;
LABEL _l1505_:
    MOV $RET %r0;
    RET;
}
func @@f291(array, values) {
    VAR @c278;
    ALLOC @c278;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 @c213;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV @c278 $RET;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c195 1 false;
    MOV %r0 $RET;
    JF %r0 _l1506_;
    MOV %r1 @c9;
    MOV @c278 %r1;
    JMP _l1507_;
LABEL _l1506_:
LABEL _l1507_:
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c195 1 false;
    MOV %r1 $RET;
    JF %r1 _l1508_;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r3 true;
    PUSH %r3;
    MOV %r3 @c195;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 @c213;
    PUSH %r3;
    CALL_REG @c143 4 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c227 3 false;
    MOV %r0 $RET;
    JMP _l1509_;
LABEL _l1508_:
    NEW_ARR %r0;
LABEL _l1509_:
    MOV $RET %r0;
    RET;
}
func @@f292(array, values) {
    VAR comparator;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 @c213;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV comparator $RET;
    MOV %r1 comparator;
    PUSH %r1;
    CALL_REG @c195 1 false;
    MOV %r0 $RET;
    JF %r0 _l1510_;
    MOV %r1 @c9;
    MOV comparator %r1;
    JMP _l1511_;
LABEL _l1510_:
LABEL _l1511_:
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c195 1 false;
    MOV %r1 $RET;
    JF %r1 _l1512_;
    MOV %r2 comparator;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r3 true;
    PUSH %r3;
    MOV %r3 @c195;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 @c213;
    PUSH %r3;
    CALL_REG @c143 4 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c227 4 false;
    MOV %r0 $RET;
    JMP _l1513_;
LABEL _l1512_:
    NEW_ARR %r0;
LABEL _l1513_:
    MOV $RET %r0;
    RET;
}
func @@f293(array, n, guard) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1514_;
    MOV length 0;
    JMP _l1515_;
LABEL _l1514_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1515_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1516_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1517_;
LABEL _l1516_:
LABEL _l1517_:
    MOV %r2 guard;
    MOV %r1 %r2;
    JIF %r2 _l1520_;
    MOV %r3 n;
    MOV %r4 @c9;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1520_:
    JF %r1 _l1518_;
    MOV %r0 1;
    JMP _l1519_;
LABEL _l1518_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1519_:
    MOV n %r0;
    MOV %r1 length;
    PUSH %r1;
    MOV %r2 n;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l1521_;
    MOV %r1 0;
    JMP _l1522_;
LABEL _l1521_:
    MOV %r1 n;
LABEL _l1522_:
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f294(array, n, guard) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1523_;
    MOV length 0;
    JMP _l1524_;
LABEL _l1523_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1524_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1525_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1526_;
LABEL _l1525_:
LABEL _l1526_:
    MOV %r2 guard;
    MOV %r1 %r2;
    JIF %r2 _l1529_;
    MOV %r3 n;
    MOV %r4 @c9;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1529_:
    JF %r1 _l1527_;
    MOV %r0 1;
    JMP _l1528_;
LABEL _l1527_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1528_:
    MOV n %r0;
    MOV %r0 length;
    MOV %r1 n;
    SUB %r0 %r1;
    MOV n %r0;
    MOV %r2 n;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l1530_;
    MOV %r1 0;
    JMP _l1531_;
LABEL _l1530_:
    MOV %r1 n;
LABEL _l1531_:
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f295(array, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1534_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1534_:
    JF %r1 _l1532_;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 true;
    PUSH %r2;
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c327 4 false;
    MOV %r0 $RET;
    JMP _l1533_;
LABEL _l1532_:
    NEW_ARR %r0;
LABEL _l1533_:
    MOV $RET %r0;
    RET;
}
func @@f296(array, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1537_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1537_:
    JF %r1 _l1535_;
    MOV %r2 true;
    PUSH %r2;
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c327 3 false;
    MOV %r0 $RET;
    JMP _l1536_;
LABEL _l1535_:
    NEW_ARR %r0;
LABEL _l1536_:
    MOV $RET %r0;
    RET;
}
func @@f297(array, value, start, end) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1538_;
    MOV length 0;
    JMP _l1539_;
LABEL _l1538_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1539_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1540_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1541_;
LABEL _l1540_:
LABEL _l1541_:
    MOV %r2 start;
    MOV %r1 %r2;
    JF %r2 _l1545_;
    MOV %r3 start;
    TYPE_OF %r3;
    MOV %r4 "number";
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1545_:
    MOV %r0 %r1;
    JF %r1 _l1544_;
    MOV %r3 start;
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1544_:
    JF %r0 _l1542_;
    MOV %r1 0;
    MOV start %r1;
    MOV %r1 length;
    MOV end %r1;
    JMP _l1543_;
LABEL _l1542_:
LABEL _l1543_:
    MOV %r1 end;
    PUSH %r1;
    MOV %r1 start;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c328 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f298(array, predicate, fromIndex) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1546_;
    MOV length 0;
    JMP _l1547_;
LABEL _l1546_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1547_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1548_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1549_;
LABEL _l1548_:
LABEL _l1549_:
    MOV %r0 fromIndex;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1550_;
    MOV index 0;
    JMP _l1551_;
LABEL _l1550_:
    MOV %r1 fromIndex;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV index $RET;
LABEL _l1551_:
    MOV %r0 index;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l1552_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 length;
    MOV %r3 index;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    MOV index %r1;
    JMP _l1553_;
LABEL _l1552_:
LABEL _l1553_:
    MOV %r1 index;
    PUSH %r1;
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c6 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f299(array, predicate, fromIndex) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1554_;
    MOV length 0;
    JMP _l1555_;
LABEL _l1554_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1555_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1556_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1557_;
LABEL _l1556_:
LABEL _l1557_:
    MOV index length;
    MOV %r0 1;
    SUB index %r0;
    MOV %r0 fromIndex;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l1558_;
    MOV %r2 fromIndex;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV index %r1;
    MOV %r2 fromIndex;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l1560_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 length;
    MOV %r4 index;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    JMP _l1559_;
LABEL _l1560_:
    MOV %r3 length;
    MOV %r4 1;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    CALL_REG @c77 2 false;
    MOV %r1 $RET;
    MOV index %r1;
    JMP _l1559_;
LABEL _l1558_:
LABEL _l1559_:
    MOV %r1 true;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c6 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f300(array) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1561_;
    MOV length 0;
    JMP _l1562_;
LABEL _l1561_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1562_:
    MOV %r1 length;
    JF %r1 _l1563_;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c143 2 false;
    MOV %r0 $RET;
    JMP _l1564_;
LABEL _l1563_:
    NEW_ARR %r0;
LABEL _l1564_:
    MOV $RET %r0;
    RET;
}
func @@f301(array) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1565_;
    MOV length 0;
    JMP _l1566_;
LABEL _l1565_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1566_:
    MOV %r1 length;
    JF %r1 _l1567_;
    MOV %r2 @c32;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c143 2 false;
    MOV %r0 $RET;
    JMP _l1568_;
LABEL _l1567_:
    NEW_ARR %r0;
LABEL _l1568_:
    MOV $RET %r0;
    RET;
}
func @@f302(array, depth) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1569_;
    MOV length 0;
    JMP _l1570_;
LABEL _l1569_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1570_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1571_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1572_;
LABEL _l1571_:
LABEL _l1572_:
    MOV %r1 depth;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1573_;
    MOV %r0 1;
    JMP _l1574_;
LABEL _l1573_:
    MOV %r2 depth;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1574_:
    MOV depth %r0;
    MOV %r1 depth;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c143 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f303(pairs) {
    VAR index;
    VAR length;
    VAR result;
    VAR pair;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 pairs;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1575_;
    MOV length 0;
    JMP _l1576_;
LABEL _l1575_:
    MOV %r1 pairs;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1576_:
    NEW_OBJ result;
LABEL _l1577_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1578_;
LABEL _l1580_:
    MOV %r1 pairs;
    MOV %r2 index;
    MOV_PROP pair %r1 %r2;
    MOV %r2 pair;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 result;
    MOV %r2 pair;
    MOV %r4 0;
    MOV_PROP %r3 %r2 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l1577_;
LABEL _l1578_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f304(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1583_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1583_:
    JF %r1 _l1581_;
    MOV %r2 array;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    JMP _l1582_;
LABEL _l1581_:
    MOV %r0 @c9;
LABEL _l1582_:
    MOV $RET %r0;
    RET;
}
func @@f305(array, value, fromIndex) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1584_;
    MOV length 0;
    JMP _l1585_;
LABEL _l1584_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1585_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1586_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1587_;
LABEL _l1586_:
LABEL _l1587_:
    MOV %r0 fromIndex;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1588_;
    MOV index 0;
    JMP _l1589_;
LABEL _l1588_:
    MOV %r1 fromIndex;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV index $RET;
LABEL _l1589_:
    MOV %r0 index;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l1590_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 length;
    MOV %r3 index;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    MOV index %r1;
    JMP _l1591_;
LABEL _l1590_:
LABEL _l1591_:
    MOV %r1 index;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f306(array) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1592_;
    MOV length 0;
    JMP _l1593_;
LABEL _l1592_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1593_:
    MOV %r1 length;
    JF %r1 _l1594_;
    MOV %r2 1;
    MINUS %r2;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    JMP _l1595_;
LABEL _l1594_:
    NEW_ARR %r0;
LABEL _l1595_:
    MOV $RET %r0;
    RET;
}
func @@f307(arrays) {
    VAR mapped;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 @c329;
    PUSH %r0;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c10 2 false;
    MOV mapped $RET;
    MOV %r3 mapped;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1598_;
    MOV %r5 mapped;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 arrays;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1598_:
    JF %r1 _l1596_;
    MOV %r2 mapped;
    PUSH %r2;
    CALL_REG @c330 1 false;
    MOV %r0 $RET;
    JMP _l1597_;
LABEL _l1596_:
    NEW_ARR %r0;
LABEL _l1597_:
    MOV $RET %r0;
    RET;
}
func @@f308(arrays) {
    VAR @c278;
    ALLOC @c278;
    VAR mapped;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV @c278 $RET;
    MOV %r0 @c329;
    PUSH %r0;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c10 2 false;
    MOV mapped $RET;
    MOV %r0 @c278;
    MOV %r2 mapped;
    PUSH %r2;
    CALL_REG @c158 1 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    JF %r0 _l1599_;
    MOV %r1 @c9;
    MOV @c278 %r1;
    JMP _l1600_;
LABEL _l1599_:
    MOV %r1 mapped;
    MOV %r2 "pop";
    CALL_VAR %r1 %r2 0 false;
LABEL _l1600_:
    MOV %r3 mapped;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1603_;
    MOV %r5 mapped;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 arrays;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1603_:
    JF %r1 _l1601_;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 mapped;
    PUSH %r2;
    CALL_REG @c330 2 false;
    MOV %r0 $RET;
    JMP _l1602_;
LABEL _l1601_:
    NEW_ARR %r0;
LABEL _l1602_:
    MOV $RET %r0;
    RET;
}
func @@f309(arrays) {
    VAR comparator;
    VAR mapped;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV comparator $RET;
    MOV %r0 @c329;
    PUSH %r0;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c10 2 false;
    MOV mapped $RET;
    MOV %r1 comparator;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1604_;
    MOV %r0 comparator;
    JMP _l1605_;
LABEL _l1604_:
    MOV %r0 @c9;
LABEL _l1605_:
    MOV comparator %r0;
    MOV %r0 comparator;
    JF %r0 _l1606_;
    MOV %r1 mapped;
    MOV %r2 "pop";
    CALL_VAR %r1 %r2 0 false;
    JMP _l1607_;
LABEL _l1606_:
LABEL _l1607_:
    MOV %r3 mapped;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1610_;
    MOV %r5 mapped;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 arrays;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1610_:
    JF %r1 _l1608_;
    MOV %r2 comparator;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 mapped;
    PUSH %r2;
    CALL_REG @c330 3 false;
    MOV %r0 $RET;
    JMP _l1609_;
LABEL _l1608_:
    NEW_ARR %r0;
LABEL _l1609_:
    MOV $RET %r0;
    RET;
}
func @@f310(array, separator) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 array;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l1611_;
    MOV %r0 "";
    JMP _l1612_;
LABEL _l1611_:
    MOV %r2 separator;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 @c331;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l1612_:
    MOV $RET %r0;
    RET;
}
func @@f311(array) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1613_;
    MOV length 0;
    JMP _l1614_;
LABEL _l1613_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1614_:
    MOV %r1 length;
    JF %r1 _l1615_;
    MOV %r2 array;
    MOV %r3 length;
    MOV %r4 1;
    SUB %r3 %r4;
    MOV_PROP %r0 %r2 %r3;
    JMP _l1616_;
LABEL _l1615_:
    MOV %r0 @c9;
LABEL _l1616_:
    MOV $RET %r0;
    RET;
}
func @@f312(array, value, fromIndex) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1617_;
    MOV length 0;
    JMP _l1618_;
LABEL _l1617_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1618_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1619_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1620_;
LABEL _l1619_:
LABEL _l1620_:
    MOV index length;
    MOV %r0 fromIndex;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l1621_;
    MOV %r2 fromIndex;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV index %r1;
    MOV %r2 index;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l1623_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 length;
    MOV %r4 index;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    JMP _l1622_;
LABEL _l1623_:
    MOV %r3 length;
    MOV %r4 1;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    CALL_REG @c77 2 false;
    MOV %r1 $RET;
    MOV index %r1;
    JMP _l1622_;
LABEL _l1621_:
LABEL _l1622_:
    MOV %r1 value;
    MOV %r2 value;
    EQ %r1 %r2;
    JF %r1 _l1624_;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c332 3 false;
    MOV %r0 $RET;
    JMP _l1625_;
LABEL _l1624_:
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 @c5;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c6 4 false;
    MOV %r0 $RET;
LABEL _l1625_:
    MOV $RET %r0;
    RET;
}
func @@f313(array, n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1628_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1628_:
    JF %r1 _l1626_;
    MOV %r3 n;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c333 2 false;
    MOV %r0 $RET;
    JMP _l1627_;
LABEL _l1626_:
    MOV %r0 @c9;
LABEL _l1627_:
    MOV $RET %r0;
    RET;
}
func @@f314(array, values) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r4 array;
    MOV %r3 %r4;
    JF %r4 _l1633_;
    MOV %r6 array;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l1633_:
    MOV %r2 %r3;
    JF %r3 _l1632_;
    MOV %r4 @c213;
    LG_AND %r2 %r4;
LABEL _l1632_:
    MOV %r1 %r2;
    JF %r2 _l1631_;
    MOV %r4 @c213;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1631_:
    JF %r1 _l1629_;
    MOV %r2 @c213;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c334 2 false;
    MOV %r0 $RET;
    JMP _l1630_;
LABEL _l1629_:
    MOV %r0 array;
LABEL _l1630_:
    MOV $RET %r0;
    RET;
}
func @@f315(array, values, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r4 array;
    MOV %r3 %r4;
    JF %r4 _l1638_;
    MOV %r6 array;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l1638_:
    MOV %r2 %r3;
    JF %r3 _l1637_;
    MOV %r4 @c213;
    LG_AND %r2 %r4;
LABEL _l1637_:
    MOV %r1 %r2;
    JF %r2 _l1636_;
    MOV %r4 @c213;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1636_:
    JF %r1 _l1634_;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @c213;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c334 3 false;
    MOV %r0 $RET;
    JMP _l1635_;
LABEL _l1634_:
    MOV %r0 array;
LABEL _l1635_:
    MOV $RET %r0;
    RET;
}
func @@f316(array, values, comparator) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r4 array;
    MOV %r3 %r4;
    JF %r4 _l1643_;
    MOV %r6 array;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l1643_:
    MOV %r2 %r3;
    JF %r3 _l1642_;
    MOV %r4 @c213;
    LG_AND %r2 %r4;
LABEL _l1642_:
    MOV %r1 %r2;
    JF %r2 _l1641_;
    MOV %r4 @c213;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1641_:
    JF %r1 _l1639_;
    MOV %r2 comparator;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 @c213;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c334 4 false;
    MOV %r0 $RET;
    JMP _l1640_;
LABEL _l1639_:
    MOV %r0 array;
LABEL _l1640_:
    MOV $RET %r0;
    RET;
}
func @@f317(array, indexes) {
    VAR @c600;
    ALLOC @c600;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1644_;
    MOV @c600 0;
    JMP _l1645_;
LABEL _l1644_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP @c600 %r1 %r2;
LABEL _l1645_:
    MOV %r0 indexes;
    PUSH %r0;
    MOV %r0 array;
    PUSH %r0;
    CALL_REG @c335 2 false;
    MOV result $RET;
    MOV %r1 @c235;
    PUSH %r1;
    FUNC %r3 @@f631;
    PUSH %r3;
    MOV %r3 indexes;
    PUSH %r3;
    CALL_REG @c10 2 false;
    MOV %r1 $RET;
    MOV %r2 "sort";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 array;
    PUSH %r0;
    CALL_REG @c336 2 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f318(array, predicate) {
    VAR result;
    VAR index;
    VAR indexes;
    VAR length;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    NEW_ARR result;
    MOV %r1 array;
    MOV %r0 %r1;
    JF %r1 _l1648_;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1648_:
    NEG %r0;
    JF %r0 _l1646_;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l1647_;
LABEL _l1646_:
LABEL _l1647_:
    MOV index 1;
    MINUS index;
    NEW_ARR indexes;
    MOV %r0 array;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r1 3;
    PUSH %r1;
    MOV %r1 predicate;
    PUSH %r1;
    CALL_REG @c199 2 false;
    MOV %r0 $RET;
    MOV predicate %r0;
LABEL _l1649_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l1650_;
LABEL _l1652_:
    MOV %r1 array;
    MOV %r2 index;
    MOV_PROP value %r1 %r2;
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG predicate 3 false;
    MOV %r1 $RET;
    JF %r1 _l1653_;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 indexes;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l1654_;
LABEL _l1653_:
LABEL _l1654_:
    JMP _l1649_;
LABEL _l1650_:
    MOV %r0 indexes;
    PUSH %r0;
    MOV %r0 array;
    PUSH %r0;
    CALL_REG @c336 2 false;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f319(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 array;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l1655_;
    MOV %r0 array;
    JMP _l1656_;
LABEL _l1655_:
    MOV %r2 array;
    PUSH %r2;
    MOV %r2 @c337;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l1656_:
    MOV $RET %r0;
    RET;
}
func @@f320(array, start, end) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1657_;
    MOV length 0;
    JMP _l1658_;
LABEL _l1657_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1658_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1659_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1660_;
LABEL _l1659_:
LABEL _l1660_:
    MOV %r2 end;
    MOV %r1 %r2;
    JF %r2 _l1664_;
    MOV %r3 end;
    TYPE_OF %r3;
    MOV %r4 "number";
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1664_:
    MOV %r0 %r1;
    JF %r1 _l1663_;
    MOV %r3 end;
    PUSH %r3;
    MOV %r3 start;
    PUSH %r3;
    MOV %r3 array;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1663_:
    JF %r0 _l1661_;
    MOV %r1 0;
    MOV start %r1;
    MOV %r1 length;
    MOV end %r1;
    JMP _l1662_;
LABEL _l1661_:
    MOV %r2 start;
    MOV %r3 null;
    WEQ %r2 %r3;
    JF %r2 _l1665_;
    MOV %r1 0;
    JMP _l1662_;
LABEL _l1665_:
    MOV %r3 start;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV start %r1;
    MOV %r2 end;
    MOV %r3 @c9;
    EQ %r2 %r3;
    JF %r2 _l1666_;
    MOV %r1 length;
    JMP _l1662_;
LABEL _l1666_:
    MOV %r3 end;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV end %r1;
LABEL _l1662_:
    MOV %r1 end;
    PUSH %r1;
    MOV %r1 start;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f321(array, value) {
    VAR %r0;
    VAR %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c338 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f322(array, value, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c219 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f323(array, value) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1667_;
    MOV length 0;
    JMP _l1668_;
LABEL _l1667_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1668_:
    MOV %r0 length;
    JF %r0 _l1669_;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c338 2 false;
    MOV index $RET;
    MOV %r2 index;
    MOV %r3 length;
    LT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1672_;
    MOV %r4 value;
    PUSH %r4;
    MOV %r5 array;
    MOV %r6 index;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c100 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1672_:
    JF %r1 _l1671_;
    MOV %r2 index;
    MOV $RET %r2;
    RET;
    JMP _l1670_;
LABEL _l1671_:
    JMP _l1670_;
LABEL _l1669_:
LABEL _l1670_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f324(array, value) {
    VAR %r0;
    VAR %r1;
    MOV %r1 true;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c338 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f325(array, value, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 true;
    PUSH %r1;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c219 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f326(array, value) {
    VAR length;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1673_;
    MOV length 0;
    JMP _l1674_;
LABEL _l1673_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1674_:
    MOV %r0 length;
    JF %r0 _l1675_;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c338 3 false;
    MOV index $RET;
    MOV %r1 1;
    SUB index %r1;
    MOV %r2 value;
    PUSH %r2;
    MOV %r3 array;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c100 2 false;
    MOV %r1 $RET;
    JF %r1 _l1677_;
    MOV %r2 index;
    MOV $RET %r2;
    RET;
    JMP _l1676_;
LABEL _l1677_:
    JMP _l1676_;
LABEL _l1675_:
LABEL _l1676_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f327(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1680_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1680_:
    JF %r1 _l1678_;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c339 1 false;
    MOV %r0 $RET;
    JMP _l1679_;
LABEL _l1678_:
    NEW_ARR %r0;
LABEL _l1679_:
    MOV $RET %r0;
    RET;
}
func @@f328(array, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1683_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1683_:
    JF %r1 _l1681_;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c339 2 false;
    MOV %r0 $RET;
    JMP _l1682_;
LABEL _l1681_:
    NEW_ARR %r0;
LABEL _l1682_:
    MOV $RET %r0;
    RET;
}
func @@f329(array) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1684_;
    MOV length 0;
    JMP _l1685_;
LABEL _l1684_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1685_:
    MOV %r1 length;
    JF %r1 _l1686_;
    MOV %r2 length;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    JMP _l1687_;
LABEL _l1686_:
    NEW_ARR %r0;
LABEL _l1687_:
    MOV $RET %r0;
    RET;
}
func @@f330(array, n, guard) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 array;
    MOV %r0 %r1;
    JF %r1 _l1690_;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1690_:
    NEG %r0;
    JF %r0 _l1688_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1689_;
LABEL _l1688_:
LABEL _l1689_:
    MOV %r2 guard;
    MOV %r1 %r2;
    JIF %r2 _l1693_;
    MOV %r3 n;
    MOV %r4 @c9;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1693_:
    JF %r1 _l1691_;
    MOV %r0 1;
    JMP _l1692_;
LABEL _l1691_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1692_:
    MOV n %r0;
    MOV %r2 n;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l1694_;
    MOV %r1 0;
    JMP _l1695_;
LABEL _l1694_:
    MOV %r1 n;
LABEL _l1695_:
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f331(array, n, guard) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 array;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1696_;
    MOV length 0;
    JMP _l1697_;
LABEL _l1696_:
    MOV %r1 array;
    MOV %r2 "length";
    MOV_PROP length %r1 %r2;
LABEL _l1697_:
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l1698_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1699_;
LABEL _l1698_:
LABEL _l1699_:
    MOV %r2 guard;
    MOV %r1 %r2;
    JIF %r2 _l1702_;
    MOV %r3 n;
    MOV %r4 @c9;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1702_:
    JF %r1 _l1700_;
    MOV %r0 1;
    JMP _l1701_;
LABEL _l1700_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1701_:
    MOV n %r0;
    MOV %r0 length;
    MOV %r1 n;
    SUB %r0 %r1;
    MOV n %r0;
    MOV %r1 length;
    PUSH %r1;
    MOV %r2 n;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l1703_;
    MOV %r1 0;
    JMP _l1704_;
LABEL _l1703_:
    MOV %r1 n;
LABEL _l1704_:
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c224 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f332(array, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1707_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1707_:
    JF %r1 _l1705_;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 false;
    PUSH %r2;
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c327 4 false;
    MOV %r0 $RET;
    JMP _l1706_;
LABEL _l1705_:
    NEW_ARR %r0;
LABEL _l1706_:
    MOV $RET %r0;
    RET;
}
func @@f333(array, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1710_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1710_:
    JF %r1 _l1708_;
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c327 2 false;
    MOV %r0 $RET;
    JMP _l1709_;
LABEL _l1708_:
    NEW_ARR %r0;
LABEL _l1709_:
    MOV $RET %r0;
    RET;
}
func @@f334(arrays) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 @c195;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 arrays;
    PUSH %r2;
    CALL_REG @c143 4 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c226 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f335(arrays) {
    VAR @c278;
    ALLOC @c278;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV @c278 $RET;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c195 1 false;
    MOV %r0 $RET;
    JF %r0 _l1711_;
    MOV %r1 @c9;
    MOV @c278 %r1;
    JMP _l1712_;
LABEL _l1711_:
LABEL _l1712_:
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 @c195;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 arrays;
    PUSH %r2;
    CALL_REG @c143 4 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c226 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f336(arrays) {
    VAR comparator;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV comparator $RET;
    MOV %r1 comparator;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1713_;
    MOV %r0 comparator;
    JMP _l1714_;
LABEL _l1713_:
    MOV %r0 @c9;
LABEL _l1714_:
    MOV comparator %r0;
    MOV %r1 comparator;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 @c195;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 arrays;
    PUSH %r2;
    CALL_REG @c143 4 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c226 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f337(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1717_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1717_:
    JF %r1 _l1715_;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c226 1 false;
    MOV %r0 $RET;
    JMP _l1716_;
LABEL _l1715_:
    NEW_ARR %r0;
LABEL _l1716_:
    MOV $RET %r0;
    RET;
}
func @@f338(array, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1720_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1720_:
    JF %r1 _l1718_;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c226 2 false;
    MOV %r0 $RET;
    JMP _l1719_;
LABEL _l1718_:
    NEW_ARR %r0;
LABEL _l1719_:
    MOV $RET %r0;
    RET;
}
func @@f339(array, comparator) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 comparator;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1721_;
    MOV %r0 comparator;
    JMP _l1722_;
LABEL _l1721_:
    MOV %r0 @c9;
LABEL _l1722_:
    MOV comparator %r0;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l1725_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1725_:
    JF %r1 _l1723_;
    MOV %r2 comparator;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c226 3 false;
    MOV %r0 $RET;
    JMP _l1724_;
LABEL _l1723_:
    NEW_ARR %r0;
LABEL _l1724_:
    MOV $RET %r0;
    RET;
}
func @@f340(array) {
    VAR @c601;
    ALLOC @c601;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    ALLOC @c602;
    MOV @c602 array;
    MOV %r1 @c602;
    MOV %r0 %r1;
    JF %r1 _l1728_;
    MOV %r3 @c602;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1728_:
    NEG %r0;
    JF %r0 _l1726_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1727_;
LABEL _l1726_:
LABEL _l1727_:
    MOV @c601 0;
    FUNC %r1 @@f632;
    PUSH %r1;
    MOV %r1 @c602;
    PUSH %r1;
    CALL_REG @c147 2 false;
    MOV %r0 $RET;
    MOV @c602 %r0;
    FUNC %r1 @@f633;
    PUSH %r1;
    MOV %r1 @c601;
    PUSH %r1;
    CALL_REG @c95 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f341(array, iteratee) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    ALLOC @c603;
    MOV @c603 iteratee;
    MOV %r1 array;
    MOV %r0 %r1;
    JF %r1 _l1731_;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1731_:
    NEG %r0;
    JF %r0 _l1729_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1730_;
LABEL _l1729_:
LABEL _l1730_:
    MOV %r0 array;
    PUSH %r0;
    CALL_REG @c340 1 false;
    MOV result $RET;
    MOV %r0 @c278;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1732_;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l1733_;
LABEL _l1732_:
LABEL _l1733_:
    FUNC %r1 @@f634;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f342(array, values) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c195 1 false;
    MOV %r1 $RET;
    JF %r1 _l1734_;
    MOV %r2 @c213;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c227 2 false;
    MOV %r0 $RET;
    JMP _l1735_;
LABEL _l1734_:
    NEW_ARR %r0;
LABEL _l1735_:
    MOV $RET %r0;
    RET;
}
func @@f343(arrays) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c195;
    PUSH %r2;
    MOV %r2 arrays;
    PUSH %r2;
    CALL_REG @c147 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c341 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f344(arrays) {
    VAR @c278;
    ALLOC @c278;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV @c278 $RET;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c195 1 false;
    MOV %r0 $RET;
    JF %r0 _l1736_;
    MOV %r1 @c9;
    MOV @c278 %r1;
    JMP _l1737_;
LABEL _l1736_:
LABEL _l1737_:
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r2 @c195;
    PUSH %r2;
    MOV %r2 arrays;
    PUSH %r2;
    CALL_REG @c147 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c341 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f345(arrays) {
    VAR comparator;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 arrays;
    PUSH %r0;
    CALL_REG @c158 1 false;
    MOV comparator $RET;
    MOV %r1 comparator;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1738_;
    MOV %r0 comparator;
    JMP _l1739_;
LABEL _l1738_:
    MOV %r0 @c9;
LABEL _l1739_:
    MOV comparator %r0;
    MOV %r1 comparator;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r2 @c195;
    PUSH %r2;
    MOV %r2 arrays;
    PUSH %r2;
    CALL_REG @c147 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c341 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f346(props, values) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c215;
    PUSH %r1;
    MOV %r2 @c213;
    MOV %r1 %r2;
    JIF %r2 _l1740_;
    NEW_ARR %r3;
    LG_OR %r1 %r3;
LABEL _l1740_:
    PUSH %r1;
    MOV %r2 props;
    MOV %r1 %r2;
    JIF %r2 _l1741_;
    NEW_ARR %r3;
    LG_OR %r1 %r3;
LABEL _l1741_:
    PUSH %r1;
    CALL_REG @c342 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f347(props, values) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c204;
    PUSH %r1;
    MOV %r2 @c213;
    MOV %r1 %r2;
    JIF %r2 _l1742_;
    NEW_ARR %r3;
    LG_OR %r1 %r3;
LABEL _l1742_:
    PUSH %r1;
    MOV %r2 props;
    MOV %r1 %r2;
    JIF %r2 _l1743_;
    NEW_ARR %r3;
    LG_OR %r1 %r3;
LABEL _l1743_:
    PUSH %r1;
    CALL_REG @c342 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f348(arrays) {
    VAR length;
    VAR @c278;
    ALLOC @c278;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 arrays;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    MOV %r1 1;
    GT %r0 %r1;
    JF %r0 _l1744_;
    MOV %r1 arrays;
    MOV %r2 length;
    MOV %r3 1;
    SUB %r2 %r3;
    MOV_PROP @c278 %r1 %r2;
    JMP _l1745_;
LABEL _l1744_:
    MOV @c278 @c9;
LABEL _l1745_:
    MOV %r1 @c278;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1746_;
    MOV %r2 arrays;
    MOV %r3 "pop";
    CALL_VAR %r2 %r3 0 false;
    MOV %r0 @c278;
    JMP _l1747_;
LABEL _l1746_:
    MOV %r0 @c9;
LABEL _l1747_:
    MOV @c278 %r0;
    MOV %r1 @c278;
    PUSH %r1;
    MOV %r1 arrays;
    PUSH %r1;
    CALL_REG @c343 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f349(value) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c277 1 false;
    MOV result $RET;
    MOV %r0 true;
    MOV %r1 result;
    MOV %r2 "__chain__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f350(value, interceptor) {
    VAR %r0;
    MOV %r0 value;
    PUSH %r0;
    CALL_REG interceptor 1 false;
    MOV %r0 value;
    MOV $RET %r0;
    RET;
}
func @@f351(value, interceptor) {
    VAR %r0;
    VAR %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG interceptor 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f352(paths) {
    VAR @c605;
    ALLOC @c605;
    VAR start;
    VAR value;
    VAR interceptor;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    FUNC interceptor @@f635;
    ALLOC @c604;
    MOV @c604 paths;
    MOV %r0 @c604;
    MOV %r1 "length";
    MOV_PROP @c605 %r0 %r1;
    MOV %r0 @c605;
    JF %r0 _l1748_;
    MOV %r1 @c604;
    MOV %r2 0;
    MOV_PROP start %r1 %r2;
    JMP _l1749_;
LABEL _l1748_:
    MOV start 0;
LABEL _l1749_:
    MOV_THIS %r0;
    MOV %r1 "__wrapped__";
    MOV_PROP value %r0 %r1;
    MOV %r3 @c605;
    MOV %r4 1;
    GT %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1754_;
    MOV_THIS %r7;
    MOV %r8 "__actions__";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l1754_:
    MOV %r1 %r2;
    JIF %r2 _l1753_;
    MOV %r3 value;
    MOV %r4 @c70;
    INST_OF %r3 %r4;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l1753_:
    MOV %r0 %r1;
    JIF %r1 _l1752_;
    MOV %r3 start;
    PUSH %r3;
    CALL_REG @c96 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l1752_:
    JF %r0 _l1750_;
    MOV %r2 interceptor;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "thru";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1751_;
LABEL _l1750_:
LABEL _l1751_:
    MOV %r1 start;
    PLUS %r1;
    MOV %r3 @c605;
    JF %r3 _l1755_;
    MOV %r2 1;
    JMP _l1756_;
LABEL _l1755_:
    MOV %r2 0;
LABEL _l1756_:
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 start;
    PUSH %r1;
    MOV %r1 value;
    MOV %r2 "slice";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV value %r0;
    NEW_OBJ %r0;
    MOV %r1 @c344;
    SET_KEY %r0 'func' %r1;
    NEW_ARR %r1;
    MOV %r2 interceptor;
    SET_KEY %r1 0 %r2;
    SET_KEY %r0 'args' %r1;
    MOV %r1 @c9;
    SET_KEY %r0 'thisArg' %r1;
    PUSH %r0;
    MOV %r2 value;
    MOV %r1 "__actions__";
    MOV_PROP %r0 %r2 %r1;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    FUNC %r1 @@f636;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "__chain__";
    MOV_PROP %r3 %r1 %r2;
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c71 2 true;
    MOV %r1 $RET;
    MOV %r2 "thru";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f353() {
    VAR %r0;
    VAR %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @c345 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f354() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r2;
    MOV %r3 "__chain__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r2;
    MOV %r3 "value";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c71 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f355() {
    VAR done;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV_THIS %r2;
    MOV %r3 "__values__";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l1757_;
    MOV_THIS %r3;
    MOV %r4 "value";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c346 1 false;
    MOV %r1 $RET;
    MOV_THIS %r2;
    MOV %r3 "__values__";
    SET_KEY %r2 %r3 %r1;
    JMP _l1758_;
LABEL _l1757_:
LABEL _l1758_:
    MOV_THIS %r1;
    MOV %r2 "__index__";
    MOV_PROP done %r1 %r2;
    MOV_THIS %r3;
    MOV %r4 "__values__";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    GE done %r0;
    MOV %r0 done;
    JF %r0 _l1759_;
    MOV value @c9;
    JMP _l1760_;
LABEL _l1759_:
    MOV_THIS %r3;
    MOV %r4 "__values__";
    MOV_PROP %r1 %r3 %r4;
    MOV_THIS %r4;
    MOV %r5 "__index__";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    ADD %r3 1;
    MOV_THIS %r4;
    MOV %r5 "__index__";
    SET_KEY %r4 %r5 %r3;
    MOV_PROP value %r1 %r2;
LABEL _l1760_:
    NEW_OBJ %r0;
    MOV %r1 done;
    SET_KEY %r0 'done' %r1;
    MOV %r1 value;
    SET_KEY %r0 'value' %r1;
    MOV $RET %r0;
    RET;
}
func @@f356() {
    VAR %r0;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f357(value) {
    VAR result;
    VAR @c157;
    ALLOC @c157;
    VAR clone;
    VAR previous;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_THIS parent;
LABEL _l1761_:
    MOV %r0 @c157;
    MOV %r1 @c347;
    INST_OF %r0 %r1;
    JF %r0 _l1762_;
LABEL _l1764_:
    MOV %r1 @c157;
    PUSH %r1;
    CALL_REG @c73 1 false;
    MOV clone $RET;
    MOV %r1 0;
    MOV %r2 clone;
    MOV %r3 "__index__";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @c9;
    MOV %r2 clone;
    MOV %r3 "__values__";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 result;
    JF %r1 _l1765_;
    MOV %r2 clone;
    MOV %r3 previous;
    MOV %r4 "__wrapped__";
    SET_KEY %r3 %r4 %r2;
    JMP _l1766_;
LABEL _l1765_:
    MOV %r2 clone;
    MOV result %r2;
LABEL _l1766_:
    MOV previous clone;
    MOV %r2 @c157;
    MOV %r3 "__wrapped__";
    MOV_PROP %r1 %r2 %r3;
    MOV @c157 %r1;
    JMP _l1761_;
LABEL _l1762_:
    MOV %r0 value;
    MOV %r1 previous;
    MOV %r2 "__wrapped__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f358() {
    VAR value;
    VAR wrapped;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV_THIS %r0;
    MOV %r1 "__wrapped__";
    MOV_PROP value %r0 %r1;
    MOV %r0 value;
    MOV %r1 @c70;
    INST_OF %r0 %r1;
    JF %r0 _l1767_;
    MOV wrapped value;
    MOV_THIS %r4;
    MOV %r5 "__actions__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1769_;
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @c70 1 true;
    MOV %r2 $RET;
    MOV wrapped %r2;
    JMP _l1768_;
LABEL _l1769_:
    MOV %r2 wrapped;
    MOV %r3 "reverse";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV wrapped %r1;
    NEW_OBJ %r1;
    MOV %r2 @c344;
    SET_KEY %r1 'func' %r2;
    NEW_ARR %r2;
    MOV %r3 @c348;
    SET_KEY %r2 0 %r3;
    SET_KEY %r1 'args' %r2;
    MOV %r2 @c9;
    SET_KEY %r1 'thisArg' %r2;
    PUSH %r1;
    MOV %r3 wrapped;
    MOV %r2 "__actions__";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV_THIS %r3;
    MOV %r4 "__chain__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 wrapped;
    PUSH %r2;
    CALL_REG @c71 2 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1768_;
LABEL _l1767_:
LABEL _l1768_:
    MOV %r1 @c348;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "thru";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f359() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r2;
    MOV %r3 "__actions__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r2;
    MOV %r3 "__wrapped__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c78 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f360(result, value, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l1770_;
    MOV %r2 result;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV %r2 result;
    MOV %r3 key;
    SET_KEY %r2 %r3 %r1;
    JMP _l1771_;
LABEL _l1770_:
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c101 3 false;
LABEL _l1771_:
}
func @@f361(collection, predicate, guard) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1772_;
    MOV func @c41;
    JMP _l1773_;
LABEL _l1772_:
    MOV func @c349;
LABEL _l1773_:
    MOV %r1 guard;
    MOV %r0 %r1;
    JF %r1 _l1776_;
    MOV %r3 guard;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    MOV %r3 collection;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1776_:
    JF %r0 _l1774_;
    MOV %r1 @c9;
    MOV predicate %r1;
    JMP _l1775_;
LABEL _l1774_:
LABEL _l1775_:
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f362(collection, predicate) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1777_;
    MOV func @c147;
    JMP _l1778_;
LABEL _l1777_:
    MOV func @c350;
LABEL _l1778_:
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f363(collection, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 1;
    PUSH %r1;
    MOV %r2 @c278;
    PUSH %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c351 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c143 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f364(collection, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c32;
    PUSH %r1;
    MOV %r2 @c278;
    PUSH %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c351 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c143 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f365(collection, iteratee, depth) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 depth;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1779_;
    MOV %r0 1;
    JMP _l1780_;
LABEL _l1779_:
    MOV %r2 depth;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1780_:
    MOV depth %r0;
    MOV %r1 depth;
    PUSH %r1;
    MOV %r2 @c278;
    PUSH %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c351 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c143 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f366(collection, iteratee) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1781_;
    MOV func @c45;
    JMP _l1782_;
LABEL _l1781_:
    MOV func @c102;
LABEL _l1782_:
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f367(collection, iteratee) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1783_;
    MOV func @c352;
    JMP _l1784_;
LABEL _l1783_:
    MOV func @c353;
LABEL _l1784_:
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f368(result, value, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l1785_;
    MOV %r1 value;
    PUSH %r1;
    MOV %r3 result;
    MOV %r2 key;
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l1786_;
LABEL _l1785_:
    NEW_ARR %r1;
    MOV %r2 value;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c101 3 false;
LABEL _l1786_:
}
func @@f369(collection, value, fromIndex, guard) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c188 1 false;
    MOV %r1 $RET;
    JF %r1 _l1787_;
    MOV %r0 collection;
    JMP _l1788_;
LABEL _l1787_:
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c213 1 false;
    MOV %r0 $RET;
LABEL _l1788_:
    MOV collection %r0;
    MOV %r2 fromIndex;
    MOV %r1 %r2;
    JF %r2 _l1791_;
    MOV %r3 guard;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l1791_:
    JF %r1 _l1789_;
    MOV %r2 fromIndex;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    JMP _l1790_;
LABEL _l1789_:
    MOV %r0 0;
LABEL _l1790_:
    MOV fromIndex %r0;
    MOV %r0 collection;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 fromIndex;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l1792_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 length;
    MOV %r3 fromIndex;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    MOV fromIndex %r1;
    JMP _l1793_;
LABEL _l1792_:
LABEL _l1793_:
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c354 1 false;
    MOV %r1 $RET;
    JF %r1 _l1794_;
    MOV %r2 fromIndex;
    MOV %r3 length;
    LE %r2 %r3;
    MOV %r0 %r2;
    JF %r2 _l1796_;
    MOV %r5 fromIndex;
    PUSH %r5;
    MOV %r5 value;
    PUSH %r5;
    MOV %r5 collection;
    MOV %r6 "indexOf";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 1;
    MINUS %r4;
    GT %r3 %r4;
    LG_AND %r0 %r3;
LABEL _l1796_:
    JMP _l1795_;
LABEL _l1794_:
    MOV %r2 length;
    NEG %r2;
    NEG %r2;
    MOV %r0 %r2;
    JF %r2 _l1797_;
    MOV %r5 fromIndex;
    PUSH %r5;
    MOV %r5 value;
    PUSH %r5;
    MOV %r5 collection;
    PUSH %r5;
    CALL_REG @c2 3 false;
    MOV %r3 $RET;
    MOV %r4 1;
    MINUS %r4;
    GT %r3 %r4;
    LG_AND %r0 %r3;
LABEL _l1797_:
LABEL _l1795_:
    MOV $RET %r0;
    RET;
}
func @@f370(collection, path, args) {
    VAR @c611;
    ALLOC @c611;
    VAR @c606;
    ALLOC @c606;
    VAR @c610;
    ALLOC @c610;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    ALLOC @c608;
    MOV @c608 path;
    ALLOC @c607;
    MOV @c607 args;
    MOV @c611 1;
    MINUS index;
    MOV @c606 @c608;
    TYPE_OF isFunc;
    MOV %r0 "function";
    WEQ @c606 %r0;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c188 1 false;
    MOV %r0 $RET;
    JF %r0 _l1798_;
    MOV %r2 collection;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c107 1 false;
    MOV @c610 $RET;
    JMP _l1799_;
LABEL _l1798_:
    NEW_ARR @c610;
LABEL _l1799_:
    FUNC %r0 @@f637;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c102 2 false;
    MOV %r0 @c610;
    MOV $RET %r0;
    RET;
}
func @@f371(result, value, key) {
    VAR %r0;
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 result;
    PUSH %r0;
    CALL_REG @c101 3 false;
}
func @@f372(collection, iteratee) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1800_;
    MOV func @c10;
    JMP _l1801_;
LABEL _l1800_:
    MOV func @c200;
LABEL _l1801_:
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f373(collection, iteratees, orders, guard) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 collection;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1802_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1803_;
LABEL _l1802_:
LABEL _l1803_:
    MOV %r1 iteratees;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1804_;
    MOV %r2 iteratees;
    MOV %r3 null;
    WEQ %r2 %r3;
    JF %r2 _l1806_;
    NEW_ARR %r1;
    JMP _l1805_;
LABEL _l1806_:
    NEW_ARR %r1;
    MOV %r3 iteratees;
    SET_KEY %r1 0 %r3;
    MOV iteratees %r1;
    JMP _l1805_;
LABEL _l1804_:
LABEL _l1805_:
    MOV %r1 guard;
    JF %r1 _l1807_;
    MOV %r0 @c9;
    JMP _l1808_;
LABEL _l1807_:
    MOV %r0 orders;
LABEL _l1808_:
    MOV orders %r0;
    MOV %r1 orders;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1809_;
    MOV %r2 orders;
    MOV %r3 null;
    WEQ %r2 %r3;
    JF %r2 _l1811_;
    NEW_ARR %r1;
    JMP _l1810_;
LABEL _l1811_:
    NEW_ARR %r1;
    MOV %r3 orders;
    SET_KEY %r1 0 %r3;
    MOV orders %r1;
    JMP _l1810_;
LABEL _l1809_:
LABEL _l1810_:
    MOV %r1 orders;
    PUSH %r1;
    MOV %r1 iteratees;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c355 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f374() {
    VAR %r0;
    VAR %r1;
    NEW_ARR %r0;
    NEW_ARR %r1;
    SET_KEY %r0 0 %r1;
    NEW_ARR %r1;
    SET_KEY %r0 1 %r1;
    MOV $RET %r0;
    RET;
}
func @@f375(result, value, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 value;
    PUSH %r0;
    MOV %r2 result;
    MOV %r3 key;
    JF %r3 _l1812_;
    MOV %r1 0;
    JMP _l1813_;
LABEL _l1812_:
    MOV %r1 1;
LABEL _l1813_:
    MOV_PROP %r0 %r2 %r1;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f376(collection, iteratee, accumulator) {
    VAR func;
    VAR initAccum;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1814_;
    MOV func @c225;
    JMP _l1815_;
LABEL _l1814_:
    MOV func @c356;
LABEL _l1815_:
    MOV_CTX %r1 "arguments";
    MOV %r2 "length";
    MOV_PROP initAccum %r1 %r2;
    MOV %r0 3;
    LT initAccum %r0;
    MOV %r1 @c102;
    PUSH %r1;
    MOV %r1 initAccum;
    PUSH %r1;
    MOV %r1 accumulator;
    PUSH %r1;
    MOV %r2 4;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f377(collection, iteratee, accumulator) {
    VAR func;
    VAR initAccum;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1816_;
    MOV func @c357;
    JMP _l1817_;
LABEL _l1816_:
    MOV func @c356;
LABEL _l1817_:
    MOV_CTX %r1 "arguments";
    MOV %r2 "length";
    MOV_PROP initAccum %r1 %r2;
    MOV %r0 3;
    LT initAccum %r0;
    MOV %r1 @c353;
    PUSH %r1;
    MOV %r1 initAccum;
    PUSH %r1;
    MOV %r1 accumulator;
    PUSH %r1;
    MOV %r2 4;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f378(collection, predicate) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1818_;
    MOV func @c147;
    JMP _l1819_;
LABEL _l1818_:
    MOV func @c350;
LABEL _l1819_:
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c358 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f379(collection) {
    VAR func;
    VAR %r0;
    VAR %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1820_;
    MOV func @c214;
    JMP _l1821_;
LABEL _l1820_:
    MOV func @c359;
LABEL _l1821_:
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f380(collection, n, guard) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 guard;
    JF %r1 _l1824_;
    MOV %r2 guard;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c326 3 false;
    MOV %r0 $RET;
    JMP _l1823_;
LABEL _l1824_:
    MOV %r0 n;
    MOV %r2 @c9;
    EQ %r0 %r2;
    JF %r0 _l1822_;
    MOV %r1 1;
    MOV n %r1;
    JMP _l1823_;
LABEL _l1822_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV n %r1;
LABEL _l1823_:
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1825_;
    MOV func @c360;
    JMP _l1826_;
LABEL _l1825_:
    MOV func @c361;
LABEL _l1826_:
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f381(collection) {
    VAR func;
    VAR %r0;
    VAR %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1827_;
    MOV func @c362;
    JMP _l1828_;
LABEL _l1827_:
    MOV func @c363;
LABEL _l1828_:
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f382(collection) {
    VAR tag;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 collection;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1829_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l1830_;
LABEL _l1829_:
LABEL _l1830_:
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c188 1 false;
    MOV %r0 $RET;
    JF %r0 _l1831_;
    MOV %r3 collection;
    PUSH %r3;
    CALL_REG @c354 1 false;
    MOV %r2 $RET;
    JF %r2 _l1833_;
    MOV %r3 collection;
    PUSH %r3;
    CALL_REG @c247 1 false;
    MOV %r1 $RET;
    JMP _l1832_;
LABEL _l1833_:
    MOV %r3 collection;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV $RET %r1;
    RET;
    JMP _l1832_;
LABEL _l1831_:
LABEL _l1832_:
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c114 1 false;
    MOV tag $RET;
    MOV %r1 tag;
    MOV %r2 @c170;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1836_;
    MOV %r2 tag;
    MOV %r3 @c178;
    WEQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1836_:
    JF %r0 _l1834_;
    MOV %r2 collection;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l1835_;
LABEL _l1834_:
LABEL _l1835_:
    MOV %r3 collection;
    PUSH %r3;
    CALL_REG @c364 1 false;
    MOV %r1 $RET;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f383(collection, predicate, guard) {
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l1837_;
    MOV func @c42;
    JMP _l1838_;
LABEL _l1837_:
    MOV func @c365;
LABEL _l1838_:
    MOV %r1 guard;
    MOV %r0 %r1;
    JF %r1 _l1841_;
    MOV %r3 guard;
    PUSH %r3;
    MOV %r3 predicate;
    PUSH %r3;
    MOV %r3 collection;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1841_:
    JF %r0 _l1839_;
    MOV %r1 @c9;
    MOV predicate %r1;
    JMP _l1840_;
LABEL _l1839_:
LABEL _l1840_:
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f384(collection, iteratees) {
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 collection;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1842_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1843_;
LABEL _l1842_:
LABEL _l1843_:
    MOV %r0 iteratees;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r1 length;
    MOV %r2 1;
    GT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1846_;
    MOV %r4 iteratees;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r4 iteratees;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 collection;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1846_:
    JF %r0 _l1844_;
    NEW_ARR %r1;
    MOV iteratees %r1;
    JMP _l1845_;
LABEL _l1844_:
    MOV %r2 length;
    MOV %r3 2;
    GT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1848_;
    MOV %r5 iteratees;
    MOV %r6 2;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 iteratees;
    MOV %r6 1;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 iteratees;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c326 3 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1848_:
    JF %r1 _l1847_;
    NEW_ARR %r2;
    MOV %r4 iteratees;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r2 0 %r3;
    MOV iteratees %r2;
    JMP _l1845_;
LABEL _l1847_:
LABEL _l1845_:
    NEW_ARR %r1;
    PUSH %r1;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 iteratees;
    PUSH %r2;
    CALL_REG @c143 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c355 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f385() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r3 @c22;
    MOV %r2 "Date";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "now";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f386(n, func) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c612;
    MOV @c612 n;
    ALLOC @c613;
    MOV @c613 func;
    MOV %r0 @c613;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1849_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1850_;
LABEL _l1849_:
LABEL _l1850_:
    MOV %r1 @c612;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV @c612 %r0;
    FUNC %r0 @@f638;
    MOV $RET %r0;
    RET;
}
func @@f387(func, n, guard) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 guard;
    JF %r1 _l1851_;
    MOV %r0 @c9;
    JMP _l1852_;
LABEL _l1851_:
    MOV %r0 n;
LABEL _l1852_:
    MOV n %r0;
    MOV %r2 func;
    MOV %r1 %r2;
    JF %r2 _l1855_;
    MOV %r3 n;
    MOV %r4 null;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1855_:
    JF %r1 _l1853_;
    MOV %r2 func;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    JMP _l1854_;
LABEL _l1853_:
    MOV %r0 n;
LABEL _l1854_:
    MOV n %r0;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c242;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c366 7 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f388(n, func) {
    VAR @c616;
    ALLOC @c616;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c614;
    MOV @c614 n;
    ALLOC @c615;
    MOV @c615 func;
    MOV %r0 @c615;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1856_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1857_;
LABEL _l1856_:
LABEL _l1857_:
    MOV %r1 @c614;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV @c614 %r0;
    FUNC %r0 @@f639;
    MOV $RET %r0;
    RET;
}
func @@f389(func, thisArg, partials) {
    VAR bitmask;
    VAR holders;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV bitmask @c239;
    MOV %r1 partials;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1858_;
    MOV %r2 @c367;
    PUSH %r2;
    CALL_REG @c368 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 partials;
    PUSH %r1;
    CALL_REG @c318 2 false;
    MOV holders $RET;
    MOV %r1 @c250;
    MOV %r2 bitmask;
    OR %r2 %r1;
    MOV bitmask %r2;
    JMP _l1859_;
LABEL _l1858_:
LABEL _l1859_:
    MOV %r1 holders;
    PUSH %r1;
    MOV %r1 partials;
    PUSH %r1;
    MOV %r1 thisArg;
    PUSH %r1;
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c366 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f390(object, key, partials) {
    VAR bitmask;
    VAR holders;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV bitmask @c239;
    MOV %r0 @c46;
    OR bitmask %r0;
    MOV %r1 partials;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1860_;
    MOV %r2 @c369;
    PUSH %r2;
    CALL_REG @c368 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 partials;
    PUSH %r1;
    CALL_REG @c318 2 false;
    MOV holders $RET;
    MOV %r1 @c250;
    MOV %r2 bitmask;
    OR %r2 %r1;
    MOV bitmask %r2;
    JMP _l1861_;
LABEL _l1860_:
LABEL _l1861_:
    MOV %r1 holders;
    PUSH %r1;
    MOV %r1 partials;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 bitmask;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    CALL_REG @c366 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f391(func, arity, guard) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 guard;
    JF %r1 _l1862_;
    MOV %r0 @c9;
    JMP _l1863_;
LABEL _l1862_:
    MOV %r0 arity;
LABEL _l1863_:
    MOV arity %r0;
    MOV %r0 arity;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c243;
    PUSH %r0;
    MOV %r0 func;
    PUSH %r0;
    CALL_REG @c366 8 false;
    MOV result $RET;
    MOV %r1 @c370;
    MOV %r2 "placeholder";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "placeholder";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f392(func, arity, guard) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 guard;
    JF %r1 _l1864_;
    MOV %r0 @c9;
    JMP _l1865_;
LABEL _l1864_:
    MOV %r0 arity;
LABEL _l1865_:
    MOV arity %r0;
    MOV %r0 arity;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c244;
    PUSH %r0;
    MOV %r0 func;
    PUSH %r0;
    CALL_REG @c366 8 false;
    MOV result $RET;
    MOV %r1 @c371;
    MOV %r2 "placeholder";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 result;
    MOV %r2 "placeholder";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f393(func, wait, options) {
    VAR @c617;
    ALLOC @c617;
    VAR @c618;
    ALLOC @c618;
    VAR @c629;
    ALLOC @c629;
    VAR @c621;
    ALLOC @c621;
    VAR @c624;
    ALLOC @c624;
    VAR @c627;
    ALLOC @c627;
    VAR @c619;
    ALLOC @c619;
    VAR @c625;
    ALLOC @c625;
    VAR @c628;
    ALLOC @c628;
    VAR @c634;
    ALLOC @c634;
    VAR @c626;
    ALLOC @c626;
    VAR @c636;
    ALLOC @c636;
    VAR @c633;
    ALLOC @c633;
    VAR @c631;
    ALLOC @c631;
    VAR @c623;
    ALLOC @c623;
    VAR @c632;
    ALLOC @c632;
    VAR cancel;
    VAR flush;
    VAR debounced;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    FUNC @c626 @@f640;
    FUNC @c636 @@f641;
    FUNC @c633 @@f642;
    FUNC @c631 @@f643;
    FUNC @c623 @@f644;
    FUNC @c632 @@f645;
    FUNC cancel @@f646;
    FUNC flush @@f647;
    FUNC debounced @@f648;
    ALLOC @c620;
    MOV @c620 func;
    ALLOC @c622;
    MOV @c622 wait;
    MOV @c619 0;
    MOV @c625 false;
    MOV @c628 false;
    MOV @c634 true;
    MOV %r0 @c620;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1866_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1867_;
LABEL _l1866_:
LABEL _l1867_:
    MOV %r2 @c622;
    PUSH %r2;
    CALL_REG @c372 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l1868_;
    MOV %r2 0;
    LG_OR %r0 %r2;
LABEL _l1868_:
    MOV @c622 %r0;
    MOV %r1 options;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    JF %r0 _l1869_;
    MOV %r2 options;
    MOV %r3 "leading";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    NEG %r1;
    MOV @c625 %r1;
    MOV %r1 "maxWait";
    MOV %r2 options;
    IN %r1 %r2;
    MOV @c628 %r1;
    MOV %r2 @c628;
    JF %r2 _l1871_;
    MOV %r3 @c622;
    PUSH %r3;
    MOV %r6 options;
    MOV %r7 "maxWait";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG @c372 1 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JIF %r4 _l1872_;
    MOV %r5 0;
    LG_OR %r3 %r5;
LABEL _l1872_:
    PUSH %r3;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    JMP _l1870_;
LABEL _l1871_:
    MOV %r1 @c629;
    MOV @c629 %r1;
    MOV %r2 "trailing";
    MOV %r3 options;
    IN %r2 %r3;
    JF %r2 _l1873_;
    MOV %r3 options;
    MOV %r4 "trailing";
    MOV_PROP %r1 %r3 %r4;
    NEG %r1;
    NEG %r1;
    JMP _l1870_;
LABEL _l1873_:
    MOV %r1 @c634;
    MOV @c634 %r1;
    JMP _l1870_;
LABEL _l1869_:
LABEL _l1870_:
    MOV %r0 cancel;
    MOV %r1 debounced;
    MOV %r2 "cancel";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 flush;
    MOV %r1 debounced;
    MOV %r2 "flush";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 debounced;
    MOV $RET %r0;
    RET;
}
func @@f394(func, args) {
    VAR %r0;
    VAR %r1;
    MOV %r1 args;
    PUSH %r1;
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c373 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f395(func, wait, args) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 args;
    PUSH %r1;
    MOV %r3 wait;
    PUSH %r3;
    CALL_REG @c372 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l1874_;
    MOV %r3 0;
    LG_OR %r1 %r3;
LABEL _l1874_:
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c373 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f396(func) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c245;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c366 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f397(func, resolver) {
    VAR @c638;
    ALLOC @c638;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    FUNC @c638 @@f649;
    ALLOC @c639;
    MOV @c639 func;
    ALLOC @c637;
    MOV @c637 resolver;
    MOV %r1 @c639;
    TYPE_OF %r1;
    MOV %r2 "function";
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1877_;
    MOV %r3 @c637;
    MOV %r4 null;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1878_;
    MOV %r4 @c637;
    TYPE_OF %r4;
    MOV %r5 "function";
    WNE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1878_:
    LG_OR %r0 %r2;
LABEL _l1877_:
    JF %r0 _l1875_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1876_;
LABEL _l1875_:
LABEL _l1876_:
    MOV %r3 @c315;
    MOV %r4 "Cache";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1879_;
    MOV %r3 @c89;
    LG_OR %r1 %r3;
LABEL _l1879_:
    CALL_REG %r1 0 true;
    MOV %r0 $RET;
    MOV %r1 @c638;
    MOV %r2 "cache";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c638;
    MOV $RET %r0;
    RET;
}
func @@f398(predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c640;
    MOV @c640 predicate;
    MOV %r0 @c640;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1880_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1881_;
LABEL _l1880_:
LABEL _l1881_:
    FUNC %r0 @@f650;
    MOV $RET %r0;
    RET;
}
func @@f399(func) {
    VAR %r0;
    VAR %r1;
    MOV %r1 func;
    PUSH %r1;
    MOV %r1 2;
    PUSH %r1;
    CALL_REG @c374 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f400(func, transforms) {
    VAR @c641;
    ALLOC @c641;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    ALLOC @c643;
    MOV @c643 func;
    ALLOC @c642;
    MOV @c642 transforms;
    MOV %r4 @c642;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1884_;
    MOV %r5 @c642;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c69 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1884_:
    JF %r1 _l1882_;
    CALL_REG @c199 0 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c35 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r3 @c642;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    JMP _l1883_;
LABEL _l1882_:
    CALL_REG @c199 0 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c35 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 @c642;
    PUSH %r3;
    CALL_REG @c143 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
LABEL _l1883_:
    MOV @c642 %r0;
    MOV %r0 @c642;
    MOV %r1 "length";
    MOV_PROP @c641 %r0 %r1;
    FUNC %r1 @@f651;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f401(func, partials) {
    VAR holders;
    VAR %r0;
    VAR %r1;
    MOV %r1 @c375;
    PUSH %r1;
    CALL_REG @c368 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 partials;
    PUSH %r0;
    CALL_REG @c318 2 false;
    MOV holders $RET;
    MOV %r1 holders;
    PUSH %r1;
    MOV %r1 partials;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c250;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c366 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f402(func, partials) {
    VAR holders;
    VAR %r0;
    VAR %r1;
    MOV %r1 @c376;
    PUSH %r1;
    CALL_REG @c368 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 partials;
    PUSH %r0;
    CALL_REG @c318 2 false;
    MOV holders $RET;
    MOV %r1 holders;
    PUSH %r1;
    MOV %r1 partials;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c251;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c366 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f403(func, indexes) {
    VAR %r0;
    VAR %r1;
    MOV %r1 indexes;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c316;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c366 6 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f404(func, start) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 func;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1885_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1886_;
LABEL _l1885_:
LABEL _l1886_:
    MOV %r1 start;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1887_;
    MOV %r0 start;
    JMP _l1888_;
LABEL _l1887_:
    MOV %r2 start;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
LABEL _l1888_:
    MOV start %r0;
    MOV %r1 start;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c238 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f405(func, start) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    ALLOC @c645;
    MOV @c645 func;
    ALLOC @c644;
    MOV @c644 start;
    MOV %r0 @c645;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1889_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1890_;
LABEL _l1889_:
LABEL _l1890_:
    MOV %r1 @c644;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l1891_;
    MOV %r0 0;
    JMP _l1892_;
LABEL _l1891_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 @c644;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r0 $RET;
LABEL _l1892_:
    MOV @c644 %r0;
    FUNC %r1 @@f652;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f406(func, wait, options) {
    VAR leading;
    VAR trailing;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV leading true;
    MOV trailing true;
    MOV %r0 func;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l1893_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1894_;
LABEL _l1893_:
LABEL _l1894_:
    MOV %r1 options;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    JF %r0 _l1895_;
    MOV %r2 "leading";
    MOV %r3 options;
    IN %r2 %r3;
    JF %r2 _l1897_;
    MOV %r3 options;
    MOV %r4 "leading";
    MOV_PROP %r1 %r3 %r4;
    NEG %r1;
    NEG %r1;
    JMP _l1896_;
LABEL _l1897_:
    MOV %r1 leading;
    MOV leading %r1;
    MOV %r2 "trailing";
    MOV %r3 options;
    IN %r2 %r3;
    JF %r2 _l1898_;
    MOV %r3 options;
    MOV %r4 "trailing";
    MOV_PROP %r1 %r3 %r4;
    NEG %r1;
    NEG %r1;
    JMP _l1896_;
LABEL _l1898_:
    MOV %r1 trailing;
    MOV trailing %r1;
    JMP _l1896_;
LABEL _l1895_:
LABEL _l1896_:
    NEW_OBJ %r1;
    MOV %r2 leading;
    SET_KEY %r1 'leading' %r2;
    MOV %r2 wait;
    SET_KEY %r1 'maxWait' %r2;
    MOV %r2 trailing;
    SET_KEY %r1 'trailing' %r2;
    PUSH %r1;
    MOV %r1 wait;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c377 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f407(func) {
    VAR %r0;
    VAR %r1;
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c378 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f408(value, wrapper) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 value;
    PUSH %r1;
    MOV %r2 wrapper;
    PUSH %r2;
    CALL_REG @c379 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c375 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f409() {
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV_CTX %r1 "arguments";
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l1899_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1900_;
LABEL _l1899_:
LABEL _l1900_:
    MOV_CTX %r0 "arguments";
    MOV %r1 0;
    MOV_PROP value %r0 %r1;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c69 1 false;
    MOV %r1 $RET;
    JF %r1 _l1901_;
    MOV %r0 value;
    JMP _l1902_;
LABEL _l1901_:
    NEW_ARR %r0;
    MOV %r2 value;
    SET_KEY %r0 0 %r2;
LABEL _l1902_:
    MOV $RET %r0;
    RET;
}
func @@f410(value) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c111;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c380 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f411(value, customizer) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 customizer;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1903_;
    MOV %r0 customizer;
    JMP _l1904_;
LABEL _l1903_:
    MOV %r0 @c9;
LABEL _l1904_:
    MOV customizer %r0;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r1 @c111;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c380 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f412(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c109;
    MOV %r2 @c111;
    OR %r1 %r2;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c380 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f413(value, customizer) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 customizer;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1905_;
    MOV %r0 customizer;
    JMP _l1906_;
LABEL _l1905_:
    MOV %r0 @c9;
LABEL _l1906_:
    MOV customizer %r0;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r1 @c109;
    MOV %r2 @c111;
    OR %r1 %r2;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c380 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f414(object, source) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 source;
    MOV %r2 null;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1907_;
    MOV %r4 source;
    PUSH %r4;
    CALL_REG @c103 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 source;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c381 3 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1907_:
    MOV $RET %r0;
    RET;
}
func @@f415(value, other) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 value;
    MOV %r2 other;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1908_;
    MOV %r3 value;
    MOV %r4 value;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1909_;
    MOV %r4 other;
    MOV %r5 other;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1909_:
    LG_OR %r0 %r2;
LABEL _l1908_:
    MOV $RET %r0;
    RET;
}
func @@f416(value, other) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 other;
    GE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f417() {
    VAR %r0;
    MOV_CTX %r0 "arguments";
    MOV $RET %r0;
    RET;
}
func @@f418(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c68 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l1911_;
    MOV %r4 "callee";
    PUSH %r4;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 @c72;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1911_:
    MOV %r0 %r1;
    JF %r1 _l1910_;
    MOV %r3 "callee";
    PUSH %r3;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 @c382;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1910_:
    MOV $RET %r0;
    RET;
}
func @@f419(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r2 value;
    MOV %r3 null;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1913_;
    MOV %r5 value;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c179 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1913_:
    MOV %r0 %r1;
    JF %r1 _l1912_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c173 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1912_:
    MOV $RET %r0;
    RET;
}
func @@f420(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l1914_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c188 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1914_:
    MOV $RET %r0;
    RET;
}
func @@f421(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r2 value;
    MOV %r3 true;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l1916_;
    MOV %r3 value;
    MOV %r4 false;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1916_:
    MOV %r0 %r1;
    JIF %r1 _l1915_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c68 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l1917_;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c160 1 false;
    MOV %r4 $RET;
    MOV %r5 @c268;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1917_:
    LG_OR %r0 %r2;
LABEL _l1915_:
    MOV $RET %r0;
    RET;
}
func @@f422(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c68 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l1919_;
    MOV %r5 value;
    MOV %r6 "nodeType";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1919_:
    MOV %r0 %r1;
    JF %r1 _l1918_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c197 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1918_:
    MOV $RET %r0;
    RET;
}
func @@f423(value) {
    VAR tag;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    MOV %r0 value;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l1920_;
    MOV %r1 true;
    MOV $RET %r1;
    RET;
    JMP _l1921_;
LABEL _l1920_:
LABEL _l1921_:
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c188 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l1924_;
    MOV %r8 value;
    PUSH %r8;
    CALL_REG @c69 1 false;
    MOV %r7 $RET;
    MOV %r6 %r7;
    JIF %r7 _l1929_;
    MOV %r8 value;
    TYPE_OF %r8;
    MOV %r9 "string";
    WEQ %r8 %r9;
    LG_OR %r6 %r8;
LABEL _l1929_:
    MOV %r5 %r6;
    JIF %r6 _l1928_;
    MOV %r9 value;
    MOV %r10 "splice";
    MOV_PROP %r7 %r9 %r10;
    TYPE_OF %r7;
    MOV %r8 "function";
    WEQ %r7 %r8;
    LG_OR %r5 %r7;
LABEL _l1928_:
    MOV %r4 %r5;
    JIF %r5 _l1927_;
    MOV %r7 value;
    PUSH %r7;
    CALL_REG @c92 1 false;
    MOV %r6 $RET;
    LG_OR %r4 %r6;
LABEL _l1927_:
    MOV %r3 %r4;
    JIF %r4 _l1926_;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c93 1 false;
    MOV %r5 $RET;
    LG_OR %r3 %r5;
LABEL _l1926_:
    MOV %r2 %r3;
    JIF %r3 _l1925_;
    MOV %r5 value;
    PUSH %r5;
    CALL_REG @c91 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l1925_:
    LG_AND %r0 %r2;
LABEL _l1924_:
    JF %r0 _l1922_;
    MOV %r2 value;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l1923_;
LABEL _l1922_:
LABEL _l1923_:
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c114 1 false;
    MOV tag $RET;
    MOV %r1 tag;
    MOV %r2 @c170;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1932_;
    MOV %r2 tag;
    MOV %r3 @c178;
    WEQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1932_:
    JF %r0 _l1930_;
    MOV %r2 value;
    MOV %r3 "size";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l1931_;
LABEL _l1930_:
LABEL _l1931_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c185 1 false;
    MOV %r0 $RET;
    JF %r0 _l1933_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c364 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l1934_;
LABEL _l1933_:
LABEL _l1934_:
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l1935_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1936_;
LABEL _l1935_:
LABEL _l1936_:
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f424(value, other) {
    VAR %r0;
    VAR %r1;
    MOV %r1 other;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c163 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f425(value, other, customizer) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 customizer;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1937_;
    MOV %r0 customizer;
    JMP _l1938_;
LABEL _l1937_:
    MOV %r0 @c9;
LABEL _l1938_:
    MOV customizer %r0;
    MOV %r0 customizer;
    JF %r0 _l1939_;
    MOV %r1 other;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG customizer 2 false;
    MOV result $RET;
    JMP _l1940_;
LABEL _l1939_:
    MOV result @c9;
LABEL _l1940_:
    MOV %r1 result;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l1941_;
    MOV %r2 customizer;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 other;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c163 4 false;
    MOV %r0 $RET;
    JMP _l1942_;
LABEL _l1941_:
    MOV %r0 result;
    NEG %r0;
    NEG %r0;
LABEL _l1942_:
    MOV $RET %r0;
    RET;
}
func @@f426(value) {
    VAR tag;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c68 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1943_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1944_;
LABEL _l1943_:
LABEL _l1944_:
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c160 1 false;
    MOV tag $RET;
    MOV %r2 tag;
    MOV %r3 @c270;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l1946_;
    MOV %r3 tag;
    MOV %r4 @c383;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1946_:
    MOV %r0 %r1;
    JIF %r1 _l1945_;
    MOV %r6 value;
    MOV %r7 "message";
    MOV_PROP %r4 %r6 %r7;
    TYPE_OF %r4;
    MOV %r5 "string";
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l1948_;
    MOV %r7 value;
    MOV %r8 "name";
    MOV_PROP %r5 %r7 %r8;
    TYPE_OF %r5;
    MOV %r6 "string";
    WEQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l1948_:
    MOV %r2 %r3;
    JF %r3 _l1947_;
    MOV %r5 value;
    PUSH %r5;
    CALL_REG @c197 1 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l1947_:
    LG_OR %r0 %r2;
LABEL _l1945_:
    MOV $RET %r0;
    RET;
}
func @@f427(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "number";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1949_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c384 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1949_:
    MOV $RET %r0;
    RET;
}
func @@f428(value) {
    VAR tag;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1950_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1951_;
LABEL _l1950_:
LABEL _l1951_:
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c160 1 false;
    MOV tag $RET;
    MOV %r3 tag;
    MOV %r4 @c115;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1954_;
    MOV %r4 tag;
    MOV %r5 @c116;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1954_:
    MOV %r1 %r2;
    JIF %r2 _l1953_;
    MOV %r3 tag;
    MOV %r4 @c385;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1953_:
    MOV %r0 %r1;
    JIF %r1 _l1952_;
    MOV %r2 tag;
    MOV %r3 @c386;
    WEQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1952_:
    MOV $RET %r0;
    RET;
}
func @@f429(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "number";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1955_;
    MOV %r2 value;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c140 1 false;
    MOV %r3 $RET;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1955_:
    MOV $RET %r0;
    RET;
}
func @@f430(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r3 value;
    TYPE_OF %r3;
    MOV %r4 "number";
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1958_;
    MOV %r4 value;
    MOV %r5 1;
    MINUS %r5;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1958_:
    MOV %r1 %r2;
    JF %r2 _l1957_;
    MOV %r3 value;
    MOV %r5 1;
    MOD %r3 %r5;
    MOV %r4 0;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1957_:
    MOV %r0 %r1;
    JF %r1 _l1956_;
    MOV %r2 value;
    MOV %r3 @c210;
    LE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1956_:
    MOV $RET %r0;
    RET;
}
func @@f431(value) {
    VAR type;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV type value;
    TYPE_OF type;
    MOV %r1 value;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1959_;
    MOV %r3 type;
    MOV %r4 "object";
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1960_;
    MOV %r4 type;
    MOV %r5 "function";
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1960_:
    LG_AND %r0 %r2;
LABEL _l1959_:
    MOV $RET %r0;
    RET;
}
func @@f432(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1961_;
    MOV %r2 value;
    TYPE_OF %r2;
    MOV %r3 "object";
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1961_:
    MOV $RET %r0;
    RET;
}
func @@f433(object, source) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r2 source;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1962_;
    MOV %r4 source;
    PUSH %r4;
    CALL_REG @c189 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 source;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c387 3 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1962_:
    MOV $RET %r0;
    RET;
}
func @@f434(object, source, customizer) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 customizer;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l1963_;
    MOV %r0 customizer;
    JMP _l1964_;
LABEL _l1963_:
    MOV %r0 @c9;
LABEL _l1964_:
    MOV customizer %r0;
    MOV %r1 customizer;
    PUSH %r1;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c189 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 source;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c387 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f435(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c388 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l1965_;
    MOV %r2 value;
    MOV %r3 value;
    PLUS %r3;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1965_:
    MOV $RET %r0;
    RET;
}
func @@f436(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c389 1 false;
    MOV %r0 $RET;
    JF %r0 _l1966_;
    MOV %r2 @c390;
    PUSH %r2;
    CALL_REG @c391 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1967_;
LABEL _l1966_:
LABEL _l1967_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c282 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f437(value) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 null;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f438(value) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 null;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f439(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "number";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1968_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c68 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l1969_;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c160 1 false;
    MOV %r4 $RET;
    MOV %r5 @c269;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1969_:
    LG_OR %r0 %r2;
LABEL _l1968_:
    MOV $RET %r0;
    RET;
}
func @@f440(value) {
    VAR proto;
    VAR Ctor;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l1972_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c160 1 false;
    MOV %r2 $RET;
    MOV %r3 @c118;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1972_:
    JF %r0 _l1970_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l1971_;
LABEL _l1970_:
LABEL _l1971_:
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c285 1 false;
    MOV proto $RET;
    MOV %r0 proto;
    MOV %r1 null;
    EQ %r0 %r1;
    JF %r0 _l1973_;
    MOV %r1 true;
    MOV $RET %r1;
    RET;
    JMP _l1974_;
LABEL _l1973_:
LABEL _l1974_:
    MOV %r1 "constructor";
    PUSH %r1;
    MOV %r1 proto;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV Ctor %r0;
    JF %r0 _l1975_;
    MOV %r2 proto;
    MOV %r3 "constructor";
    MOV_PROP %r1 %r2 %r3;
    LG_AND Ctor %r1;
LABEL _l1975_:
    MOV %r2 Ctor;
    TYPE_OF %r2;
    MOV %r3 "function";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1977_;
    MOV %r3 Ctor;
    MOV %r4 Ctor;
    INST_OF %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1977_:
    MOV %r0 %r1;
    JF %r1 _l1976_;
    MOV %r4 Ctor;
    PUSH %r4;
    MOV %r4 @c324;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 @c392;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1976_:
    MOV $RET %r0;
    RET;
}
func @@f441(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c393 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l1979_;
    MOV %r3 value;
    MOV %r4 @c210;
    MINUS %r4;
    GE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1979_:
    MOV %r0 %r1;
    JF %r1 _l1978_;
    MOV %r2 value;
    MOV %r3 @c210;
    LE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1978_:
    MOV $RET %r0;
    RET;
}
func @@f442(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "string";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1980_;
    MOV %r5 value;
    PUSH %r5;
    CALL_REG @c69 1 false;
    MOV %r4 $RET;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l1982_;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c68 1 false;
    MOV %r5 $RET;
    LG_AND %r3 %r5;
LABEL _l1982_:
    MOV %r2 %r3;
    JF %r3 _l1981_;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c160 1 false;
    MOV %r4 $RET;
    MOV %r5 @c271;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1981_:
    LG_OR %r0 %r2;
LABEL _l1980_:
    MOV $RET %r0;
    RET;
}
func @@f443(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "symbol";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1983_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c68 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l1984_;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c160 1 false;
    MOV %r4 $RET;
    MOV %r5 @c273;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1984_:
    LG_OR %r0 %r2;
LABEL _l1983_:
    MOV $RET %r0;
    RET;
}
func @@f444(value) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 @c9;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f445(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l1985_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c114 1 false;
    MOV %r2 $RET;
    MOV %r3 @c292;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1985_:
    MOV $RET %r0;
    RET;
}
func @@f446(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c68 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l1986_;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c160 1 false;
    MOV %r2 $RET;
    MOV %r3 @c394;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1986_:
    MOV $RET %r0;
    RET;
}
func @@f447(value, other) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    MOV %r1 other;
    LE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f448(value) {
    VAR tag;
    VAR func;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 value;
    NEG %r0;
    JF %r0 _l1987_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l1988_;
LABEL _l1987_:
LABEL _l1988_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c188 1 false;
    MOV %r0 $RET;
    JF %r0 _l1989_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c354 1 false;
    MOV %r2 $RET;
    JF %r2 _l1991_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c248 1 false;
    MOV %r1 $RET;
    JMP _l1990_;
LABEL _l1991_:
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c75 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1990_;
LABEL _l1989_:
LABEL _l1990_:
    MOV %r1 @c395;
    MOV %r0 %r1;
    JF %r1 _l1994_;
    MOV %r3 value;
    MOV %r4 @c395;
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1994_:
    JF %r0 _l1992_;
    MOV %r3 value;
    MOV %r4 @c395;
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c396 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1993_;
LABEL _l1992_:
LABEL _l1993_:
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c114 1 false;
    MOV tag $RET;
    MOV %r0 tag;
    MOV %r1 @c170;
    WEQ %r0 %r1;
    JF %r0 _l1995_;
    MOV func @c272;
    JMP _l1996_;
LABEL _l1995_:
    MOV %r1 tag;
    MOV %r2 @c178;
    WEQ %r1 %r2;
    JF %r1 _l1997_;
    MOV func @c31;
    JMP _l1996_;
LABEL _l1997_:
    MOV func @c213;
LABEL _l1996_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG func 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f449(value) {
    VAR sign;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 value;
    NEG %r0;
    JF %r0 _l1998_;
    MOV %r2 value;
    MOV %r3 0;
    EQ %r2 %r3;
    JF %r2 _l2000_;
    MOV %r1 value;
    JMP _l1999_;
LABEL _l2000_:
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l1999_;
LABEL _l1998_:
LABEL _l1999_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c372 1 false;
    MOV %r0 $RET;
    MOV value %r0;
    MOV %r1 value;
    MOV %r2 @c32;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2003_;
    MOV %r2 value;
    MOV %r3 @c32;
    MINUS %r3;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2003_:
    JF %r0 _l2001_;
    MOV %r1 value;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2004_;
    MOV sign 1;
    MINUS sign;
    JMP _l2002_;
LABEL _l2004_:
    MOV sign 1;
    MOV %r1 sign;
    MOV %r2 @c397;
    MUL %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l2002_;
LABEL _l2001_:
LABEL _l2002_:
    MOV %r1 value;
    MOV %r2 value;
    EQ %r1 %r2;
    JF %r1 _l2005_;
    MOV %r0 value;
    JMP _l2006_;
LABEL _l2005_:
    MOV %r0 0;
LABEL _l2006_:
    MOV $RET %r0;
    RET;
}
func @@f450(value) {
    VAR result;
    VAR remainder;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 value;
    PUSH %r0;
    CALL_REG @c398 1 false;
    MOV result $RET;
    MOV remainder result;
    MOV %r0 1;
    MOD remainder %r0;
    MOV %r1 result;
    MOV %r2 result;
    EQ %r1 %r2;
    JF %r1 _l2007_;
    MOV %r2 remainder;
    JF %r2 _l2009_;
    MOV %r0 result;
    MOV %r3 remainder;
    SUB %r0 %r3;
    JMP _l2008_;
LABEL _l2009_:
    MOV %r0 result;
    JMP _l2008_;
LABEL _l2007_:
    MOV %r0 0;
LABEL _l2008_:
    MOV $RET %r0;
    RET;
}
func @@f451(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    JF %r1 _l2010_;
    MOV %r2 @c74;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c98 3 false;
    MOV %r0 $RET;
    JMP _l2011_;
LABEL _l2010_:
    MOV %r0 0;
LABEL _l2011_:
    MOV $RET %r0;
    RET;
}
func @@f452(value) {
    VAR other;
    VAR isBinary;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 value;
    TYPE_OF %r0;
    MOV %r1 "number";
    WEQ %r0 %r1;
    JF %r0 _l2012_;
    MOV %r1 value;
    MOV $RET %r1;
    RET;
    JMP _l2013_;
LABEL _l2012_:
LABEL _l2013_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c139 1 false;
    MOV %r0 $RET;
    JF %r0 _l2014_;
    MOV %r1 @c8;
    MOV $RET %r1;
    RET;
    JMP _l2015_;
LABEL _l2014_:
LABEL _l2015_:
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    JF %r0 _l2016_;
    MOV %r3 value;
    MOV %r4 "valueOf";
    MOV_PROP %r1 %r3 %r4;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l2018_;
    MOV %r2 value;
    MOV %r3 "valueOf";
    CALL_VAR %r2 %r3 0 false;
    MOV other $RET;
    JMP _l2017_;
LABEL _l2018_:
    MOV other value;
    MOV %r3 other;
    PUSH %r3;
    CALL_REG @c112 1 false;
    MOV %r2 $RET;
    JF %r2 _l2019_;
    MOV %r1 other;
    MOV %r3 "";
    ADD %r1 %r3;
    JMP _l2017_;
LABEL _l2019_:
    MOV %r1 other;
    MOV value %r1;
    JMP _l2017_;
LABEL _l2016_:
LABEL _l2017_:
    MOV %r0 value;
    TYPE_OF %r0;
    MOV %r1 "string";
    WNE %r0 %r1;
    JF %r0 _l2020_;
    MOV %r2 value;
    MOV %r3 0;
    EQ %r2 %r3;
    JF %r2 _l2022_;
    MOV %r1 value;
    JMP _l2021_;
LABEL _l2022_:
    MOV %r1 value;
    PLUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l2021_;
LABEL _l2020_:
LABEL _l2021_:
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 @c399;
    PUSH %r1;
    MOV %r1 value;
    MOV %r2 "replace";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV value %r0;
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 @c400;
    MOV %r1 "test";
    CALL_VAR %r0 %r1 1 false;
    MOV isBinary $RET;
    MOV %r2 isBinary;
    MOV %r1 %r2;
    JIF %r2 _l2025_;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 @c401;
    MOV %r5 "test";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l2025_:
    JF %r1 _l2023_;
    MOV %r3 isBinary;
    JF %r3 _l2026_;
    MOV %r2 2;
    JMP _l2024_;
LABEL _l2026_:
    MOV %r2 8;
    PUSH %r2;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 value;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c402 2 false;
    MOV %r0 $RET;
    JMP _l2024_;
LABEL _l2023_:
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 @c403;
    MOV %r4 "test";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    JF %r2 _l2027_;
    MOV %r0 @c8;
    JMP _l2024_;
LABEL _l2027_:
    MOV %r0 value;
    PLUS %r0;
LABEL _l2024_:
    MOV $RET %r0;
    RET;
}
func @@f453(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c105 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c104 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f454(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    JF %r1 _l2028_;
    MOV %r2 @c210;
    PUSH %r2;
    MOV %r2 @c210;
    MINUS %r2;
    PUSH %r2;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c98 3 false;
    MOV %r0 $RET;
    JMP _l2029_;
LABEL _l2028_:
    MOV %r2 value;
    MOV %r3 0;
    EQ %r2 %r3;
    JF %r2 _l2030_;
    MOV %r0 value;
    JMP _l2029_;
LABEL _l2030_:
    MOV %r0 0;
LABEL _l2029_:
    MOV $RET %r0;
    RET;
}
func @@f455(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 value;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2031_;
    MOV %r0 "";
    JMP _l2032_;
LABEL _l2031_:
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c221 1 false;
    MOV %r0 $RET;
LABEL _l2032_:
    MOV $RET %r0;
    RET;
}
func @@f456(object, source) {
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c185 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l2035_;
    MOV %r3 source;
    PUSH %r3;
    CALL_REG @c188 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l2035_:
    JF %r0 _l2033_;
    MOV %r1 object;
    PUSH %r1;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c103 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c104 3 false;
    RET;
    JMP _l2034_;
LABEL _l2033_:
LABEL _l2034_:
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 source;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l2036_;
    MOV %r2 source;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c215 3 false;
    JMP _l2037_;
LABEL _l2036_:
LABEL _l2037_:
}
func @@f457(object, source) {
    VAR %r0;
    VAR %r1;
    MOV %r0 object;
    PUSH %r0;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c105 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 source;
    PUSH %r0;
    CALL_REG @c104 3 false;
}
func @@f458(object, source, srcIndex, customizer) {
    VAR %r0;
    VAR %r1;
    MOV %r0 customizer;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c105 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 source;
    PUSH %r0;
    CALL_REG @c104 4 false;
}
func @@f459(object, source, srcIndex, customizer) {
    VAR %r0;
    VAR %r1;
    MOV %r0 customizer;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c103 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 source;
    PUSH %r0;
    CALL_REG @c104 4 false;
}
func @@f460(prototype, properties) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 prototype;
    PUSH %r0;
    CALL_REG @c295 1 false;
    MOV result $RET;
    MOV %r1 properties;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2038_;
    MOV %r0 result;
    JMP _l2039_;
LABEL _l2038_:
    MOV %r2 properties;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c123 2 false;
    MOV %r0 $RET;
LABEL _l2039_:
    MOV $RET %r0;
    RET;
}
func @@f461(object, sources) {
    VAR index;
    VAR length;
    VAR guard;
    VAR source;
    VAR props;
    VAR propsIndex;
    VAR propsLength;
    VAR key;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c66 1 false;
    MOV %r0 $RET;
    MOV object %r0;
    MOV index 1;
    MINUS index;
    MOV %r0 sources;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    MOV %r1 2;
    GT %r0 %r1;
    JF %r0 _l2040_;
    MOV %r1 sources;
    MOV %r2 2;
    MOV_PROP guard %r1 %r2;
    JMP _l2041_;
LABEL _l2040_:
    MOV guard @c9;
LABEL _l2041_:
    MOV %r1 guard;
    MOV %r0 %r1;
    JF %r1 _l2044_;
    MOV %r3 guard;
    PUSH %r3;
    MOV %r4 sources;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r4 sources;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2044_:
    JF %r0 _l2042_;
    MOV %r1 1;
    MOV length %r1;
    JMP _l2043_;
LABEL _l2042_:
LABEL _l2043_:
LABEL _l2045_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l2046_;
LABEL _l2048_:
    MOV %r1 sources;
    MOV %r2 index;
    MOV_PROP source %r1 %r2;
    MOV %r1 source;
    PUSH %r1;
    CALL_REG @c105 1 false;
    MOV props $RET;
    MOV propsIndex 1;
    MINUS propsIndex;
    MOV %r1 props;
    MOV %r2 "length";
    MOV_PROP propsLength %r1 %r2;
LABEL _l2049_:
    MOV %r3 propsIndex;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV propsIndex %r3;
    MOV %r2 propsLength;
    LT %r1 %r2;
    JF %r1 _l2050_;
LABEL _l2052_:
    MOV %r2 props;
    MOV %r3 propsIndex;
    MOV_PROP key %r2 %r3;
    MOV %r2 object;
    MOV %r3 key;
    MOV_PROP value %r2 %r3;
    MOV %r3 value;
    MOV %r4 @c9;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2055_;
    MOV %r7 @c265;
    MOV %r8 key;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 value;
    PUSH %r6;
    CALL_REG @c100 2 false;
    MOV %r5 $RET;
    MOV %r4 %r5;
    JF %r5 _l2056_;
    MOV %r7 key;
    PUSH %r7;
    MOV %r7 object;
    PUSH %r7;
    MOV %r7 @c72;
    MOV %r8 "call";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    NEG %r6;
    LG_AND %r4 %r6;
LABEL _l2056_:
    LG_OR %r2 %r4;
LABEL _l2055_:
    JF %r2 _l2053_;
    MOV %r4 source;
    MOV %r5 key;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 object;
    MOV %r5 key;
    SET_KEY %r4 %r5 %r3;
    JMP _l2054_;
LABEL _l2053_:
LABEL _l2054_:
    JMP _l2049_;
LABEL _l2050_:
    JMP _l2045_;
LABEL _l2046_:
    MOV %r0 object;
    MOV $RET %r0;
    RET;
}
func @@f462(args) {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c266;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 args;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 args;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c404;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f463(object, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c156;
    PUSH %r1;
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c405 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f464(object, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c406;
    PUSH %r1;
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 predicate;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c405 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f465(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2057_;
    MOV %r0 object;
    JMP _l2058_;
LABEL _l2057_:
    MOV %r2 @c105;
    PUSH %r2;
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c145 3 false;
    MOV %r0 $RET;
LABEL _l2058_:
    MOV $RET %r0;
    RET;
}
func @@f466(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2059_;
    MOV %r0 object;
    JMP _l2060_;
LABEL _l2059_:
    MOV %r2 @c105;
    PUSH %r2;
    MOV %r3 3;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c146 3 false;
    MOV %r0 $RET;
LABEL _l2060_:
    MOV $RET %r0;
    RET;
}
func @@f467(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r0 %r1;
    JF %r1 _l2061_;
    MOV %r4 3;
    PUSH %r4;
    MOV %r4 @c278;
    PUSH %r4;
    CALL_REG @c199 2 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c156 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2061_:
    MOV $RET %r0;
    RET;
}
func @@f468(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 object;
    MOV %r0 %r1;
    JF %r1 _l2062_;
    MOV %r4 3;
    PUSH %r4;
    MOV %r4 @c278;
    PUSH %r4;
    CALL_REG @c199 2 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c406 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2062_:
    MOV $RET %r0;
    RET;
}
func @@f469(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2063_;
    NEW_ARR %r0;
    JMP _l2064_;
LABEL _l2063_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c103 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c407 2 false;
    MOV %r0 $RET;
LABEL _l2064_:
    MOV $RET %r0;
    RET;
}
func @@f470(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2065_;
    NEW_ARR %r0;
    JMP _l2066_;
LABEL _l2065_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c105 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c407 2 false;
    MOV %r0 $RET;
LABEL _l2066_:
    MOV $RET %r0;
    RET;
}
func @@f471(object, path, defaultValue) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 object;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2067_;
    MOV result @c9;
    JMP _l2068_;
LABEL _l2067_:
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c203 2 false;
    MOV result $RET;
LABEL _l2068_:
    MOV %r1 result;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2069_;
    MOV %r0 defaultValue;
    JMP _l2070_;
LABEL _l2069_:
    MOV %r0 result;
LABEL _l2070_:
    MOV $RET %r0;
    RET;
}
func @@f472(object, path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2071_;
    MOV %r3 @c408;
    PUSH %r3;
    MOV %r3 path;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c409 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2071_:
    MOV $RET %r0;
    RET;
}
func @@f473(object, path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2072_;
    MOV %r3 @c410;
    PUSH %r3;
    MOV %r3 path;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c409 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2072_:
    MOV $RET %r0;
    RET;
}
func @@f474(result, value, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 value;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2075_;
    MOV %r4 value;
    MOV %r5 "toString";
    MOV_PROP %r2 %r4 %r5;
    TYPE_OF %r2;
    MOV %r3 "function";
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2075_:
    JF %r0 _l2073_;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 @c283;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV value %r1;
    JMP _l2074_;
LABEL _l2073_:
LABEL _l2074_:
    MOV %r0 key;
    MOV %r1 result;
    MOV %r2 value;
    SET_KEY %r1 %r2 %r0;
}
func @@f475(result, value, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 value;
    MOV %r2 null;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2078_;
    MOV %r4 value;
    MOV %r5 "toString";
    MOV_PROP %r2 %r4 %r5;
    TYPE_OF %r2;
    MOV %r3 "function";
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2078_:
    JF %r0 _l2076_;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 @c283;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV value %r1;
    JMP _l2077_;
LABEL _l2076_:
LABEL _l2077_:
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JF %r0 _l2079_;
    MOV %r1 key;
    PUSH %r1;
    MOV %r3 result;
    MOV %r2 value;
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2080_;
LABEL _l2079_:
    NEW_ARR %r1;
    MOV %r2 key;
    SET_KEY %r1 0 %r2;
    MOV %r2 result;
    MOV %r3 value;
    SET_KEY %r2 %r3 %r1;
LABEL _l2080_:
}
func @@f476(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c188 1 false;
    MOV %r1 $RET;
    JF %r1 _l2081_;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c411 1 false;
    MOV %r0 $RET;
    JMP _l2082_;
LABEL _l2081_:
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c364 1 false;
    MOV %r0 $RET;
LABEL _l2082_:
    MOV $RET %r0;
    RET;
}
func @@f477(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c188 1 false;
    MOV %r1 $RET;
    JF %r1 _l2083_;
    MOV %r2 true;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c411 2 false;
    MOV %r0 $RET;
    JMP _l2084_;
LABEL _l2083_:
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c412 1 false;
    MOV %r0 $RET;
LABEL _l2084_:
    MOV $RET %r0;
    RET;
}
func @@f478(object, iteratee) {
    VAR @c647;
    ALLOC @c647;
    VAR %r0;
    VAR %r1;
    ALLOC @c646;
    MOV @c646 iteratee;
    NEW_OBJ @c647;
    MOV %r1 3;
    PUSH %r1;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c199 2 false;
    MOV %r0 $RET;
    MOV @c278 %r0;
    FUNC %r0 @@f653;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c156 2 false;
    MOV %r0 @c647;
    MOV $RET %r0;
    RET;
}
func @@f479(object, iteratee) {
    VAR @c649;
    ALLOC @c649;
    VAR %r0;
    VAR %r1;
    ALLOC @c648;
    MOV @c648 iteratee;
    NEW_OBJ @c649;
    MOV %r1 3;
    PUSH %r1;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c199 2 false;
    MOV %r0 $RET;
    MOV @c278 %r0;
    FUNC %r0 @@f654;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c156 2 false;
    MOV %r0 @c649;
    MOV $RET %r0;
    RET;
}
func @@f480(object, source, srcIndex) {
    VAR %r0;
    MOV %r0 srcIndex;
    PUSH %r0;
    MOV %r0 source;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c267 3 false;
}
func @@f481(object, source, srcIndex, customizer) {
    VAR %r0;
    MOV %r0 customizer;
    PUSH %r0;
    MOV %r0 srcIndex;
    PUSH %r0;
    MOV %r0 source;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c267 4 false;
}
func @@f482(object, paths) {
    VAR result;
    VAR @c651;
    ALLOC @c651;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    ALLOC @c650;
    MOV @c650 object;
    NEW_OBJ result;
    MOV %r0 @c650;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2085_;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l2086_;
LABEL _l2085_:
LABEL _l2086_:
    MOV @c651 false;
    FUNC %r1 @@f655;
    PUSH %r1;
    MOV %r1 paths;
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV paths %r0;
    MOV %r0 result;
    PUSH %r0;
    MOV %r1 @c650;
    PUSH %r1;
    CALL_REG @c130 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c650;
    PUSH %r0;
    CALL_REG @c104 3 false;
    MOV %r0 @c651;
    JF %r0 _l2087_;
    MOV %r2 @c413;
    PUSH %r2;
    MOV %r2 @c109;
    MOV %r4 @c110;
    OR %r2 %r4;
    MOV %r3 @c111;
    OR %r2 %r3;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c380 3 false;
    MOV %r1 $RET;
    MOV result %r1;
    JMP _l2088_;
LABEL _l2087_:
LABEL _l2088_:
    MOV %r0 paths;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l2089_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l2090_;
LABEL _l2092_:
    MOV %r2 paths;
    MOV %r3 length;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c206 2 false;
    JMP _l2089_;
LABEL _l2090_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f483(object, predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c358 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c414 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f484(object, paths) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2093_;
    NEW_OBJ %r0;
    JMP _l2094_;
LABEL _l2093_:
    MOV %r2 paths;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c415 2 false;
    MOV %r0 $RET;
LABEL _l2094_:
    MOV $RET %r0;
    RET;
}
func @@f485(object, predicate) {
    VAR props;
    VAR %r0;
    VAR %r1;
    ALLOC @c652;
    MOV @c652 predicate;
    MOV %r0 object;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2095_;
    NEW_OBJ %r1;
    MOV $RET %r1;
    RET;
    JMP _l2096_;
LABEL _l2095_:
LABEL _l2096_:
    FUNC %r0 @@f656;
    PUSH %r0;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c130 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @c10 2 false;
    MOV props $RET;
    MOV %r1 @c652;
    PUSH %r1;
    CALL_REG @c199 1 false;
    MOV %r0 $RET;
    MOV @c652 %r0;
    FUNC %r1 @@f657;
    PUSH %r1;
    MOV %r1 props;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c202 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f486(object, path, defaultValue) {
    VAR index;
    VAR length;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV index 1;
    MINUS index;
    MOV %r0 path;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    NEG %r0;
    JF %r0 _l2097_;
    MOV %r1 1;
    MOV length %r1;
    MOV %r1 @c9;
    MOV object %r1;
    JMP _l2098_;
LABEL _l2097_:
LABEL _l2098_:
LABEL _l2099_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l2100_;
LABEL _l2102_:
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2103_;
    MOV value @c9;
    JMP _l2104_;
LABEL _l2103_:
    MOV %r2 object;
    MOV %r5 path;
    MOV %r6 index;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c149 1 false;
    MOV %r3 $RET;
    MOV_PROP value %r2 %r3;
LABEL _l2104_:
    MOV %r1 value;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2105_;
    MOV %r2 length;
    MOV index %r2;
    MOV %r2 defaultValue;
    MOV value %r2;
    JMP _l2106_;
LABEL _l2105_:
LABEL _l2106_:
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c173 1 false;
    MOV %r2 $RET;
    JF %r2 _l2107_;
    MOV %r3 object;
    PUSH %r3;
    MOV %r3 value;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l2108_;
LABEL _l2107_:
    MOV %r1 value;
LABEL _l2108_:
    MOV object %r1;
    JMP _l2099_;
LABEL _l2100_:
    MOV %r0 object;
    MOV $RET %r0;
    RET;
}
func @@f487(object, path, value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2109_;
    MOV %r0 object;
    JMP _l2110_;
LABEL _l2109_:
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c204 3 false;
    MOV %r0 $RET;
LABEL _l2110_:
    MOV $RET %r0;
    RET;
}
func @@f488(object, path, value, customizer) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 customizer;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l2111_;
    MOV %r0 customizer;
    JMP _l2112_;
LABEL _l2111_:
    MOV %r0 @c9;
LABEL _l2112_:
    MOV customizer %r0;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2113_;
    MOV %r0 object;
    JMP _l2114_;
LABEL _l2113_:
    MOV %r2 customizer;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c204 4 false;
    MOV %r0 $RET;
LABEL _l2114_:
    MOV $RET %r0;
    RET;
}
func @@f489(object, iteratee, accumulator) {
    VAR isArr;
    VAR isArrLike;
    VAR Ctor;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    ALLOC @c654;
    MOV @c654 iteratee;
    ALLOC @c653;
    MOV @c653 accumulator;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c69 1 false;
    MOV isArr $RET;
    MOV %r1 isArr;
    MOV %r0 %r1;
    JIF %r1 _l2116_;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c92 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l2116_:
    MOV isArrLike %r0;
    JIF %r0 _l2115_;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c93 1 false;
    MOV %r1 $RET;
    LG_OR isArrLike %r1;
LABEL _l2115_:
    MOV %r1 4;
    PUSH %r1;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c199 2 false;
    MOV %r0 $RET;
    MOV @c278 %r0;
    MOV %r0 @c653;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2117_;
    MOV %r1 object;
    MOV Ctor %r1;
    JF %r1 _l2119_;
    MOV %r3 object;
    MOV %r4 "constructor";
    MOV_PROP %r2 %r3 %r4;
    LG_AND Ctor %r2;
LABEL _l2119_:
    MOV %r1 isArrLike;
    JF %r1 _l2120_;
    MOV %r3 isArr;
    JF %r3 _l2121_;
    CALL_REG Ctor 0 true;
    MOV %r2 $RET;
    JMP _l2118_;
LABEL _l2121_:
    NEW_ARR %r2;
    MOV @c653 %r2;
    JMP _l2118_;
LABEL _l2120_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c112 1 false;
    MOV %r2 $RET;
    JF %r2 _l2122_;
    MOV %r5 Ctor;
    PUSH %r5;
    CALL_REG @c173 1 false;
    MOV %r4 $RET;
    JF %r4 _l2123_;
    MOV %r6 object;
    PUSH %r6;
    CALL_REG @c285 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @c295 1 false;
    MOV %r3 $RET;
    JMP _l2118_;
LABEL _l2123_:
    NEW_OBJ %r3;
    MOV @c653 %r3;
    JMP _l2118_;
LABEL _l2122_:
    NEW_OBJ %r3;
    MOV @c653 %r3;
    JMP _l2118_;
LABEL _l2117_:
LABEL _l2118_:
    FUNC %r0 @@f658;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    MOV %r1 isArrLike;
    JF %r1 _l2124_;
    MOV %r0 @c45;
    JMP _l2125_;
LABEL _l2124_:
    MOV %r0 @c156;
LABEL _l2125_:
    CALL_REG %r0 2 false;
    MOV %r0 @c653;
    MOV $RET %r0;
    RET;
}
func @@f490(object, path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2126_;
    MOV %r0 true;
    JMP _l2127_;
LABEL _l2126_:
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c206 2 false;
    MOV %r0 $RET;
LABEL _l2127_:
    MOV $RET %r0;
    RET;
}
func @@f491(object, path, updater) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2128_;
    MOV %r0 object;
    JMP _l2129_;
LABEL _l2128_:
    MOV %r3 updater;
    PUSH %r3;
    CALL_REG @c379 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c416 3 false;
    MOV %r0 $RET;
LABEL _l2129_:
    MOV $RET %r0;
    RET;
}
func @@f492(object, path, updater, customizer) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 customizer;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l2130_;
    MOV %r0 customizer;
    JMP _l2131_;
LABEL _l2130_:
    MOV %r0 @c9;
LABEL _l2131_:
    MOV customizer %r0;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2132_;
    MOV %r0 object;
    JMP _l2133_;
LABEL _l2132_:
    MOV %r2 customizer;
    PUSH %r2;
    MOV %r3 updater;
    PUSH %r3;
    CALL_REG @c379 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c416 4 false;
    MOV %r0 $RET;
LABEL _l2133_:
    MOV $RET %r0;
    RET;
}
func @@f493(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2134_;
    NEW_ARR %r0;
    JMP _l2135_;
LABEL _l2134_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c103 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c417 2 false;
    MOV %r0 $RET;
LABEL _l2135_:
    MOV $RET %r0;
    RET;
}
func @@f494(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2136_;
    NEW_ARR %r0;
    JMP _l2137_;
LABEL _l2136_:
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c105 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c417 2 false;
    MOV %r0 $RET;
LABEL _l2137_:
    MOV $RET %r0;
    RET;
}
func @@f495(number, lower, upper) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 upper;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2138_;
    MOV %r1 lower;
    MOV upper %r1;
    MOV %r1 @c9;
    MOV lower %r1;
    JMP _l2139_;
LABEL _l2138_:
LABEL _l2139_:
    MOV %r0 upper;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l2140_;
    MOV %r2 upper;
    PUSH %r2;
    CALL_REG @c372 1 false;
    MOV %r1 $RET;
    MOV upper %r1;
    MOV %r2 upper;
    MOV %r3 upper;
    EQ %r2 %r3;
    JF %r2 _l2142_;
    MOV %r1 upper;
    JMP _l2141_;
LABEL _l2142_:
    MOV %r1 0;
    MOV upper %r1;
    JMP _l2141_;
LABEL _l2140_:
LABEL _l2141_:
    MOV %r0 lower;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l2143_;
    MOV %r2 lower;
    PUSH %r2;
    CALL_REG @c372 1 false;
    MOV %r1 $RET;
    MOV lower %r1;
    MOV %r2 lower;
    MOV %r3 lower;
    EQ %r2 %r3;
    JF %r2 _l2145_;
    MOV %r1 lower;
    JMP _l2144_;
LABEL _l2145_:
    MOV %r1 0;
    MOV lower %r1;
    JMP _l2144_;
LABEL _l2143_:
LABEL _l2144_:
    MOV %r1 upper;
    PUSH %r1;
    MOV %r1 lower;
    PUSH %r1;
    MOV %r2 number;
    PUSH %r2;
    CALL_REG @c372 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c98 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f496(number, start, end) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 start;
    PUSH %r1;
    CALL_REG @c398 1 false;
    MOV %r0 $RET;
    MOV start %r0;
    MOV %r0 end;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2146_;
    MOV %r1 start;
    MOV end %r1;
    MOV %r1 0;
    MOV start %r1;
    JMP _l2147_;
LABEL _l2146_:
    MOV %r2 end;
    PUSH %r2;
    CALL_REG @c398 1 false;
    MOV %r1 $RET;
    MOV end %r1;
LABEL _l2147_:
    MOV %r1 number;
    PUSH %r1;
    CALL_REG @c372 1 false;
    MOV %r0 $RET;
    MOV number %r0;
    MOV %r1 end;
    PUSH %r1;
    MOV %r1 start;
    PUSH %r1;
    MOV %r1 number;
    PUSH %r1;
    CALL_REG @c418 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f497(lower, upper, floating) {
    VAR temp;
    VAR rand;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    MOV %r2 floating;
    MOV %r1 %r2;
    JF %r2 _l2151_;
    MOV %r3 floating;
    TYPE_OF %r3;
    MOV %r4 "boolean";
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2151_:
    MOV %r0 %r1;
    JF %r1 _l2150_;
    MOV %r3 floating;
    PUSH %r3;
    MOV %r3 upper;
    PUSH %r3;
    MOV %r3 lower;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2150_:
    JF %r0 _l2148_;
    MOV %r2 @c9;
    MOV floating %r2;
    MOV %r1 %r2;
    MOV upper %r1;
    JMP _l2149_;
LABEL _l2148_:
LABEL _l2149_:
    MOV %r0 floating;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2152_;
    MOV %r1 upper;
    TYPE_OF %r1;
    MOV %r2 "boolean";
    WEQ %r1 %r2;
    JF %r1 _l2154_;
    MOV %r2 upper;
    MOV floating %r2;
    MOV %r2 @c9;
    MOV upper %r2;
    JMP _l2153_;
LABEL _l2154_:
    MOV %r2 lower;
    TYPE_OF %r2;
    MOV %r3 "boolean";
    WEQ %r2 %r3;
    JF %r2 _l2155_;
    MOV %r3 lower;
    MOV floating %r3;
    MOV %r3 @c9;
    MOV lower %r3;
    JMP _l2153_;
LABEL _l2155_:
    JMP _l2153_;
LABEL _l2152_:
LABEL _l2153_:
    MOV %r1 lower;
    MOV %r2 @c9;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2158_;
    MOV %r2 upper;
    MOV %r3 @c9;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2158_:
    JF %r0 _l2156_;
    MOV %r1 0;
    MOV lower %r1;
    MOV %r1 1;
    MOV upper %r1;
    JMP _l2157_;
LABEL _l2156_:
    MOV %r2 lower;
    PUSH %r2;
    CALL_REG @c398 1 false;
    MOV %r1 $RET;
    MOV lower %r1;
    MOV %r1 upper;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2159_;
    MOV %r2 lower;
    MOV upper %r2;
    MOV %r2 0;
    MOV lower %r2;
    JMP _l2157_;
LABEL _l2159_:
    MOV %r3 upper;
    PUSH %r3;
    CALL_REG @c398 1 false;
    MOV %r2 $RET;
    MOV upper %r2;
LABEL _l2157_:
    MOV %r0 lower;
    MOV %r1 upper;
    GT %r0 %r1;
    JF %r0 _l2160_;
    MOV temp lower;
    MOV %r1 upper;
    MOV lower %r1;
    MOV %r1 temp;
    MOV upper %r1;
    JMP _l2161_;
LABEL _l2160_:
LABEL _l2161_:
    MOV %r2 floating;
    MOV %r1 %r2;
    JIF %r2 _l2165_;
    MOV %r3 lower;
    MOV %r4 1;
    MOD %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2165_:
    MOV %r0 %r1;
    JIF %r1 _l2164_;
    MOV %r2 upper;
    MOV %r3 1;
    MOD %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2164_:
    JF %r0 _l2162_;
    CALL_REG @c207 0 false;
    MOV rand $RET;
    MOV %r2 upper;
    PUSH %r2;
    MOV %r2 lower;
    MOV %r3 rand;
    MOV %r4 upper;
    MOV %r6 lower;
    SUB %r4 %r6;
    MOV %r6 "1e-";
    MOV %r9 rand;
    MOV %r11 "";
    ADD %r9 %r11;
    MOV %r10 "length";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 1;
    SUB %r7 %r8;
    ADD %r6 %r7;
    PUSH %r6;
    CALL_REG @c419 1 false;
    MOV %r5 $RET;
    ADD %r4 %r5;
    MUL %r3 %r4;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_REG @c77 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2163_;
LABEL _l2162_:
LABEL _l2163_:
    MOV %r1 upper;
    PUSH %r1;
    MOV %r1 lower;
    PUSH %r1;
    CALL_REG @c97 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f498(result, word, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 word;
    MOV %r2 "toLowerCase";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV word %r0;
    MOV %r0 result;
    MOV %r2 index;
    JF %r2 _l2166_;
    MOV %r3 word;
    PUSH %r3;
    CALL_REG @c420 1 false;
    MOV %r1 $RET;
    JMP _l2167_;
LABEL _l2166_:
    MOV %r1 word;
LABEL _l2167_:
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f499(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r4 string;
    PUSH %r4;
    CALL_REG @c228 1 false;
    MOV %r2 $RET;
    MOV %r3 "toLowerCase";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c421 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f500(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 string;
    MOV %r0 %r1;
    JF %r1 _l2168_;
    MOV %r3 "";
    PUSH %r3;
    MOV %r3 @c422;
    PUSH %r3;
    MOV %r5 @c423;
    PUSH %r5;
    MOV %r5 @c424;
    PUSH %r5;
    MOV %r5 string;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2168_:
    MOV $RET %r0;
    RET;
}
func @@f501(string, target, position) {
    VAR length;
    VAR end;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 target;
    PUSH %r1;
    CALL_REG @c221 1 false;
    MOV %r0 $RET;
    MOV target %r0;
    MOV %r0 string;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r1 position;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2169_;
    MOV %r0 length;
    JMP _l2170_;
LABEL _l2169_:
    MOV %r2 length;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 position;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c98 3 false;
    MOV %r0 $RET;
LABEL _l2170_:
    MOV position %r0;
    MOV end position;
    MOV %r1 target;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 position;
    SUB %r1 %r0;
    MOV position %r1;
    MOV %r1 position;
    MOV %r2 0;
    GE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2171_;
    MOV %r4 end;
    PUSH %r4;
    MOV %r4 position;
    PUSH %r4;
    MOV %r4 string;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    MOV %r3 target;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2171_:
    MOV $RET %r0;
    RET;
}
func @@f502(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r2 string;
    MOV %r1 %r2;
    JF %r2 _l2174_;
    MOV %r4 string;
    PUSH %r4;
    MOV %r4 @c425;
    MOV %r5 "test";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2174_:
    JF %r1 _l2172_;
    MOV %r2 @c426;
    PUSH %r2;
    MOV %r2 @c427;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l2173_;
LABEL _l2172_:
    MOV %r0 string;
LABEL _l2173_:
    MOV $RET %r0;
    RET;
}
func @@f503(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r2 string;
    MOV %r1 %r2;
    JF %r2 _l2177_;
    MOV %r4 string;
    PUSH %r4;
    MOV %r4 @c428;
    MOV %r5 "test";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2177_:
    JF %r1 _l2175_;
    MOV %r2 "\\$&";
    PUSH %r2;
    MOV %r2 @c25;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l2176_;
LABEL _l2175_:
    MOV %r0 string;
LABEL _l2176_:
    MOV $RET %r0;
    RET;
}
func @@f504(result, word, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 result;
    MOV %r3 index;
    JF %r3 _l2178_;
    MOV %r2 "-";
    JMP _l2179_;
LABEL _l2178_:
    MOV %r2 "";
LABEL _l2179_:
    ADD %r0 %r2;
    MOV %r2 word;
    MOV %r3 "toLowerCase";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f505(result, word, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 result;
    MOV %r3 index;
    JF %r3 _l2180_;
    MOV %r2 " ";
    JMP _l2181_;
LABEL _l2180_:
    MOV %r2 "";
LABEL _l2181_:
    ADD %r0 %r2;
    MOV %r2 word;
    MOV %r3 "toLowerCase";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f506(string, length, chars) {
    VAR strLength;
    VAR mid;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 length;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV length %r0;
    MOV %r0 length;
    JF %r0 _l2182_;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c247 1 false;
    MOV strLength $RET;
    JMP _l2183_;
LABEL _l2182_:
    MOV strLength 0;
LABEL _l2183_:
    MOV %r1 length;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2186_;
    MOV %r2 strLength;
    MOV %r3 length;
    GE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2186_:
    JF %r0 _l2184_;
    MOV %r1 string;
    MOV $RET %r1;
    RET;
    JMP _l2185_;
LABEL _l2184_:
LABEL _l2185_:
    MOV mid length;
    MOV %r1 strLength;
    SUB mid %r1;
    MOV %r0 2;
    DIV mid %r0;
    MOV %r3 chars;
    PUSH %r3;
    MOV %r4 mid;
    PUSH %r4;
    CALL_REG @c208 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c429 2 false;
    MOV %r0 $RET;
    MOV %r2 string;
    ADD %r0 %r2;
    MOV %r2 chars;
    PUSH %r2;
    MOV %r3 mid;
    PUSH %r3;
    CALL_REG @c209 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c429 2 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f507(string, length, chars) {
    VAR strLength;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 length;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV length %r0;
    MOV %r0 length;
    JF %r0 _l2187_;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c247 1 false;
    MOV strLength $RET;
    JMP _l2188_;
LABEL _l2187_:
    MOV strLength 0;
LABEL _l2188_:
    MOV %r2 length;
    MOV %r1 %r2;
    JF %r2 _l2191_;
    MOV %r3 strLength;
    MOV %r4 length;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2191_:
    JF %r1 _l2189_;
    MOV %r0 string;
    MOV %r3 chars;
    PUSH %r3;
    MOV %r3 length;
    MOV %r4 strLength;
    SUB %r3 %r4;
    PUSH %r3;
    CALL_REG @c429 2 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    JMP _l2190_;
LABEL _l2189_:
    MOV %r0 string;
LABEL _l2190_:
    MOV $RET %r0;
    RET;
}
func @@f508(string, length, chars) {
    VAR strLength;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 length;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV length %r0;
    MOV %r0 length;
    JF %r0 _l2192_;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c247 1 false;
    MOV strLength $RET;
    JMP _l2193_;
LABEL _l2192_:
    MOV strLength 0;
LABEL _l2193_:
    MOV %r2 length;
    MOV %r1 %r2;
    JF %r2 _l2196_;
    MOV %r3 strLength;
    MOV %r4 length;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2196_:
    JF %r1 _l2194_;
    MOV %r3 chars;
    PUSH %r3;
    MOV %r3 length;
    MOV %r4 strLength;
    SUB %r3 %r4;
    PUSH %r3;
    CALL_REG @c429 2 false;
    MOV %r0 $RET;
    MOV %r2 string;
    ADD %r0 %r2;
    JMP _l2195_;
LABEL _l2194_:
    MOV %r0 string;
LABEL _l2195_:
    MOV $RET %r0;
    RET;
}
func @@f509(string, radix, guard) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 guard;
    MOV %r0 %r1;
    JIF %r1 _l2199_;
    MOV %r2 radix;
    MOV %r3 null;
    WEQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2199_:
    JF %r0 _l2197_;
    MOV %r1 0;
    MOV radix %r1;
    JMP _l2198_;
LABEL _l2197_:
    MOV %r1 radix;
    JF %r1 _l2200_;
    MOV %r2 radix;
    PLUS %r2;
    MOV radix %r2;
    JMP _l2198_;
LABEL _l2200_:
LABEL _l2198_:
    MOV %r2 radix;
    MOV %r1 %r2;
    JIF %r2 _l2201_;
    MOV %r3 0;
    LG_OR %r1 %r3;
LABEL _l2201_:
    PUSH %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 @c430;
    PUSH %r2;
    MOV %r4 string;
    PUSH %r4;
    CALL_REG @c228 1 false;
    MOV %r2 $RET;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c431 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f510(string, n, guard) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 guard;
    JF %r1 _l2204_;
    MOV %r2 guard;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c326 3 false;
    MOV %r0 $RET;
    JMP _l2203_;
LABEL _l2204_:
    MOV %r0 n;
    MOV %r2 @c9;
    EQ %r0 %r2;
    JF %r0 _l2202_;
    MOV %r1 1;
    MOV n %r1;
    JMP _l2203_;
LABEL _l2202_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV n %r1;
LABEL _l2203_:
    MOV %r1 n;
    PUSH %r1;
    MOV %r2 string;
    PUSH %r2;
    CALL_REG @c228 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c246 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f511() {
    VAR args;
    VAR string;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV args arguments;
    MOV %r1 args;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c228 1 false;
    MOV string $RET;
    MOV %r3 args;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 3;
    LT %r1 %r2;
    JF %r1 _l2205_;
    MOV %r0 string;
    JMP _l2206_;
LABEL _l2205_:
    MOV %r3 args;
    MOV %r4 2;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r3 args;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l2206_:
    MOV $RET %r0;
    RET;
}
func @@f512(result, word, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 result;
    MOV %r3 index;
    JF %r3 _l2207_;
    MOV %r2 "_";
    JMP _l2208_;
LABEL _l2207_:
    MOV %r2 "";
LABEL _l2208_:
    ADD %r0 %r2;
    MOV %r2 word;
    MOV %r3 "toLowerCase";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f513(string, separator, limit) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r2 limit;
    MOV %r1 %r2;
    JF %r2 _l2212_;
    MOV %r3 limit;
    TYPE_OF %r3;
    MOV %r4 "number";
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2212_:
    MOV %r0 %r1;
    JF %r1 _l2211_;
    MOV %r3 limit;
    PUSH %r3;
    MOV %r3 separator;
    PUSH %r3;
    MOV %r3 string;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2211_:
    JF %r0 _l2209_;
    MOV %r2 @c9;
    MOV limit %r2;
    MOV %r1 %r2;
    MOV separator %r1;
    JMP _l2210_;
LABEL _l2209_:
LABEL _l2210_:
    MOV %r1 limit;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2213_;
    MOV %r0 @c74;
    JMP _l2214_;
LABEL _l2213_:
    MOV %r0 limit;
    MOV %r2 0;
    ZSHR %r0 %r2;
LABEL _l2214_:
    MOV limit %r0;
    MOV %r0 limit;
    NEG %r0;
    JF %r0 _l2215_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l2216_;
LABEL _l2215_:
LABEL _l2216_:
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 string;
    MOV %r0 %r1;
    JF %r1 _l2219_;
    MOV %r3 separator;
    TYPE_OF %r3;
    MOV %r4 "string";
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2220_;
    MOV %r5 separator;
    MOV %r6 null;
    WNE %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l2221_;
    MOV %r7 separator;
    PUSH %r7;
    CALL_REG @c432 1 false;
    MOV %r6 $RET;
    NEG %r6;
    LG_AND %r4 %r6;
LABEL _l2221_:
    LG_OR %r2 %r4;
LABEL _l2220_:
    LG_AND %r0 %r2;
LABEL _l2219_:
    JF %r0 _l2217_;
    MOV %r2 separator;
    PUSH %r2;
    CALL_REG @c221 1 false;
    MOV %r1 $RET;
    MOV separator %r1;
    MOV %r2 separator;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l2223_;
    MOV %r4 string;
    PUSH %r4;
    CALL_REG @c15 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2223_:
    JF %r1 _l2222_;
    MOV %r3 limit;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r4 string;
    PUSH %r4;
    CALL_REG @c248 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c249 3 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l2218_;
LABEL _l2222_:
    JMP _l2218_;
LABEL _l2217_:
LABEL _l2218_:
    MOV %r1 limit;
    PUSH %r1;
    MOV %r1 separator;
    PUSH %r1;
    MOV %r1 string;
    MOV %r2 "split";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f514(result, word, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 result;
    MOV %r3 index;
    JF %r3 _l2224_;
    MOV %r2 " ";
    JMP _l2225_;
LABEL _l2224_:
    MOV %r2 "";
LABEL _l2225_:
    ADD %r0 %r2;
    MOV %r2 word;
    PUSH %r2;
    CALL_REG @c421 1 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f515(string, target, position) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 position;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2226_;
    MOV %r0 0;
    JMP _l2227_;
LABEL _l2226_:
    MOV %r3 string;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 position;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c98 3 false;
    MOV %r0 $RET;
LABEL _l2227_:
    MOV position %r0;
    MOV %r1 target;
    PUSH %r1;
    CALL_REG @c221 1 false;
    MOV %r0 $RET;
    MOV target %r0;
    MOV %r2 position;
    MOV %r4 target;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    ADD %r2 %r3;
    PUSH %r2;
    MOV %r2 position;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    MOV %r1 target;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f516(string, options, guard) {
    VAR settings;
    VAR imports;
    VAR @c664;
    ALLOC @c664;
    VAR @c662;
    ALLOC @c662;
    VAR @c660;
    ALLOC @c660;
    VAR @c661;
    ALLOC @c661;
    VAR @c657;
    ALLOC @c657;
    VAR interpolate;
    VAR @c659;
    ALLOC @c659;
    VAR reDelimiters;
    VAR @c663;
    ALLOC @c663;
    VAR variable;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    ALLOC @c658;
    MOV @c658 string;
    MOV %r0 @c277;
    MOV %r1 "templateSettings";
    MOV_PROP settings %r0 %r1;
    MOV %r1 guard;
    MOV %r0 %r1;
    JF %r1 _l2230_;
    MOV %r3 guard;
    PUSH %r3;
    MOV %r3 options;
    PUSH %r3;
    MOV %r3 @c658;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2230_:
    JF %r0 _l2228_;
    MOV %r1 @c9;
    MOV options %r1;
    JMP _l2229_;
LABEL _l2228_:
LABEL _l2229_:
    MOV %r1 @c658;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV @c658 %r0;
    MOV %r1 @c433;
    PUSH %r1;
    MOV %r1 settings;
    PUSH %r1;
    MOV %r1 options;
    PUSH %r1;
    NEW_OBJ %r1;
    PUSH %r1;
    CALL_REG @c434 4 false;
    MOV %r0 $RET;
    MOV options %r0;
    MOV %r0 @c433;
    PUSH %r0;
    MOV %r1 settings;
    MOV %r2 "imports";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 options;
    MOV %r2 "imports";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    NEW_OBJ %r0;
    PUSH %r0;
    CALL_REG @c434 4 false;
    MOV imports $RET;
    MOV %r0 imports;
    PUSH %r0;
    CALL_REG @c103 1 false;
    MOV @c664 $RET;
    MOV %r0 @c664;
    PUSH %r0;
    MOV %r0 imports;
    PUSH %r0;
    CALL_REG @c417 2 false;
    MOV @c662 $RET;
    MOV @c657 0;
    MOV %r1 options;
    MOV %r2 "interpolate";
    MOV_PROP %r0 %r1 %r2;
    MOV interpolate %r0;
    JIF %r0 _l2231_;
    MOV %r1 @c435;
    LG_OR interpolate %r1;
LABEL _l2231_:
    MOV @c659 "__p += '";
    MOV %r0 "g";
    PUSH %r0;
    MOV %r11 options;
    MOV %r12 "escape";
    MOV_PROP %r10 %r11 %r12;
    MOV %r8 %r10;
    JIF %r10 _l2232_;
    MOV %r11 @c435;
    LG_OR %r8 %r11;
LABEL _l2232_:
    MOV %r9 "source";
    MOV_PROP %r0 %r8 %r9;
    MOV %r7 "|";
    ADD %r0 %r7;
    MOV %r7 interpolate;
    MOV %r8 "source";
    MOV_PROP %r6 %r7 %r8;
    ADD %r0 %r6;
    MOV %r5 "|";
    ADD %r0 %r5;
    MOV %r7 interpolate;
    MOV %r8 @c30;
    EQ %r7 %r8;
    JF %r7 _l2233_;
    MOV %r5 @c436;
    JMP _l2234_;
LABEL _l2233_:
    MOV %r5 @c435;
LABEL _l2234_:
    MOV %r6 "source";
    MOV_PROP %r4 %r5 %r6;
    ADD %r0 %r4;
    MOV %r3 "|";
    ADD %r0 %r3;
    MOV %r6 options;
    MOV %r7 "evaluate";
    MOV_PROP %r5 %r6 %r7;
    MOV %r3 %r5;
    JIF %r5 _l2235_;
    MOV %r6 @c435;
    LG_OR %r3 %r6;
LABEL _l2235_:
    MOV %r4 "source";
    MOV_PROP %r2 %r3 %r4;
    ADD %r0 %r2;
    MOV %r1 "|$";
    ADD %r0 %r1;
    PUSH %r0;
    CALL_REG @c437 2 false;
    MOV reDelimiters $RET;
    MOV @c663 "//# sourceURL=";
    MOV %r2 "sourceURL";
    MOV %r3 options;
    IN %r2 %r3;
    JF %r2 _l2236_;
    MOV %r3 options;
    MOV %r4 "sourceURL";
    MOV_PROP %r1 %r3 %r4;
    JMP _l2237_;
LABEL _l2236_:
    MOV %r1 "lodash.templateSources[";
    MOV %r5 @c438;
    ADD %r5 1;
    MOV %r4 %r5;
    MOV @c438 %r5;
    ADD %r1 %r4;
    MOV %r3 "]";
    ADD %r1 %r3;
LABEL _l2237_:
    ADD @c663 %r1;
    MOV %r0 "
";
    ADD @c663 %r0;
    FUNC %r0 @@f659;
    PUSH %r0;
    MOV %r0 reDelimiters;
    PUSH %r0;
    MOV %r0 @c658;
    MOV %r1 "replace";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "';
";
    MOV %r1 @c659;
    ADD %r1 %r0;
    MOV @c659 %r1;
    MOV %r0 options;
    MOV %r1 "variable";
    MOV_PROP variable %r0 %r1;
    MOV %r0 variable;
    NEG %r0;
    JF %r0 _l2238_;
    MOV %r1 "with (obj) {
";
    MOV %r3 @c659;
    ADD %r1 %r3;
    MOV %r2 "
}
";
    ADD %r1 %r2;
    MOV @c659 %r1;
    JMP _l2239_;
LABEL _l2238_:
LABEL _l2239_:
    MOV %r1 "$1;";
    PUSH %r1;
    MOV %r1 @c439;
    PUSH %r1;
    MOV %r3 "$1";
    PUSH %r3;
    MOV %r3 @c440;
    PUSH %r3;
    MOV %r5 @c661;
    JF %r5 _l2240_;
    MOV %r6 "";
    PUSH %r6;
    MOV %r6 @c441;
    PUSH %r6;
    MOV %r6 @c659;
    MOV %r7 "replace";
    CALL_VAR %r6 %r7 2 false;
    MOV %r3 $RET;
    JMP _l2241_;
LABEL _l2240_:
    MOV %r3 @c659;
LABEL _l2241_:
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 "replace";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV @c659 %r0;
    MOV %r0 "function(";
    MOV %r9 variable;
    MOV %r8 %r9;
    JIF %r9 _l2242_;
    MOV %r10 "obj";
    LG_OR %r8 %r10;
LABEL _l2242_:
    ADD %r0 %r8;
    MOV %r7 ") {
";
    ADD %r0 %r7;
    MOV %r7 variable;
    JF %r7 _l2243_;
    MOV %r6 "";
    JMP _l2244_;
LABEL _l2243_:
    MOV %r6 "obj || (obj = {});
";
LABEL _l2244_:
    ADD %r0 %r6;
    MOV %r5 "var __t, __p = ''";
    ADD %r0 %r5;
    MOV %r5 @c660;
    JF %r5 _l2245_;
    MOV %r4 ", __e = _.escape";
    JMP _l2246_;
LABEL _l2245_:
    MOV %r4 "";
LABEL _l2246_:
    ADD %r0 %r4;
    MOV %r4 @c661;
    JF %r4 _l2247_;
    MOV %r3 ", __j = Array.prototype.join;
";
    MOV %r5 "function print() { __p += __j.call(arguments, '') }
";
    ADD %r3 %r5;
    JMP _l2248_;
LABEL _l2247_:
    MOV %r3 ";
";
LABEL _l2248_:
    ADD %r0 %r3;
    MOV %r2 @c659;
    ADD %r0 %r2;
    MOV %r1 "return __p
}";
    ADD %r0 %r1;
    MOV @c659 %r0;
    FUNC %r0 @@f660;
    PUSH %r0;
    CALL_REG @c442 1 false;
    MOV result $RET;
    MOV %r0 @c659;
    MOV %r1 result;
    MOV %r2 "source";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 result;
    PUSH %r1;
    CALL_REG @c443 1 false;
    MOV %r0 $RET;
    JF %r0 _l2249_;
    MOV %r1 result;
    THROW %r1;
    JMP _l2250_;
LABEL _l2249_:
LABEL _l2250_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f517(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c228 1 false;
    MOV %r1 $RET;
    MOV %r2 "toLowerCase";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f518(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c228 1 false;
    MOV %r1 $RET;
    MOV %r2 "toUpperCase";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f519(string, chars, guard) {
    VAR strSymbols;
    VAR chrSymbols;
    VAR start;
    VAR end;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 string;
    MOV %r0 %r1;
    JF %r1 _l2253_;
    MOV %r3 guard;
    MOV %r2 %r3;
    JIF %r3 _l2254_;
    MOV %r4 chars;
    MOV %r5 @c9;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2254_:
    LG_AND %r0 %r2;
LABEL _l2253_:
    JF %r0 _l2251_;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 @c399;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2252_;
LABEL _l2251_:
LABEL _l2252_:
    MOV %r1 string;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2257_;
    MOV %r4 chars;
    PUSH %r4;
    CALL_REG @c221 1 false;
    MOV %r3 $RET;
    MOV chars %r3;
    MOV %r2 %r3;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l2257_:
    JF %r0 _l2255_;
    MOV %r1 string;
    MOV $RET %r1;
    RET;
    JMP _l2256_;
LABEL _l2255_:
LABEL _l2256_:
    MOV %r0 string;
    PUSH %r0;
    CALL_REG @c248 1 false;
    MOV strSymbols $RET;
    MOV %r0 chars;
    PUSH %r0;
    CALL_REG @c248 1 false;
    MOV chrSymbols $RET;
    MOV %r0 chrSymbols;
    PUSH %r0;
    MOV %r0 strSymbols;
    PUSH %r0;
    CALL_REG @c444 2 false;
    MOV start $RET;
    MOV %r1 chrSymbols;
    PUSH %r1;
    MOV %r1 strSymbols;
    PUSH %r1;
    CALL_REG @c445 2 false;
    MOV end $RET;
    MOV %r0 1;
    ADD end %r0;
    MOV %r1 "";
    PUSH %r1;
    MOV %r3 end;
    PUSH %r3;
    MOV %r3 start;
    PUSH %r3;
    MOV %r3 strSymbols;
    PUSH %r3;
    CALL_REG @c249 3 false;
    MOV %r1 $RET;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f520(string, chars, guard) {
    VAR strSymbols;
    VAR end;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 string;
    MOV %r0 %r1;
    JF %r1 _l2260_;
    MOV %r3 guard;
    MOV %r2 %r3;
    JIF %r3 _l2261_;
    MOV %r4 chars;
    MOV %r5 @c9;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2261_:
    LG_AND %r0 %r2;
LABEL _l2260_:
    JF %r0 _l2258_;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 @c446;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2259_;
LABEL _l2258_:
LABEL _l2259_:
    MOV %r1 string;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2264_;
    MOV %r4 chars;
    PUSH %r4;
    CALL_REG @c221 1 false;
    MOV %r3 $RET;
    MOV chars %r3;
    MOV %r2 %r3;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l2264_:
    JF %r0 _l2262_;
    MOV %r1 string;
    MOV $RET %r1;
    RET;
    JMP _l2263_;
LABEL _l2262_:
LABEL _l2263_:
    MOV %r0 string;
    PUSH %r0;
    CALL_REG @c248 1 false;
    MOV strSymbols $RET;
    MOV %r2 chars;
    PUSH %r2;
    CALL_REG @c248 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 strSymbols;
    PUSH %r1;
    CALL_REG @c445 2 false;
    MOV end $RET;
    MOV %r0 1;
    ADD end %r0;
    MOV %r1 "";
    PUSH %r1;
    MOV %r3 end;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 strSymbols;
    PUSH %r3;
    CALL_REG @c249 3 false;
    MOV %r1 $RET;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f521(string, chars, guard) {
    VAR strSymbols;
    VAR start;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 string;
    MOV %r0 %r1;
    JF %r1 _l2267_;
    MOV %r3 guard;
    MOV %r2 %r3;
    JIF %r3 _l2268_;
    MOV %r4 chars;
    MOV %r5 @c9;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2268_:
    LG_AND %r0 %r2;
LABEL _l2267_:
    JF %r0 _l2265_;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 @c430;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2266_;
LABEL _l2265_:
LABEL _l2266_:
    MOV %r1 string;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2271_;
    MOV %r4 chars;
    PUSH %r4;
    CALL_REG @c221 1 false;
    MOV %r3 $RET;
    MOV chars %r3;
    MOV %r2 %r3;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l2271_:
    JF %r0 _l2269_;
    MOV %r1 string;
    MOV $RET %r1;
    RET;
    JMP _l2270_;
LABEL _l2269_:
LABEL _l2270_:
    MOV %r0 string;
    PUSH %r0;
    CALL_REG @c248 1 false;
    MOV strSymbols $RET;
    MOV %r1 chars;
    PUSH %r1;
    CALL_REG @c248 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 strSymbols;
    PUSH %r0;
    CALL_REG @c444 2 false;
    MOV start $RET;
    MOV %r1 "";
    PUSH %r1;
    MOV %r3 start;
    PUSH %r3;
    MOV %r3 strSymbols;
    PUSH %r3;
    CALL_REG @c249 2 false;
    MOV %r1 $RET;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f522(string, options) {
    VAR length;
    VAR omission;
    VAR separator;
    VAR strLength;
    VAR strSymbols;
    VAR end;
    VAR result;
    VAR match;
    VAR substring;
    VAR newEnd;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV length @c447;
    MOV omission @c448;
    MOV %r1 options;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    JF %r0 _l2272_;
    MOV %r1 "separator";
    MOV %r2 options;
    IN %r1 %r2;
    JF %r1 _l2274_;
    MOV %r2 options;
    MOV %r3 "separator";
    MOV_PROP separator %r2 %r3;
    JMP _l2273_;
LABEL _l2274_:
    MOV separator separator;
    MOV %r2 "length";
    MOV %r3 options;
    IN %r2 %r3;
    JF %r2 _l2275_;
    MOV %r4 options;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    JMP _l2273_;
LABEL _l2275_:
    MOV %r1 length;
    MOV length %r1;
    MOV %r2 "omission";
    MOV %r3 options;
    IN %r2 %r3;
    JF %r2 _l2276_;
    MOV %r4 options;
    MOV %r5 "omission";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c221 1 false;
    MOV %r1 $RET;
    JMP _l2273_;
LABEL _l2276_:
    MOV %r1 omission;
    MOV omission %r1;
    JMP _l2273_;
LABEL _l2272_:
LABEL _l2273_:
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r0 string;
    MOV %r1 "length";
    MOV_PROP strLength %r0 %r1;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c15 1 false;
    MOV %r0 $RET;
    JF %r0 _l2277_;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c248 1 false;
    MOV strSymbols $RET;
    MOV %r2 strSymbols;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV strLength %r1;
    JMP _l2278_;
LABEL _l2277_:
LABEL _l2278_:
    MOV %r0 length;
    MOV %r1 strLength;
    GE %r0 %r1;
    JF %r0 _l2279_;
    MOV %r1 string;
    MOV $RET %r1;
    RET;
    JMP _l2280_;
LABEL _l2279_:
LABEL _l2280_:
    MOV end length;
    MOV %r1 omission;
    PUSH %r1;
    CALL_REG @c247 1 false;
    MOV %r0 $RET;
    SUB end %r0;
    MOV %r0 end;
    MOV %r1 1;
    LT %r0 %r1;
    JF %r0 _l2281_;
    MOV %r1 omission;
    MOV $RET %r1;
    RET;
    JMP _l2282_;
LABEL _l2281_:
LABEL _l2282_:
    MOV %r0 strSymbols;
    JF %r0 _l2283_;
    MOV %r1 "";
    PUSH %r1;
    MOV %r3 end;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 strSymbols;
    PUSH %r3;
    CALL_REG @c249 3 false;
    MOV %r1 $RET;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV result $RET;
    JMP _l2284_;
LABEL _l2283_:
    MOV %r1 end;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 string;
    MOV %r2 "slice";
    CALL_VAR %r1 %r2 2 false;
    MOV result $RET;
LABEL _l2284_:
    MOV %r0 separator;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2285_;
    MOV %r1 result;
    MOV %r2 omission;
    ADD %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l2286_;
LABEL _l2285_:
LABEL _l2286_:
    MOV %r0 strSymbols;
    JF %r0 _l2287_;
    MOV %r3 result;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 end;
    SUB %r1 %r2;
    MOV %r2 end;
    ADD %r2 %r1;
    MOV end %r2;
    JMP _l2288_;
LABEL _l2287_:
LABEL _l2288_:
    MOV %r1 separator;
    PUSH %r1;
    CALL_REG @c432 1 false;
    MOV %r0 $RET;
    JF %r0 _l2289_;
    MOV %r2 separator;
    PUSH %r2;
    MOV %r4 end;
    PUSH %r4;
    MOV %r4 string;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "search";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l2291_;
    MOV substring result;
    MOV %r3 separator;
    MOV %r4 "global";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    JF %r2 _l2292_;
    MOV %r7 separator;
    PUSH %r7;
    MOV %r7 @c233;
    MOV %r8 "exec";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    PUSH %r6;
    CALL_REG @c228 1 false;
    MOV %r4 $RET;
    MOV %r5 "g";
    ADD %r4 %r5;
    PUSH %r4;
    MOV %r5 separator;
    MOV %r6 "source";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c437 2 false;
    MOV %r3 $RET;
    MOV separator %r3;
    JMP _l2290_;
LABEL _l2292_:
    MOV %r2 0;
    MOV %r3 separator;
    MOV %r4 "lastIndex";
    SET_KEY %r3 %r4 %r2;
LABEL _l2293_:
    MOV %r4 substring;
    PUSH %r4;
    MOV %r4 separator;
    MOV %r5 "exec";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV match %r3;
    MOV %r2 %r3;
    JF %r2 _l2294_;
LABEL _l2296_:
    MOV %r3 match;
    MOV %r4 "index";
    MOV_PROP newEnd %r3 %r4;
    JMP _l2293_;
LABEL _l2294_:
    MOV %r4 newEnd;
    MOV %r5 @c9;
    EQ %r4 %r5;
    JF %r4 _l2297_;
    MOV %r3 end;
    JMP _l2290_;
LABEL _l2297_:
    MOV %r3 newEnd;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 result;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV result %r2;
    JMP _l2290_;
LABEL _l2291_:
    JMP _l2290_;
LABEL _l2289_:
    MOV %r3 end;
    PUSH %r3;
    MOV %r4 separator;
    PUSH %r4;
    CALL_REG @c221 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 string;
    MOV %r4 "indexOf";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 end;
    WNE %r1 %r2;
    JF %r1 _l2298_;
    MOV %r2 separator;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "lastIndexOf";
    CALL_VAR %r2 %r3 1 false;
    MOV index $RET;
    MOV %r2 index;
    MOV %r3 1;
    MINUS %r3;
    GT %r2 %r3;
    JF %r2 _l2299_;
    MOV %r4 index;
    PUSH %r4;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 result;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV result %r3;
    JMP _l2290_;
LABEL _l2299_:
    JMP _l2290_;
LABEL _l2298_:
LABEL _l2290_:
    MOV %r0 result;
    MOV %r1 omission;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f523(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r2 string;
    MOV %r1 %r2;
    JF %r2 _l2302_;
    MOV %r4 string;
    PUSH %r4;
    MOV %r4 @c449;
    MOV %r5 "test";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2302_:
    JF %r1 _l2300_;
    MOV %r2 @c450;
    PUSH %r2;
    MOV %r2 @c451;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l2301_;
LABEL _l2300_:
    MOV %r0 string;
LABEL _l2301_:
    MOV $RET %r0;
    RET;
}
func @@f524(result, word, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 result;
    MOV %r3 index;
    JF %r3 _l2303_;
    MOV %r2 " ";
    JMP _l2304_;
LABEL _l2303_:
    MOV %r2 "";
LABEL _l2304_:
    ADD %r0 %r2;
    MOV %r2 word;
    MOV %r3 "toUpperCase";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f525(string, pattern, guard) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 guard;
    JF %r1 _l2305_;
    MOV %r0 @c9;
    JMP _l2306_;
LABEL _l2305_:
    MOV %r0 pattern;
LABEL _l2306_:
    MOV pattern %r0;
    MOV %r0 pattern;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2307_;
    MOV %r3 string;
    PUSH %r3;
    CALL_REG @c452 1 false;
    MOV %r2 $RET;
    JF %r2 _l2309_;
    MOV %r3 string;
    PUSH %r3;
    CALL_REG @c453 1 false;
    MOV %r1 $RET;
    JMP _l2308_;
LABEL _l2309_:
    MOV %r3 string;
    PUSH %r3;
    CALL_REG @c454 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2308_;
LABEL _l2307_:
LABEL _l2308_:
    MOV %r2 pattern;
    PUSH %r2;
    MOV %r2 string;
    MOV %r3 "match";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l2310_;
    NEW_ARR %r2;
    LG_OR %r0 %r2;
LABEL _l2310_:
    MOV $RET %r0;
    RET;
}
func @@f526(func, args) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    TRY _l2311_ _l2312_;
    MOV %r1 args;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l2311_:
    MOV_CTX %r2 "e";
    PUSH %r2;
    CALL_REG @c443 1 false;
    MOV %r1 $RET;
    JF %r1 _l2313_;
    MOV_CTX %r0 "e";
    JMP _l2314_;
LABEL _l2313_:
    MOV_CTX %r2 "e";
    PUSH %r2;
    CALL_REG @c391 1 true;
    MOV %r0 $RET;
LABEL _l2314_:
    MOV $RET %r0;
    RET;
LABEL _l2312_:
}
func @@f527(object, methodNames) {
    VAR %r0;
    ALLOC @c666;
    MOV @c666 object;
    FUNC %r0 @@f661;
    PUSH %r0;
    MOV %r0 methodNames;
    PUSH %r0;
    CALL_REG @c45 2 false;
    MOV %r0 @c666;
    MOV $RET %r0;
    RET;
}
func @@f528(pairs) {
    VAR @c668;
    ALLOC @c668;
    VAR @c667;
    ALLOC @c667;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c669;
    MOV @c669 pairs;
    MOV %r0 @c669;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2315_;
    MOV @c668 0;
    JMP _l2316_;
LABEL _l2315_:
    MOV %r1 @c669;
    MOV %r2 "length";
    MOV_PROP @c668 %r1 %r2;
LABEL _l2316_:
    CALL_REG @c199 0 false;
    MOV @c667 $RET;
    MOV %r1 @c668;
    NEG %r1;
    JF %r1 _l2317_;
    NEW_ARR %r0;
    JMP _l2318_;
LABEL _l2317_:
    FUNC %r2 @@f662;
    PUSH %r2;
    MOV %r2 @c669;
    PUSH %r2;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
LABEL _l2318_:
    MOV @c669 %r0;
    FUNC %r1 @@f663;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f529(source) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c109;
    PUSH %r2;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c380 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c455 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f530(value) {
    VAR %r0;
    ALLOC @c670;
    MOV @c670 value;
    FUNC %r0 @@f664;
    MOV $RET %r0;
    RET;
}
func @@f531(value, defaultValue) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 value;
    MOV %r3 null;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2321_;
    MOV %r3 value;
    MOV %r4 value;
    NE %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2321_:
    JF %r1 _l2319_;
    MOV %r0 defaultValue;
    JMP _l2320_;
LABEL _l2319_:
    MOV %r0 value;
LABEL _l2320_:
    MOV $RET %r0;
    RET;
}
func @@f532(value) {
    VAR %r0;
    MOV %r0 value;
    MOV $RET %r0;
    RET;
}
func @@f533(func) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 func;
    TYPE_OF %r2;
    MOV %r3 "function";
    WEQ %r2 %r3;
    JF %r2 _l2322_;
    MOV %r1 func;
    JMP _l2323_;
LABEL _l2322_:
    MOV %r3 @c109;
    PUSH %r3;
    MOV %r3 func;
    PUSH %r3;
    CALL_REG @c380 2 false;
    MOV %r1 $RET;
LABEL _l2323_:
    PUSH %r1;
    CALL_REG @c279 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f534(source) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c109;
    PUSH %r2;
    MOV %r2 source;
    PUSH %r2;
    CALL_REG @c380 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c183 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f535(path, srcValue) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c109;
    PUSH %r2;
    MOV %r2 srcValue;
    PUSH %r2;
    CALL_REG @c380 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c182 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f536(path, args) {
    VAR %r0;
    ALLOC @c672;
    MOV @c672 path;
    ALLOC @c671;
    MOV @c671 args;
    FUNC %r0 @@f665;
    MOV $RET %r0;
    RET;
}
func @@f537(object, args) {
    VAR %r0;
    ALLOC @c674;
    MOV @c674 object;
    ALLOC @c673;
    MOV @c673 args;
    FUNC %r0 @@f666;
    MOV $RET %r0;
    RET;
}
func @@f538(object, source, options) {
    VAR props;
    VAR methodNames;
    VAR @c345;
    ALLOC @c345;
    VAR @c677;
    ALLOC @c677;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    ALLOC @c676;
    MOV @c676 object;
    ALLOC @c675;
    MOV @c675 source;
    MOV %r0 @c675;
    PUSH %r0;
    CALL_REG @c103 1 false;
    MOV props $RET;
    MOV %r0 props;
    PUSH %r0;
    MOV %r0 @c675;
    PUSH %r0;
    CALL_REG @c407 2 false;
    MOV methodNames $RET;
    MOV %r1 options;
    MOV %r2 null;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2326_;
    MOV %r4 @c675;
    PUSH %r4;
    CALL_REG @c112 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l2327_;
    MOV %r6 methodNames;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l2328_;
    MOV %r7 props;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    NEG %r6;
    LG_OR %r4 %r6;
LABEL _l2328_:
    LG_AND %r2 %r4;
LABEL _l2327_:
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2326_:
    JF %r0 _l2324_;
    MOV %r1 @c675;
    MOV options %r1;
    MOV %r1 @c676;
    MOV @c675 %r1;
    MOV_THIS %r1;
    MOV @c676 %r1;
    MOV %r3 @c675;
    PUSH %r3;
    CALL_REG @c103 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @c675;
    PUSH %r2;
    CALL_REG @c407 2 false;
    MOV %r1 $RET;
    MOV methodNames %r1;
    JMP _l2325_;
LABEL _l2324_:
LABEL _l2325_:
    MOV %r2 options;
    PUSH %r2;
    CALL_REG @c112 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l2330_;
    MOV %r2 "chain";
    MOV %r3 options;
    IN %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2330_:
    NEG %r0;
    MOV @c345 %r0;
    JIF %r0 _l2329_;
    MOV %r2 options;
    MOV %r3 "chain";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    NEG %r1;
    LG_OR @c345 %r1;
LABEL _l2329_:
    MOV %r0 @c676;
    PUSH %r0;
    CALL_REG @c173 1 false;
    MOV @c677 $RET;
    FUNC %r0 @@f667;
    PUSH %r0;
    MOV %r0 methodNames;
    PUSH %r0;
    CALL_REG @c45 2 false;
    MOV %r0 @c676;
    MOV $RET %r0;
    RET;
}
func @@f539() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c22;
    MOV %r3 "_";
    MOV_PROP %r0 %r2 %r3;
    MOV_THIS %r1;
    EQ %r0 %r1;
    JF %r0 _l2331_;
    MOV %r1 @c456;
    MOV %r2 @c22;
    MOV %r3 "_";
    SET_KEY %r2 %r3 %r1;
    JMP _l2332_;
LABEL _l2331_:
LABEL _l2332_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f540() {
}
func @@f541(n) {
    VAR %r0;
    VAR %r1;
    ALLOC @c678;
    MOV @c678 n;
    MOV %r1 @c678;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV @c678 %r0;
    FUNC %r1 @@f668;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f542(path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 path;
    PUSH %r2;
    CALL_REG @c191 1 false;
    MOV %r1 $RET;
    JF %r1 _l2333_;
    MOV %r3 path;
    PUSH %r3;
    CALL_REG @c149 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c457 1 false;
    MOV %r0 $RET;
    JMP _l2334_;
LABEL _l2333_:
    MOV %r2 path;
    PUSH %r2;
    CALL_REG @c458 1 false;
    MOV %r0 $RET;
LABEL _l2334_:
    MOV $RET %r0;
    RET;
}
func @@f543(object) {
    VAR %r0;
    ALLOC @c679;
    MOV @c679 object;
    FUNC %r0 @@f669;
    MOV $RET %r0;
    RET;
}
func @@f544() {
    VAR %r0;
    NEW_ARR %r0;
    MOV $RET %r0;
    RET;
}
func @@f545() {
    VAR %r0;
    MOV %r0 false;
    MOV $RET %r0;
    RET;
}
func @@f546() {
    VAR %r0;
    NEW_OBJ %r0;
    MOV $RET %r0;
    RET;
}
func @@f547() {
    VAR %r0;
    MOV %r0 "";
    MOV $RET %r0;
    RET;
}
func @@f548() {
    VAR %r0;
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f549(n, iteratee) {
    VAR index;
    VAR length;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 n;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV n %r0;
    MOV %r1 n;
    MOV %r2 1;
    LT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2337_;
    MOV %r2 n;
    MOV %r3 @c210;
    GT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2337_:
    JF %r0 _l2335_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l2336_;
LABEL _l2335_:
LABEL _l2336_:
    MOV index @c74;
    MOV %r0 @c74;
    PUSH %r0;
    MOV %r0 n;
    PUSH %r0;
    CALL_REG @c77 2 false;
    MOV length $RET;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c199 1 false;
    MOV %r0 $RET;
    MOV @c278 %r0;
    MOV %r0 @c74;
    MOV %r1 n;
    SUB %r1 %r0;
    MOV n %r1;
    MOV %r0 @c278;
    PUSH %r0;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c95 2 false;
    MOV result $RET;
LABEL _l2338_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 n;
    LT %r0 %r1;
    JF %r0 _l2339_;
LABEL _l2341_:
    MOV %r1 index;
    PUSH %r1;
    CALL_REG @c278 1 false;
    JMP _l2338_;
LABEL _l2339_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f550(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l2342_;
    MOV %r2 @c149;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c10 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2343_;
LABEL _l2342_:
LABEL _l2343_:
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c139 1 false;
    MOV %r1 $RET;
    JF %r1 _l2344_;
    NEW_ARR %r0;
    MOV %r2 value;
    SET_KEY %r0 0 %r2;
    JMP _l2345_;
LABEL _l2344_:
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c228 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c229 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c75 1 false;
    MOV %r0 $RET;
LABEL _l2345_:
    MOV $RET %r0;
    RET;
}
func @@f551(prefix) {
    VAR id;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c459;
    ADD %r0 1;
    MOV id %r0;
    MOV @c459 %r0;
    MOV %r2 prefix;
    PUSH %r2;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV %r1 id;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f552(augend, addend) {
    VAR %r0;
    VAR %r1;
    MOV %r0 augend;
    MOV %r1 addend;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f553(dividend, divisor) {
    VAR %r0;
    VAR %r1;
    MOV %r0 dividend;
    MOV %r1 divisor;
    DIV %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f554(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l2348_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2348_:
    JF %r1 _l2346_;
    MOV %r2 @c460;
    PUSH %r2;
    MOV %r2 @c181;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c461 3 false;
    MOV %r0 $RET;
    JMP _l2347_;
LABEL _l2346_:
    MOV %r0 @c9;
LABEL _l2347_:
    MOV $RET %r0;
    RET;
}
func @@f555(array, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l2351_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2351_:
    JF %r1 _l2349_;
    MOV %r2 @c460;
    PUSH %r2;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c461 3 false;
    MOV %r0 $RET;
    JMP _l2350_;
LABEL _l2349_:
    MOV %r0 @c9;
LABEL _l2350_:
    MOV $RET %r0;
    RET;
}
func @@f556(array) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c181;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c462 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f557(array, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c462 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f558(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l2354_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2354_:
    JF %r1 _l2352_;
    MOV %r2 @c463;
    PUSH %r2;
    MOV %r2 @c181;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c461 3 false;
    MOV %r0 $RET;
    JMP _l2353_;
LABEL _l2352_:
    MOV %r0 @c9;
LABEL _l2353_:
    MOV $RET %r0;
    RET;
}
func @@f559(array, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l2357_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2357_:
    JF %r1 _l2355_;
    MOV %r2 @c463;
    PUSH %r2;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c461 3 false;
    MOV %r0 $RET;
    JMP _l2356_;
LABEL _l2355_:
    MOV %r0 @c9;
LABEL _l2356_:
    MOV $RET %r0;
    RET;
}
func @@f560(multiplier, multiplicand) {
    VAR %r0;
    VAR %r1;
    MOV %r0 multiplier;
    MOV %r1 multiplicand;
    MUL %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f561(minuend, subtrahend) {
    VAR %r0;
    VAR %r1;
    MOV %r0 minuend;
    MOV %r1 subtrahend;
    SUB %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f562(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l2360_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2360_:
    JF %r1 _l2358_;
    MOV %r2 @c181;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c7 2 false;
    MOV %r0 $RET;
    JMP _l2359_;
LABEL _l2358_:
    MOV %r0 0;
LABEL _l2359_:
    MOV $RET %r0;
    RET;
}
func @@f563(array, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 array;
    MOV %r1 %r2;
    JF %r2 _l2363_;
    MOV %r4 array;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2363_:
    JF %r1 _l2361_;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 @c278;
    PUSH %r3;
    CALL_REG @c199 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 array;
    PUSH %r2;
    CALL_REG @c7 2 false;
    MOV %r0 $RET;
    JMP _l2362_;
LABEL _l2361_:
    MOV %r0 0;
LABEL _l2362_:
    MOV $RET %r0;
    RET;
}
func @@f564() {
    VAR @c680;
    ALLOC @c680;
    VAR %r0;
    NEW_OBJ @c680;
    FUNC %r0 @@f670;
    PUSH %r0;
    MOV %r0 @c277;
    PUSH %r0;
    CALL_REG @c156 2 false;
    MOV %r0 @c680;
    MOV $RET %r0;
    RET;
}
func @@f565(methodName) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 @c277;
    MOV %r3 @c277;
    MOV %r2 methodName;
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "placeholder";
    SET_KEY %r1 %r2 %r0;
}
func @@f566(methodName, index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    ALLOC @c682;
    MOV @c682 methodName;
    ALLOC @c681;
    MOV @c681 index;
    FUNC %r0 @@f671;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 @c682;
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f672;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 @c682;
    MOV %r3 "Right";
    ADD %r2 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f567(methodName, index) {
    VAR @c683;
    ALLOC @c683;
    VAR @c684;
    ALLOC @c684;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV @c683 index;
    MOV %r0 1;
    ADD @c683 %r0;
    MOV %r0 @c683;
    MOV %r1 @c80;
    WEQ %r0 %r1;
    MOV @c684 %r0;
    JIF %r0 _l2364_;
    MOV %r1 @c683;
    MOV %r2 @c464;
    WEQ %r1 %r2;
    LG_OR @c684 %r1;
LABEL _l2364_:
    FUNC %r0 @@f673;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 methodName;
    SET_KEY %r1 %r2 %r0;
}
func @@f568(methodName, index) {
    VAR @c685;
    ALLOC @c685;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV @c685 "take";
    MOV %r1 index;
    JF %r1 _l2365_;
    MOV %r0 "Right";
    JMP _l2366_;
LABEL _l2365_:
    MOV %r0 "";
LABEL _l2366_:
    ADD @c685 %r0;
    FUNC %r0 @@f674;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 methodName;
    SET_KEY %r1 %r2 %r0;
}
func @@f569(methodName, index) {
    VAR @c686;
    ALLOC @c686;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV @c686 "drop";
    MOV %r1 index;
    JF %r1 _l2367_;
    MOV %r0 "";
    JMP _l2368_;
LABEL _l2367_:
    MOV %r0 "Right";
LABEL _l2368_:
    ADD @c686 %r0;
    FUNC %r0 @@f675;
    MOV %r3 @c70;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 methodName;
    SET_KEY %r1 %r2 %r0;
}
func @@f570() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c181;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "filter";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f571(predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 predicate;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "filter";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 "head";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f572(predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 predicate;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "reverse";
    CALL_VAR %r3 %r4 0 false;
    MOV %r1 $RET;
    MOV %r2 "find";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f573(path, args) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c688;
    MOV @c688 path;
    ALLOC @c687;
    MOV @c687 args;
    MOV %r0 @c688;
    TYPE_OF %r0;
    MOV %r1 "function";
    WEQ %r0 %r1;
    JF %r0 _l2369_;
    MOV_THIS %r2;
    PUSH %r2;
    CALL_REG @c70 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2370_;
LABEL _l2369_:
LABEL _l2370_:
    FUNC %r1 @@f676;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "map";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f574(predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r3 predicate;
    PUSH %r3;
    CALL_REG @c199 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c358 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "filter";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f575(start, end) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 start;
    PUSH %r1;
    CALL_REG @c140 1 false;
    MOV %r0 $RET;
    MOV start %r0;
    MOV_THIS result;
    MOV %r2 result;
    MOV %r3 "__filtered__";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l2373_;
    MOV %r3 start;
    MOV %r4 0;
    GT %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2374_;
    MOV %r4 end;
    MOV %r5 0;
    LT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2374_:
    LG_AND %r0 %r2;
LABEL _l2373_:
    JF %r0 _l2371_;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c70 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2372_;
LABEL _l2371_:
LABEL _l2372_:
    MOV %r0 start;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2375_;
    MOV %r2 start;
    MINUS %r2;
    PUSH %r2;
    MOV %r2 result;
    MOV %r3 "takeRight";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV result %r1;
    JMP _l2376_;
LABEL _l2375_:
    MOV %r1 start;
    JF %r1 _l2377_;
    MOV %r3 start;
    PUSH %r3;
    MOV %r3 result;
    MOV %r4 "drop";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV result %r2;
    JMP _l2376_;
LABEL _l2377_:
LABEL _l2376_:
    MOV %r0 end;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l2378_;
    MOV %r2 end;
    PUSH %r2;
    CALL_REG @c140 1 false;
    MOV %r1 $RET;
    MOV end %r1;
    MOV %r2 end;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l2380_;
    MOV %r3 end;
    MINUS %r3;
    PUSH %r3;
    MOV %r3 result;
    MOV %r4 "dropRight";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l2379_;
LABEL _l2380_:
    MOV %r3 end;
    MOV %r4 start;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 result;
    MOV %r4 "take";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV result %r1;
    JMP _l2379_;
LABEL _l2378_:
LABEL _l2379_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f576(predicate) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r3 predicate;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "reverse";
    CALL_VAR %r5 %r6 0 false;
    MOV %r3 $RET;
    MOV %r4 "takeWhile";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 "reverse";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f577() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c74;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "take";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f578(func, methodName) {
    VAR @c690;
    ALLOC @c690;
    VAR @c689;
    ALLOC @c689;
    VAR @c707;
    ALLOC @c707;
    VAR @c691;
    ALLOC @c691;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    ALLOC @c692;
    MOV @c692 func;
    MOV %r0 methodName;
    PUSH %r0;
    NEW_REG %r0 "^(?:filter|find|map|reject)|While$" "";
    MOV %r1 "test";
    CALL_VAR %r0 %r1 1 false;
    MOV @c690 $RET;
    MOV %r0 methodName;
    PUSH %r0;
    NEW_REG %r0 "^(?:head|last)$" "";
    MOV %r1 "test";
    CALL_VAR %r0 %r1 1 false;
    MOV @c689 $RET;
    MOV %r0 @c277;
    MOV %r2 @c689;
    JF %r2 _l2381_;
    MOV %r1 "take";
    MOV %r4 methodName;
    MOV %r5 "last";
    WEQ %r4 %r5;
    JF %r4 _l2383_;
    MOV %r3 "Right";
    JMP _l2382_;
LABEL _l2383_:
    MOV %r3 "";
    ADD %r1 %r3;
    JMP _l2382_;
LABEL _l2381_:
    MOV %r1 methodName;
LABEL _l2382_:
    MOV_PROP @c707 %r0 %r1;
    MOV %r0 @c689;
    MOV @c691 %r0;
    JIF %r0 _l2384_;
    MOV %r2 methodName;
    PUSH %r2;
    NEW_REG %r2 "^find" "";
    MOV %r3 "test";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    LG_OR @c691 %r1;
LABEL _l2384_:
    MOV %r0 @c707;
    NEG %r0;
    JF %r0 _l2385_;
    RET;
    JMP _l2386_;
LABEL _l2385_:
LABEL _l2386_:
    FUNC %r0 @@f677;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 methodName;
    SET_KEY %r1 %r2 %r0;
}
func @@f579(methodName) {
    VAR @c694;
    ALLOC @c694;
    VAR @c695;
    ALLOC @c695;
    VAR @c693;
    ALLOC @c693;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 @c465;
    MOV %r1 methodName;
    MOV_PROP @c694 %r0 %r1;
    MOV %r1 methodName;
    PUSH %r1;
    NEW_REG %r1 "^(?:push|sort|unshift)$" "";
    MOV %r2 "test";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2387_;
    MOV @c695 "tap";
    JMP _l2388_;
LABEL _l2387_:
    MOV @c695 "thru";
LABEL _l2388_:
    MOV %r0 methodName;
    PUSH %r0;
    NEW_REG %r0 "^(?:pop|shift)$" "";
    MOV %r1 "test";
    CALL_VAR %r0 %r1 1 false;
    MOV @c693 $RET;
    FUNC %r0 @@f678;
    MOV %r3 @c277;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 methodName;
    SET_KEY %r1 %r2 %r0;
}
func @@f580(func, methodName) {
    VAR lodashFunc;
    VAR key;
    VAR names;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 @c277;
    MOV %r1 methodName;
    MOV_PROP lodashFunc %r0 %r1;
    MOV %r0 lodashFunc;
    JF %r0 _l2389_;
    MOV %r2 lodashFunc;
    MOV %r3 "name";
    MOV_PROP key %r2 %r3;
    MOV %r1 "";
    ADD key %r1;
    MOV %r2 @c276;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    MOV names %r1;
    JIF %r1 _l2391_;
    NEW_ARR %r3;
    MOV %r4 @c276;
    MOV %r5 key;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    LG_OR names %r2;
LABEL _l2391_:
    NEW_OBJ %r1;
    MOV %r2 methodName;
    SET_KEY %r1 'name' %r2;
    MOV %r2 lodashFunc;
    SET_KEY %r1 'func' %r2;
    PUSH %r1;
    MOV %r1 names;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2390_;
LABEL _l2389_:
LABEL _l2390_:
}
func @@f581() {
}
func @@f582(proto) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 proto;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2392_;
    NEW_OBJ %r1;
    MOV $RET %r1;
    RET;
    JMP _l2393_;
LABEL _l2392_:
LABEL _l2393_:
    MOV %r0 @c466;
    JF %r0 _l2394_;
    MOV %r2 proto;
    PUSH %r2;
    CALL_REG @c466 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2395_;
LABEL _l2394_:
LABEL _l2395_:
    MOV %r0 proto;
    MOV %r1 @c467;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    CALL_REG @c467 0 true;
    MOV result $RET;
    MOV %r0 @c9;
    MOV %r1 @c467;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f583(value, key, collection) {
    VAR %r0;
    VAR %r1;
    MOV %r0 collection;
    PUSH %r0;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c468 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 value;
    PUSH %r0;
    MOV %r0 @c469;
    PUSH %r0;
    CALL_REG @c470 4 false;
}
func @@f584(subValue) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c471;
    PUSH %r1;
    MOV %r1 @c472;
    PUSH %r1;
    MOV %r1 subValue;
    PUSH %r1;
    MOV %r1 @c473;
    PUSH %r1;
    MOV %r1 @c474;
    PUSH %r1;
    MOV %r1 subValue;
    PUSH %r1;
    CALL_REG @c380 6 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c475;
    MOV %r1 "add";
    CALL_VAR %r0 %r1 1 false;
}
func @@f585(subValue, key) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c471;
    PUSH %r1;
    MOV %r1 @c472;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 @c473;
    PUSH %r1;
    MOV %r1 @c474;
    PUSH %r1;
    MOV %r1 subValue;
    PUSH %r1;
    CALL_REG @c380 6 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 @c475;
    MOV %r1 "set";
    CALL_VAR %r0 %r1 2 false;
}
func @@f586(subValue, key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 @c476;
    JF %r0 _l2396_;
    MOV %r1 subValue;
    MOV key %r1;
    MOV %r2 @c472;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    MOV subValue %r1;
    JMP _l2397_;
LABEL _l2396_:
LABEL _l2397_:
    MOV %r1 @c471;
    PUSH %r1;
    MOV %r1 @c472;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 @c473;
    PUSH %r1;
    MOV %r1 @c474;
    PUSH %r1;
    MOV %r1 subValue;
    PUSH %r1;
    CALL_REG @c380 6 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 @c475;
    PUSH %r0;
    CALL_REG @c215 3 false;
}
func @@f587(object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c477;
    PUSH %r1;
    MOV %r1 @c478;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c381 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f588() {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c479;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c480;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
}
func @@f589(value, index, collection) {
    VAR %r0;
    VAR %r1;
    MOV %r1 collection;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c481 3 false;
    MOV %r0 $RET;
    NEG %r0;
    NEG %r0;
    MOV @c482 %r0;
    MOV %r0 @c482;
    MOV $RET %r0;
    RET;
}
func @@f590(value, index, collection) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c483 3 false;
    MOV %r0 $RET;
    JF %r0 _l2398_;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 @c484;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2399_;
LABEL _l2398_:
LABEL _l2399_:
}
func @@f591(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c485;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c173 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f592(value, key, object) {
    VAR %r0;
    VAR %r1;
    MOV %r0 object;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c486 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c487;
    PUSH %r0;
    CALL_REG @c488 4 false;
}
func @@f593(value, key, collection) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 collection;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c489 3 false;
    MOV %r0 $RET;
    MOV %r1 @c490;
    MOV %r3 @c491;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV @c491 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f594(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 object;
    MOV %r2 @c492;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2400_;
    MOV %r3 @c493;
    PUSH %r3;
    MOV %r3 @c492;
    PUSH %r3;
    MOV %r3 object;
    PUSH %r3;
    CALL_REG @c387 3 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l2400_:
    MOV $RET %r0;
    RET;
}
func @@f595(object) {
    VAR objValue;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 @c494;
    PUSH %r0;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c108 2 false;
    MOV objValue $RET;
    MOV %r2 objValue;
    MOV %r3 @c9;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2403_;
    MOV %r3 objValue;
    MOV %r4 @c495;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2403_:
    JF %r1 _l2401_;
    MOV %r2 @c494;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c496 2 false;
    MOV %r0 $RET;
    JMP _l2402_;
LABEL _l2401_:
    MOV %r2 @c168;
    MOV %r3 @c171;
    OR %r2 %r3;
    PUSH %r2;
    MOV %r2 objValue;
    PUSH %r2;
    MOV %r2 @c495;
    PUSH %r2;
    CALL_REG @c163 3 false;
    MOV %r0 $RET;
LABEL _l2402_:
    MOV $RET %r0;
    RET;
}
func @@f596(srcValue, key) {
    VAR newValue;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 srcValue;
    PUSH %r1;
    CALL_REG @c112 1 false;
    MOV %r0 $RET;
    JF %r0 _l2404_;
    MOV %r1 @c497;
    JIF %r1 _l2406_;
    CALL_REG @c127 0 true;
    MOV %r3 $RET;
    MOV @c497 %r3;
    MOV %r2 %r3;
LABEL _l2406_:
    MOV %r1 @c497;
    PUSH %r1;
    MOV %r1 @c498;
    PUSH %r1;
    MOV %r1 @c267;
    PUSH %r1;
    MOV %r1 @c499;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 @c500;
    PUSH %r1;
    MOV %r1 @c501;
    PUSH %r1;
    CALL_REG @c502 7 false;
    JMP _l2405_;
LABEL _l2404_:
    MOV %r1 @c498;
    JF %r1 _l2407_;
    MOV %r2 @c497;
    PUSH %r2;
    MOV %r2 @c500;
    PUSH %r2;
    MOV %r2 @c501;
    PUSH %r2;
    MOV %r2 key;
    MOV %r3 "";
    ADD %r2 %r3;
    PUSH %r2;
    MOV %r2 srcValue;
    PUSH %r2;
    MOV %r3 key;
    PUSH %r3;
    MOV %r3 @c501;
    PUSH %r3;
    CALL_REG @c193 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c498 6 false;
    MOV newValue $RET;
    JMP _l2405_;
LABEL _l2407_:
    MOV newValue @c9;
    MOV %r1 newValue;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2408_;
    MOV %r2 srcValue;
    MOV newValue %r2;
    JMP _l2405_;
LABEL _l2408_:
    MOV %r1 newValue;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 @c501;
    PUSH %r1;
    CALL_REG @c194 3 false;
LABEL _l2405_:
}
func @@f597(value, key, collection) {
    VAR criteria;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c696;
    MOV @c696 value;
    FUNC %r0 @@f679;
    PUSH %r0;
    MOV %r0 @c503;
    PUSH %r0;
    CALL_REG @c10 2 false;
    MOV criteria $RET;
    NEW_OBJ %r0;
    MOV %r1 criteria;
    SET_KEY %r0 'criteria' %r1;
    MOV %r2 @c504;
    ADD %r2 1;
    MOV %r1 %r2;
    MOV @c504 %r2;
    SET_KEY %r0 'index' %r1;
    MOV %r1 @c696;
    SET_KEY %r0 'value' %r1;
    MOV $RET %r0;
    RET;
}
func @@f598(object, other) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c505;
    PUSH %r1;
    MOV %r1 other;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c506 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f599(value, path) {
    VAR %r0;
    VAR %r1;
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 @c507;
    PUSH %r1;
    CALL_REG @c496 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f600(object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c508;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c203 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f601(value, index, collection) {
    VAR %r0;
    VAR %r1;
    MOV %r1 collection;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c509 3 false;
    MOV %r0 $RET;
    MOV @c510 %r0;
    MOV %r0 @c510;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f602(result, action) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 action;
    MOV %r4 "args";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r3 result;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    CALL_REG @c144 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r2 action;
    MOV %r3 "thisArg";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r3 action;
    MOV %r2 "func";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f603(collection, iteratee) {
    VAR func;
    VAR accumulator;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c69 1 false;
    MOV %r0 $RET;
    JF %r0 _l2409_;
    MOV func @c511;
    JMP _l2410_;
LABEL _l2409_:
    MOV func @c512;
LABEL _l2410_:
    MOV %r0 @c513;
    JF %r0 _l2411_;
    CALL_REG @c513 0 false;
    MOV accumulator $RET;
    JMP _l2412_;
LABEL _l2411_:
    NEW_OBJ accumulator;
LABEL _l2412_:
    MOV %r1 accumulator;
    PUSH %r1;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c514;
    PUSH %r1;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG func 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f604(object, sources) {
    VAR index;
    VAR length;
    VAR customizer;
    VAR guard;
    VAR source;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 sources;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    MOV %r1 1;
    GT %r0 %r1;
    JF %r0 _l2413_;
    MOV %r1 sources;
    MOV %r2 length;
    MOV %r3 1;
    SUB %r2 %r3;
    MOV_PROP customizer %r1 %r2;
    JMP _l2414_;
LABEL _l2413_:
    MOV customizer @c9;
LABEL _l2414_:
    MOV %r0 length;
    MOV %r1 2;
    GT %r0 %r1;
    JF %r0 _l2415_;
    MOV %r1 sources;
    MOV %r2 2;
    MOV_PROP guard %r1 %r2;
    JMP _l2416_;
LABEL _l2415_:
    MOV guard @c9;
LABEL _l2416_:
    MOV %r4 @c515;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 3;
    GT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2419_;
    MOV %r3 customizer;
    TYPE_OF %r3;
    MOV %r4 "function";
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2419_:
    JF %r1 _l2417_;
    MOV %r2 length;
    SUB %r2 1;
    MOV length %r2;
    MOV %r0 customizer;
    JMP _l2418_;
LABEL _l2417_:
    MOV %r0 @c9;
LABEL _l2418_:
    MOV customizer %r0;
    MOV %r1 guard;
    MOV %r0 %r1;
    JF %r1 _l2422_;
    MOV %r3 guard;
    PUSH %r3;
    MOV %r4 sources;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r4 sources;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2422_:
    JF %r0 _l2420_;
    MOV %r2 length;
    MOV %r3 3;
    LT %r2 %r3;
    JF %r2 _l2423_;
    MOV %r1 @c9;
    JMP _l2421_;
LABEL _l2423_:
    MOV %r1 customizer;
    MOV customizer %r1;
    MOV %r1 1;
    MOV length %r1;
    JMP _l2421_;
LABEL _l2420_:
LABEL _l2421_:
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c66 1 false;
    MOV %r0 $RET;
    MOV object %r0;
LABEL _l2424_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l2425_;
LABEL _l2427_:
    MOV %r1 sources;
    MOV %r2 index;
    MOV_PROP source %r1 %r2;
    MOV %r1 source;
    JF %r1 _l2428_;
    MOV %r2 customizer;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    MOV %r2 source;
    PUSH %r2;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c515 4 false;
    JMP _l2429_;
LABEL _l2428_:
LABEL _l2429_:
    JMP _l2424_;
LABEL _l2425_:
    MOV %r0 object;
    MOV $RET %r0;
    RET;
}
func @@f605(collection, iteratee) {
    VAR length;
    VAR index;
    VAR iterable;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 collection;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2430_;
    MOV %r1 collection;
    MOV $RET %r1;
    RET;
    JMP _l2431_;
LABEL _l2430_:
LABEL _l2431_:
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c188 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2432_;
    MOV %r2 @c278;
    PUSH %r2;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c516 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2433_;
LABEL _l2432_:
LABEL _l2433_:
    MOV %r0 collection;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 @c517;
    JF %r0 _l2434_;
    MOV index length;
    JMP _l2435_;
LABEL _l2434_:
    MOV index 1;
    MINUS index;
LABEL _l2435_:
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c66 1 false;
    MOV iterable $RET;
LABEL _l2436_:
    MOV %r1 @c517;
    JF %r1 _l2440_;
    MOV %r2 index;
    MOV %r0 %r2;
    SUB %r2 1;
    MOV index %r2;
    JMP _l2441_;
LABEL _l2440_:
    MOV %r3 index;
    ADD %r3 1;
    MOV %r0 %r3;
    MOV index %r3;
    MOV %r2 length;
    LT %r0 %r2;
LABEL _l2441_:
    JF %r0 _l2437_;
LABEL _l2439_:
    MOV %r3 iterable;
    PUSH %r3;
    MOV %r3 index;
    PUSH %r3;
    MOV %r4 iterable;
    MOV %r5 index;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c278 3 false;
    MOV %r1 $RET;
    MOV %r2 false;
    EQ %r1 %r2;
    JF %r1 _l2442_;
    JMP _l2437_;
    JMP _l2443_;
LABEL _l2442_:
LABEL _l2443_:
    JMP _l2436_;
LABEL _l2437_:
    MOV %r0 collection;
    MOV $RET %r0;
    RET;
}
func @@f606(object, iteratee, keysFunc) {
    VAR index;
    VAR iterable;
    VAR props;
    VAR length;
    VAR key;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c66 1 false;
    MOV iterable $RET;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG keysFunc 1 false;
    MOV props $RET;
    MOV %r0 props;
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
LABEL _l2444_:
    MOV %r1 length;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV length %r1;
    JF %r0 _l2445_;
LABEL _l2447_:
    MOV %r1 props;
    MOV %r3 @c518;
    JF %r3 _l2448_;
    MOV %r2 length;
    JMP _l2449_;
LABEL _l2448_:
    MOV %r4 index;
    ADD %r4 1;
    MOV %r2 %r4;
    MOV index %r4;
LABEL _l2449_:
    MOV_PROP key %r1 %r2;
    MOV %r3 iterable;
    PUSH %r3;
    MOV %r3 key;
    PUSH %r3;
    MOV %r4 iterable;
    MOV %r5 key;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c278 3 false;
    MOV %r1 $RET;
    MOV %r2 false;
    EQ %r1 %r2;
    JF %r1 _l2450_;
    JMP _l2445_;
    JMP _l2451_;
LABEL _l2450_:
LABEL _l2451_:
    JMP _l2444_;
LABEL _l2445_:
    MOV %r0 object;
    MOV $RET %r0;
    RET;
}
func @@f607() {
    VAR fn;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_THIS %r2;
    MOV %r1 %r2;
    JF %r2 _l2455_;
    MOV_THIS %r3;
    MOV %r4 @c22;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2455_:
    MOV %r0 %r1;
    JF %r1 _l2454_;
    MOV_THIS %r2;
    MOV %r3 @c519;
    INST_OF %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2454_:
    JF %r0 _l2452_;
    MOV fn @c520;
    JMP _l2453_;
LABEL _l2452_:
    MOV fn @c521;
LABEL _l2453_:
    MOV_CTX %r1 "arguments";
    PUSH %r1;
    MOV %r2 @c522;
    JF %r2 _l2456_;
    MOV %r1 @c523;
    JMP _l2457_;
LABEL _l2456_:
    MOV_THIS %r1;
LABEL _l2457_:
    PUSH %r1;
    MOV %r1 fn;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f608(string) {
    VAR strSymbols;
    VAR chr;
    VAR trailing;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c228 1 false;
    MOV %r0 $RET;
    MOV string %r0;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c15 1 false;
    MOV %r0 $RET;
    JF %r0 _l2458_;
    MOV %r1 string;
    PUSH %r1;
    CALL_REG @c248 1 false;
    MOV strSymbols $RET;
    JMP _l2459_;
LABEL _l2458_:
    MOV strSymbols @c9;
LABEL _l2459_:
    MOV %r0 strSymbols;
    JF %r0 _l2460_;
    MOV %r1 strSymbols;
    MOV %r2 0;
    MOV_PROP chr %r1 %r2;
    JMP _l2461_;
LABEL _l2460_:
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 string;
    MOV %r2 "charAt";
    CALL_VAR %r1 %r2 1 false;
    MOV chr $RET;
LABEL _l2461_:
    MOV %r0 strSymbols;
    JF %r0 _l2462_;
    MOV %r1 "";
    PUSH %r1;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 strSymbols;
    PUSH %r3;
    CALL_REG @c249 2 false;
    MOV %r1 $RET;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV trailing $RET;
    JMP _l2463_;
LABEL _l2462_:
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 string;
    MOV %r2 "slice";
    CALL_VAR %r1 %r2 1 false;
    MOV trailing $RET;
LABEL _l2463_:
    MOV %r2 chr;
    MOV %r3 @c524;
    CALL_VAR %r2 %r3 0 false;
    MOV %r0 $RET;
    MOV %r1 trailing;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f609(string) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 @c525;
    PUSH %r1;
    MOV %r3 "";
    PUSH %r3;
    MOV %r3 @c526;
    PUSH %r3;
    MOV %r5 string;
    PUSH %r5;
    CALL_REG @c527 1 false;
    MOV %r3 $RET;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c528 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c225 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f610() {
    VAR args;
    VAR thisBinding;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    MOV args arguments;
    MOV %r1 args;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 0;
    JE %r0 %r1 _l2465_;
    JMP _l2466_;
LABEL _l2465_:
    CALL_REG @c529 0 true;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
LABEL _l2466_:
    MOV %r2 1;
    JE %r0 %r2 _l2467_;
    JMP _l2468_;
LABEL _l2467_:
    MOV %r5 args;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c529 1 true;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
LABEL _l2468_:
    MOV %r3 2;
    JE %r0 %r3 _l2469_;
    JMP _l2470_;
LABEL _l2469_:
    MOV %r6 args;
    MOV %r7 1;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r6 args;
    MOV %r7 0;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG @c529 2 true;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
LABEL _l2470_:
    MOV %r4 3;
    JE %r0 %r4 _l2471_;
    JMP _l2472_;
LABEL _l2471_:
    MOV %r7 args;
    MOV %r8 2;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 args;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 args;
    MOV %r8 0;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    CALL_REG @c529 3 true;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
LABEL _l2472_:
    MOV %r5 4;
    JE %r0 %r5 _l2473_;
    JMP _l2474_;
LABEL _l2473_:
    MOV %r8 args;
    MOV %r9 3;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r8 args;
    MOV %r9 2;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r8 args;
    MOV %r9 1;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r8 args;
    MOV %r9 0;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    CALL_REG @c529 4 true;
    MOV %r6 $RET;
    MOV $RET %r6;
    RET;
LABEL _l2474_:
    MOV %r6 5;
    JE %r0 %r6 _l2475_;
    JMP _l2476_;
LABEL _l2475_:
    MOV %r9 args;
    MOV %r10 4;
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    MOV %r9 args;
    MOV %r10 3;
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    MOV %r9 args;
    MOV %r10 2;
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    MOV %r9 args;
    MOV %r10 1;
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    MOV %r9 args;
    MOV %r10 0;
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    CALL_REG @c529 5 true;
    MOV %r7 $RET;
    MOV $RET %r7;
    RET;
LABEL _l2476_:
    MOV %r7 6;
    JE %r0 %r7 _l2477_;
    JMP _l2478_;
LABEL _l2477_:
    MOV %r10 args;
    MOV %r11 5;
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r10 args;
    MOV %r11 4;
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r10 args;
    MOV %r11 3;
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r10 args;
    MOV %r11 2;
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r10 args;
    MOV %r11 1;
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r10 args;
    MOV %r11 0;
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    CALL_REG @c529 6 true;
    MOV %r8 $RET;
    MOV $RET %r8;
    RET;
LABEL _l2478_:
    MOV %r8 7;
    JE %r0 %r8 _l2479_;
    JMP _l2480_;
LABEL _l2479_:
    MOV %r11 args;
    MOV %r12 6;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r11 args;
    MOV %r12 5;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r11 args;
    MOV %r12 4;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r11 args;
    MOV %r12 3;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r11 args;
    MOV %r12 2;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r11 args;
    MOV %r12 1;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r11 args;
    MOV %r12 0;
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    CALL_REG @c529 7 true;
    MOV %r9 $RET;
    MOV $RET %r9;
    RET;
LABEL _l2480_:
LABEL _l2464_:
    MOV %r1 @c529;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c295 1 false;
    MOV thisBinding $RET;
    MOV %r0 args;
    PUSH %r0;
    MOV %r0 thisBinding;
    PUSH %r0;
    MOV %r0 @c529;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV result $RET;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c112 1 false;
    MOV %r1 $RET;
    JF %r1 _l2481_;
    MOV %r0 result;
    JMP _l2482_;
LABEL _l2481_:
    MOV %r0 thisBinding;
LABEL _l2482_:
    MOV $RET %r0;
    RET;
}
func @@f611() {
    VAR length;
    VAR args;
    VAR index;
    VAR placeholder;
    VAR holders;
    VAR fn;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV_CTX %r0 "arguments";
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV args $RET;
    MOV index length;
    MOV %r0 @c530;
    PUSH %r0;
    CALL_REG @c368 1 false;
    MOV placeholder $RET;
LABEL _l2483_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l2484_;
LABEL _l2486_:
    MOV_CTX %r2 "arguments";
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 args;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l2483_;
LABEL _l2484_:
    MOV %r2 length;
    MOV %r3 3;
    LT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2490_;
    MOV %r5 args;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 placeholder;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2490_:
    MOV %r0 %r1;
    JF %r1 _l2489_;
    MOV %r4 args;
    MOV %r5 length;
    MOV %r6 1;
    SUB %r5 %r6;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 placeholder;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2489_:
    JF %r0 _l2487_;
    NEW_ARR holders;
    JMP _l2488_;
LABEL _l2487_:
    MOV %r1 placeholder;
    PUSH %r1;
    MOV %r1 args;
    PUSH %r1;
    CALL_REG @c318 2 false;
    MOV holders $RET;
LABEL _l2488_:
    MOV %r1 holders;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 length;
    SUB %r1 %r0;
    MOV length %r1;
    MOV %r0 length;
    MOV %r1 @c531;
    LT %r0 %r1;
    JF %r0 _l2491_;
    MOV %r2 @c531;
    MOV %r3 length;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 holders;
    PUSH %r2;
    MOV %r2 args;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r3 @c530;
    MOV %r4 "placeholder";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @c263;
    PUSH %r2;
    MOV %r2 @c532;
    PUSH %r2;
    MOV %r2 @c533;
    PUSH %r2;
    CALL_REG @c534 10 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2492_;
LABEL _l2491_:
LABEL _l2492_:
    MOV_THIS %r2;
    MOV %r1 %r2;
    JF %r2 _l2496_;
    MOV_THIS %r3;
    MOV %r4 @c22;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2496_:
    MOV %r0 %r1;
    JF %r1 _l2495_;
    MOV_THIS %r2;
    MOV %r3 @c530;
    INST_OF %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2495_:
    JF %r0 _l2493_;
    MOV fn @c535;
    JMP _l2494_;
LABEL _l2493_:
    MOV fn @c533;
LABEL _l2494_:
    MOV %r1 args;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 fn;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f612(collection, predicate, fromIndex) {
    VAR @c697;
    ALLOC @c697;
    VAR @c278;
    ALLOC @c278;
    VAR index;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c66 1 false;
    MOV @c697 $RET;
    MOV %r1 collection;
    PUSH %r1;
    CALL_REG @c188 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2497_;
    MOV %r1 3;
    PUSH %r1;
    MOV %r1 predicate;
    PUSH %r1;
    CALL_REG @c199 2 false;
    MOV @c278 $RET;
    MOV %r2 collection;
    PUSH %r2;
    CALL_REG @c103 1 false;
    MOV %r1 $RET;
    MOV collection %r1;
    FUNC %r1 @@f680;
    MOV predicate %r1;
    JMP _l2498_;
LABEL _l2497_:
LABEL _l2498_:
    MOV %r0 fromIndex;
    PUSH %r0;
    MOV %r0 predicate;
    PUSH %r0;
    MOV %r0 collection;
    PUSH %r0;
    CALL_REG @c536 3 false;
    MOV index $RET;
    MOV %r1 index;
    MOV %r2 1;
    MINUS %r2;
    GT %r1 %r2;
    JF %r1 _l2499_;
    MOV %r2 @c697;
    MOV %r4 @c278;
    JF %r4 _l2501_;
    MOV %r5 collection;
    MOV %r6 index;
    MOV_PROP %r3 %r5 %r6;
    JMP _l2500_;
LABEL _l2501_:
    MOV %r3 index;
    MOV_PROP %r0 %r2 %r3;
    JMP _l2500_;
LABEL _l2499_:
    MOV %r0 @c9;
LABEL _l2500_:
    MOV $RET %r0;
    RET;
}
func @@f613(funcs) {
    VAR @c700;
    ALLOC @c700;
    VAR index;
    VAR prereq;
    VAR func;
    VAR @c699;
    ALLOC @c699;
    VAR funcName;
    VAR data;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    ALLOC @c701;
    MOV @c701 funcs;
    MOV %r0 @c701;
    MOV %r1 "length";
    MOV_PROP @c700 %r0 %r1;
    MOV index @c700;
    MOV %r2 @c71;
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "thru";
    MOV_PROP prereq %r0 %r1;
    MOV %r0 @c537;
    JF %r0 _l2502_;
    MOV %r1 @c701;
    MOV %r2 "reverse";
    CALL_VAR %r1 %r2 0 false;
    JMP _l2503_;
LABEL _l2502_:
LABEL _l2503_:
LABEL _l2504_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l2505_;
LABEL _l2507_:
    MOV %r1 @c701;
    MOV %r2 index;
    MOV_PROP func %r1 %r2;
    MOV %r1 func;
    TYPE_OF %r1;
    MOV %r2 "function";
    WNE %r1 %r2;
    JF %r1 _l2508_;
    MOV %r3 @c132;
    PUSH %r3;
    CALL_REG @c133 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2509_;
LABEL _l2508_:
LABEL _l2509_:
    MOV %r3 prereq;
    MOV %r2 %r3;
    JF %r3 _l2513_;
    MOV %r4 @c699;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l2513_:
    MOV %r1 %r2;
    JF %r2 _l2512_;
    MOV %r5 func;
    PUSH %r5;
    CALL_REG @c313 1 false;
    MOV %r3 $RET;
    MOV %r4 "wrapper";
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2512_:
    JF %r1 _l2510_;
    MOV %r2 true;
    PUSH %r2;
    NEW_ARR %r2;
    PUSH %r2;
    CALL_REG @c71 2 true;
    MOV @c699 $RET;
    JMP _l2511_;
LABEL _l2510_:
LABEL _l2511_:
    JMP _l2504_;
LABEL _l2505_:
    MOV %r1 @c699;
    JF %r1 _l2514_;
    MOV %r0 index;
    JMP _l2515_;
LABEL _l2514_:
    MOV %r0 @c700;
LABEL _l2515_:
    MOV index %r0;
LABEL _l2516_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 @c700;
    LT %r0 %r1;
    JF %r0 _l2517_;
LABEL _l2519_:
    MOV %r2 @c701;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV func %r1;
    MOV %r1 func;
    PUSH %r1;
    CALL_REG @c313 1 false;
    MOV funcName $RET;
    MOV %r1 funcName;
    MOV %r2 "wrapper";
    WEQ %r1 %r2;
    JF %r1 _l2520_;
    MOV %r2 func;
    PUSH %r2;
    CALL_REG @c258 1 false;
    MOV data $RET;
    JMP _l2521_;
LABEL _l2520_:
    MOV data @c9;
LABEL _l2521_:
    MOV %r5 data;
    MOV %r4 %r5;
    JF %r5 _l2527_;
    MOV %r8 data;
    MOV %r9 0;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    CALL_REG @c253 1 false;
    MOV %r6 $RET;
    LG_AND %r4 %r6;
LABEL _l2527_:
    MOV %r3 %r4;
    JF %r4 _l2526_;
    MOV %r7 data;
    MOV %r8 1;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 @c242;
    MOV %r9 @c243;
    OR %r6 %r9;
    MOV %r8 @c250;
    OR %r6 %r8;
    MOV %r7 @c316;
    OR %r6 %r7;
    WEQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l2526_:
    MOV %r2 %r3;
    JF %r3 _l2525_;
    MOV %r7 data;
    MOV %r8 4;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l2525_:
    MOV %r1 %r2;
    JF %r2 _l2524_;
    MOV %r5 data;
    MOV %r6 9;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2524_:
    JF %r1 _l2522_;
    MOV %r4 data;
    MOV %r5 3;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 @c699;
    PUSH %r3;
    MOV %r5 @c699;
    MOV %r5 data;
    MOV %r4 0;
    MOV_PROP %r6 %r5 %r4;
    PUSH %r6;
    CALL_REG @c313 1 false;
    MOV %r4 $RET;
    MOV_PROP %r3 %r5 %r4;
    MOV %r4 "apply";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV @c699 %r2;
    JMP _l2523_;
LABEL _l2522_:
    MOV %r6 func;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 1;
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l2529_;
    MOV %r6 func;
    PUSH %r6;
    CALL_REG @c253 1 false;
    MOV %r5 $RET;
    LG_AND %r3 %r5;
LABEL _l2529_:
    JF %r3 _l2528_;
    MOV %r4 @c699;
    MOV %r5 funcName;
    CALL_VAR %r4 %r5 0 false;
    MOV %r2 $RET;
    JMP _l2523_;
LABEL _l2528_:
    MOV %r4 func;
    PUSH %r4;
    MOV %r4 @c699;
    MOV %r5 "thru";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV @c699 %r2;
LABEL _l2523_:
    JMP _l2516_;
LABEL _l2517_:
    FUNC %r0 @@f681;
    MOV $RET %r0;
    RET;
}
func @@f614() {
    VAR length;
    VAR args;
    VAR index;
    VAR placeholder;
    VAR holdersCount;
    VAR newHolders;
    VAR thisBinding;
    VAR fn;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_CTX %r0 "arguments";
    MOV %r1 "length";
    MOV_PROP length %r0 %r1;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV args $RET;
    MOV index length;
LABEL _l2530_:
    MOV %r1 index;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV index %r1;
    JF %r0 _l2531_;
LABEL _l2533_:
    MOV_CTX %r2 "arguments";
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 args;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l2530_;
LABEL _l2531_:
    MOV %r0 @c538;
    JF %r0 _l2534_;
    MOV %r1 @c539;
    PUSH %r1;
    CALL_REG @c368 1 false;
    MOV placeholder $RET;
    MOV %r1 placeholder;
    PUSH %r1;
    MOV %r1 args;
    PUSH %r1;
    CALL_REG @c540 2 false;
    MOV holdersCount $RET;
    JMP _l2535_;
LABEL _l2534_:
LABEL _l2535_:
    MOV %r0 @c541;
    JF %r0 _l2536_;
    MOV %r2 @c538;
    PUSH %r2;
    MOV %r2 @c542;
    PUSH %r2;
    MOV %r2 @c541;
    PUSH %r2;
    MOV %r2 args;
    PUSH %r2;
    CALL_REG @c317 4 false;
    MOV %r1 $RET;
    MOV args %r1;
    JMP _l2537_;
LABEL _l2536_:
LABEL _l2537_:
    MOV %r0 @c543;
    JF %r0 _l2538_;
    MOV %r2 @c538;
    PUSH %r2;
    MOV %r2 @c544;
    PUSH %r2;
    MOV %r2 @c543;
    PUSH %r2;
    MOV %r2 args;
    PUSH %r2;
    CALL_REG @c319 4 false;
    MOV %r1 $RET;
    MOV args %r1;
    JMP _l2539_;
LABEL _l2538_:
LABEL _l2539_:
    MOV %r0 holdersCount;
    MOV %r1 length;
    SUB %r1 %r0;
    MOV length %r1;
    MOV %r1 @c538;
    MOV %r0 %r1;
    JF %r1 _l2542_;
    MOV %r2 length;
    MOV %r3 @c545;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2542_:
    JF %r0 _l2540_;
    MOV %r1 placeholder;
    PUSH %r1;
    MOV %r1 args;
    PUSH %r1;
    CALL_REG @c318 2 false;
    MOV newHolders $RET;
    MOV %r2 @c545;
    MOV %r3 length;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 @c546;
    PUSH %r2;
    MOV %r2 @c547;
    PUSH %r2;
    MOV %r2 newHolders;
    PUSH %r2;
    MOV %r2 args;
    PUSH %r2;
    MOV %r2 @c548;
    PUSH %r2;
    MOV %r3 @c539;
    MOV %r4 "placeholder";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @c263;
    PUSH %r2;
    MOV %r2 @c549;
    PUSH %r2;
    MOV %r2 @c550;
    PUSH %r2;
    CALL_REG @c534 10 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2541_;
LABEL _l2540_:
LABEL _l2541_:
    MOV %r0 @c551;
    JF %r0 _l2543_;
    MOV thisBinding @c548;
    JMP _l2544_;
LABEL _l2543_:
    MOV_THIS thisBinding;
LABEL _l2544_:
    MOV %r0 @c552;
    JF %r0 _l2545_;
    MOV %r1 thisBinding;
    MOV %r2 @c550;
    MOV_PROP fn %r1 %r2;
    JMP _l2546_;
LABEL _l2545_:
    MOV fn @c550;
LABEL _l2546_:
    MOV %r1 args;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV length %r0;
    MOV %r0 @c547;
    JF %r0 _l2547_;
    MOV %r2 @c547;
    PUSH %r2;
    MOV %r2 args;
    PUSH %r2;
    CALL_REG @c553 2 false;
    MOV %r1 $RET;
    MOV args %r1;
    JMP _l2548_;
LABEL _l2547_:
    MOV %r2 @c554;
    MOV %r1 %r2;
    JF %r2 _l2550_;
    MOV %r3 length;
    MOV %r4 1;
    GT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2550_:
    JF %r1 _l2549_;
    MOV %r2 args;
    MOV %r3 "reverse";
    CALL_VAR %r2 %r3 0 false;
    JMP _l2548_;
LABEL _l2549_:
LABEL _l2548_:
    MOV %r1 @c555;
    MOV %r0 %r1;
    JF %r1 _l2553_;
    MOV %r2 @c546;
    MOV %r3 length;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2553_:
    JF %r0 _l2551_;
    MOV %r1 @c546;
    MOV %r2 args;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    JMP _l2552_;
LABEL _l2551_:
LABEL _l2552_:
    MOV_THIS %r2;
    MOV %r1 %r2;
    JF %r2 _l2557_;
    MOV_THIS %r3;
    MOV %r4 @c22;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2557_:
    MOV %r0 %r1;
    JF %r1 _l2556_;
    MOV_THIS %r2;
    MOV %r3 @c539;
    INST_OF %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2556_:
    JF %r0 _l2554_;
    MOV %r2 @c556;
    MOV %r1 %r2;
    JIF %r2 _l2558_;
    MOV %r4 fn;
    PUSH %r4;
    CALL_REG @c240 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l2558_:
    MOV fn %r1;
    JMP _l2555_;
LABEL _l2554_:
LABEL _l2555_:
    MOV %r1 args;
    PUSH %r1;
    MOV %r1 thisBinding;
    PUSH %r1;
    MOV %r1 fn;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f615(object, iteratee) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    NEW_OBJ %r1;
    PUSH %r1;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c557 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c558;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c559 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f616(value, other) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 value;
    MOV %r2 @c9;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2561_;
    MOV %r2 other;
    MOV %r3 @c9;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2561_:
    JF %r0 _l2559_;
    MOV %r1 @c560;
    MOV $RET %r1;
    RET;
    JMP _l2560_;
LABEL _l2559_:
LABEL _l2560_:
    MOV %r0 value;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l2562_;
    MOV %r1 value;
    MOV result %r1;
    JMP _l2563_;
LABEL _l2562_:
LABEL _l2563_:
    MOV %r0 other;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l2564_;
    MOV %r1 result;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2566_;
    MOV %r2 other;
    MOV $RET %r2;
    RET;
    JMP _l2565_;
LABEL _l2566_:
    MOV %r2 value;
    TYPE_OF %r2;
    MOV %r3 "string";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2568_;
    MOV %r3 other;
    TYPE_OF %r3;
    MOV %r4 "string";
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2568_:
    JF %r1 _l2567_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c221 1 false;
    MOV %r2 $RET;
    MOV value %r2;
    MOV %r3 other;
    PUSH %r3;
    CALL_REG @c221 1 false;
    MOV %r2 $RET;
    MOV other %r2;
    JMP _l2565_;
LABEL _l2567_:
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c561 1 false;
    MOV %r2 $RET;
    MOV value %r2;
    MOV %r3 other;
    PUSH %r3;
    CALL_REG @c561 1 false;
    MOV %r2 $RET;
    MOV other %r2;
    MOV %r2 other;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c562 2 false;
    MOV %r1 $RET;
    MOV result %r1;
    JMP _l2565_;
LABEL _l2564_:
LABEL _l2565_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f617(iteratees) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c702;
    MOV @c702 iteratees;
    CALL_REG @c199 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c702;
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV @c702 %r0;
    FUNC %r1 @@f682;
    PUSH %r1;
    CALL_REG @c238 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f618() {
    VAR argsIndex;
    VAR argsLength;
    VAR leftIndex;
    VAR leftLength;
    VAR args;
    VAR fn;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV argsIndex 1;
    MINUS argsIndex;
    MOV_CTX %r0 "arguments";
    MOV %r1 "length";
    MOV_PROP argsLength %r0 %r1;
    MOV leftIndex 1;
    MINUS leftIndex;
    MOV %r0 @c563;
    MOV %r1 "length";
    MOV_PROP leftLength %r0 %r1;
    MOV %r0 leftLength;
    MOV %r1 argsLength;
    ADD %r0 %r1;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV args $RET;
    MOV_THIS %r2;
    MOV %r1 %r2;
    JF %r2 _l2572_;
    MOV_THIS %r3;
    MOV %r4 @c22;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2572_:
    MOV %r0 %r1;
    JF %r1 _l2571_;
    MOV_THIS %r2;
    MOV %r3 @c564;
    INST_OF %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2571_:
    JF %r0 _l2569_;
    MOV fn @c565;
    JMP _l2570_;
LABEL _l2569_:
    MOV fn @c566;
LABEL _l2570_:
LABEL _l2573_:
    MOV %r2 leftIndex;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV leftIndex %r2;
    MOV %r1 leftLength;
    LT %r0 %r1;
    JF %r0 _l2574_;
LABEL _l2576_:
    MOV %r2 @c563;
    MOV %r3 leftIndex;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 args;
    MOV %r3 leftIndex;
    SET_KEY %r2 %r3 %r1;
    JMP _l2573_;
LABEL _l2574_:
LABEL _l2577_:
    MOV %r1 argsLength;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV argsLength %r1;
    JF %r0 _l2578_;
LABEL _l2580_:
    MOV_CTX %r2 "arguments";
    MOV %r4 argsIndex;
    ADD %r4 1;
    MOV %r3 %r4;
    MOV argsIndex %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 args;
    MOV %r4 leftIndex;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV leftIndex %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l2577_;
LABEL _l2578_:
    MOV %r1 args;
    PUSH %r1;
    MOV %r2 @c567;
    JF %r2 _l2581_;
    MOV %r1 @c568;
    JMP _l2582_;
LABEL _l2581_:
    MOV_THIS %r1;
LABEL _l2582_:
    PUSH %r1;
    MOV %r1 fn;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f619(start, end, step) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 step;
    MOV %r1 %r2;
    JF %r2 _l2586_;
    MOV %r3 step;
    TYPE_OF %r3;
    MOV %r4 "number";
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2586_:
    MOV %r0 %r1;
    JF %r1 _l2585_;
    MOV %r3 step;
    PUSH %r3;
    MOV %r3 end;
    PUSH %r3;
    MOV %r3 start;
    PUSH %r3;
    CALL_REG @c326 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2585_:
    JF %r0 _l2583_;
    MOV %r2 @c9;
    MOV step %r2;
    MOV %r1 %r2;
    MOV end %r1;
    JMP _l2584_;
LABEL _l2583_:
LABEL _l2584_:
    MOV %r1 start;
    PUSH %r1;
    CALL_REG @c398 1 false;
    MOV %r0 $RET;
    MOV start %r0;
    MOV %r0 end;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2587_;
    MOV %r1 start;
    MOV end %r1;
    MOV %r1 0;
    MOV start %r1;
    JMP _l2588_;
LABEL _l2587_:
    MOV %r2 end;
    PUSH %r2;
    CALL_REG @c398 1 false;
    MOV %r1 $RET;
    MOV end %r1;
LABEL _l2588_:
    MOV %r1 step;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2589_;
    MOV %r2 start;
    MOV %r3 end;
    LT %r2 %r3;
    JF %r2 _l2591_;
    MOV %r0 1;
    JMP _l2590_;
LABEL _l2591_:
    MOV %r0 1;
    MINUS %r0;
    JMP _l2590_;
LABEL _l2589_:
    MOV %r2 step;
    PUSH %r2;
    CALL_REG @c398 1 false;
    MOV %r0 $RET;
LABEL _l2590_:
    MOV step %r0;
    MOV %r1 @c569;
    PUSH %r1;
    MOV %r1 step;
    PUSH %r1;
    MOV %r1 end;
    PUSH %r1;
    MOV %r1 start;
    PUSH %r1;
    CALL_REG @c570 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f620(value, other) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 value;
    TYPE_OF %r1;
    MOV %r2 "string";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2594_;
    MOV %r2 other;
    TYPE_OF %r2;
    MOV %r3 "string";
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2594_:
    NEG %r0;
    JF %r0 _l2592_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c372 1 false;
    MOV %r1 $RET;
    MOV value %r1;
    MOV %r2 other;
    PUSH %r2;
    CALL_REG @c372 1 false;
    MOV %r1 $RET;
    MOV other %r1;
    JMP _l2593_;
LABEL _l2592_:
LABEL _l2593_:
    MOV %r1 other;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c571 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f621(number, precision) {
    VAR pair;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 number;
    PUSH %r1;
    CALL_REG @c372 1 false;
    MOV %r0 $RET;
    MOV number %r0;
    MOV %r1 precision;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2595_;
    MOV %r0 0;
    JMP _l2596_;
LABEL _l2595_:
    MOV %r2 292;
    PUSH %r2;
    MOV %r3 precision;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c77 2 false;
    MOV %r0 $RET;
LABEL _l2596_:
    MOV precision %r0;
    MOV %r0 precision;
    JF %r0 _l2597_;
    MOV %r1 "e";
    PUSH %r1;
    MOV %r4 number;
    PUSH %r4;
    CALL_REG @c228 1 false;
    MOV %r1 $RET;
    MOV %r3 "e";
    ADD %r1 %r3;
    MOV %r2 "split";
    CALL_VAR %r1 %r2 1 false;
    MOV pair $RET;
    MOV %r4 pair;
    MOV %r5 0;
    MOV_PROP %r1 %r4 %r5;
    MOV %r3 "e";
    ADD %r1 %r3;
    MOV %r4 pair;
    MOV %r5 1;
    MOV_PROP %r2 %r4 %r5;
    PLUS %r2;
    MOV %r3 precision;
    ADD %r2 %r3;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @c572 1 false;
    MOV value $RET;
    MOV %r2 "e";
    PUSH %r2;
    MOV %r5 value;
    PUSH %r5;
    CALL_REG @c228 1 false;
    MOV %r2 $RET;
    MOV %r4 "e";
    ADD %r2 %r4;
    MOV %r3 "split";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV pair %r1;
    MOV %r4 pair;
    MOV %r5 0;
    MOV_PROP %r1 %r4 %r5;
    MOV %r3 "e";
    ADD %r1 %r3;
    MOV %r4 pair;
    MOV %r5 1;
    MOV_PROP %r2 %r4 %r5;
    PLUS %r2;
    MOV %r3 precision;
    SUB %r2 %r3;
    ADD %r1 %r2;
    PLUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l2598_;
LABEL _l2597_:
LABEL _l2598_:
    MOV %r1 number;
    PUSH %r1;
    CALL_REG @c572 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f622(object) {
    VAR tag;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 object;
    PUSH %r0;
    CALL_REG @c114 1 false;
    MOV tag $RET;
    MOV %r0 tag;
    MOV %r1 @c170;
    WEQ %r0 %r1;
    JF %r0 _l2599_;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c272 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2600_;
LABEL _l2599_:
LABEL _l2600_:
    MOV %r0 tag;
    MOV %r1 @c178;
    WEQ %r0 %r1;
    JF %r0 _l2601_;
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c573 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2602_;
LABEL _l2601_:
LABEL _l2602_:
    MOV %r2 object;
    PUSH %r2;
    CALL_REG @c574 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c575 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f623(othValue, othIndex) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 othIndex;
    PUSH %r2;
    MOV %r2 @c576;
    PUSH %r2;
    CALL_REG @c137 2 false;
    MOV %r1 $RET;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l2605_;
    MOV %r3 @c577;
    MOV %r4 othValue;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2606_;
    MOV %r5 @c578;
    PUSH %r5;
    MOV %r5 @c579;
    PUSH %r5;
    MOV %r5 @c580;
    PUSH %r5;
    MOV %r5 othValue;
    PUSH %r5;
    MOV %r5 @c577;
    PUSH %r5;
    CALL_REG @c581 5 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l2606_:
    LG_AND %r0 %r2;
LABEL _l2605_:
    JF %r0 _l2603_;
    MOV %r2 othIndex;
    PUSH %r2;
    MOV %r2 @c576;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2604_;
LABEL _l2603_:
LABEL _l2604_:
}
func @@f624(symbol) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 symbol;
    PUSH %r1;
    MOV %r1 @c582;
    PUSH %r1;
    MOV %r1 @c382;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f625(object) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 object;
    MOV %r1 null;
    WEQ %r0 %r1;
    JF %r0 _l2607_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l2608_;
LABEL _l2607_:
LABEL _l2608_:
    MOV %r3 object;
    MOV %r4 @c583;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 @c584;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2609_;
    MOV %r3 @c584;
    MOV %r4 @c9;
    NE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2610_;
    MOV %r4 @c583;
    MOV %r6 object;
    PUSH %r6;
    CALL_REG @c66 1 false;
    MOV %r5 $RET;
    IN %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2610_:
    LG_AND %r0 %r2;
LABEL _l2609_:
    MOV $RET %r0;
    RET;
}
func @@f626(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c585;
    MOV %r3 "size";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @c586;
    EQ %r0 %r1;
    JF %r0 _l2611_;
    MOV %r1 @c585;
    MOV %r2 "clear";
    CALL_VAR %r1 %r2 0 false;
    JMP _l2612_;
LABEL _l2611_:
LABEL _l2612_:
    MOV %r0 key;
    MOV $RET %r0;
    RET;
}
func @@f627() {
    VAR args;
    VAR index;
    VAR length;
    VAR array;
    VAR otherArgs;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV args arguments;
    MOV index 1;
    MINUS index;
    MOV %r0 0;
    PUSH %r0;
    MOV %r2 args;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @c587;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_REG @c155 2 false;
    MOV length $RET;
    MOV %r0 length;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV array $RET;
LABEL _l2613_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l2614_;
LABEL _l2616_:
    MOV %r2 args;
    MOV %r3 @c587;
    MOV %r4 index;
    ADD %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 array;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l2613_;
LABEL _l2614_:
    MOV %r0 1;
    MINUS %r0;
    MOV index %r0;
    MOV %r0 @c587;
    MOV %r1 1;
    ADD %r0 %r1;
    PUSH %r0;
    CALL_REG @c107 1 false;
    MOV otherArgs $RET;
LABEL _l2617_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 @c587;
    LT %r0 %r1;
    JF %r0 _l2618_;
LABEL _l2620_:
    MOV %r2 args;
    MOV %r3 index;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 otherArgs;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l2617_;
LABEL _l2618_:
    MOV %r1 array;
    PUSH %r1;
    CALL_REG @c588 1 false;
    MOV %r0 $RET;
    MOV %r1 otherArgs;
    MOV %r2 @c587;
    SET_KEY %r1 %r2 %r0;
    MOV %r1 otherArgs;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c589;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f628() {
    VAR stamp;
    VAR remaining;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    CALL_REG @c590 0 false;
    MOV stamp $RET;
    MOV remaining @c591;
    MOV %r0 stamp;
    MOV %r1 @c592;
    SUB %r0 %r1;
    SUB remaining %r0;
    MOV %r0 stamp;
    MOV @c592 %r0;
    MOV %r0 remaining;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l2621_;
    MOV %r3 @c593;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV @c593 %r3;
    MOV %r2 @c594;
    GE %r1 %r2;
    JF %r1 _l2623_;
    MOV_CTX %r3 "arguments";
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    MOV $RET %r2;
    RET;
    JMP _l2622_;
LABEL _l2623_:
    JMP _l2622_;
LABEL _l2621_:
    MOV %r1 0;
    MOV @c593 %r1;
LABEL _l2622_:
    MOV_CTX %r0 "arguments";
    PUSH %r0;
    MOV %r0 "~~~~~~~~~~~~~~~~~~~~~~short out";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    MOV_CTX %r1 "arguments";
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c595;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f629(match, number, quote, subString) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 quote;
    JF %r1 _l2624_;
    MOV %r2 "$1";
    PUSH %r2;
    MOV %r2 @c596;
    PUSH %r2;
    MOV %r2 subString;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l2625_;
LABEL _l2624_:
    MOV %r2 number;
    MOV %r0 %r2;
    JIF %r2 _l2626_;
    MOV %r3 match;
    LG_OR %r0 %r3;
LABEL _l2626_:
LABEL _l2625_:
    PUSH %r0;
    MOV %r0 @c597;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f630(pair) {
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV value "_.";
    MOV %r1 pair;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    ADD value %r0;
    MOV %r1 @c598;
    MOV %r3 pair;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2629_;
    MOV %r3 value;
    PUSH %r3;
    MOV %r3 @c599;
    PUSH %r3;
    CALL_REG @c135 2 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2629_:
    JF %r0 _l2627_;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 @c599;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2628_;
LABEL _l2627_:
LABEL _l2628_:
}
func @@f631(index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c600;
    PUSH %r2;
    MOV %r2 index;
    PUSH %r2;
    CALL_REG @c96 2 false;
    MOV %r1 $RET;
    JF %r1 _l2630_;
    MOV %r0 index;
    PLUS %r0;
    JMP _l2631_;
LABEL _l2630_:
    MOV %r0 index;
LABEL _l2631_:
    MOV $RET %r0;
    RET;
}
func @@f632(group) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 group;
    PUSH %r1;
    CALL_REG @c195 1 false;
    MOV %r0 $RET;
    JF %r0 _l2632_;
    MOV %r2 @c601;
    PUSH %r2;
    MOV %r3 group;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r1 $RET;
    MOV @c601 %r1;
    MOV %r1 true;
    MOV $RET %r1;
    RET;
    JMP _l2633_;
LABEL _l2632_:
LABEL _l2633_:
}
func @@f633(index) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 index;
    PUSH %r2;
    CALL_REG @c457 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c602;
    PUSH %r1;
    CALL_REG @c10 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f634(group) {
    VAR %r0;
    VAR %r1;
    MOV %r1 group;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c603;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f635(object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c604;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c335 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f636(array) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 @c605;
    MOV %r0 %r1;
    JF %r1 _l2636_;
    MOV %r3 array;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2636_:
    JF %r0 _l2634_;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 array;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2635_;
LABEL _l2634_:
LABEL _l2635_:
    MOV %r0 array;
    MOV $RET %r0;
    RET;
}
func @@f637(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c606;
    JF %r1 _l2637_;
    MOV %r2 @c607;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    MOV %r2 @c608;
    PUSH %r2;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    JMP _l2638_;
LABEL _l2637_:
    MOV %r2 @c607;
    PUSH %r2;
    MOV %r2 @c608;
    PUSH %r2;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c609 3 false;
    MOV %r0 $RET;
LABEL _l2638_:
    MOV %r1 @c610;
    MOV %r3 @c611;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV @c611 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f638() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c612;
    SUB %r2 1;
    MOV %r0 %r2;
    MOV @c612 %r2;
    MOV %r1 1;
    LT %r0 %r1;
    JF %r0 _l2639_;
    MOV_CTX %r2 "arguments";
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @c613;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2640_;
LABEL _l2639_:
LABEL _l2640_:
}
func @@f639() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c614;
    SUB %r2 1;
    MOV %r0 %r2;
    MOV @c614 %r2;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l2641_;
    MOV_CTX %r2 "arguments";
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @c615;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV @c616 %r1;
    JMP _l2642_;
LABEL _l2641_:
LABEL _l2642_:
    MOV %r0 @c614;
    MOV %r1 1;
    LE %r0 %r1;
    JF %r0 _l2643_;
    MOV %r1 @c9;
    MOV @c615 %r1;
    JMP _l2644_;
LABEL _l2643_:
LABEL _l2644_:
    MOV %r0 @c616;
    MOV $RET %r0;
    RET;
}
func @@f640(time) {
    VAR args;
    VAR thisArg;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV args @c617;
    MOV thisArg @c618;
    MOV %r1 @c9;
    MOV @c618 %r1;
    MOV %r0 %r1;
    MOV @c617 %r0;
    MOV %r0 time;
    MOV @c619 %r0;
    MOV %r1 args;
    PUSH %r1;
    MOV %r1 thisArg;
    PUSH %r1;
    MOV %r1 @c620;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV @c621 %r0;
    MOV %r0 @c621;
    MOV $RET %r0;
    RET;
}
func @@f641(time) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 time;
    MOV @c619 %r0;
    MOV %r1 @c622;
    PUSH %r1;
    MOV %r1 @c623;
    PUSH %r1;
    CALL_REG @c134 2 false;
    MOV %r0 $RET;
    MOV @c624 %r0;
    MOV %r1 @c625;
    JF %r1 _l2645_;
    MOV %r2 time;
    PUSH %r2;
    CALL_REG @c626 1 false;
    MOV %r0 $RET;
    JMP _l2646_;
LABEL _l2645_:
    MOV %r0 @c621;
LABEL _l2646_:
    MOV $RET %r0;
    RET;
}
func @@f642(time) {
    VAR timeSinceLastCall;
    VAR timeSinceLastInvoke;
    VAR timeWaiting;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV timeSinceLastCall time;
    MOV %r0 @c627;
    SUB timeSinceLastCall %r0;
    MOV timeSinceLastInvoke time;
    MOV %r0 @c619;
    SUB timeSinceLastInvoke %r0;
    MOV timeWaiting @c622;
    MOV %r0 timeSinceLastCall;
    SUB timeWaiting %r0;
    MOV %r1 @c628;
    JF %r1 _l2647_;
    MOV %r2 @c629;
    MOV %r3 timeSinceLastInvoke;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 timeWaiting;
    PUSH %r2;
    CALL_REG @c77 2 false;
    MOV %r0 $RET;
    JMP _l2648_;
LABEL _l2647_:
    MOV %r0 timeWaiting;
LABEL _l2648_:
    MOV $RET %r0;
    RET;
}
func @@f643(time) {
    VAR timeSinceLastCall;
    VAR timeSinceLastInvoke;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV timeSinceLastCall time;
    MOV %r0 @c627;
    SUB timeSinceLastCall %r0;
    MOV timeSinceLastInvoke time;
    MOV %r0 @c619;
    SUB timeSinceLastInvoke %r0;
    MOV %r3 @c627;
    MOV %r4 @c9;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2651_;
    MOV %r4 timeSinceLastCall;
    MOV %r5 @c622;
    GE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2651_:
    MOV %r1 %r2;
    JIF %r2 _l2650_;
    MOV %r3 timeSinceLastCall;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2650_:
    MOV %r0 %r1;
    JIF %r1 _l2649_;
    MOV %r3 @c628;
    MOV %r2 %r3;
    JF %r3 _l2652_;
    MOV %r4 timeSinceLastInvoke;
    MOV %r5 @c629;
    GE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2652_:
    LG_OR %r0 %r2;
LABEL _l2649_:
    MOV $RET %r0;
    RET;
}
func @@f644() {
    VAR time;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    CALL_REG @c630 0 false;
    MOV time $RET;
    MOV %r1 time;
    PUSH %r1;
    CALL_REG @c631 1 false;
    MOV %r0 $RET;
    JF %r0 _l2653_;
    MOV %r2 time;
    PUSH %r2;
    CALL_REG @c632 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2654_;
LABEL _l2653_:
LABEL _l2654_:
    MOV %r2 time;
    PUSH %r2;
    CALL_REG @c633 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c623;
    PUSH %r1;
    CALL_REG @c134 2 false;
    MOV %r0 $RET;
    MOV @c624 %r0;
}
func @@f645(time) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c9;
    MOV @c624 %r0;
    MOV %r1 @c634;
    MOV %r0 %r1;
    JF %r1 _l2657_;
    MOV %r2 @c617;
    LG_AND %r0 %r2;
LABEL _l2657_:
    JF %r0 _l2655_;
    MOV %r2 time;
    PUSH %r2;
    CALL_REG @c626 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2656_;
LABEL _l2655_:
LABEL _l2656_:
    MOV %r1 @c9;
    MOV @c618 %r1;
    MOV %r0 %r1;
    MOV @c617 %r0;
    MOV %r0 @c621;
    MOV $RET %r0;
    RET;
}
func @@f646() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r0 @c624;
    MOV %r1 @c9;
    NE %r0 %r1;
    JF %r0 _l2658_;
    MOV %r1 @c624;
    PUSH %r1;
    CALL_REG @c635 1 false;
    JMP _l2659_;
LABEL _l2658_:
LABEL _l2659_:
    MOV %r0 0;
    MOV @c619 %r0;
    MOV %r3 @c9;
    MOV @c624 %r3;
    MOV %r2 %r3;
    MOV @c618 %r2;
    MOV %r1 %r2;
    MOV @c627 %r1;
    MOV %r0 %r1;
    MOV @c617 %r0;
}
func @@f647() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c624;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2660_;
    MOV %r0 @c621;
    JMP _l2661_;
LABEL _l2660_:
    CALL_REG @c630 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c632 1 false;
    MOV %r0 $RET;
LABEL _l2661_:
    MOV $RET %r0;
    RET;
}
func @@f648() {
    VAR time;
    VAR isInvoking;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    CALL_REG @c630 0 false;
    MOV time $RET;
    MOV %r0 time;
    PUSH %r0;
    CALL_REG @c631 1 false;
    MOV isInvoking $RET;
    MOV_CTX %r0 "arguments";
    MOV @c617 %r0;
    MOV_THIS %r0;
    MOV @c618 %r0;
    MOV %r0 time;
    MOV @c627 %r0;
    MOV %r0 isInvoking;
    JF %r0 _l2662_;
    MOV %r1 @c624;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2664_;
    MOV %r3 @c627;
    PUSH %r3;
    CALL_REG @c636 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l2663_;
LABEL _l2664_:
    MOV %r1 @c628;
    JF %r1 _l2665_;
    MOV %r3 @c622;
    PUSH %r3;
    MOV %r3 @c623;
    PUSH %r3;
    CALL_REG @c134 2 false;
    MOV %r2 $RET;
    MOV @c624 %r2;
    MOV %r3 @c627;
    PUSH %r3;
    CALL_REG @c626 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l2663_;
LABEL _l2665_:
    JMP _l2663_;
LABEL _l2662_:
LABEL _l2663_:
    MOV %r0 @c624;
    MOV %r1 @c9;
    EQ %r0 %r1;
    JF %r0 _l2666_;
    MOV %r2 @c622;
    PUSH %r2;
    MOV %r2 @c623;
    PUSH %r2;
    CALL_REG @c134 2 false;
    MOV %r1 $RET;
    MOV @c624 %r1;
    JMP _l2667_;
LABEL _l2666_:
LABEL _l2667_:
    MOV %r0 @c621;
    MOV $RET %r0;
    RET;
}
func @@f649() {
    VAR args;
    VAR key;
    VAR cache;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV args arguments;
    MOV %r0 @c637;
    JF %r0 _l2668_;
    MOV %r1 args;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c637;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV key $RET;
    JMP _l2669_;
LABEL _l2668_:
    MOV %r1 args;
    MOV %r2 0;
    MOV_PROP key %r1 %r2;
LABEL _l2669_:
    MOV %r0 @c638;
    MOV %r1 "cache";
    MOV_PROP cache %r0 %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 cache;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2670_;
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 cache;
    MOV %r3 "get";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2671_;
LABEL _l2670_:
LABEL _l2671_:
    MOV %r0 args;
    PUSH %r0;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @c639;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV result $RET;
    MOV %r2 result;
    PUSH %r2;
    MOV %r2 key;
    PUSH %r2;
    MOV %r2 cache;
    MOV %r3 "set";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l2672_;
    MOV %r2 cache;
    LG_OR %r0 %r2;
LABEL _l2672_:
    MOV %r1 @c638;
    MOV %r2 "cache";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f650() {
    VAR args;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV args arguments;
    MOV %r1 args;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 0;
    JE %r0 %r1 _l2674_;
    JMP _l2675_;
LABEL _l2674_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 @c640;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NEG %r2;
    MOV $RET %r2;
    RET;
LABEL _l2675_:
    MOV %r2 1;
    JE %r0 %r2 _l2676_;
    JMP _l2677_;
LABEL _l2676_:
    MOV %r5 args;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 @c640;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    NEG %r3;
    MOV $RET %r3;
    RET;
LABEL _l2677_:
    MOV %r3 2;
    JE %r0 %r3 _l2678_;
    JMP _l2679_;
LABEL _l2678_:
    MOV %r6 args;
    MOV %r7 1;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r6 args;
    MOV %r7 0;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 @c640;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
    NEG %r4;
    MOV $RET %r4;
    RET;
LABEL _l2679_:
    MOV %r4 3;
    JE %r0 %r4 _l2680_;
    JMP _l2681_;
LABEL _l2680_:
    MOV %r7 args;
    MOV %r8 2;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 args;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 args;
    MOV %r8 0;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_THIS %r6;
    PUSH %r6;
    MOV %r6 @c640;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 4 false;
    MOV %r5 $RET;
    NEG %r5;
    MOV $RET %r5;
    RET;
LABEL _l2681_:
LABEL _l2673_:
    MOV %r1 args;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c640;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f651(args) {
    VAR index;
    VAR length;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV index 1;
    MINUS index;
    MOV %r0 @c641;
    PUSH %r0;
    MOV %r1 args;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c77 2 false;
    MOV length $RET;
LABEL _l2682_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 length;
    LT %r0 %r1;
    JF %r0 _l2683_;
LABEL _l2685_:
    MOV %r3 args;
    MOV %r4 index;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r4 @c642;
    MOV %r3 index;
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r2 args;
    MOV %r3 index;
    SET_KEY %r2 %r3 %r1;
    JMP _l2682_;
LABEL _l2683_:
    MOV %r1 args;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c643;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f652(args) {
    VAR array;
    VAR otherArgs;
    VAR %r0;
    VAR %r1;
    MOV %r0 args;
    MOV %r1 @c644;
    MOV_PROP array %r0 %r1;
    MOV %r0 @c644;
    PUSH %r0;
    MOV %r0 0;
    PUSH %r0;
    MOV %r0 args;
    PUSH %r0;
    CALL_REG @c249 3 false;
    MOV otherArgs $RET;
    MOV %r0 array;
    JF %r0 _l2686_;
    MOV %r1 array;
    PUSH %r1;
    MOV %r1 otherArgs;
    PUSH %r1;
    CALL_REG @c144 2 false;
    JMP _l2687_;
LABEL _l2686_:
LABEL _l2687_:
    MOV %r1 otherArgs;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c645;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f653(value, key, object) {
    VAR %r0;
    VAR %r1;
    MOV %r0 value;
    PUSH %r0;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c646 3 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c647;
    PUSH %r0;
    CALL_REG @c101 3 false;
}
func @@f654(value, key, object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c648 3 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 @c649;
    PUSH %r0;
    CALL_REG @c101 3 false;
}
func @@f655(path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 @c650;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    CALL_REG @c148 2 false;
    MOV %r0 $RET;
    MOV path %r0;
    MOV %r0 @c651;
    JIF %r0 _l2688_;
    MOV %r4 path;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    GT %r2 %r3;
    MOV @c651 %r2;
    MOV %r1 %r2;
LABEL _l2688_:
    MOV %r0 path;
    MOV $RET %r0;
    RET;
}
func @@f656(prop) {
    VAR %r0;
    VAR %r1;
    NEW_ARR %r0;
    MOV %r1 prop;
    SET_KEY %r0 0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f657(value, path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 path;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c652 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f658(value, index, object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 object;
    PUSH %r1;
    MOV %r1 index;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 @c653;
    PUSH %r1;
    CALL_REG @c654 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f659(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 interpolateValue;
    JIF %r0 _l2689_;
    MOV %r2 esTemplateValue;
    MOV interpolateValue %r2;
    MOV %r1 %r2;
LABEL _l2689_:
    MOV %r1 @c655;
    PUSH %r1;
    MOV %r1 @c656;
    PUSH %r1;
    MOV %r3 offset;
    PUSH %r3;
    MOV %r3 @c657;
    PUSH %r3;
    MOV %r3 @c658;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 "replace";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV %r1 @c659;
    ADD %r1 %r0;
    MOV @c659 %r1;
    MOV %r0 escapeValue;
    JF %r0 _l2690_;
    MOV %r1 true;
    MOV @c660 %r1;
    MOV %r1 "' +
__e(";
    MOV %r3 escapeValue;
    ADD %r1 %r3;
    MOV %r2 ") +
'";
    ADD %r1 %r2;
    MOV %r2 @c659;
    ADD %r2 %r1;
    MOV @c659 %r2;
    JMP _l2691_;
LABEL _l2690_:
LABEL _l2691_:
    MOV %r0 evaluateValue;
    JF %r0 _l2692_;
    MOV %r1 true;
    MOV @c661 %r1;
    MOV %r1 "';
";
    MOV %r3 evaluateValue;
    ADD %r1 %r3;
    MOV %r2 ";
__p += '";
    ADD %r1 %r2;
    MOV %r2 @c659;
    ADD %r2 %r1;
    MOV @c659 %r2;
    JMP _l2693_;
LABEL _l2692_:
LABEL _l2693_:
    MOV %r0 interpolateValue;
    JF %r0 _l2694_;
    MOV %r1 "' +
((__t = (";
    MOV %r3 interpolateValue;
    ADD %r1 %r3;
    MOV %r2 ")) == null ? '' : __t) +
'";
    ADD %r1 %r2;
    MOV %r2 @c659;
    ADD %r2 %r1;
    MOV @c659 %r2;
    JMP _l2695_;
LABEL _l2694_:
LABEL _l2695_:
    MOV %r0 offset;
    MOV %r2 match;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    ADD %r0 %r1;
    MOV @c657 %r0;
    MOV %r0 match;
    MOV $RET %r0;
    RET;
}
func @@f660() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 @c662;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r3 @c663;
    MOV %r5 "return ";
    ADD %r3 %r5;
    MOV %r4 @c659;
    ADD %r3 %r4;
    PUSH %r3;
    MOV %r3 @c664;
    PUSH %r3;
    CALL_REG @c665 2 false;
    MOV %r1 $RET;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f661(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 key;
    PUSH %r1;
    CALL_REG @c149 1 false;
    MOV %r0 $RET;
    MOV key %r0;
    MOV %r1 @c666;
    PUSH %r1;
    MOV %r2 @c666;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c367 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 key;
    PUSH %r0;
    MOV %r0 @c666;
    PUSH %r0;
    CALL_REG @c101 3 false;
}
func @@f662(pair) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 pair;
    MOV %r3 1;
    MOV_PROP %r0 %r2 %r3;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l2696_;
    MOV %r2 @c132;
    PUSH %r2;
    CALL_REG @c133 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2697_;
LABEL _l2696_:
LABEL _l2697_:
    NEW_ARR %r0;
    MOV %r3 pair;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c667 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 0 %r1;
    MOV %r2 pair;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    SET_KEY %r0 1 %r1;
    MOV $RET %r0;
    RET;
}
func @@f663(args) {
    VAR index;
    VAR pair;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV index 1;
    MINUS index;
LABEL _l2698_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 @c668;
    LT %r0 %r1;
    JF %r0 _l2699_;
LABEL _l2701_:
    MOV %r1 @c669;
    MOV %r2 index;
    MOV_PROP pair %r1 %r2;
    MOV %r2 args;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r3 pair;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c159 3 false;
    MOV %r1 $RET;
    JF %r1 _l2702_;
    MOV %r3 args;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r4 pair;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c159 3 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l2703_;
LABEL _l2702_:
LABEL _l2703_:
    JMP _l2698_;
LABEL _l2699_:
}
func @@f664() {
    VAR %r0;
    MOV %r0 @c670;
    MOV $RET %r0;
    RET;
}
func @@f665(object) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c671;
    PUSH %r1;
    MOV %r1 @c672;
    PUSH %r1;
    MOV %r1 object;
    PUSH %r1;
    CALL_REG @c609 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f666(path) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c673;
    PUSH %r1;
    MOV %r1 path;
    PUSH %r1;
    MOV %r1 @c674;
    PUSH %r1;
    CALL_REG @c609 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f667(methodName) {
    VAR @c705;
    ALLOC @c705;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 @c675;
    MOV %r1 methodName;
    MOV_PROP @c705 %r0 %r1;
    MOV %r0 @c705;
    MOV %r1 @c676;
    MOV %r2 methodName;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c677;
    JF %r0 _l2704_;
    FUNC %r1 @@f683;
    MOV %r4 @c676;
    MOV %r3 "prototype";
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 methodName;
    SET_KEY %r2 %r3 %r1;
    JMP _l2705_;
LABEL _l2704_:
LABEL _l2705_:
}
func @@f668(args) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c678;
    PUSH %r1;
    MOV %r1 args;
    PUSH %r1;
    CALL_REG @c333 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f669(path) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c679;
    MOV %r2 null;
    WEQ %r1 %r2;
    JF %r1 _l2706_;
    MOV %r0 @c9;
    JMP _l2707_;
LABEL _l2706_:
    MOV %r2 path;
    PUSH %r2;
    MOV %r2 @c679;
    PUSH %r2;
    CALL_REG @c203 2 false;
    MOV %r0 $RET;
LABEL _l2707_:
    MOV $RET %r0;
    RET;
}
func @@f670(func, methodName) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 methodName;
    PUSH %r1;
    MOV %r2 @c277;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @c72;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2708_;
    MOV %r1 func;
    MOV %r2 @c680;
    MOV %r3 methodName;
    SET_KEY %r2 %r3 %r1;
    JMP _l2709_;
LABEL _l2708_:
LABEL _l2709_:
}
func @@f671(n) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r1 n;
    MOV %r2 @c9;
    EQ %r1 %r2;
    JF %r1 _l2710_;
    MOV %r0 1;
    JMP _l2711_;
LABEL _l2710_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 n;
    PUSH %r3;
    CALL_REG @c140 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @c155 2 false;
    MOV %r0 $RET;
LABEL _l2711_:
    MOV n %r0;
    MOV_THIS %r2;
    MOV %r3 "__filtered__";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l2714_;
    MOV %r2 @c681;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2714_:
    JF %r0 _l2712_;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @c70 1 true;
    MOV result $RET;
    JMP _l2713_;
LABEL _l2712_:
    MOV_THIS %r1;
    MOV %r2 "clone";
    CALL_VAR %r1 %r2 0 false;
    MOV result $RET;
LABEL _l2713_:
    MOV %r1 result;
    MOV %r2 "__filtered__";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2715_;
    MOV %r3 result;
    MOV %r4 "__takeCount__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @c77 2 false;
    MOV %r1 $RET;
    MOV %r2 result;
    MOV %r3 "__takeCount__";
    SET_KEY %r2 %r3 %r1;
    JMP _l2716_;
LABEL _l2715_:
    NEW_OBJ %r1;
    MOV %r3 @c74;
    PUSH %r3;
    MOV %r3 n;
    PUSH %r3;
    CALL_REG @c77 2 false;
    MOV %r2 $RET;
    SET_KEY %r1 'size' %r2;
    MOV %r2 @c682;
    MOV %r6 result;
    MOV %r7 "__dir__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    LT %r4 %r5;
    JF %r4 _l2717_;
    MOV %r3 "Right";
    JMP _l2716_;
LABEL _l2717_:
    MOV %r3 "";
    ADD %r2 %r3;
    SET_KEY %r1 'type' %r2;
    PUSH %r1;
    MOV %r3 result;
    MOV %r2 "__views__";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l2716_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f672(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r3 n;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "reverse";
    CALL_VAR %r5 %r6 0 false;
    MOV %r3 $RET;
    MOV %r4 @c682;
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 "reverse";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f673(iteratee) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r0;
    MOV %r1 "clone";
    CALL_VAR %r0 %r1 0 false;
    MOV result $RET;
    NEW_OBJ %r0;
    MOV %r2 3;
    PUSH %r2;
    MOV %r2 @c278;
    PUSH %r2;
    CALL_REG @c199 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'iteratee' %r1;
    MOV %r1 @c683;
    SET_KEY %r0 'type' %r1;
    PUSH %r0;
    MOV %r2 result;
    MOV %r1 "__iteratees__";
    MOV_PROP %r0 %r2 %r1;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    MOV %r2 result;
    MOV %r3 "__filtered__";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l2718_;
    MOV %r2 @c684;
    LG_OR %r0 %r2;
LABEL _l2718_:
    MOV %r1 result;
    MOV %r2 "__filtered__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f674() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r5 1;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 @c685;
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "value";
    CALL_VAR %r3 %r4 0 false;
    MOV %r1 $RET;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f675() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r2;
    MOV %r3 "__filtered__";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2719_;
    MOV_THIS %r2;
    PUSH %r2;
    CALL_REG @c70 1 true;
    MOV %r0 $RET;
    JMP _l2720_;
LABEL _l2719_:
    MOV %r2 1;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 @c686;
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l2720_:
    MOV $RET %r0;
    RET;
}
func @@f676(value) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c687;
    PUSH %r1;
    MOV %r1 @c688;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    CALL_REG @c609 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f677() {
    VAR value;
    VAR @c706;
    ALLOC @c706;
    VAR isLazy;
    VAR @c278;
    ALLOC @c278;
    VAR useLazy;
    VAR interceptor;
    VAR @c708;
    ALLOC @c708;
    VAR isHybrid;
    VAR isUnwrapped;
    VAR onlyLazy;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    FUNC interceptor @@f684;
    MOV_THIS %r0;
    MOV %r1 "__wrapped__";
    MOV_PROP value %r0 %r1;
    MOV %r0 @c689;
    JF %r0 _l2721_;
    NEW_ARR @c706;
    MOV %r1 1;
    SET_KEY @c706 0 %r1;
    JMP _l2722_;
LABEL _l2721_:
    MOV_CTX @c706 "arguments";
LABEL _l2722_:
    MOV isLazy value;
    MOV %r0 @c70;
    INST_OF isLazy %r0;
    MOV %r0 @c706;
    MOV %r1 0;
    MOV_PROP @c278 %r0 %r1;
    MOV %r0 isLazy;
    MOV useLazy %r0;
    JIF %r0 _l2723_;
    MOV %r2 value;
    PUSH %r2;
    CALL_REG @c69 1 false;
    MOV %r1 $RET;
    LG_OR useLazy %r1;
LABEL _l2723_:
    MOV %r3 useLazy;
    MOV %r2 %r3;
    JF %r3 _l2728_;
    MOV %r4 @c690;
    LG_AND %r2 %r4;
LABEL _l2728_:
    MOV %r1 %r2;
    JF %r2 _l2727_;
    MOV %r3 @c278;
    TYPE_OF %r3;
    MOV %r4 "function";
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2727_:
    MOV %r0 %r1;
    JF %r1 _l2726_;
    MOV %r4 @c278;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2726_:
    JF %r0 _l2724_;
    MOV %r2 false;
    MOV useLazy %r2;
    MOV %r1 %r2;
    MOV isLazy %r1;
    JMP _l2725_;
LABEL _l2724_:
LABEL _l2725_:
    MOV_THIS %r0;
    MOV %r1 "__chain__";
    MOV_PROP @c708 %r0 %r1;
    MOV_THIS %r2;
    MOV %r3 "__actions__";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "length";
    MOV_PROP isHybrid %r0 %r1;
    NEG isHybrid;
    NEG isHybrid;
    MOV %r0 @c691;
    MOV isUnwrapped %r0;
    JF %r0 _l2729_;
    MOV %r1 @c708;
    NEG %r1;
    LG_AND isUnwrapped %r1;
LABEL _l2729_:
    MOV %r0 isLazy;
    MOV onlyLazy %r0;
    JF %r0 _l2730_;
    MOV %r1 isHybrid;
    NEG %r1;
    LG_AND onlyLazy %r1;
LABEL _l2730_:
    MOV %r1 @c691;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l2733_;
    MOV %r2 useLazy;
    LG_AND %r0 %r2;
LABEL _l2733_:
    JF %r0 _l2731_;
    MOV %r2 onlyLazy;
    JF %r2 _l2734_;
    MOV %r1 value;
    JMP _l2732_;
LABEL _l2734_:
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @c70 1 true;
    MOV %r1 $RET;
    MOV value %r1;
    MOV %r1 @c706;
    PUSH %r1;
    MOV %r1 value;
    PUSH %r1;
    MOV %r1 @c692;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV result $RET;
    NEW_OBJ %r1;
    MOV %r2 @c344;
    SET_KEY %r1 'func' %r2;
    NEW_ARR %r2;
    MOV %r3 interceptor;
    SET_KEY %r2 0 %r3;
    SET_KEY %r1 'args' %r2;
    MOV %r2 @c9;
    SET_KEY %r1 'thisArg' %r2;
    PUSH %r1;
    MOV %r3 result;
    MOV %r2 "__actions__";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r2 @c708;
    PUSH %r2;
    MOV %r2 result;
    PUSH %r2;
    CALL_REG @c71 2 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2732_;
LABEL _l2731_:
LABEL _l2732_:
    MOV %r1 isUnwrapped;
    MOV %r0 %r1;
    JF %r1 _l2737_;
    MOV %r2 onlyLazy;
    LG_AND %r0 %r2;
LABEL _l2737_:
    JF %r0 _l2735_;
    MOV %r2 @c706;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @c692;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2736_;
LABEL _l2735_:
LABEL _l2736_:
    MOV %r1 interceptor;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "thru";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV result %r0;
    MOV %r1 isUnwrapped;
    JF %r1 _l2738_;
    MOV %r2 @c689;
    JF %r2 _l2740_;
    MOV %r5 result;
    MOV %r6 "value";
    CALL_VAR %r5 %r6 0 false;
    MOV %r3 $RET;
    MOV %r4 0;
    MOV_PROP %r0 %r3 %r4;
    JMP _l2739_;
LABEL _l2740_:
    MOV %r3 result;
    MOV %r4 "value";
    CALL_VAR %r3 %r4 0 false;
    MOV %r0 $RET;
    JMP _l2739_;
LABEL _l2738_:
    MOV %r0 result;
LABEL _l2739_:
    MOV $RET %r0;
    RET;
}
func @@f678() {
    VAR @c709;
    ALLOC @c709;
    VAR value;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV @c709 arguments;
    MOV %r1 @c693;
    MOV %r0 %r1;
    JF %r1 _l2743_;
    MOV_THIS %r3;
    MOV %r4 "__chain__";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2743_:
    JF %r0 _l2741_;
    MOV_THIS %r1;
    MOV %r2 "value";
    CALL_VAR %r1 %r2 0 false;
    MOV value $RET;
    MOV %r2 @c709;
    PUSH %r2;
    MOV %r4 value;
    PUSH %r4;
    CALL_REG @c69 1 false;
    MOV %r3 $RET;
    JF %r3 _l2744_;
    MOV %r2 value;
    JMP _l2742_;
LABEL _l2744_:
    NEW_ARR %r2;
    PUSH %r2;
    MOV %r2 @c694;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2742_;
LABEL _l2741_:
LABEL _l2742_:
    FUNC %r1 @@f685;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 @c695;
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f679(iteratee) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c696;
    PUSH %r1;
    CALL_REG @c278 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f680(key) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c697;
    PUSH %r1;
    MOV %r1 key;
    PUSH %r1;
    MOV %r2 @c697;
    MOV %r3 key;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c698 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f681() {
    VAR args;
    VAR value;
    VAR index;
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV args arguments;
    MOV %r0 args;
    MOV %r1 0;
    MOV_PROP value %r0 %r1;
    MOV %r2 @c699;
    MOV %r1 %r2;
    JF %r2 _l2748_;
    MOV %r5 args;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2748_:
    MOV %r0 %r1;
    JF %r1 _l2747_;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c69 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2747_:
    JF %r0 _l2745_;
    MOV %r4 value;
    PUSH %r4;
    MOV %r4 @c699;
    MOV %r5 "plant";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "value";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2746_;
LABEL _l2745_:
LABEL _l2746_:
    MOV index 0;
    MOV %r0 @c700;
    JF %r0 _l2749_;
    MOV %r1 args;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r3 @c701;
    MOV %r2 index;
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV result $RET;
    JMP _l2750_;
LABEL _l2749_:
    MOV result value;
LABEL _l2750_:
LABEL _l2751_:
    MOV %r2 index;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV index %r2;
    MOV %r1 @c700;
    LT %r0 %r1;
    JF %r0 _l2752_;
LABEL _l2754_:
    MOV %r2 result;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r4 @c701;
    MOV %r3 index;
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV result %r1;
    JMP _l2751_;
LABEL _l2752_:
    MOV %r0 result;
    MOV $RET %r0;
    RET;
}
func @@f682(args) {
    VAR @c711;
    ALLOC @c711;
    VAR %r0;
    VAR %r1;
    ALLOC @c710;
    MOV @c710 args;
    MOV_THIS thisArg;
    FUNC %r1 @@f686;
    PUSH %r1;
    MOV %r1 @c702;
    PUSH %r1;
    CALL_REG @c703 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f683() {
    VAR chainAll;
    VAR result;
    VAR actions;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV_THIS %r0;
    MOV %r1 "__chain__";
    MOV_PROP chainAll %r0 %r1;
    MOV %r1 @c704;
    MOV %r0 %r1;
    JIF %r1 _l2757_;
    MOV %r2 chainAll;
    LG_OR %r0 %r2;
LABEL _l2757_:
    JF %r0 _l2755_;
    MOV_THIS %r2;
    MOV %r3 "__wrapped__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c676 1 false;
    MOV result $RET;
    MOV_THIS %r3;
    MOV %r4 "__actions__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c75 1 false;
    MOV %r1 $RET;
    MOV %r2 result;
    MOV %r3 "__actions__";
    SET_KEY %r2 %r3 %r1;
    MOV actions %r1;
    NEW_OBJ %r1;
    MOV %r2 @c705;
    SET_KEY %r1 'func' %r2;
    MOV_CTX %r2 "arguments";
    SET_KEY %r1 'args' %r2;
    MOV %r2 @c676;
    SET_KEY %r1 'thisArg' %r2;
    PUSH %r1;
    MOV %r1 actions;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 chainAll;
    MOV %r2 result;
    MOV %r3 "__chain__";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 result;
    MOV $RET %r1;
    RET;
    JMP _l2756_;
LABEL _l2755_:
LABEL _l2756_:
    MOV_CTX %r2 "arguments";
    PUSH %r2;
    NEW_ARR %r2;
    MOV_THIS %r4;
    MOV %r5 "value";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    CALL_REG @c144 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c676;
    PUSH %r1;
    MOV %r1 @c705;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f684(value) {
    VAR result;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c706;
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r2 value;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    CALL_REG @c144 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c277;
    PUSH %r0;
    MOV %r0 @c707;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV result $RET;
    MOV %r2 @c689;
    MOV %r1 %r2;
    JF %r2 _l2760_;
    MOV %r3 @c708;
    LG_AND %r1 %r3;
LABEL _l2760_:
    JF %r1 _l2758_;
    MOV %r2 result;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    JMP _l2759_;
LABEL _l2758_:
    MOV %r0 result;
LABEL _l2759_:
    MOV $RET %r0;
    RET;
}
func @@f685(value) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c709;
    PUSH %r1;
    MOV %r3 value;
    PUSH %r3;
    CALL_REG @c69 1 false;
    MOV %r2 $RET;
    JF %r2 _l2761_;
    MOV %r1 value;
    JMP _l2762_;
LABEL _l2761_:
    NEW_ARR %r1;
LABEL _l2762_:
    PUSH %r1;
    MOV %r1 @c694;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f686(iteratee) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c710;
    PUSH %r1;
    MOV %r1 @c711;
    PUSH %r1;
    MOV %r1 @c278;
    PUSH %r1;
    CALL_REG @c159 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
