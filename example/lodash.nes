func @@main() {
    REG %r0;
    FUNC %r0 @@f0;
    PUSH %r0;
    FUNC %r0 @@f1;
    CALL_REG %r0 1 false;
    MOV $RET $RET;
    NEG $RET;
}
func @@f0() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 9;
    PUSH %r1;
    NEW_OBJ %r2;
    MOV %r4 1;
    NEW_ARR %r3;
    FUNC %r5 @@f2;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./store";
    MOV %r6 7;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./validations";
    MOV %r6 8;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "mqtt-packet";
    MOV %r6 86;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "readable-stream";
    MOV %r6 107;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 108;
    SET_KEY %r5 'reinterval' %r6;
    MOV %r6 135;
    SET_KEY %r5 'xtend' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 2;
    NEW_ARR %r3;
    FUNC %r5 @@f3;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "base64-js";
    MOV %r6 10;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r6 17;
    SET_KEY %r5 'duplexify' %r6;
    MOV %r7 "readable-stream";
    MOV %r6 107;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 3;
    NEW_ARR %r3;
    FUNC %r5 @@f4;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 12;
    SET_KEY %r5 'net' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 4;
    NEW_ARR %r3;
    FUNC %r5 @@f5;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 12;
    SET_KEY %r5 'tls' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 5;
    NEW_ARR %r3;
    FUNC %r5 @@f6;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 113;
    SET_KEY %r5 'url' %r6;
    MOV %r7 "websocket-stream";
    MOV %r6 132;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 6;
    NEW_ARR %r3;
    FUNC %r5 @@f7;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r6 17;
    SET_KEY %r5 'duplexify' %r6;
    MOV %r7 "readable-stream";
    MOV %r6 107;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 7;
    NEW_ARR %r3;
    FUNC %r5 @@f8;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r7 "es6-map";
    MOV %r6 67;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "readable-stream";
    MOV %r6 107;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 135;
    SET_KEY %r5 'xtend' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 8;
    NEW_ARR %r3;
    FUNC %r5 @@f9;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 9;
    NEW_ARR %r3;
    FUNC %r5 @@f10;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../client";
    MOV %r6 1;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../store";
    MOV %r6 7;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./ali";
    MOV %r6 2;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./tcp";
    MOV %r6 3;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./tls";
    MOV %r6 4;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./ws";
    MOV %r6 5;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./wx";
    MOV %r6 6;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 113;
    SET_KEY %r5 'url' %r6;
    MOV %r6 135;
    SET_KEY %r5 'xtend' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 10;
    NEW_ARR %r3;
    FUNC %r5 @@f11;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 11;
    NEW_ARR %r3;
    FUNC %r5 @@f12;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "readable-stream/duplex";
    MOV %r6 98;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 117;
    SET_KEY %r5 'util' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 12;
    NEW_ARR %r3;
    FUNC %r5 @@f13;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 13;
    NEW_ARR %r3;
    FUNC %r5 @@f14;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "base64-js";
    MOV %r6 10;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r6 80;
    SET_KEY %r5 'ieee754' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 14;
    NEW_ARR %r3;
    FUNC %r5 @@f15;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../../is-buffer/index.js";
    MOV %r6 82;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 15;
    NEW_ARR %r3;
    FUNC %r5 @@f16;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "es5-ext/object/copy";
    MOV %r6 39;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/map";
    MOV %r6 48;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/normalize-options";
    MOV %r6 49;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 16;
    NEW_ARR %r3;
    FUNC %r5 @@f17;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "es5-ext/object/assign";
    MOV %r6 36;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/is-callable";
    MOV %r6 42;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/normalize-options";
    MOV %r6 49;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/string/#/contains";
    MOV %r6 56;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 17;
    NEW_ARR %r3;
    FUNC %r5 @@f18;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r7 "end-of-stream";
    MOV %r6 18;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "readable-stream";
    MOV %r6 107;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "stream-shift";
    MOV %r6 110;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 18;
    NEW_ARR %r3;
    FUNC %r5 @@f19;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 91;
    SET_KEY %r5 'once' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 19;
    NEW_ARR %r3;
    FUNC %r5 @@f20;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../../object/valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 20;
    NEW_ARR %r3;
    FUNC %r5 @@f21;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../../number/is-nan";
    MOV %r6 30;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../number/to-pos-integer";
    MOV %r6 34;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../object/valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 21;
    NEW_ARR %r3;
    FUNC %r5 @@f22;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 22;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 23;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 22;
    NEW_ARR %r3;
    FUNC %r5 @@f23;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 23;
    NEW_ARR %r3;
    FUNC %r5 @@f24;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../../function/is-arguments";
    MOV %r6 24;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../function/is-function";
    MOV %r6 25;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../number/to-pos-integer";
    MOV %r6 34;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../object/is-value";
    MOV %r6 44;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../object/valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../object/valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../../string/is-string";
    MOV %r6 59;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 24;
    NEW_ARR %r3;
    FUNC %r5 @@f25;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 25;
    NEW_ARR %r3;
    FUNC %r5 @@f26;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./noop";
    MOV %r6 26;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 26;
    NEW_ARR %r3;
    FUNC %r5 @@f27;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 27;
    NEW_ARR %r3;
    FUNC %r5 @@f28;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 28;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 29;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 28;
    NEW_ARR %r3;
    FUNC %r5 @@f29;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 29;
    NEW_ARR %r3;
    FUNC %r5 @@f30;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 30;
    NEW_ARR %r3;
    FUNC %r5 @@f31;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 31;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 32;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 31;
    NEW_ARR %r3;
    FUNC %r5 @@f32;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 32;
    NEW_ARR %r3;
    FUNC %r5 @@f33;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 33;
    NEW_ARR %r3;
    FUNC %r5 @@f34;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../math/sign";
    MOV %r6 27;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 34;
    NEW_ARR %r3;
    FUNC %r5 @@f35;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./to-integer";
    MOV %r6 33;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 35;
    NEW_ARR %r3;
    FUNC %r5 @@f36;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 36;
    NEW_ARR %r3;
    FUNC %r5 @@f37;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 37;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 38;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 37;
    NEW_ARR %r3;
    FUNC %r5 @@f38;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 38;
    NEW_ARR %r3;
    FUNC %r5 @@f39;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../keys";
    MOV %r6 45;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 39;
    NEW_ARR %r3;
    FUNC %r5 @@f40;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../array/from";
    MOV %r6 21;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./assign";
    MOV %r6 36;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 40;
    NEW_ARR %r3;
    FUNC %r5 @@f41;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./set-prototype-of/is-implemented";
    MOV %r6 52;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./set-prototype-of/shim";
    MOV %r6 53;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 41;
    NEW_ARR %r3;
    FUNC %r5 @@f42;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_iterate";
    MOV %r6 35;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 42;
    NEW_ARR %r3;
    FUNC %r5 @@f43;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 43;
    NEW_ARR %r3;
    FUNC %r5 @@f44;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-value";
    MOV %r6 44;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 44;
    NEW_ARR %r3;
    FUNC %r5 @@f45;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../function/noop";
    MOV %r6 26;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 45;
    NEW_ARR %r3;
    FUNC %r5 @@f46;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 46;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 47;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 46;
    NEW_ARR %r3;
    FUNC %r5 @@f47;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 47;
    NEW_ARR %r3;
    FUNC %r5 @@f48;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../is-value";
    MOV %r6 44;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 48;
    NEW_ARR %r3;
    FUNC %r5 @@f49;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./for-each";
    MOV %r6 41;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 49;
    NEW_ARR %r3;
    FUNC %r5 @@f50;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-value";
    MOV %r6 44;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 50;
    NEW_ARR %r3;
    FUNC %r5 @@f51;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 51;
    NEW_ARR %r3;
    FUNC %r5 @@f52;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 52;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 53;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 52;
    NEW_ARR %r3;
    FUNC %r5 @@f53;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 53;
    NEW_ARR %r3;
    FUNC %r5 @@f54;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../create";
    MOV %r6 40;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../is-object";
    MOV %r6 43;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 54;
    NEW_ARR %r3;
    FUNC %r5 @@f55;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 55;
    NEW_ARR %r3;
    FUNC %r5 @@f56;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-value";
    MOV %r6 44;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 56;
    NEW_ARR %r3;
    FUNC %r5 @@f57;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 57;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./shim";
    MOV %r6 58;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 57;
    NEW_ARR %r3;
    FUNC %r5 @@f58;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 58;
    NEW_ARR %r3;
    FUNC %r5 @@f59;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 59;
    NEW_ARR %r3;
    FUNC %r5 @@f60;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 60;
    NEW_ARR %r3;
    FUNC %r5 @@f61;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./";
    MOV %r6 63;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    MOV %r7 "es5-ext/object/set-prototype-of";
    MOV %r6 51;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/string/#/contains";
    MOV %r6 56;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 61;
    NEW_ARR %r3;
    FUNC %r5 @@f62;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./get";
    MOV %r6 62;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/function/is-arguments";
    MOV %r6 24;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/string/is-string";
    MOV %r6 59;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 62;
    NEW_ARR %r3;
    FUNC %r5 @@f63;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./array";
    MOV %r6 60;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./string";
    MOV %r6 65;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./valid-iterable";
    MOV %r6 66;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/function/is-arguments";
    MOV %r6 24;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/string/is-string";
    MOV %r6 59;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 63;
    NEW_ARR %r3;
    FUNC %r5 @@f64;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    MOV %r7 "d/auto-bind";
    MOV %r6 15;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/array/#/clear";
    MOV %r6 19;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/assign";
    MOV %r6 36;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 64;
    NEW_ARR %r3;
    FUNC %r5 @@f65;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "es5-ext/function/is-arguments";
    MOV %r6 24;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/is-value";
    MOV %r6 44;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/string/is-string";
    MOV %r6 59;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 65;
    NEW_ARR %r3;
    FUNC %r5 @@f66;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./";
    MOV %r6 63;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    MOV %r7 "es5-ext/object/set-prototype-of";
    MOV %r6 51;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 66;
    NEW_ARR %r3;
    FUNC %r5 @@f67;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-iterable";
    MOV %r6 64;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 67;
    NEW_ARR %r3;
    FUNC %r5 @@f68;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 68;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./polyfill";
    MOV %r6 72;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 68;
    NEW_ARR %r3;
    FUNC %r5 @@f69;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 69;
    NEW_ARR %r3;
    FUNC %r5 @@f70;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 70;
    NEW_ARR %r3;
    FUNC %r5 @@f71;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "es5-ext/object/primitive-set";
    MOV %r6 50;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 71;
    NEW_ARR %r3;
    FUNC %r5 @@f72;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./iterator-kinds";
    MOV %r6 70;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    MOV %r7 "es5-ext/object/set-prototype-of";
    MOV %r6 51;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-iterator";
    MOV %r6 63;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 72;
    NEW_ARR %r3;
    FUNC %r5 @@f73;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-native-implemented";
    MOV %r6 69;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/iterator";
    MOV %r6 71;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    MOV %r7 "es5-ext/array/#/clear";
    MOV %r6 19;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/array/#/e-index-of";
    MOV %r6 20;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/set-prototype-of";
    MOV %r6 51;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es5-ext/object/valid-value";
    MOV %r6 55;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-iterator/for-of";
    MOV %r6 61;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-iterator/valid-iterable";
    MOV %r6 66;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "es6-symbol";
    MOV %r6 73;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "event-emitter";
    MOV %r6 78;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 73;
    NEW_ARR %r3;
    FUNC %r5 @@f74;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-implemented";
    MOV %r6 74;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./polyfill";
    MOV %r6 76;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 74;
    NEW_ARR %r3;
    FUNC %r5 @@f75;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 75;
    NEW_ARR %r3;
    FUNC %r5 @@f76;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 76;
    NEW_ARR %r3;
    FUNC %r5 @@f77;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./validate-symbol";
    MOV %r6 77;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 77;
    NEW_ARR %r3;
    FUNC %r5 @@f78;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./is-symbol";
    MOV %r6 75;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 78;
    NEW_ARR %r3;
    FUNC %r5 @@f79;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 16;
    SET_KEY %r5 'd' %r6;
    MOV %r7 "es5-ext/object/valid-callable";
    MOV %r6 54;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 79;
    NEW_ARR %r3;
    FUNC %r5 @@f80;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 80;
    NEW_ARR %r3;
    FUNC %r5 @@f81;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 81;
    NEW_ARR %r3;
    FUNC %r5 @@f82;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 82;
    NEW_ARR %r3;
    FUNC %r5 @@f83;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 83;
    NEW_ARR %r3;
    FUNC %r5 @@f84;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 84;
    NEW_ARR %r3;
    FUNC %r5 @@f85;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 85;
    NEW_ARR %r3;
    FUNC %r5 @@f86;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./writeToStream";
    MOV %r6 90;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 86;
    NEW_ARR %r3;
    FUNC %r5 @@f87;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./generate";
    MOV %r6 85;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./parser";
    MOV %r6 89;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./writeToStream";
    MOV %r6 90;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 87;
    NEW_ARR %r3;
    FUNC %r5 @@f88;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 88;
    NEW_ARR %r3;
    FUNC %r5 @@f89;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 89;
    NEW_ARR %r3;
    FUNC %r5 @@f90;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./constants";
    MOV %r6 84;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./packet";
    MOV %r6 88;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 11;
    SET_KEY %r5 'bl' %r6;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 90;
    NEW_ARR %r3;
    FUNC %r5 @@f91;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./constants";
    MOV %r6 84;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./numbers";
    MOV %r6 87;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "process-nextick-args";
    MOV %r6 92;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 91;
    NEW_ARR %r3;
    FUNC %r5 @@f92;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 134;
    SET_KEY %r5 'wrappy' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 92;
    NEW_ARR %r3;
    FUNC %r5 @@f93;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 93;
    NEW_ARR %r3;
    FUNC %r5 @@f94;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 94;
    NEW_ARR %r3;
    FUNC %r5 @@f95;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 95;
    NEW_ARR %r3;
    FUNC %r5 @@f96;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 96;
    NEW_ARR %r3;
    FUNC %r5 @@f97;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 97;
    NEW_ARR %r3;
    FUNC %r5 @@f98;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./decode";
    MOV %r6 95;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./encode";
    MOV %r6 96;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 98;
    NEW_ARR %r3;
    FUNC %r5 @@f99;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./lib/_stream_duplex.js";
    MOV %r6 99;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 99;
    NEW_ARR %r3;
    FUNC %r5 @@f100;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_readable";
    MOV %r6 101;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./_stream_writable";
    MOV %r6 103;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "core-util-is";
    MOV %r6 14;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "process-nextick-args";
    MOV %r6 92;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 100;
    NEW_ARR %r3;
    FUNC %r5 @@f101;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_transform";
    MOV %r6 102;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "core-util-is";
    MOV %r6 14;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 101;
    NEW_ARR %r3;
    FUNC %r5 @@f102;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_duplex";
    MOV %r6 99;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/BufferList";
    MOV %r6 104;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/destroy";
    MOV %r6 105;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/stream";
    MOV %r6 106;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r7 "core-util-is";
    MOV %r6 14;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r6 83;
    SET_KEY %r5 'isarray' %r6;
    MOV %r7 "process-nextick-args";
    MOV %r6 92;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "string_decoder/";
    MOV %r6 111;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 12;
    SET_KEY %r5 'util' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 102;
    NEW_ARR %r3;
    FUNC %r5 @@f103;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_duplex";
    MOV %r6 99;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "core-util-is";
    MOV %r6 14;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 103;
    NEW_ARR %r3;
    FUNC %r5 @@f104;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_duplex";
    MOV %r6 99;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/destroy";
    MOV %r6 105;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/stream";
    MOV %r6 106;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r7 "core-util-is";
    MOV %r6 14;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "process-nextick-args";
    MOV %r6 92;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 112;
    SET_KEY %r5 'timers' %r6;
    MOV %r7 "util-deprecate";
    MOV %r6 115;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 104;
    NEW_ARR %r3;
    FUNC %r5 @@f105;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 12;
    SET_KEY %r5 'util' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 105;
    NEW_ARR %r3;
    FUNC %r5 @@f106;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "process-nextick-args";
    MOV %r6 92;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 106;
    NEW_ARR %r3;
    FUNC %r5 @@f107;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 107;
    NEW_ARR %r3;
    FUNC %r5 @@f108;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./lib/_stream_duplex.js";
    MOV %r6 99;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_passthrough.js";
    MOV %r6 100;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_readable.js";
    MOV %r6 101;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_transform.js";
    MOV %r6 102;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_writable.js";
    MOV %r6 103;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 108;
    NEW_ARR %r3;
    FUNC %r5 @@f109;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 109;
    NEW_ARR %r3;
    FUNC %r5 @@f110;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 110;
    NEW_ARR %r3;
    FUNC %r5 @@f111;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 111;
    NEW_ARR %r3;
    FUNC %r5 @@f112;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 112;
    NEW_ARR %r3;
    FUNC %r5 @@f113;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "process/browser.js";
    MOV %r6 93;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 112;
    SET_KEY %r5 'timers' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 113;
    NEW_ARR %r3;
    FUNC %r5 @@f114;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./util";
    MOV %r6 114;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 94;
    SET_KEY %r5 'punycode' %r6;
    MOV %r6 97;
    SET_KEY %r5 'querystring' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 114;
    NEW_ARR %r3;
    FUNC %r5 @@f115;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 115;
    NEW_ARR %r3;
    FUNC %r5 @@f116;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 116;
    NEW_ARR %r3;
    FUNC %r5 @@f117;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 117;
    NEW_ARR %r3;
    FUNC %r5 @@f118;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./support/isBuffer";
    MOV %r6 116;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 118;
    NEW_ARR %r3;
    FUNC %r5 @@f119;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 119;
    NEW_ARR %r3;
    FUNC %r5 @@f120;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 120;
    NEW_ARR %r3;
    FUNC %r5 @@f121;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_readable";
    MOV %r6 122;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./_stream_writable";
    MOV %r6 124;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 121;
    NEW_ARR %r3;
    FUNC %r5 @@f122;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./_stream_transform";
    MOV %r6 123;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 122;
    NEW_ARR %r3;
    FUNC %r5 @@f123;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../errors";
    MOV %r6 118;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "../experimentalWarning";
    MOV %r6 119;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./_stream_duplex";
    MOV %r6 120;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/async_iterator";
    MOV %r6 125;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/buffer_list";
    MOV %r6 126;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/destroy";
    MOV %r6 127;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/state";
    MOV %r6 129;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/stream";
    MOV %r6 130;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "string_decoder/";
    MOV %r6 111;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 12;
    SET_KEY %r5 'util' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 123;
    NEW_ARR %r3;
    FUNC %r5 @@f124;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../errors";
    MOV %r6 118;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./_stream_duplex";
    MOV %r6 120;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 124;
    NEW_ARR %r3;
    FUNC %r5 @@f125;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../errors";
    MOV %r6 118;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./_stream_duplex";
    MOV %r6 120;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/destroy";
    MOV %r6 127;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/state";
    MOV %r6 129;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./internal/streams/stream";
    MOV %r6 130;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r6 81;
    SET_KEY %r5 'inherits' %r6;
    MOV %r7 "util-deprecate";
    MOV %r6 115;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 125;
    NEW_ARR %r3;
    FUNC %r5 @@f126;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./end-of-stream";
    MOV %r6 128;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 126;
    NEW_ARR %r3;
    FUNC %r5 @@f127;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 13;
    SET_KEY %r5 'buffer' %r6;
    MOV %r6 12;
    SET_KEY %r5 'util' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 127;
    NEW_ARR %r3;
    FUNC %r5 @@f128;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 128;
    NEW_ARR %r3;
    FUNC %r5 @@f129;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../../../errors";
    MOV %r6 118;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 129;
    NEW_ARR %r3;
    FUNC %r5 @@f130;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "../../../errors";
    MOV %r6 118;
    SET_KEY %r5 %r7 %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 130;
    NEW_ARR %r3;
    FUNC %r5 @@f131;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 106;
    SET_KEY %r5 'dup' %r6;
    MOV %r6 79;
    SET_KEY %r5 'events' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 131;
    NEW_ARR %r3;
    FUNC %r5 @@f132;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r7 "./lib/_stream_duplex.js";
    MOV %r6 120;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_passthrough.js";
    MOV %r6 121;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_readable.js";
    MOV %r6 122;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_transform.js";
    MOV %r6 123;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "./lib/_stream_writable.js";
    MOV %r6 124;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 107;
    SET_KEY %r5 'dup' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 132;
    NEW_ARR %r3;
    FUNC %r5 @@f133;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    MOV %r6 93;
    SET_KEY %r5 '_process' %r6;
    MOV %r6 17;
    SET_KEY %r5 'duplexify' %r6;
    MOV %r7 "readable-stream";
    MOV %r6 131;
    SET_KEY %r5 %r7 %r6;
    MOV %r7 "safe-buffer";
    MOV %r6 109;
    SET_KEY %r5 %r7 %r6;
    MOV %r6 133;
    SET_KEY %r5 'ws' %r6;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 133;
    NEW_ARR %r3;
    FUNC %r5 @@f134;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 134;
    NEW_ARR %r3;
    FUNC %r5 @@f135;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    MOV %r4 135;
    NEW_ARR %r3;
    FUNC %r5 @@f136;
    SET_KEY %r3 0 %r5;
    NEW_OBJ %r5;
    SET_KEY %r3 1 %r5;
    SET_KEY %r2 %r4 %r3;
    PUSH %r2;
    NEW_OBJ %r2;
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r3 9;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    FUNC %r3 @@f137;
    CALL_REG %r3 0 false;
    MOV %r2 $RET;
    CALL_REG %r2 3 false;
    MOV %r1 $RET;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r1 "object";
    MOV_CTX %r2 "exports";
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2_;
    MOV %r2 "undefined";
    MOV_CTX %r3 "module";
    TYPE_OF %r3;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2_:
    JF %r0 _l1_;
    CALL_REG .e 0 false;
    MOV %r1 $RET;
    MOV_CTX %r2 "module";
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    JMP _l0_;
LABEL _l1_:
    MOV %r2 "function";
    MOV_CTX %r3 "define";
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4_;
    MOV_CTX %r4 "define";
    MOV %r5 "amd";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l4_:
    JF %r1 _l3_;
    NEW_ARR %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'define' 2 false;
    JMP _l0_;
LABEL _l3_:
    CALL_REG .e 0 false;
    MOV %r2 $RET;
    MOV %r5 "undefined";
    MOV_CTX %r6 "window";
    TYPE_OF %r6;
    WNE %r5 %r6;
    JF %r5 _l6_;
    MOV_CTX %r3 "window";
    JMP _l5_;
LABEL _l6_:
    MOV %r6 "undefined";
    MOV_CTX %r7 "global";
    TYPE_OF %r7;
    WNE %r6 %r7;
    JF %r6 _l7_;
    MOV_CTX %r3 "global";
    JMP _l5_;
LABEL _l7_:
    MOV %r7 "undefined";
    MOV_CTX %r8 "self";
    TYPE_OF %r8;
    WNE %r7 %r8;
    JF %r7 _l8_;
    MOV_CTX %r3 "self";
    JMP _l5_;
LABEL _l8_:
    MOV_THIS %r3;
LABEL _l5_:
    MOV %r4 "mqtt";
    SET_KEY %r3 %r4 %r2;
LABEL _l0_:
}
func @@f2(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l10_;
    MOV_CTX %r0 "global";
    JMP _l9_;
LABEL _l10_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l11_;
    MOV_CTX %r0 "self";
    JMP _l9_;
LABEL _l11_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l12_;
    MOV_CTX %r0 "window";
    JMP _l9_;
LABEL _l12_:
    NEW_OBJ %r0;
LABEL _l9_:
    PUSH %r0;
    FUNC %r0 @@f138;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f3(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r3 "buffer";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "Buffer";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f139;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f4(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "net";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC %r0 @@f140;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f5(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "tls";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC %r0 @@f141;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f6(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f142;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f7(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r3 "buffer";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "Buffer";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f143;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f8(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f144;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f9(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @n @@f145;
    NEW_OBJ %r0;
    FUNC %r1 @@f146;
    SET_KEY %r0 'validateTopics' %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f10(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f147;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f11(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    VAR s;
    VAR a;
    VAR u;
    CLS @c;
    CLS @l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    FUNC @c @@f151;
    FUNC @l @@f152;
    FUNC %r0 @@f148;
    MOV %r1 .r;
    MOV %r2 "byteLength";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f149;
    MOV %r1 .r;
    MOV %r2 "toByteArray";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f150;
    MOV %r1 .r;
    MOV %r2 "fromByteArray";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR @n;
    NEW_ARR @i;
    MOV %r0 "undefined";
    MOV_CTX %r1 "Uint8Array";
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l17_;
    MOV_CTX @o "Uint8Array";
    JMP _l16_;
LABEL _l17_:
    MOV_CTX @o "Array";
LABEL _l16_:
    MOV s "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    MOV a 0;
    MOV %r0 s;
    MOV %r1 "length";
    MOV_PROP u %r0 %r1;
LABEL _l13_:
    MOV %r0 a;
    MOV %r1 u;
    LT %r0 %r1;
    JF %r0 _l14_;
LABEL _l18_:
    MOV %r2 s;
    MOV %r3 a;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @n;
    MOV %r3 a;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 a;
    MOV %r2 @i;
    MOV %r4 a;
    PUSH %r4;
    MOV %r4 s;
    MOV %r5 "charCodeAt";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    SET_KEY %r2 %r3 %r1;
LABEL _l15_:
    MOV %r1 a;
    ADD %r1 1;
    MOV a %r1;
    JMP _l13_;
LABEL _l14_:
    MOV %r0 62;
    MOV %r1 @i;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 "-";
    MOV %r4 "charCodeAt";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 63;
    MOV %r1 @i;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 "_";
    MOV %r4 "charCodeAt";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 %r2 %r0;
}
func @@f12(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @s @@f153;
    MOV %r0 "readable-stream/duplex";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "util";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @o %r0 %r1;
    MOV %r0 @s;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 i;
    MOV %r1 "inherits";
    CALL_VAR %r0 %r1 2 false;
    FUNC %r0 @@f154;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_offset";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f155;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "append";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f156;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_appendBuffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f157;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f158;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f159;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f160;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f161;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "slice";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f162;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "copy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f163;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "shallowSlice";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f164;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "toString";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f165;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "consume";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f166;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "duplicate";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f167;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f168;
    CALL_REG %r0 0 false;
    MOV %r0 @s;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f13(.e, .t, .r) {
}
func @@f14(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @r;
    MOV @r .r;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r3 "buffer";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "Buffer";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f169;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f15(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @r;
    MOV @r .r;
    MOV_THIS %r0;
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r2 "../../is-buffer/index.js";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'isBuffer' %r1;
    PUSH %r0;
    FUNC %r0 @@f170;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f16(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "es5-ext/object/copy";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "es5-ext/object/normalize-options";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "es5-ext/object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "es5-ext/object/map";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r0 "es5-ext/object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV %r0 "es5-ext/object/valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @c $RET;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "bind";
    MOV_PROP @l %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @f %r0 %r1;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "hasOwnProperty";
    MOV_PROP @h %r0 %r1;
    FUNC %r0 @@f171;
    MOV @n %r0;
    FUNC %r0 @@f172;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f17(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "es5-ext/object/assign";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "es5-ext/object/normalize-options";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "es5-ext/object/is-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "es5-ext/string/#/contains";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    FUNC %r0 @@f173;
    FUNC %r3 @@f174;
    MOV %r4 .t;
    MOV %r5 "exports";
    SET_KEY %r4 %r5 %r3;
    MOV %r1 %r3;
    MOV %r2 "gs";
    SET_KEY %r1 %r2 %r0;
}
func @@f18(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r3 "buffer";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "Buffer";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f175;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f19(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "once";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC @i @@f176;
    FUNC @o @@f177;
    MOV %r0 @o;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f20(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "../../object/valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC %r0 @@f178;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f21(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "../../number/is-nan";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "../../number/to-pos-integer";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "../../object/valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV_CTX %r2 "Array";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "indexOf";
    MOV_PROP @s %r0 %r1;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "hasOwnProperty";
    MOV_PROP @a %r0 %r1;
    MOV_CTX %r0 "Math";
    MOV %r1 "abs";
    MOV_PROP @u %r0 %r1;
    MOV_CTX %r0 "Math";
    MOV %r1 "floor";
    MOV_PROP @c %r0 %r1;
    FUNC %r0 @@f179;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f22(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l20_;
    MOV_CTX %r2 "Array";
    MOV %r3 "from";
    MOV_PROP %r0 %r2 %r3;
    JMP _l19_;
LABEL _l20_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l19_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f23(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f180;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f24(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 "es6-symbol";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "iterator";
    MOV_PROP @n %r0 %r1;
    MOV %r0 "../../function/is-arguments";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "../../function/is-function";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "../../number/to-pos-integer";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "../../object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r0 "../../object/valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV %r0 "../../object/is-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @c $RET;
    MOV %r0 "../../string/is-string";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @l $RET;
    MOV_CTX %r0 "Array";
    MOV %r1 "isArray";
    MOV_PROP @f %r0 %r1;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    MOV_PROP @h %r0 %r1;
    NEW_OBJ @p;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @p 'configurable' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @p 'enumerable' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @p 'writable' %r0;
    MOV %r0 null;
    SET_KEY @p 'value' %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @d %r0 %r1;
    FUNC %r0 @@f181;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f25(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "toString";
    MOV_PROP @n %r0 %r1;
    FUNC %r1 @@f182;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV @i $RET;
    FUNC %r0 @@f183;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f26(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "toString";
    MOV_PROP @n %r0 %r1;
    MOV %r1 "./noop";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV @i $RET;
    FUNC %r0 @@f184;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f27(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f185;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f28(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l22_;
    MOV_CTX %r2 "Math";
    MOV %r3 "sign";
    MOV_PROP %r0 %r2 %r3;
    JMP _l21_;
LABEL _l22_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l21_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f29(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f186;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f30(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f187;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f31(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l24_;
    MOV_CTX %r2 "Number";
    MOV %r3 "isNaN";
    MOV_PROP %r0 %r2 %r3;
    JMP _l23_;
LABEL _l24_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l23_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f32(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f188;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f33(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f189;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f34(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "../math/sign";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV_CTX %r0 "Math";
    MOV %r1 "abs";
    MOV_PROP @i %r0 %r1;
    MOV_CTX %r0 "Math";
    MOV %r1 "floor";
    MOV_PROP @o %r0 %r1;
    FUNC %r0 @@f190;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f35(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "./to-integer";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV_CTX %r0 "Math";
    MOV %r1 "max";
    MOV_PROP @i %r0 %r1;
    FUNC %r0 @@f191;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f36(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "./valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "./valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "bind";
    MOV_PROP @o %r0 %r1;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    MOV_PROP @s %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "keys";
    MOV_PROP @a %r0 %r1;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "propertyIsEnumerable";
    MOV_PROP @u %r0 %r1;
    FUNC %r0 @@f192;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f37(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l26_;
    MOV_CTX %r2 "Object";
    MOV %r3 "assign";
    MOV_PROP %r0 %r2 %r3;
    JMP _l25_;
LABEL _l26_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l25_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f38(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f193;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f39(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "../keys";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "../valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV_CTX %r0 "Math";
    MOV %r1 "max";
    MOV_PROP @o %r0 %r1;
    FUNC %r0 @@f194;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f40(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "../array/from";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "./assign";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "./valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    FUNC %r0 @@f195;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f41(.e, .t, .r) {
    VAR n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @a %r0 %r1;
    MOV %r2 "./set-prototype-of/is-implemented";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    JIF %r0 _l27_;
    MOV %r3 "./set-prototype-of/shim";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    MOV n %r2;
    MOV %r1 %r2;
LABEL _l27_:
    MOV %r1 n;
    JF %r1 _l29_;
    MOV %r2 1;
    MOV %r4 n;
    MOV %r5 "level";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    JF %r2 _l31_;
    MOV %r0 @a;
    JMP _l30_;
LABEL _l31_:
    NEW_OBJ %r3;
    MOV @i %r3;
    NEW_OBJ %r3;
    MOV @o %r3;
    NEW_OBJ %r3;
    MOV %r4 1;
    NEG %r4;
    SET_KEY %r3 'configurable' %r4;
    MOV %r4 1;
    NEG %r4;
    SET_KEY %r3 'enumerable' %r4;
    MOV %r4 0;
    NEG %r4;
    SET_KEY %r3 'writable' %r4;
    MOV %r4 0;
    VOID %r4;
    SET_KEY %r3 'value' %r4;
    MOV @s %r3;
    FUNC %r3 @@f196;
    PUSH %r3;
    MOV_CTX %r6 "Object";
    MOV %r7 "prototype";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "getOwnPropertyNames";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "forEach";
    CALL_VAR %r3 %r4 1 false;
    MOV %r3 @i;
    PUSH %r3;
    MOV %r3 @o;
    PUSH %r3;
    MOV_CTX %r3 "Object";
    MOV %r4 "defineProperties";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 n;
    PUSH %r3;
    MOV %r3 "nullPolyfill";
    PUSH %r3;
    NEW_OBJ %r3;
    MOV %r4 1;
    NEG %r4;
    SET_KEY %r3 'configurable' %r4;
    MOV %r4 1;
    NEG %r4;
    SET_KEY %r3 'enumerable' %r4;
    MOV %r4 1;
    NEG %r4;
    SET_KEY %r3 'writable' %r4;
    MOV %r4 @i;
    SET_KEY %r3 'value' %r4;
    PUSH %r3;
    MOV_CTX %r3 "Object";
    MOV %r4 "defineProperty";
    CALL_VAR %r3 %r4 3 false;
    FUNC %r0 @@f197;
LABEL _l30_:
    JMP _l28_;
LABEL _l29_:
    MOV %r0 @a;
LABEL _l28_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f42(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "forEach";
    PUSH %r1;
    MOV %r2 "./_iterate";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f43(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f198;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f44(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "./is-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    NEW_OBJ @i;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @i 'function' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @i 'object' %r0;
    FUNC %r0 @@f199;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f45(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "../function/noop";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 0 false;
    MOV @n $RET;
    FUNC %r0 @@f200;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f46(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l33_;
    MOV_CTX %r2 "Object";
    MOV %r3 "keys";
    MOV_PROP %r0 %r2 %r3;
    JMP _l32_;
LABEL _l33_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l32_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f47(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @e;
    MOV @e .e;
    FUNC %r0 @@f201;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f48(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "../is-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV_CTX %r0 "Object";
    MOV %r1 "keys";
    MOV_PROP @i %r0 %r1;
    FUNC %r0 @@f202;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f49(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "./valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "./for-each";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    MOV_PROP @o %r0 %r1;
    FUNC %r0 @@f203;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f50(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "./is-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV_CTX %r2 "Array";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "forEach";
    MOV_PROP @i %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @o %r0 %r1;
    FUNC %r0 @@f204;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f51(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "Array";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "forEach";
    MOV_PROP @n %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @i %r0 %r1;
    FUNC %r0 @@f205;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f52(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l35_;
    MOV_CTX %r2 "Object";
    MOV %r3 "setPrototypeOf";
    MOV_PROP %r0 %r2 %r3;
    JMP _l34_;
LABEL _l35_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l34_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f53(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @n %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "getPrototypeOf";
    MOV_PROP @i %r0 %r1;
    NEW_OBJ @o;
    FUNC %r0 @@f206;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f54(.e, .t, .r) {
    CLS @n;
    VAR i;
    VAR o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @e;
    MOV @e .e;
    MOV %r0 "../is-object";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @a $RET;
    MOV %r0 "../valid-value";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @u $RET;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "isPrototypeOf";
    MOV_PROP @c %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @l %r0 %r1;
    NEW_OBJ @f;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @f 'configurable' %r0;
    MOV %r0 1;
    NEG %r0;
    SET_KEY @f 'enumerable' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @f 'writable' %r0;
    MOV %r0 0;
    VOID %r0;
    SET_KEY @f 'value' %r0;
    FUNC %r0 @@f207;
    MOV @n %r0;
    FUNC %r3 @@f208;
    CALL_REG %r3 0 false;
    MOV %r2 $RET;
    MOV i %r2;
    MOV %r1 %r2;
    JF %r1 _l37_;
    MOV %r2 2;
    MOV %r4 i;
    MOV %r5 "level";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l39_;
    MOV %r4 i;
    MOV %r5 "set";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l41_;
    MOV %r5 i;
    MOV %r6 "set";
    MOV_PROP %r4 %r5 %r6;
    MOV @s %r4;
    FUNC %r4 @@f209;
    MOV o %r4;
    JMP _l40_;
LABEL _l41_:
    FUNC %r4 @@f210;
    MOV o %r4;
LABEL _l40_:
    JMP _l38_;
LABEL _l39_:
    FUNC %r3 @@f211;
    MOV o %r3;
LABEL _l38_:
    MOV %r2 o;
    PUSH %r2;
    MOV %r2 "level";
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'configurable' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'enumerable' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'writable' %r3;
    MOV %r4 i;
    MOV %r5 "level";
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r2 'value' %r3;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "defineProperty";
    CALL_VAR %r2 %r3 3 false;
    MOV %r0 $RET;
    JMP _l36_;
LABEL _l37_:
    MOV %r0 null;
LABEL _l36_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "../create";
    PUSH %r0;
    CALL_REG @e 1 false;
}
func @@f55(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f212;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f56(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "./is-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC %r0 @@f213;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f57(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l43_;
    MOV_CTX %r4 "String";
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "contains";
    MOV_PROP %r0 %r2 %r3;
    JMP _l42_;
LABEL _l43_:
    MOV %r2 "./shim";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l42_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f58(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV @n "razdwatrzy";
    FUNC %r0 @@f214;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f59(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "String";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "indexOf";
    MOV_PROP @n %r0 %r1;
    FUNC %r0 @@f215;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f60(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "toString";
    MOV_PROP @n %r0 %r1;
    MOV %r0 "";
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV @i $RET;
    FUNC %r0 @@f216;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f61(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    CLS @s;
    VAR a;
    CLS @u;
    CLS @c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "es5-ext/object/set-prototype-of";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r0 "es5-ext/string/#/contains";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "es6-symbol";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV a $RET;
    MOV %r0 "./";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @c %r0 %r1;
    FUNC %r1 @@f217;
    MOV %r2 .t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV @n %r0;
    MOV %r0 i;
    JF %r0 _l44_;
    MOV %r2 @n;
    PUSH %r2;
    MOV %r2 @u;
    PUSH %r2;
    CALL_REG i 2 false;
    MOV %r1 $RET;
LABEL _l44_:
    MOV %r2 @n;
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "constructor";
    DEL %r0 %r1;
    MOV %r2 @u;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    FUNC %r3 @@f218;
    PUSH %r3;
    CALL_REG @s 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_resolve' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "create";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV %r1 @n;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 a;
    MOV %r2 "toStringTag";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r1 "Array Iterator";
    PUSH %r1;
    CALL_REG @s 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @c 3 false;
}
func @@f62(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "es5-ext/function/is-arguments";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "es5-ext/object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "es5-ext/string/is-string";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "./get";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV_CTX %r0 "Array";
    MOV %r1 "isArray";
    MOV_PROP @a %r0 %r1;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    MOV_PROP @u %r0 %r1;
    MOV_CTX %r2 "Array";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "some";
    MOV_PROP @c %r0 %r1;
    FUNC %r0 @@f219;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f63(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "es5-ext/function/is-arguments";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "es5-ext/string/is-string";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "./array";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "./string";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "./valid-iterable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r2 "es6-symbol";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "iterator";
    MOV_PROP @u %r0 %r1;
    FUNC %r0 @@f220;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f64(.e, .t, .r) {
    CLS @n;
    CLS @i;
    VAR o;
    CLS @s;
    CLS @a;
    CLS @u;
    VAR c;
    CLS @l;
    CLS @f;
    CLS @h;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "es5-ext/array/#/clear";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "es5-ext/object/assign";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV o $RET;
    MOV %r0 "es5-ext/object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "es5-ext/object/valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV %r0 "d/auto-bind";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV c $RET;
    MOV %r0 "es6-symbol";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @l $RET;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @f %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperties";
    MOV_PROP @h %r0 %r1;
    FUNC %r1 @@f221;
    MOV @n %r1;
    MOV %r0 %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 @n;
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "constructor";
    DEL %r0 %r1;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    NEW_OBJ %r1;
    FUNC %r3 @@f222;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_next' %r2;
    FUNC %r3 @@f223;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'next' %r2;
    FUNC %r3 @@f224;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_createResult' %r2;
    FUNC %r3 @@f225;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_resolve' %r2;
    FUNC %r3 @@f226;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_unBind' %r2;
    FUNC %r3 @@f227;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'toString' %r2;
    PUSH %r1;
    NEW_OBJ %r2;
    FUNC %r4 @@f228;
    PUSH %r4;
    CALL_REG @u 1 false;
    MOV %r3 $RET;
    SET_KEY %r2 '_onAdd' %r3;
    FUNC %r4 @@f229;
    PUSH %r4;
    CALL_REG @u 1 false;
    MOV %r3 $RET;
    SET_KEY %r2 '_onDelete' %r3;
    FUNC %r4 @@f230;
    PUSH %r4;
    CALL_REG @u 1 false;
    MOV %r3 $RET;
    SET_KEY %r2 '_onClear' %r3;
    PUSH %r2;
    CALL_REG c 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG o 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @h 2 false;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 @l;
    MOV %r2 "iterator";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r1 @@f231;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @f 3 false;
}
func @@f65(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "es5-ext/function/is-arguments";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "es5-ext/object/is-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "es5-ext/string/is-string";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r2 "es6-symbol";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "iterator";
    MOV_PROP @s %r0 %r1;
    MOV_CTX %r0 "Array";
    MOV %r1 "isArray";
    MOV_PROP @a %r0 %r1;
    FUNC %r0 @@f232;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f66(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    VAR s;
    CLS @a;
    CLS @u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "es5-ext/object/set-prototype-of";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "es6-symbol";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV s $RET;
    MOV %r0 "./";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @u %r0 %r1;
    FUNC %r1 @@f233;
    MOV %r2 .t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV @n %r0;
    MOV %r0 i;
    JF %r0 _l45_;
    MOV %r2 @n;
    PUSH %r2;
    MOV %r2 @a;
    PUSH %r2;
    CALL_REG i 2 false;
    MOV %r1 $RET;
LABEL _l45_:
    MOV %r2 @n;
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "constructor";
    DEL %r0 %r1;
    MOV %r2 @a;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    FUNC %r3 @@f234;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_next' %r2;
    FUNC %r3 @@f235;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_resolve' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "create";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV %r1 @n;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 s;
    MOV %r2 "toStringTag";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r1 "String Iterator";
    PUSH %r1;
    CALL_REG @o 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @u 3 false;
}
func @@f67(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "./is-iterable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC %r0 @@f236;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f68(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l47_;
    MOV_CTX %r0 "Map";
    JMP _l46_;
LABEL _l47_:
    MOV %r2 "./polyfill";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l46_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f69(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f237;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f70(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r1 "undefined";
    MOV_CTX %r2 "Map";
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l48_;
    MOV %r2 "[object Map]";
    CALL_CTX 'Map' 0 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV_CTX %r8 "Object";
    MOV %r9 "prototype";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "toString";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l48_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f71(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "key";
    PUSH %r1;
    MOV %r1 "value";
    PUSH %r1;
    MOV %r1 "key+value";
    PUSH %r1;
    MOV %r2 "es5-ext/object/primitive-set";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    CALL_REG %r1 3 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f72(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    CLS @s;
    VAR a;
    CLS @u;
    CLS @c;
    CLS @l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "es5-ext/object/set-prototype-of";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "es6-iterator";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r2 "es6-symbol";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "toStringTag";
    MOV_PROP a %r0 %r1;
    MOV %r0 "./iterator-kinds";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperties";
    MOV_PROP @c %r0 %r1;
    MOV %r2 @s;
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "_unBind";
    MOV_PROP @l %r0 %r1;
    FUNC %r1 @@f238;
    MOV %r2 .t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV @n %r0;
    MOV %r0 i;
    JF %r0 _l49_;
    MOV %r2 @n;
    PUSH %r2;
    MOV %r2 @s;
    PUSH %r2;
    CALL_REG i 2 false;
    MOV %r1 $RET;
LABEL _l49_:
    MOV %r2 @s;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r3 @n;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'constructor' %r2;
    FUNC %r3 @@f239;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_resolve' %r2;
    FUNC %r3 @@f240;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 '_unBind' %r2;
    FUNC %r3 @@f241;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'toString' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "create";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV %r1 @n;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 a;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r1 "Map Iterator";
    PUSH %r1;
    CALL_REG @o 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
}
func @@f73(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    VAR l;
    VAR f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "es5-ext/array/#/clear";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 "es5-ext/array/#/e-index-of";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @o $RET;
    MOV %r0 "es5-ext/object/set-prototype-of";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "es5-ext/object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r0 "es5-ext/object/valid-value";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @c $RET;
    MOV %r0 "event-emitter";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV l $RET;
    MOV %r0 "es6-symbol";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV f $RET;
    MOV %r0 "es6-iterator/valid-iterable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @h $RET;
    MOV %r0 "es6-iterator/for-of";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @p $RET;
    MOV %r0 "./lib/iterator";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @d $RET;
    MOV %r0 "./is-native-implemented";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @b $RET;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    MOV_PROP @g %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperties";
    MOV_PROP @_ %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "getPrototypeOf";
    MOV_PROP @y %r0 %r1;
    FUNC %r1 @@f242;
    MOV @n %r1;
    MOV %r0 %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @b;
    JF %r0 _l50_;
    MOV %r2 @s;
    JF %r2 _l51_;
    MOV %r4 @n;
    PUSH %r4;
    MOV_CTX %r4 "Map";
    PUSH %r4;
    CALL_REG @s 2 false;
    MOV %r3 $RET;
LABEL _l51_:
    MOV_CTX %r4 "Map";
    MOV %r5 "prototype";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    NEW_OBJ %r3;
    MOV %r5 @n;
    PUSH %r5;
    CALL_REG @c 1 false;
    MOV %r4 $RET;
    SET_KEY %r3 'constructor' %r4;
    PUSH %r3;
    MOV_CTX %r3 "Object";
    MOV %r4 "create";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r3 @n;
    MOV %r4 "prototype";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l50_:
    MOV %r2 @n;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    FUNC %r3 @@f243;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'clear' %r2;
    FUNC %r3 @@f244;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'delete' %r2;
    FUNC %r3 @@f245;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'entries' %r2;
    FUNC %r3 @@f246;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'forEach' %r2;
    FUNC %r3 @@f247;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'get' %r2;
    FUNC %r3 @@f248;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'has' %r2;
    FUNC %r3 @@f249;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'keys' %r2;
    FUNC %r3 @@f250;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'set' %r2;
    FUNC %r3 @@f251;
    PUSH %r3;
    MOV %r3 @c;
    MOV %r4 "gs";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'size' %r2;
    FUNC %r3 @@f252;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'values' %r2;
    FUNC %r3 @@f253;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    SET_KEY %r1 'toString' %r2;
    PUSH %r1;
    CALL_REG @_ 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG l 1 false;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 f;
    MOV %r2 "iterator";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r1 @@f254;
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @n;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 f;
    MOV %r2 "toStringTag";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r1 "Map";
    PUSH %r1;
    CALL_REG @c 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
}
func @@f74(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "./is-implemented";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    JF %r1 _l53_;
    MOV_CTX %r0 "Symbol";
    JMP _l52_;
LABEL _l53_:
    MOV %r2 "./polyfill";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
LABEL _l52_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f75(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_OBJ @n;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @n 'object' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @n 'symbol' %r0;
    FUNC %r0 @@f255;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f76(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f256;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f77(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    CLS @e;
    MOV @e .e;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @a $RET;
    MOV %r0 "./validate-symbol";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @u $RET;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @c %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperties";
    MOV_PROP @l %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @f %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "prototype";
    MOV_PROP @h %r0 %r1;
    MOV %r0 null;
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV @p $RET;
    MOV %r0 "function";
    MOV_CTX %r1 "Symbol";
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l55_;
    MOV_CTX %r1 "Symbol";
    MOV @n %r1;
    TRY _l56_ _l57_;
    CALL_REG @n 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_CTX 'String' 1 false;
    MOV %r1 0;
    NEG %r1;
    MOV @s %r1;
    TRY_END;
LABEL _l56_:
    BLOCK 3;
    VAR e;
    GET_ERR e;
    END_BLOCK 3;
LABEL _l57_:
    JMP _l54_;
LABEL _l55_:
LABEL _l54_:
    MOV %r1 null;
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r0 $RET;
    MOV @d %r0;
    FUNC @b @@f257;
    FUNC %r0 @@f258;
    MOV @o %r0;
    FUNC %r1 @@f259;
    MOV @i %r1;
    MOV %r0 %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @i;
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r2 @@f260;
    PUSH %r2;
    CALL_REG @a 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'for' %r1;
    FUNC %r2 @@f261;
    PUSH %r2;
    CALL_REG @a 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'keyFor' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l59_;
    MOV %r6 @n;
    MOV %r7 "hasInstance";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l59_:
    MOV %r2 %r3;
    JIF %r3 _l58_;
    MOV %r5 "hasInstance";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l58_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'hasInstance' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l61_;
    MOV %r6 @n;
    MOV %r7 "isConcatSpreadable";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l61_:
    MOV %r2 %r3;
    JIF %r3 _l60_;
    MOV %r5 "isConcatSpreadable";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l60_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'isConcatSpreadable' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l63_;
    MOV %r6 @n;
    MOV %r7 "iterator";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l63_:
    MOV %r2 %r3;
    JIF %r3 _l62_;
    MOV %r5 "iterator";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l62_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'iterator' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l65_;
    MOV %r6 @n;
    MOV %r7 "match";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l65_:
    MOV %r2 %r3;
    JIF %r3 _l64_;
    MOV %r5 "match";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l64_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'match' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l67_;
    MOV %r6 @n;
    MOV %r7 "replace";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l67_:
    MOV %r2 %r3;
    JIF %r3 _l66_;
    MOV %r5 "replace";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l66_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'replace' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l69_;
    MOV %r6 @n;
    MOV %r7 "search";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l69_:
    MOV %r2 %r3;
    JIF %r3 _l68_;
    MOV %r5 "search";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l68_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'search' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l71_;
    MOV %r6 @n;
    MOV %r7 "species";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l71_:
    MOV %r2 %r3;
    JIF %r3 _l70_;
    MOV %r5 "species";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l70_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'species' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l73_;
    MOV %r6 @n;
    MOV %r7 "split";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l73_:
    MOV %r2 %r3;
    JIF %r3 _l72_;
    MOV %r5 "split";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l72_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'split' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l75_;
    MOV %r6 @n;
    MOV %r7 "toPrimitive";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l75_:
    MOV %r2 %r3;
    JIF %r3 _l74_;
    MOV %r5 "toPrimitive";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l74_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'toPrimitive' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l77_;
    MOV %r6 @n;
    MOV %r7 "toStringTag";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l77_:
    MOV %r2 %r3;
    JIF %r3 _l76_;
    MOV %r5 "toStringTag";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l76_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'toStringTag' %r1;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @n;
    MOV %r3 %r4;
    JF %r4 _l79_;
    MOV %r6 @n;
    MOV %r7 "unscopables";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l79_:
    MOV %r2 %r3;
    JIF %r3 _l78_;
    MOV %r5 "unscopables";
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l78_:
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'unscopables' %r1;
    PUSH %r0;
    CALL_REG @l 2 false;
    MOV %r1 @o;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r2 @i;
    PUSH %r2;
    CALL_REG @a 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'constructor' %r1;
    MOV %r2 "";
    PUSH %r2;
    FUNC %r2 @@f262;
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'toString' %r1;
    PUSH %r0;
    CALL_REG @l 2 false;
    MOV %r1 @i;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r2 @@f263;
    PUSH %r2;
    CALL_REG @a 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'toString' %r1;
    FUNC %r2 @@f264;
    PUSH %r2;
    CALL_REG @a 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'valueOf' %r1;
    PUSH %r0;
    CALL_REG @l 2 false;
    MOV %r1 @i;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "toPrimitive";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "";
    PUSH %r1;
    FUNC %r1 @@f265;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @f 3 false;
    MOV %r1 @i;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "toStringTag";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r1 "Symbol";
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @f 3 false;
    MOV %r1 @o;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "toStringTag";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r4 @i;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r5 @i;
    MOV %r4 "toStringTag";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @f 3 false;
    MOV %r1 @o;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "toPrimitive";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 "c";
    PUSH %r1;
    MOV %r4 @i;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r5 @i;
    MOV %r4 "toPrimitive";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @f 3 false;
}
func @@f78(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "./is-symbol";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    FUNC %r0 @@f266;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f79(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    VAR s;
    VAR a;
    CLS @u;
    CLS @c;
    VAR l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "d";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV l $RET;
    MOV %r0 "es5-ext/object/valid-callable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @f $RET;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    MOV_PROP @h %r0 %r1;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    MOV_PROP @p %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @d %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    MOV_PROP @b %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperties";
    MOV_PROP @g %r0 %r1;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "hasOwnProperty";
    MOV_PROP @_ %r0 %r1;
    NEW_OBJ @y;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @y 'configurable' %r0;
    MOV %r0 1;
    NEG %r0;
    SET_KEY @y 'enumerable' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @y 'writable' %r0;
    NEW_OBJ %r0;
    FUNC %r2 @@f267;
    MOV @n %r2;
    MOV %r1 %r2;
    SET_KEY %r0 'on' %r1;
    FUNC %r2 @@f268;
    MOV i %r2;
    MOV %r1 %r2;
    SET_KEY %r0 'once' %r1;
    FUNC %r2 @@f269;
    MOV @o %r2;
    MOV %r1 %r2;
    SET_KEY %r0 'off' %r1;
    FUNC %r2 @@f270;
    MOV s %r2;
    MOV %r1 %r2;
    SET_KEY %r0 'emit' %r1;
    MOV a %r0;
    NEW_OBJ %r0;
    MOV %r2 @n;
    PUSH %r2;
    CALL_REG l 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'on' %r1;
    MOV %r2 i;
    PUSH %r2;
    CALL_REG l 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'once' %r1;
    MOV %r2 @o;
    PUSH %r2;
    CALL_REG l 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'off' %r1;
    MOV %r2 s;
    PUSH %r2;
    CALL_REG l 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'emit' %r1;
    MOV @u %r0;
    NEW_OBJ %r1;
    PUSH %r1;
    MOV %r1 @u;
    PUSH %r1;
    CALL_REG @g 2 false;
    MOV %r0 $RET;
    MOV @c %r0;
    FUNC %r1 @@f271;
    MOV .r %r1;
    MOV %r0 %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 a;
    MOV %r1 .r;
    MOV %r2 "methods";
    SET_KEY %r1 %r2 %r0;
}
func @@f80(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    VAR a;
    CLS @u;
    VAR c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @s @@f275;
    FUNC @l @@f276;
    FUNC @f @@f277;
    FUNC @h @@f278;
    FUNC @p @@f279;
    FUNC @d @@f280;
    FUNC @b @@f281;
    FUNC @g @@f282;
    MOV_CTX %r1 "Object";
    MOV %r2 "create";
    MOV_PROP %r0 %r1 %r2;
    MOV @n %r0;
    JIF %r0 _l80_;
    FUNC %r1 @@f272;
    LG_OR @n %r1;
LABEL _l80_:
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    MOV_PROP %r0 %r1 %r2;
    MOV @i %r0;
    JIF %r0 _l81_;
    FUNC %r1 @@f273;
    LG_OR @i %r1;
LABEL _l81_:
    MOV_CTX %r3 "Function";
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "bind";
    MOV_PROP %r0 %r1 %r2;
    MOV @o %r0;
    JIF %r0 _l82_;
    FUNC %r1 @@f274;
    LG_OR @o %r1;
LABEL _l82_:
    MOV %r0 @s;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @s;
    MOV %r1 @s;
    MOV %r2 "EventEmitter";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    VOID %r0;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_events";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    VOID %r0;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_maxListeners";
    SET_KEY %r1 %r2 %r0;
    MOV @u 10;
    TRY _l83_ _l84_;
    NEW_OBJ c;
    MOV_CTX %r1 "Object";
    MOV %r2 "defineProperty";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l85_;
    MOV %r2 c;
    PUSH %r2;
    MOV %r2 "x";
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 0;
    SET_KEY %r2 'value' %r3;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "defineProperty";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l85_:
    MOV %r0 0;
    MOV %r2 c;
    MOV %r3 "x";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    MOV a %r0;
    TRY_END;
LABEL _l83_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 1;
    NEG %r0;
    MOV a %r0;
    END_BLOCK 2;
LABEL _l84_:
    MOV %r0 a;
    JF %r0 _l87_;
    MOV %r1 @s;
    PUSH %r1;
    MOV %r1 "defaultMaxListeners";
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'enumerable' %r2;
    FUNC %r2 @@f283;
    SET_KEY %r1 'get' %r2;
    FUNC %r2 @@f284;
    SET_KEY %r1 'set' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "defineProperty";
    CALL_VAR %r1 %r2 3 false;
    JMP _l86_;
LABEL _l87_:
    MOV %r1 @u;
    MOV %r2 @s;
    MOV %r3 "defaultMaxListeners";
    SET_KEY %r2 %r3 %r1;
LABEL _l86_:
    FUNC %r0 @@f285;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setMaxListeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f286;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "getMaxListeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f287;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "emit";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f288;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "addListener";
    SET_KEY %r1 %r2 %r0;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "addListener";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f289;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "prependListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f290;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "once";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f291;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "prependOnceListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f292;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "removeListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f293;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "removeAllListeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f294;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "listeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f295;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "rawListeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f296;
    MOV %r1 @s;
    MOV %r2 "listenerCount";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @b;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "listenerCount";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f297;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "eventNames";
    SET_KEY %r1 %r2 %r0;
}
func @@f81(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f298;
    MOV %r1 .r;
    MOV %r2 "read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f299;
    MOV %r1 .r;
    MOV %r2 "write";
    SET_KEY %r1 %r2 %r0;
}
func @@f82(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "function";
    MOV_CTX %r2 "Object";
    MOV %r3 "create";
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l89_;
    FUNC %r1 @@f300;
    MOV %r2 .t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    JMP _l88_;
LABEL _l89_:
    FUNC %r1 @@f301;
    MOV %r2 .t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
LABEL _l88_:
}
func @@f83(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @n @@f302;
    FUNC %r0 @@f303;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f84(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    NEW_OBJ %r0;
    MOV %r1 "toString";
    MOV_PROP @n %r0 %r1;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l90_;
    FUNC %r2 @@f304;
    LG_OR %r0 %r2;
LABEL _l90_:
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f85(.e, .t, .r) {
    CLS @n;
    CLS @i;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    FUNC c @@f305;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @n %r0 %r1;
    MOV %r0 .t;
    MOV %r1 "exports";
    MOV_PROP @i %r0 %r1;
    NEW_OBJ %r1;
    MOV %r3 0;
    MOV %r2 "reserved";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 1;
    MOV %r2 "connect";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 2;
    MOV %r2 "connack";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 3;
    MOV %r2 "publish";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 4;
    MOV %r2 "puback";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 5;
    MOV %r2 "pubrec";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 6;
    MOV %r2 "pubrel";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 7;
    MOV %r2 "pubcomp";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 8;
    MOV %r2 "subscribe";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 9;
    MOV %r2 "suback";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 10;
    MOV %r2 "unsubscribe";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 11;
    MOV %r2 "unsuback";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 12;
    MOV %r2 "pingreq";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 13;
    MOV %r2 "pingresp";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 14;
    MOV %r2 "disconnect";
    SET_KEY %r1 %r3 %r2;
    MOV %r3 15;
    MOV %r2 "auth";
    SET_KEY %r1 %r3 %r2;
    MOV %r2 @i;
    MOV %r3 "types";
    SET_KEY %r2 %r3 %r1;
    NEW_OBJ %r1;
    MOV %r2 @i;
    MOV %r3 "codes";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @i;
    MOV %r2 "types";
    MOV_PROP %r0 %r1 %r2;
    FORIN o %r0 _l91_ _l92_;
LABEL _l91_:
    MOV %r3 @i;
    MOV %r4 "types";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 o;
    MOV_PROP s %r1 %r2;
    MOV %r1 o;
    MOV %r4 @i;
    MOV %r5 "codes";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 s;
    SET_KEY %r2 %r3 %r1;
    FORIN_END;
LABEL _l92_:
    MOV %r1 4;
    MOV %r2 @i;
    MOV %r3 "CMD_SHIFT";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 240;
    MOV %r2 @i;
    MOV %r3 "CMD_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 8;
    MOV %r2 @i;
    MOV %r3 "DUP_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 3;
    MOV %r2 @i;
    MOV %r3 "QOS_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    MOV %r2 @i;
    MOV %r3 "QOS_SHIFT";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    MOV %r2 @i;
    MOV %r3 "RETAIN_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 127;
    MOV %r2 @i;
    MOV %r3 "LENGTH_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 128;
    MOV %r2 @i;
    MOV %r3 "LENGTH_FIN_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    MOV %r2 @i;
    MOV %r3 "SESSIONPRESENT_MASK";
    SET_KEY %r2 %r3 %r1;
    NEW_ARR %r2;
    MOV %r4 @i;
    MOV %r5 "SESSIONPRESENT_MASK";
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 @i;
    MOV %r3 "SESSIONPRESENT_HEADER";
    SET_KEY %r2 %r3 %r1;
    NEW_ARR %r2;
    MOV %r7 @i;
    MOV %r8 "codes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "connack";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 @i;
    MOV %r6 "CMD_SHIFT";
    MOV_PROP %r4 %r5 %r6;
    SHL %r3 %r4;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 @i;
    MOV %r3 "CONNACK_HEADER";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 128;
    MOV %r2 @i;
    MOV %r3 "USERNAME_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 64;
    MOV %r2 @i;
    MOV %r3 "PASSWORD_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 32;
    MOV %r2 @i;
    MOV %r3 "WILL_RETAIN_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 24;
    MOV %r2 @i;
    MOV %r3 "WILL_QOS_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 3;
    MOV %r2 @i;
    MOV %r3 "WILL_QOS_SHIFT";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 4;
    MOV %r2 @i;
    MOV %r3 "WILL_FLAG_MASK";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 2;
    MOV %r2 @i;
    MOV %r3 "CLEAN_SESSION_MASK";
    SET_KEY %r2 %r3 %r1;
    NEW_ARR %r2;
    MOV %r7 @i;
    MOV %r8 "codes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "connect";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 @i;
    MOV %r6 "CMD_SHIFT";
    MOV_PROP %r4 %r5 %r6;
    SHL %r3 %r4;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 @i;
    MOV %r3 "CONNECT_HEADER";
    SET_KEY %r2 %r3 %r1;
    NEW_OBJ %r1;
    MOV %r2 17;
    SET_KEY %r1 'sessionExpiryInterval' %r2;
    MOV %r2 24;
    SET_KEY %r1 'willDelayInterval' %r2;
    MOV %r2 33;
    SET_KEY %r1 'receiveMaximum' %r2;
    MOV %r2 39;
    SET_KEY %r1 'maximumPacketSize' %r2;
    MOV %r2 34;
    SET_KEY %r1 'topicAliasMaximum' %r2;
    MOV %r2 25;
    SET_KEY %r1 'requestResponseInformation' %r2;
    MOV %r2 23;
    SET_KEY %r1 'requestProblemInformation' %r2;
    MOV %r2 38;
    SET_KEY %r1 'userProperties' %r2;
    MOV %r2 21;
    SET_KEY %r1 'authenticationMethod' %r2;
    MOV %r2 22;
    SET_KEY %r1 'authenticationData' %r2;
    MOV %r2 1;
    SET_KEY %r1 'payloadFormatIndicator' %r2;
    MOV %r2 2;
    SET_KEY %r1 'messageExpiryInterval' %r2;
    MOV %r2 3;
    SET_KEY %r1 'contentType' %r2;
    MOV %r2 8;
    SET_KEY %r1 'responseTopic' %r2;
    MOV %r2 9;
    SET_KEY %r1 'correlationData' %r2;
    MOV %r2 36;
    SET_KEY %r1 'maximumQoS' %r2;
    MOV %r2 37;
    SET_KEY %r1 'retainAvailable' %r2;
    MOV %r2 18;
    SET_KEY %r1 'assignedClientIdentifier' %r2;
    MOV %r2 31;
    SET_KEY %r1 'reasonString' %r2;
    MOV %r2 40;
    SET_KEY %r1 'wildcardSubscriptionAvailable' %r2;
    MOV %r2 41;
    SET_KEY %r1 'subscriptionIdentifiersAvailable' %r2;
    MOV %r2 42;
    SET_KEY %r1 'sharedSubscriptionAvailable' %r2;
    MOV %r2 19;
    SET_KEY %r1 'serverKeepAlive' %r2;
    MOV %r2 26;
    SET_KEY %r1 'responseInformation' %r2;
    MOV %r2 28;
    SET_KEY %r1 'serverReference' %r2;
    MOV %r2 35;
    SET_KEY %r1 'topicAlias' %r2;
    MOV %r2 11;
    SET_KEY %r1 'subscriptionIdentifier' %r2;
    MOV %r2 @i;
    MOV %r3 "properties";
    SET_KEY %r2 %r3 %r1;
    NEW_OBJ %r1;
    MOV %r2 @i;
    MOV %r3 "propertiesCodes";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @i;
    MOV %r2 "properties";
    MOV_PROP %r0 %r1 %r2;
    FORIN a %r0 _l93_ _l94_;
LABEL _l93_:
    MOV %r3 @i;
    MOV %r4 "properties";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 a;
    MOV_PROP u %r1 %r2;
    MOV %r1 a;
    MOV %r4 @i;
    MOV %r5 "propertiesCodes";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 u;
    SET_KEY %r2 %r3 %r1;
    FORIN_END;
LABEL _l94_:
    NEW_OBJ %r0;
    MOV %r1 "int32";
    SET_KEY %r0 'sessionExpiryInterval' %r1;
    MOV %r1 "int32";
    SET_KEY %r0 'willDelayInterval' %r1;
    MOV %r1 "int16";
    SET_KEY %r0 'receiveMaximum' %r1;
    MOV %r1 "int32";
    SET_KEY %r0 'maximumPacketSize' %r1;
    MOV %r1 "int16";
    SET_KEY %r0 'topicAliasMaximum' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'requestResponseInformation' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'requestProblemInformation' %r1;
    MOV %r1 "pair";
    SET_KEY %r0 'userProperties' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'authenticationMethod' %r1;
    MOV %r1 "binary";
    SET_KEY %r0 'authenticationData' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'payloadFormatIndicator' %r1;
    MOV %r1 "int32";
    SET_KEY %r0 'messageExpiryInterval' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'contentType' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'responseTopic' %r1;
    MOV %r1 "binary";
    SET_KEY %r0 'correlationData' %r1;
    MOV %r1 "int8";
    SET_KEY %r0 'maximumQoS' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'retainAvailable' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'assignedClientIdentifier' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'reasonString' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'wildcardSubscriptionAvailable' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'subscriptionIdentifiersAvailable' %r1;
    MOV %r1 "byte";
    SET_KEY %r0 'sharedSubscriptionAvailable' %r1;
    MOV %r1 "int16";
    SET_KEY %r0 'serverKeepAlive' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'responseInformation' %r1;
    MOV %r1 "string";
    SET_KEY %r0 'serverReference' %r1;
    MOV %r1 "int16";
    SET_KEY %r0 'topicAlias' %r1;
    MOV %r1 "var";
    SET_KEY %r0 'subscriptionIdentifier' %r1;
    MOV %r1 @i;
    MOV %r2 "propertiesTypes";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "publish";
    PUSH %r1;
    CALL_REG c 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "PUBLISH_HEADER";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "subscribe";
    PUSH %r1;
    CALL_REG c 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_HEADER";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 3;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_QOS_MASK";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_NL_MASK";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 2;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_NL_SHIFT";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_RAP_MASK";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 3;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_RAP_SHIFT";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 3;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_RH_MASK";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 4;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_RH_SHIFT";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV %r1 0;
    SET_KEY %r0 0 %r1;
    MOV %r1 16;
    SET_KEY %r0 1 %r1;
    MOV %r1 32;
    SET_KEY %r0 2 %r1;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_RH";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 4;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_NL";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 8;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_RAP";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV %r1 0;
    SET_KEY %r0 0 %r1;
    MOV %r1 1;
    SET_KEY %r0 1 %r1;
    MOV %r1 2;
    SET_KEY %r0 2 %r1;
    MOV %r1 @i;
    MOV %r2 "SUBSCRIBE_OPTIONS_QOS";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "unsubscribe";
    PUSH %r1;
    CALL_REG c 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "UNSUBSCRIBE_HEADER";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r2 "unsuback";
    PUSH %r2;
    CALL_REG c 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'unsuback' %r1;
    MOV %r2 "puback";
    PUSH %r2;
    CALL_REG c 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'puback' %r1;
    MOV %r2 "pubcomp";
    PUSH %r2;
    CALL_REG c 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'pubcomp' %r1;
    MOV %r2 "pubrel";
    PUSH %r2;
    CALL_REG c 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'pubrel' %r1;
    MOV %r2 "pubrec";
    PUSH %r2;
    CALL_REG c 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'pubrec' %r1;
    MOV %r1 @i;
    MOV %r2 "ACKS";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r1;
    MOV %r6 @i;
    MOV %r7 "codes";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "suback";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 @i;
    MOV %r5 "CMD_SHIFT";
    MOV_PROP %r3 %r4 %r5;
    SHL %r2 %r3;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "SUBACK_HEADER";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r1;
    MOV %r2 3;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "VERSION3";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r1;
    MOV %r2 4;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "VERSION4";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r1;
    MOV %r2 5;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "VERSION5";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f306;
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r3 0;
    SET_KEY %r1 0 %r3;
    MOV %r3 1;
    SET_KEY %r1 1 %r3;
    MOV %r3 2;
    SET_KEY %r1 2 %r3;
    MOV %r2 "map";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "QOS";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    NEW_ARR %r2;
    MOV %r7 @i;
    MOV %r8 "codes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "pingreq";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 4;
    SHL %r3 %r4;
    SET_KEY %r2 0 %r3;
    MOV %r3 0;
    SET_KEY %r2 1 %r3;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'pingreq' %r1;
    NEW_ARR %r2;
    MOV %r7 @i;
    MOV %r8 "codes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "pingresp";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 4;
    SHL %r3 %r4;
    SET_KEY %r2 0 %r3;
    MOV %r3 0;
    SET_KEY %r2 1 %r3;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'pingresp' %r1;
    NEW_ARR %r2;
    MOV %r7 @i;
    MOV %r8 "codes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "disconnect";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 4;
    SHL %r3 %r4;
    SET_KEY %r2 0 %r3;
    MOV %r3 0;
    SET_KEY %r2 1 %r3;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'disconnect' %r1;
    MOV %r1 @i;
    MOV %r2 "EMPTY";
    SET_KEY %r1 %r2 %r0;
}
func @@f86(.e, .t, .r) {
    CLS @n;
    CLS @i;
    VAR o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @s @@f307;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @n %r0 %r1;
    MOV %r0 "./writeToStream";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r2 "events";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "EventEmitter";
    MOV_PROP o %r0 %r1;
    MOV %r0 @s;
    PUSH %r0;
    MOV %r0 o;
    PUSH %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 2 false;
    FUNC %r0 @@f308;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f309;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "concat";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f310;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f87(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "./parser";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "parser";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./generate";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "generate";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./writeToStream";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "writeToStream";
    SET_KEY %r1 %r2 %r0;
}
func @@f88(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @s @@f311;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @n %r0 %r1;
    MOV @i 65536;
    NEW_OBJ @o;
    NEW_OBJ %r0;
    MOV %r1 @o;
    SET_KEY %r0 'cache' %r1;
    FUNC %r1 @@f312;
    SET_KEY %r0 'generateCache' %r1;
    MOV %r1 @s;
    SET_KEY %r0 'generateNumber' %r1;
    FUNC %r1 @@f313;
    SET_KEY %r0 'genBufVariableByteInt' %r1;
    FUNC %r1 @@f314;
    SET_KEY %r0 'generate4ByteBuffer' %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f89(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f315;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f90(.e, .t, .r) {
    CLS @n;
    VAR i;
    VAR o;
    CLS @s;
    CLS @a;
    CLS @u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @u @@f316;
    MOV %r0 "bl";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "inherits";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r2 "events";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "EventEmitter";
    MOV_PROP o %r0 %r1;
    MOV %r0 "./packet";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "./constants";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r0 @u;
    PUSH %r0;
    MOV %r0 o;
    PUSH %r0;
    CALL_REG i 2 false;
    FUNC %r0 @@f317;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_resetState";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f318;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "parse";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f319;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseHeader";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f320;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseLength";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f321;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parsePayload";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f322;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseConnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f323;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseConnack";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f324;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parsePublish";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f325;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseSubscribe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f326;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseSuback";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f327;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseUnsubscribe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f328;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseUnsuback";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f329;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseConfirmation";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f330;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseDisconnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f331;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseAuth";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f332;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseMessageId";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f333;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseString";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f334;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseStringPair";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f335;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseBuffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f336;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseNum";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f337;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parse4ByteNum";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f338;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseVarByteNum";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f339;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseByte";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f340;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseByType";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f341;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_parseProperties";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f342;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_newPacket";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f343;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_emitError";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @u;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f91(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    VAR a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    VAR g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    CLS @T;
    CLS @j;
    CLS @A;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC g @@f344;
    FUNC @_ @@f345;
    FUNC @m @@f348;
    FUNC @v @@f349;
    FUNC @w @@f350;
    FUNC @S @@f351;
    FUNC @E @@f352;
    FUNC @x @@f353;
    FUNC @k @@f354;
    FUNC @I @@f355;
    FUNC @O @@f356;
    FUNC @T @@f357;
    FUNC @j @@f358;
    FUNC @A @@f359;
    MOV %r0 "./constants";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @i %r0 %r1;
    MOV %r0 0;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV @o $RET;
    NEW_ARR %r0;
    MOV %r1 0;
    SET_KEY %r0 0 %r1;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "from";
    CALL_VAR %r0 %r1 1 false;
    MOV @s $RET;
    MOV %r0 "./numbers";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV a $RET;
    MOV %r2 "process-nextick-args";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "nextTick";
    MOV_PROP @u %r0 %r1;
    MOV %r0 a;
    MOV %r1 "cache";
    MOV_PROP @c %r0 %r1;
    MOV %r0 a;
    MOV %r1 "generateNumber";
    MOV_PROP @l %r0 %r1;
    MOV %r0 a;
    MOV %r1 "generateCache";
    MOV_PROP @f %r0 %r1;
    MOV %r0 a;
    MOV %r1 "genBufVariableByteInt";
    MOV_PROP @h %r0 %r1;
    MOV %r0 a;
    MOV %r1 "generate4ByteBuffer";
    MOV_PROP @p %r0 %r1;
    MOV @d @S;
    MOV @b 0;
    NEG @b;
    MOV %r0 g;
    PUSH %r0;
    MOV %r0 "cacheNumbers";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r1 @@f346;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f347;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    NEW_OBJ @y;
    MOV %r0 g;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f92(.e, .t, .r) {
    VAR n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @i @@f360;
    FUNC @o @@f361;
    MOV %r0 "wrappy";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV n $RET;
    MOV %r1 @i;
    PUSH %r1;
    CALL_REG n 1 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @o;
    PUSH %r1;
    CALL_REG n 1 false;
    MOV %r0 $RET;
    MOV %r3 .t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "strict";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f362;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    MOV %r2 "proto";
    SET_KEY %r1 %r2 %r0;
}
func @@f93(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f363;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f94(.e, .t, .r) {
    CLS @n;
    CLS @i;
    VAR o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    VAR g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @s @@f364;
    FUNC @a @@f365;
    FUNC @u @@f366;
    FUNC @p @@f368;
    FUNC @d @@f369;
    FUNC @b @@f370;
    FUNC g @@f371;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    NEW_OBJ %r0;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV o %r0;
    FUNC %r1 @@f367;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    NEG %r0;
    NEW_ARR @l;
    MOV @f 1;
    NEG @f;
    MOV @h 1;
    MINUS @h;
    FUNC %r0 @@f372;
    MOV %r1 o;
    MOV %r2 "nextTick";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f373;
    MOV %r3 @b;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "run";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "browser";
    MOV %r1 o;
    MOV %r2 "title";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 o;
    MOV %r2 "browser";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r1 o;
    MOV %r2 "env";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV %r1 o;
    MOV %r2 "argv";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "";
    MOV %r1 o;
    MOV %r2 "version";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r1 o;
    MOV %r2 "versions";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "on";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "addListener";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "once";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "off";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "removeListener";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "removeAllListeners";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "emit";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "prependListener";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 g;
    MOV %r1 o;
    MOV %r2 "prependOnceListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f374;
    MOV %r1 o;
    MOV %r2 "listeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f375;
    MOV %r1 o;
    MOV %r2 "binding";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f376;
    MOV %r1 o;
    MOV %r2 "cwd";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f377;
    MOV %r1 o;
    MOV %r2 "chdir";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f378;
    MOV %r1 o;
    MOV %r2 "umask";
    SET_KEY %r1 %r2 %r0;
}
func @@f95(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l96_;
    MOV_CTX %r0 "global";
    JMP _l95_;
LABEL _l96_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l97_;
    MOV_CTX %r0 "self";
    JMP _l95_;
LABEL _l97_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l98_;
    MOV_CTX %r0 "window";
    JMP _l95_;
LABEL _l98_:
    NEW_OBJ %r0;
LABEL _l95_:
    PUSH %r0;
    FUNC %r0 @@f379;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f96(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @n @@f380;
    FUNC %r0 @@f381;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV_CTX %r1 "Array";
    MOV %r2 "isArray";
    MOV_PROP %r0 %r1 %r2;
    MOV @i %r0;
    JIF %r0 _l99_;
    FUNC %r1 @@f382;
    LG_OR @i %r1;
LABEL _l99_:
}
func @@f97(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @o @@f386;
    FUNC @n @@f383;
    FUNC %r0 @@f384;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV_CTX %r1 "Array";
    MOV %r2 "isArray";
    MOV_PROP %r0 %r1 %r2;
    MOV @i %r0;
    JIF %r0 _l100_;
    FUNC %r1 @@f385;
    LG_OR @i %r1;
LABEL _l100_:
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    MOV_PROP %r0 %r1 %r2;
    MOV @s %r0;
    JIF %r0 _l101_;
    FUNC %r1 @@f387;
    LG_OR @s %r1;
LABEL _l101_:
}
func @@f98(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 "./decode";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    MOV %r2 .r;
    MOV %r3 "parse";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 .r;
    MOV %r2 "decode";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 "./encode";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    MOV %r2 .r;
    MOV %r3 "stringify";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 .r;
    MOV %r2 "encode";
    SET_KEY %r1 %r2 %r0;
}
func @@f99(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "./lib/_stream_duplex.js";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f100(.e, .t, .r) {
    CLS @n;
    VAR i;
    VAR o;
    CLS @s;
    CLS @a;
    VAR u;
    VAR c;
    VAR l;
    CLS @f;
    CLS @h;
    CLS @p;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @f @@f389;
    FUNC @h @@f390;
    FUNC @p @@f391;
    MOV %r0 "process-nextick-args";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    MOV_PROP %r0 %r1 %r2;
    MOV i %r0;
    JIF %r0 _l102_;
    FUNC %r1 @@f388;
    LG_OR i %r1;
LABEL _l102_:
    MOV %r0 @f;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "core-util-is";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV o $RET;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 o;
    MOV %r2 "inherits";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "./_stream_readable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @s $RET;
    MOV %r0 "./_stream_writable";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @a $RET;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r0 @s;
    PUSH %r0;
    MOV %r0 o;
    MOV %r1 "inherits";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 @a;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG i 1 false;
    MOV u $RET;
    MOV c 0;
LABEL _l103_:
    MOV %r0 c;
    MOV %r2 u;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l104_;
LABEL _l106_:
    MOV %r1 u;
    MOV %r2 c;
    MOV_PROP l %r1 %r2;
    MOV %r4 @f;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 l;
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l107_;
    MOV %r6 @a;
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 l;
    MOV_PROP %r3 %r4 %r5;
    MOV %r6 @f;
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 l;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l107_:
LABEL _l105_:
    MOV %r1 c;
    ADD %r1 1;
    MOV c %r1;
    JMP _l103_;
LABEL _l104_:
    MOV %r1 @f;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableHighWaterMark";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f392;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @f;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "destroyed";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r1 @@f393;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f394;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    FUNC %r0 @@f395;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
}
func @@f101(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @o @@f396;
    MOV %r0 @o;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "./_stream_transform";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "core-util-is";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 i;
    MOV %r2 "inherits";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @o;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 i;
    MOV %r1 "inherits";
    CALL_VAR %r0 %r1 2 false;
    FUNC %r0 @@f397;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_transform";
    SET_KEY %r1 %r2 %r0;
}
func @@f102(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l109_;
    MOV_CTX %r0 "global";
    JMP _l108_;
LABEL _l109_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l110_;
    MOV_CTX %r0 "self";
    JMP _l108_;
LABEL _l110_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l111_;
    MOV_CTX %r0 "window";
    JMP _l108_;
LABEL _l111_:
    NEW_OBJ %r0;
LABEL _l108_:
    PUSH %r0;
    FUNC %r0 @@f398;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f103(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @o @@f399;
    FUNC @s @@f400;
    FUNC @a @@f401;
    MOV %r0 @o;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "./_stream_duplex";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "core-util-is";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV i $RET;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 i;
    MOV %r2 "inherits";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @o;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 i;
    MOV %r1 "inherits";
    CALL_VAR %r0 %r1 2 false;
    FUNC %r0 @@f402;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "push";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f403;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_transform";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f404;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f405;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f406;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
}
func @@f104(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l113_;
    MOV_CTX %r0 "global";
    JMP _l112_;
LABEL _l113_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l114_;
    MOV_CTX %r0 "self";
    JMP _l112_;
LABEL _l114_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l115_;
    MOV_CTX %r0 "window";
    JMP _l112_;
LABEL _l115_:
    NEW_OBJ %r0;
LABEL _l112_:
    PUSH %r0;
    MOV %r3 "timers";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "setImmediate";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f407;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 4 false;
}
func @@f105(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @n %r0 %r1;
    MOV %r0 "util";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    FUNC %r1 @@f408;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 @i;
    MOV %r1 %r2;
    JF %r2 _l118_;
    MOV %r4 @i;
    MOV %r5 "inspect";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l118_:
    MOV %r0 %r1;
    JF %r1 _l117_;
    MOV %r5 @i;
    MOV %r6 "inspect";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "custom";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l117_:
    JF %r0 _l116_;
    FUNC %r2 @@f409;
    MOV %r7 .t;
    MOV %r8 "exports";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r7 @i;
    MOV %r8 "inspect";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 "custom";
    MOV_PROP %r4 %r6 %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l116_:
}
func @@f106(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @i @@f410;
    MOV %r0 "process-nextick-args";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    NEW_OBJ %r0;
    FUNC %r1 @@f411;
    SET_KEY %r0 'destroy' %r1;
    FUNC %r1 @@f412;
    SET_KEY %r0 'undestroy' %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f107(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 "events";
    PUSH %r3;
    CALL_REG .e 1 false;
    MOV %r1 $RET;
    MOV %r2 "EventEmitter";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f108(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .r;
    MOV %r5 "./lib/_stream_readable.js";
    PUSH %r5;
    CALL_REG .e 1 false;
    MOV %r4 $RET;
    MOV %r5 .t;
    MOV %r6 "exports";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV .r %r3;
    MOV %r1 %r3;
    MOV %r2 "Stream";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .r;
    MOV %r1 .r;
    MOV %r2 "Readable";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./lib/_stream_writable.js";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "Writable";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./lib/_stream_duplex.js";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "Duplex";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./lib/_stream_transform.js";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "Transform";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./lib/_stream_passthrough.js";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 .r;
    MOV %r2 "PassThrough";
    SET_KEY %r1 %r2 %r0;
}
func @@f109(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f413;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f110(.e, .t, .r) {
    CLS @n;
    CLS @i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    FUNC o @@f414;
    FUNC s @@f415;
    MOV %r0 "buffer";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 @n;
    MOV %r1 "Buffer";
    MOV_PROP @i %r0 %r1;
    MOV %r4 @i;
    MOV %r5 "from";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l123_;
    MOV %r5 @i;
    MOV %r6 "alloc";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l123_:
    MOV %r1 %r2;
    JF %r2 _l122_;
    MOV %r4 @i;
    MOV %r5 "allocUnsafe";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l122_:
    MOV %r0 %r1;
    JF %r1 _l121_;
    MOV %r3 @i;
    MOV %r4 "allocUnsafeSlow";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l121_:
    JF %r0 _l120_;
    MOV %r1 @n;
    MOV %r2 .t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    JMP _l119_;
LABEL _l120_:
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG o 2 false;
    MOV %r1 s;
    MOV %r2 .r;
    MOV %r3 "Buffer";
    SET_KEY %r2 %r3 %r1;
LABEL _l119_:
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 s;
    PUSH %r0;
    CALL_REG o 2 false;
    FUNC %r0 @@f416;
    MOV %r1 s;
    MOV %r2 "from";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f417;
    MOV %r1 s;
    MOV %r2 "alloc";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f418;
    MOV %r1 s;
    MOV %r2 "allocUnsafe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f419;
    MOV %r1 s;
    MOV %r2 "allocUnsafeSlow";
    SET_KEY %r1 %r2 %r0;
}
func @@f111(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f420;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f112(.e, .t, .r) {
    CLS @n;
    CLS @i;
    VAR o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC o @@f422;
    FUNC @s @@f423;
    FUNC @a @@f424;
    FUNC @u @@f425;
    FUNC @c @@f426;
    FUNC @l @@f427;
    FUNC @f @@f428;
    FUNC @h @@f429;
    FUNC @p @@f430;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @n %r0 %r1;
    MOV %r1 @n;
    MOV %r2 "isEncoding";
    MOV_PROP %r0 %r1 %r2;
    MOV @i %r0;
    JIF %r0 _l124_;
    FUNC %r1 @@f421;
    LG_OR @i %r1;
LABEL _l124_:
    MOV %r0 o;
    MOV %r1 .r;
    MOV %r2 "StringDecoder";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f431;
    MOV %r3 o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f432;
    MOV %r3 o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f433;
    MOV %r3 o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "text";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f434;
    MOV %r3 o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "fillLast";
    SET_KEY %r1 %r2 %r0;
}
func @@f113(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @r;
    MOV @r .r;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r3 "timers";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "setImmediate";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r3 "timers";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 "clearImmediate";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f435;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f114(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    VAR c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @o @@f436;
    FUNC @m @@f440;
    MOV %r0 "punycode";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 "./util";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @i $RET;
    MOV %r0 @m;
    MOV %r1 .r;
    MOV %r2 "parse";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f437;
    MOV %r1 .r;
    MOV %r2 "resolve";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f438;
    MOV %r1 .r;
    MOV %r2 "resolveObject";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f439;
    MOV %r1 .r;
    MOV %r2 "format";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @o;
    MOV %r1 .r;
    MOV %r2 "Url";
    SET_KEY %r1 %r2 %r0;
    NEW_REG @s "^([a-z0-9.+-]+:)" "i";
    NEW_REG @a ":[0-9]*$" "";
    NEW_REG @u "^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$" "";
    NEW_ARR %r0;
    MOV %r1 "<";
    SET_KEY %r0 0 %r1;
    MOV %r1 ">";
    SET_KEY %r0 1 %r1;
    MOV %r1 "\"";
    SET_KEY %r0 2 %r1;
    MOV %r1 "`";
    SET_KEY %r0 3 %r1;
    MOV %r1 " ";
    SET_KEY %r0 4 %r1;
    MOV %r1 "";
    SET_KEY %r0 5 %r1;
    MOV %r1 "
";
    SET_KEY %r0 6 %r1;
    MOV %r1 "	";
    SET_KEY %r0 7 %r1;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r2 "{";
    SET_KEY %r0 0 %r2;
    MOV %r2 "}";
    SET_KEY %r0 1 %r2;
    MOV %r2 "|";
    SET_KEY %r0 2 %r2;
    MOV %r2 "\\";
    SET_KEY %r0 3 %r2;
    MOV %r2 "^";
    SET_KEY %r0 4 %r2;
    MOV %r2 "`";
    SET_KEY %r0 5 %r2;
    MOV %r1 "concat";
    CALL_VAR %r0 %r1 1 false;
    MOV c $RET;
    MOV %r0 c;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r2 "'";
    SET_KEY %r0 0 %r2;
    MOV %r1 "concat";
    CALL_VAR %r0 %r1 1 false;
    MOV @l $RET;
    MOV %r0 @l;
    PUSH %r0;
    NEW_ARR %r0;
    MOV %r2 "%";
    SET_KEY %r0 0 %r2;
    MOV %r2 "/";
    SET_KEY %r0 1 %r2;
    MOV %r2 "?";
    SET_KEY %r0 2 %r2;
    MOV %r2 ";";
    SET_KEY %r0 3 %r2;
    MOV %r2 "#";
    SET_KEY %r0 4 %r2;
    MOV %r1 "concat";
    CALL_VAR %r0 %r1 1 false;
    MOV @f $RET;
    NEW_ARR @h;
    MOV %r0 "/";
    SET_KEY @h 0 %r0;
    MOV %r0 "?";
    SET_KEY @h 1 %r0;
    MOV %r0 "#";
    SET_KEY @h 2 %r0;
    NEW_REG @p "^[+a-z0-9A-Z_-]{0,63}$" "";
    NEW_REG @d "^([+a-z0-9A-Z_-]{0,63})(.*)$" "";
    NEW_OBJ @b;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @b 'javascript' %r0;
    MOV %r1 "javascript:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @b %r1 %r0;
    NEW_OBJ @g;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @g 'javascript' %r0;
    MOV %r1 "javascript:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @g %r1 %r0;
    NEW_OBJ @_;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ 'http' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ 'https' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ 'ftp' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ 'gopher' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ 'file' %r0;
    MOV %r1 "http:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ %r1 %r0;
    MOV %r1 "https:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ %r1 %r0;
    MOV %r1 "ftp:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ %r1 %r0;
    MOV %r1 "gopher:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ %r1 %r0;
    MOV %r1 "file:";
    MOV %r0 0;
    NEG %r0;
    SET_KEY @_ %r1 %r0;
    MOV %r0 "querystring";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @y $RET;
    FUNC %r0 @@f441;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "parse";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f442;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "format";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f443;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "resolve";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f444;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "resolveObject";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f445;
    MOV %r3 @o;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "parseHost";
    SET_KEY %r1 %r2 %r0;
}
func @@f115(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_OBJ %r0;
    FUNC %r1 @@f446;
    SET_KEY %r0 'isString' %r1;
    FUNC %r1 @@f447;
    SET_KEY %r0 'isObject' %r1;
    FUNC %r1 @@f448;
    SET_KEY %r0 'isNull' %r1;
    FUNC %r1 @@f449;
    SET_KEY %r0 'isNullOrUndefined' %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f116(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l126_;
    MOV_CTX %r0 "global";
    JMP _l125_;
LABEL _l126_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l127_;
    MOV_CTX %r0 "self";
    JMP _l125_;
LABEL _l127_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l128_;
    MOV_CTX %r0 "window";
    JMP _l125_;
LABEL _l128_:
    NEW_OBJ %r0;
LABEL _l125_:
    PUSH %r0;
    FUNC %r0 @@f450;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f117(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC %r0 @@f451;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f118(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @r;
    MOV @r .r;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l130_;
    MOV_CTX %r0 "global";
    JMP _l129_;
LABEL _l130_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l131_;
    MOV_CTX %r0 "self";
    JMP _l129_;
LABEL _l131_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l132_;
    MOV_CTX %r0 "window";
    JMP _l129_;
LABEL _l132_:
    NEW_OBJ %r0;
LABEL _l129_:
    PUSH %r0;
    FUNC %r0 @@f452;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f119(.e, .t, .r) {
    CLS @n;
    VAR i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC i @@f453;
    FUNC @o @@f454;
    NEW_OBJ @n;
    MOV %r0 "ERR_INVALID_OPT_VALUE";
    PUSH %r0;
    FUNC %r0 @@f455;
    PUSH %r0;
    MOV_CTX %r0 "TypeError";
    PUSH %r0;
    CALL_REG i 3 false;
    MOV %r0 "ERR_INVALID_ARG_TYPE";
    PUSH %r0;
    FUNC %r0 @@f456;
    PUSH %r0;
    MOV_CTX %r0 "TypeError";
    PUSH %r0;
    CALL_REG i 3 false;
    MOV %r0 "ERR_STREAM_PUSH_AFTER_EOF";
    PUSH %r0;
    MOV %r0 "stream.push() after EOF";
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_METHOD_NOT_IMPLEMENTED";
    PUSH %r0;
    FUNC %r0 @@f457;
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_STREAM_PREMATURE_CLOSE";
    PUSH %r0;
    MOV %r0 "Premature close";
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_STREAM_DESTROYED";
    PUSH %r0;
    FUNC %r0 @@f458;
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_MULTIPLE_CALLBACK";
    PUSH %r0;
    MOV %r0 "Callback called multiple times";
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_STREAM_CANNOT_PIPE";
    PUSH %r0;
    MOV %r0 "Cannot pipe, not readable";
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_STREAM_WRITE_AFTER_END";
    PUSH %r0;
    MOV %r0 "write after end";
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 "ERR_STREAM_NULL_VALUES";
    PUSH %r0;
    MOV %r0 "May not write null values to stream";
    PUSH %r0;
    MOV_CTX %r0 "TypeError";
    PUSH %r0;
    CALL_REG i 3 false;
    MOV %r0 "ERR_UNKNOWN_ENCODING";
    PUSH %r0;
    FUNC %r0 @@f459;
    PUSH %r0;
    MOV_CTX %r0 "TypeError";
    PUSH %r0;
    CALL_REG i 3 false;
    MOV %r0 "ERR_STREAM_UNSHIFT_AFTER_END_EVENT";
    PUSH %r0;
    MOV %r0 "stream.unshift() after end event";
    PUSH %r0;
    CALL_REG i 2 false;
    MOV %r0 @n;
    MOV %r3 .t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "codes";
    SET_KEY %r1 %r2 %r0;
}
func @@f120(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f460;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f121(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f461;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f122(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @i @@f462;
    MOV %r0 @i;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "./_stream_transform";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @n $RET;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 2 false;
    FUNC %r0 @@f463;
    MOV %r3 @i;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_transform";
    SET_KEY %r1 %r2 %r0;
}
func @@f123(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l134_;
    MOV_CTX %r0 "global";
    JMP _l133_;
LABEL _l134_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l135_;
    MOV_CTX %r0 "self";
    JMP _l133_;
LABEL _l135_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l136_;
    MOV_CTX %r0 "window";
    JMP _l133_;
LABEL _l136_:
    NEW_OBJ %r0;
LABEL _l133_:
    PUSH %r0;
    FUNC %r0 @@f464;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f124(.e, .t, .r) {
    VAR n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @c @@f465;
    FUNC @l @@f466;
    FUNC @f @@f467;
    MOV %r0 @c;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 "../errors";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "codes";
    MOV_PROP n %r0 %r1;
    MOV %r0 n;
    MOV %r1 "ERR_METHOD_NOT_IMPLEMENTED";
    MOV_PROP @i %r0 %r1;
    MOV %r0 n;
    MOV %r1 "ERR_MULTIPLE_CALLBACK";
    MOV_PROP @o %r0 %r1;
    MOV %r0 n;
    MOV %r1 "ERR_TRANSFORM_ALREADY_TRANSFORMING";
    MOV_PROP @s %r0 %r1;
    MOV %r0 n;
    MOV %r1 "ERR_TRANSFORM_WITH_LENGTH_0";
    MOV_PROP @a %r0 %r1;
    MOV %r0 "./_stream_duplex";
    PUSH %r0;
    CALL_REG .e 1 false;
    MOV @u $RET;
    MOV %r0 @c;
    PUSH %r0;
    MOV %r0 @u;
    PUSH %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 2 false;
    FUNC %r0 @@f468;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "push";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f469;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_transform";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f470;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f471;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f472;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
}
func @@f125(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l138_;
    MOV_CTX %r0 "global";
    JMP _l137_;
LABEL _l138_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l139_;
    MOV_CTX %r0 "self";
    JMP _l137_;
LABEL _l139_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l140_;
    MOV_CTX %r0 "window";
    JMP _l137_;
LABEL _l140_:
    NEW_OBJ %r0;
LABEL _l137_:
    PUSH %r0;
    FUNC %r0 @@f473;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f126(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f474;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f127(.e, .t, .r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @n @@f475;
    MOV %r2 "buffer";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @i %r0 %r1;
    MOV %r2 "util";
    PUSH %r2;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    MOV %r1 "inspect";
    MOV_PROP @o %r0 %r1;
    MOV %r1 @o;
    MOV %r0 %r1;
    JF %r1 _l142_;
    MOV %r3 @o;
    MOV %r4 "custom";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l142_:
    MOV @s %r0;
    JIF %r0 _l141_;
    MOV %r1 "inspect";
    LG_OR @s %r1;
LABEL _l141_:
    FUNC %r1 @@f476;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f128(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG .e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    FUNC %r0 @@f477;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f129(.e, .t, .r) {
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @i @@f478;
    CLS @e;
    MOV @e .e;
    MOV %r4 "../../../errors";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r2 $RET;
    MOV %r3 "codes";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "ERR_STREAM_PREMATURE_CLOSE";
    MOV_PROP @n %r0 %r1;
    FUNC %r0 @@f479;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f130(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r4 "../../../errors";
    PUSH %r4;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    MOV %r3 "codes";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "ERR_INVALID_OPT_VALUE";
    MOV_PROP @n %r0 %r1;
    NEW_OBJ %r0;
    FUNC %r1 @@f480;
    SET_KEY %r0 'getHighWaterMark' %r1;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f131(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .r;
    PUSH %r0;
    MOV_ARGS %r0;
    PUSH %r0;
    MOV_ARGS %r6;
    MOV %r7 4;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 106;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
}
func @@f132(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .r;
    PUSH %r0;
    MOV_ARGS %r0;
    PUSH %r0;
    MOV_ARGS %r6;
    MOV %r7 4;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 107;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
}
func @@f133(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 "_process";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 "undefined";
    MOV_CTX %r2 "global";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l144_;
    MOV_CTX %r0 "global";
    JMP _l143_;
LABEL _l144_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "self";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l145_;
    MOV_CTX %r0 "self";
    JMP _l143_;
LABEL _l145_:
    MOV %r3 "undefined";
    MOV_CTX %r4 "window";
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l146_;
    MOV_CTX %r0 "window";
    JMP _l143_;
LABEL _l146_:
    NEW_OBJ %r0;
LABEL _l143_:
    PUSH %r0;
    FUNC %r0 @@f481;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f134(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV n null;
    MOV %r0 "undefined";
    MOV_CTX %r1 "WebSocket";
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l148_;
    MOV_CTX %r1 "WebSocket";
    MOV n %r1;
    JMP _l147_;
LABEL _l148_:
    MOV %r1 "undefined";
    MOV_CTX %r2 "MozWebSocket";
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l149_;
    MOV_CTX %r2 "MozWebSocket";
    MOV n %r2;
    JMP _l147_;
LABEL _l149_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "window";
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l150_;
    MOV_CTX %r6 "window";
    MOV %r7 "WebSocket";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l151_;
    MOV_CTX %r7 "window";
    MOV %r8 "MozWebSocket";
    MOV_PROP %r6 %r7 %r8;
    LG_OR %r4 %r6;
LABEL _l151_:
    MOV n %r4;
    MOV %r3 %r4;
LABEL _l150_:
LABEL _l147_:
    MOV %r0 n;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f135(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @e;
    MOV @e .e;
    FUNC %r0 @@f482;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f136(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC %r0 @@f483;
    MOV %r1 .t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV_CTX %r2 "Object";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "hasOwnProperty";
    MOV_PROP @n %r0 %r1;
}
func @@f137() {
    REG %r0;
    FUNC %r0 @@f484;
    MOV $RET %r0;
    RET;
}
func @@f138(.r, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    VAR u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @b @@f486;
    FUNC @g @@f487;
    FUNC @_ @@f488;
    FUNC @y @@f489;
    CLS @r;
    MOV @r .r;
    MOV %r0 "events";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @i $RET;
    MOV %r0 "./store";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 "mqtt-packet";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @s $RET;
    MOV %r2 "readable-stream";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Writable";
    MOV_PROP @a %r0 %r1;
    MOV %r0 "inherits";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV u $RET;
    MOV %r0 "reinterval";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @c $RET;
    MOV %r0 "./validations";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @l $RET;
    MOV %r0 "xtend";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @f $RET;
    MOV %r1 .n;
    MOV %r2 "setImmediate";
    MOV_PROP %r0 %r1 %r2;
    MOV @h %r0;
    JIF %r0 _l152_;
    FUNC %r1 @@f485;
    LG_OR @h %r1;
LABEL _l152_:
    NEW_OBJ @p;
    MOV %r0 60;
    SET_KEY @p 'keepalive' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @p 'reschedulePings' %r0;
    MOV %r0 "MQTT";
    SET_KEY @p 'protocolId' %r0;
    MOV %r0 4;
    SET_KEY @p 'protocolVersion' %r0;
    MOV %r0 1000;
    SET_KEY @p 'reconnectPeriod' %r0;
    MOV %r0 30000;
    SET_KEY @p 'connectTimeout' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @p 'clean' %r0;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @p 'resubscribe' %r0;
    NEW_OBJ @d;
    MOV %r1 0;
    MOV %r0 "";
    SET_KEY @d %r1 %r0;
    MOV %r1 1;
    MOV %r0 "Unacceptable protocol version";
    SET_KEY @d %r1 %r0;
    MOV %r1 2;
    MOV %r0 "Identifier rejected";
    SET_KEY @d %r1 %r0;
    MOV %r1 3;
    MOV %r0 "Server unavailable";
    SET_KEY @d %r1 %r0;
    MOV %r1 4;
    MOV %r0 "Bad username or password";
    SET_KEY @d %r1 %r0;
    MOV %r1 5;
    MOV %r0 "Not authorized";
    SET_KEY @d %r1 %r0;
    MOV %r1 16;
    MOV %r0 "No matching subscribers";
    SET_KEY @d %r1 %r0;
    MOV %r1 17;
    MOV %r0 "No subscription existed";
    SET_KEY @d %r1 %r0;
    MOV %r1 128;
    MOV %r0 "Unspecified error";
    SET_KEY @d %r1 %r0;
    MOV %r1 129;
    MOV %r0 "Malformed Packet";
    SET_KEY @d %r1 %r0;
    MOV %r1 130;
    MOV %r0 "Protocol Error";
    SET_KEY @d %r1 %r0;
    MOV %r1 131;
    MOV %r0 "Implementation specific error";
    SET_KEY @d %r1 %r0;
    MOV %r1 132;
    MOV %r0 "Unsupported Protocol Version";
    SET_KEY @d %r1 %r0;
    MOV %r1 133;
    MOV %r0 "Client Identifier not valid";
    SET_KEY @d %r1 %r0;
    MOV %r1 134;
    MOV %r0 "Bad User Name or Password";
    SET_KEY @d %r1 %r0;
    MOV %r1 135;
    MOV %r0 "Not authorized";
    SET_KEY @d %r1 %r0;
    MOV %r1 136;
    MOV %r0 "Server unavailable";
    SET_KEY @d %r1 %r0;
    MOV %r1 137;
    MOV %r0 "Server busy";
    SET_KEY @d %r1 %r0;
    MOV %r1 138;
    MOV %r0 "Banned";
    SET_KEY @d %r1 %r0;
    MOV %r1 139;
    MOV %r0 "Server shutting down";
    SET_KEY @d %r1 %r0;
    MOV %r1 140;
    MOV %r0 "Bad authentication method";
    SET_KEY @d %r1 %r0;
    MOV %r1 141;
    MOV %r0 "Keep Alive timeout";
    SET_KEY @d %r1 %r0;
    MOV %r1 142;
    MOV %r0 "Session taken over";
    SET_KEY @d %r1 %r0;
    MOV %r1 143;
    MOV %r0 "Topic Filter invalid";
    SET_KEY @d %r1 %r0;
    MOV %r1 144;
    MOV %r0 "Topic Name invalid";
    SET_KEY @d %r1 %r0;
    MOV %r1 145;
    MOV %r0 "Packet identifier in use";
    SET_KEY @d %r1 %r0;
    MOV %r1 146;
    MOV %r0 "Packet Identifier not found";
    SET_KEY @d %r1 %r0;
    MOV %r1 147;
    MOV %r0 "Receive Maximum exceeded";
    SET_KEY @d %r1 %r0;
    MOV %r1 148;
    MOV %r0 "Topic Alias invalid";
    SET_KEY @d %r1 %r0;
    MOV %r1 149;
    MOV %r0 "Packet too large";
    SET_KEY @d %r1 %r0;
    MOV %r1 150;
    MOV %r0 "Message rate too high";
    SET_KEY @d %r1 %r0;
    MOV %r1 151;
    MOV %r0 "Quota exceeded";
    SET_KEY @d %r1 %r0;
    MOV %r1 152;
    MOV %r0 "Administrative action";
    SET_KEY @d %r1 %r0;
    MOV %r1 153;
    MOV %r0 "Payload format invalid";
    SET_KEY @d %r1 %r0;
    MOV %r1 154;
    MOV %r0 "Retain not supported";
    SET_KEY @d %r1 %r0;
    MOV %r1 155;
    MOV %r0 "QoS not supported";
    SET_KEY @d %r1 %r0;
    MOV %r1 156;
    MOV %r0 "Use another server";
    SET_KEY @d %r1 %r0;
    MOV %r1 157;
    MOV %r0 "Server moved";
    SET_KEY @d %r1 %r0;
    MOV %r1 158;
    MOV %r0 "Shared Subscriptions not supported";
    SET_KEY @d %r1 %r0;
    MOV %r1 159;
    MOV %r0 "Connection rate exceeded";
    SET_KEY @d %r1 %r0;
    MOV %r1 160;
    MOV %r0 "Maximum connect time";
    SET_KEY @d %r1 %r0;
    MOV %r1 161;
    MOV %r0 "Subscription Identifiers not supported";
    SET_KEY @d %r1 %r0;
    MOV %r1 162;
    MOV %r0 "Wildcard Subscriptions not supported";
    SET_KEY @d %r1 %r0;
    MOV %r0 @y;
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "EventEmitter";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG u 2 false;
    FUNC %r0 @@f490;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_setupStream";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f491;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handlePacket";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f492;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_checkDisconnecting";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f493;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "publish";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f494;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "subscribe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f495;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "unsubscribe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f496;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f497;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "removeOutgoingMessage";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f498;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "reconnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f499;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_reconnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f500;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_setupReconnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f501;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_clearReconnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f502;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_cleanUp";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f503;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_sendPacket";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f504;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_storePacket";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f505;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_setupPingTimer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f506;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_shiftPingInterval";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f507;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_checkPing";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f508;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handlePingresp";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f509;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handleConnack";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f510;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handlePublish";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f511;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "handleMessage";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f512;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handleAck";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f513;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handlePubrel";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f514;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_handleDisconnect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f515;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_nextId";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f516;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "getLastMessageId";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f517;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_resubscribe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f518;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_onConnect";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @y;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f139(.r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @r;
    MOV @r .r;
    MOV %r2 "readable-stream";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Transform";
    MOV_PROP @s %r0 %r1;
    MOV %r0 "duplexify";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @a $RET;
    MOV %r0 "base64-js";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @u $RET;
    MOV @c 1;
    NEG @c;
    FUNC %r0 @@f519;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f140(.e, .t) {
    VAR r;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 .t;
    MOV %r4 "port";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l153_;
    MOV %r3 1883;
    LG_OR %r1 %r3;
LABEL _l153_:
    MOV %r2 .t;
    MOV %r3 "port";
    SET_KEY %r2 %r3 %r1;
    MOV %r4 .t;
    MOV %r5 "hostname";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l155_;
    MOV %r5 .t;
    MOV %r6 "host";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l155_:
    MOV %r1 %r2;
    JIF %r2 _l154_;
    MOV %r3 "localhost";
    LG_OR %r1 %r3;
LABEL _l154_:
    MOV %r2 .t;
    MOV %r3 "hostname";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .t;
    MOV %r3 "port";
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r2 .t;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    MOV i %r1;
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "createConnection";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f141(.e, .t) {
    CLS @r;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    FUNC @i @@f520;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV %r3 @t;
    MOV %r4 "port";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l156_;
    MOV %r3 8883;
    LG_OR %r1 %r3;
LABEL _l156_:
    MOV %r2 @t;
    MOV %r3 "port";
    SET_KEY %r2 %r3 %r1;
    MOV %r4 @t;
    MOV %r5 "hostname";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l158_;
    MOV %r5 @t;
    MOV %r6 "host";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l158_:
    MOV %r1 %r2;
    JIF %r2 _l157_;
    MOV %r3 "localhost";
    LG_OR %r1 %r3;
LABEL _l157_:
    MOV %r2 @t;
    MOV %r3 "host";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    NEG %r1;
    MOV %r3 @t;
    MOV %r4 "rejectUnauthorized";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r2 @t;
    MOV %r3 "rejectUnauthorized";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @t;
    MOV %r2 "path";
    DEL %r1 %r2;
    MOV %r1 "secureConnect";
    PUSH %r1;
    FUNC %r1 @@f521;
    PUSH %r1;
    MOV %r4 @t;
    PUSH %r4;
    MOV %r4 @n;
    MOV %r5 "connect";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV @r %r3;
    MOV %r1 %r3;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 @i;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @r;
    MOV $RET %r0;
    RET;
}
func @@f142(.r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @a @@f522;
    MOV %r0 "websocket-stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @n $RET;
    MOV %r0 "url";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @i $RET;
    NEW_ARR @o;
    MOV %r0 "rejectUnauthorized";
    SET_KEY @o 0 %r0;
    MOV %r0 "ca";
    SET_KEY @o 1 %r0;
    MOV %r0 "cert";
    SET_KEY @o 2 %r0;
    MOV %r0 "key";
    SET_KEY @o 3 %r0;
    MOV %r0 "pfx";
    SET_KEY @o 4 %r0;
    MOV %r0 "passphrase";
    SET_KEY @o 5 %r0;
    MOV @s "browser";
    MOV %r1 .r;
    MOV %r2 "title";
    MOV_PROP %r0 %r1 %r2;
    EQ @s %r0;
    MOV %r1 @s;
    JF %r1 _l160_;
    FUNC %r0 @@f523;
    JMP _l159_;
LABEL _l160_:
    FUNC %r0 @@f524;
LABEL _l159_:
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f143(.r, .n) {
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    MOV %r2 "readable-stream";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Transform";
    MOV_PROP @i %r0 %r1;
    MOV %r0 "duplexify";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    FUNC %r0 @@f525;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f144(.r) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC @u @@f526;
    CLS @r;
    MOV @r .r;
    MOV %r0 "xtend";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @n $RET;
    MOV %r2 "readable-stream";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Readable";
    MOV_PROP @i %r0 %r1;
    NEW_OBJ @o;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @o 'objectMode' %r0;
    NEW_OBJ @s;
    MOV %r0 0;
    NEG %r0;
    SET_KEY @s 'clean' %r0;
    MOV %r0 "es6-map";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @a $RET;
    FUNC %r0 @@f527;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "put";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f528;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "createStream";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f529;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "del";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f530;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "get";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f531;
    MOV %r3 @u;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "close";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @u;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f145(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 "/";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "split";
    CALL_VAR %r0 %r1 1 false;
    MOV t $RET;
    MOV r 0;
LABEL _l161_:
    MOV %r0 r;
    MOV %r2 t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l162_;
LABEL _l164_:
    MOV %r1 "+";
    MOV %r3 t;
    MOV %r4 r;
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l166_;
    MOV %r2 "#";
    MOV %r4 t;
    MOV %r5 r;
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l168_;
    MOV %r3 r;
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 1;
    SUB %r4 %r5;
    EQ %r3 %r4;
    MOV $RET %r3;
    RET;
    JMP _l167_;
LABEL _l168_:
LABEL _l167_:
    MOV %r3 1;
    MINUS %r3;
    MOV %r5 "+";
    PUSH %r5;
    MOV %r7 t;
    MOV %r8 r;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "indexOf";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l171_;
    MOV %r4 1;
    MINUS %r4;
    MOV %r6 "#";
    PUSH %r6;
    MOV %r8 t;
    MOV %r9 r;
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "indexOf";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l171_:
    JF %r2 _l170_;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l169_;
LABEL _l170_:
LABEL _l169_:
    JMP _l165_;
LABEL _l166_:
LABEL _l165_:
LABEL _l163_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l161_;
LABEL _l162_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f146(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l173_;
    MOV %r1 "empty_topic_list";
    MOV $RET %r1;
    RET;
    JMP _l172_;
LABEL _l173_:
LABEL _l172_:
    MOV t 0;
LABEL _l174_:
    MOV %r0 t;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l175_;
LABEL _l177_:
    MOV %r3 .e;
    MOV %r4 t;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @n 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l179_;
    MOV %r3 .e;
    MOV %r4 t;
    MOV_PROP %r2 %r3 %r4;
    MOV $RET %r2;
    RET;
    JMP _l178_;
LABEL _l179_:
LABEL _l178_:
LABEL _l176_:
    MOV %r1 t;
    ADD %r1 1;
    MOV t %r1;
    JMP _l174_;
LABEL _l175_:
    MOV %r0 null;
    MOV $RET %r0;
    RET;
}
func @@f147(.r) {
    CLS @n;
    VAR i;
    CLS @o;
    CLS @s;
    CLS @a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    FUNC u @@f532;
    MOV %r0 "../client";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @n $RET;
    MOV %r0 "../store";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV i $RET;
    MOV %r0 "url";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 "xtend";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @s $RET;
    NEW_OBJ @a;
    MOV %r0 "browser";
    MOV %r2 .r;
    MOV %r3 "title";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l181_;
    MOV %r2 "./tcp";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "mqtt";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./tcp";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "tcp";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./tls";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "ssl";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./tls";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "tls";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./tls";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "mqtts";
    SET_KEY %r2 %r3 %r1;
    JMP _l180_;
LABEL _l181_:
    MOV %r2 "./wx";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "wx";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./wx";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "wxs";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./ali";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "ali";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 "./ali";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r1 $RET;
    MOV %r2 @a;
    MOV %r3 "alis";
    SET_KEY %r2 %r3 %r1;
LABEL _l180_:
    MOV %r1 "./ws";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 @a;
    MOV %r2 "ws";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./ws";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 @a;
    MOV %r2 "wss";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 u;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 u;
    MOV %r3 @t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "connect";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @n;
    MOV %r3 @t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "MqttClient";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 i;
    MOV %r3 @t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "Store";
    SET_KEY %r1 %r2 %r0;
}
func @@f148(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV t $RET;
    MOV %r0 t;
    MOV %r1 0;
    MOV_PROP r %r0 %r1;
    MOV %r0 t;
    MOV %r1 1;
    MOV_PROP n %r0 %r1;
    MOV %r0 3;
    MOV %r3 r;
    MOV %r4 n;
    ADD %r3 %r4;
    MUL %r0 %r3;
    MOV %r2 4;
    DIV %r0 %r2;
    MOV %r1 n;
    SUB %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f149(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR s;
    VAR a;
    VAR u;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV r $RET;
    MOV %r0 r;
    MOV %r1 0;
    MOV_PROP n %r0 %r1;
    MOV %r0 r;
    MOV %r1 1;
    MOV_PROP s %r0 %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 s;
    PUSH %r1;
    FUNC %r1 @@f533;
    CALL_REG %r1 3 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @o 1 true;
    MOV a $RET;
    MOV u 0;
    MOV %r0 s;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l186_;
    MOV l n;
    MOV %r1 4;
    SUB l %r1;
    JMP _l185_;
LABEL _l186_:
    MOV l n;
LABEL _l185_:
    MOV f 0;
LABEL _l182_:
    MOV %r0 f;
    MOV %r1 l;
    LT %r0 %r1;
    JF %r0 _l183_;
LABEL _l187_:
    MOV %r6 @i;
    MOV %r8 f;
    PUSH %r8;
    MOV %r8 .e;
    MOV %r9 "charCodeAt";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    MOV_PROP %r1 %r6 %r7;
    MOV %r5 18;
    SHL %r1 %r5;
    MOV %r6 @i;
    MOV %r8 f;
    MOV %r9 1;
    ADD %r8 %r9;
    PUSH %r8;
    MOV %r8 .e;
    MOV %r9 "charCodeAt";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 12;
    SHL %r4 %r5;
    OR %r1 %r4;
    MOV %r5 @i;
    MOV %r7 f;
    MOV %r8 2;
    ADD %r7 %r8;
    PUSH %r7;
    MOV %r7 .e;
    MOV %r8 "charCodeAt";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 6;
    SHL %r3 %r4;
    OR %r1 %r3;
    MOV %r3 @i;
    MOV %r5 f;
    MOV %r6 3;
    ADD %r5 %r6;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "charCodeAt";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV_PROP %r2 %r3 %r4;
    OR %r1 %r2;
    MOV t %r1;
    MOV %r1 t;
    MOV %r3 16;
    SHR %r1 %r3;
    MOV %r2 255;
    AND %r1 %r2;
    MOV %r2 a;
    MOV %r4 u;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV u %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 t;
    MOV %r3 8;
    SHR %r1 %r3;
    MOV %r2 255;
    AND %r1 %r2;
    MOV %r2 a;
    MOV %r4 u;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV u %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 255;
    MOV %r2 t;
    AND %r1 %r2;
    MOV %r2 a;
    MOV %r4 u;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV u %r4;
    SET_KEY %r2 %r3 %r1;
LABEL _l184_:
    MOV %r1 4;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
    JMP _l182_;
LABEL _l183_:
    MOV %r0 2;
    MOV %r1 s;
    EQ %r0 %r1;
    JF %r0 _l188_;
    MOV %r5 @i;
    MOV %r7 f;
    PUSH %r7;
    MOV %r7 .e;
    MOV %r8 "charCodeAt";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV_PROP %r2 %r5 %r6;
    MOV %r4 2;
    SHL %r2 %r4;
    MOV %r5 @i;
    MOV %r7 f;
    MOV %r8 1;
    ADD %r7 %r8;
    PUSH %r7;
    MOV %r7 .e;
    MOV %r8 "charCodeAt";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 4;
    SHR %r3 %r4;
    OR %r2 %r3;
    MOV t %r2;
    MOV %r2 255;
    MOV %r3 t;
    AND %r2 %r3;
    MOV %r3 a;
    MOV %r5 u;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV u %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l188_:
    MOV %r0 1;
    MOV %r1 s;
    EQ %r0 %r1;
    JF %r0 _l189_;
    MOV %r6 @i;
    MOV %r8 f;
    PUSH %r8;
    MOV %r8 .e;
    MOV %r9 "charCodeAt";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    MOV_PROP %r2 %r6 %r7;
    MOV %r5 10;
    SHL %r2 %r5;
    MOV %r6 @i;
    MOV %r8 f;
    MOV %r9 1;
    ADD %r8 %r9;
    PUSH %r8;
    MOV %r8 .e;
    MOV %r9 "charCodeAt";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 4;
    SHL %r4 %r5;
    OR %r2 %r4;
    MOV %r5 @i;
    MOV %r7 f;
    MOV %r8 2;
    ADD %r7 %r8;
    PUSH %r7;
    MOV %r7 .e;
    MOV %r8 "charCodeAt";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 2;
    SHR %r3 %r4;
    OR %r2 %r3;
    MOV t %r2;
    MOV %r2 t;
    MOV %r4 8;
    SHR %r2 %r4;
    MOV %r3 255;
    AND %r2 %r3;
    MOV %r3 a;
    MOV %r5 u;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV u %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 255;
    MOV %r3 t;
    AND %r2 %r3;
    MOV %r3 a;
    MOV %r5 u;
    MOV %r4 %r5;
    ADD %r5 1;
    MOV u %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l189_:
    MOV %r0 a;
    MOV $RET %r0;
    RET;
}
func @@f150(.e) {
    VAR t;
    VAR r;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP r %r0 %r1;
    MOV i r;
    MOV %r0 3;
    MOD i %r0;
    NEW_ARR o;
    MOV s 0;
    MOV a r;
    MOV %r0 i;
    SUB a %r0;
LABEL _l190_:
    MOV %r0 s;
    MOV %r1 a;
    LT %r0 %r1;
    JF %r0 _l191_;
LABEL _l193_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r3 s;
    MOV %r5 16383;
    ADD %r3 %r5;
    MOV %r4 a;
    GT %r3 %r4;
    JF %r3 _l195_;
    MOV %r2 a;
    JMP _l194_;
LABEL _l195_:
    MOV %r2 s;
    MOV %r4 16383;
    ADD %r2 %r4;
LABEL _l194_:
    PUSH %r2;
    CALL_REG @l 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 o;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l192_:
    MOV %r1 16383;
    MOV %r2 s;
    ADD %r2 %r1;
    MOV s %r2;
    JMP _l190_;
LABEL _l191_:
    MOV %r0 1;
    MOV %r1 i;
    EQ %r0 %r1;
    JF %r0 _l197_;
    MOV %r2 .e;
    MOV %r3 r;
    MOV %r4 1;
    SUB %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV t %r1;
    MOV %r4 @n;
    MOV %r5 t;
    MOV %r6 2;
    SHR %r5 %r6;
    MOV_PROP %r1 %r4 %r5;
    MOV %r4 @n;
    MOV %r5 t;
    MOV %r7 4;
    SHL %r5 %r7;
    MOV %r6 63;
    AND %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    ADD %r1 %r3;
    MOV %r2 "==";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 o;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l196_;
LABEL _l197_:
    MOV %r1 2;
    MOV %r2 i;
    EQ %r1 %r2;
    JF %r1 _l198_;
    MOV %r6 .e;
    MOV %r7 r;
    MOV %r8 2;
    SUB %r7 %r8;
    MOV_PROP %r3 %r6 %r7;
    MOV %r5 8;
    SHL %r3 %r5;
    MOV %r5 .e;
    MOV %r6 r;
    MOV %r7 1;
    SUB %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    ADD %r3 %r4;
    MOV t %r3;
    MOV %r7 @n;
    MOV %r8 t;
    MOV %r9 10;
    SHR %r8 %r9;
    MOV_PROP %r3 %r7 %r8;
    MOV %r7 @n;
    MOV %r8 t;
    MOV %r10 4;
    SHR %r8 %r10;
    MOV %r9 63;
    AND %r8 %r9;
    MOV_PROP %r6 %r7 %r8;
    ADD %r3 %r6;
    MOV %r6 @n;
    MOV %r7 t;
    MOV %r9 2;
    SHL %r7 %r9;
    MOV %r8 63;
    AND %r7 %r8;
    MOV_PROP %r5 %r6 %r7;
    ADD %r3 %r5;
    MOV %r4 "=";
    ADD %r3 %r4;
    PUSH %r3;
    MOV %r3 o;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l198_:
LABEL _l196_:
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 o;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f151(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP t %r0 %r1;
    MOV %r0 t;
    MOV %r2 4;
    MOD %r0 %r2;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l200_;
    MOV %r2 "Invalid string. Length must be a multiple of 4";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l199_;
LABEL _l200_:
LABEL _l199_:
    MOV %r0 "=";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "indexOf";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 r;
    EQ %r1 %r2;
    JF %r1 _l201_;
    MOV %r3 t;
    MOV r %r3;
    MOV %r2 %r3;
LABEL _l201_:
    NEW_ARR %r0;
    MOV %r1 r;
    SET_KEY %r0 0 %r1;
    MOV %r2 r;
    MOV %r3 t;
    EQ %r2 %r3;
    JF %r2 _l203_;
    MOV %r1 0;
    JMP _l202_;
LABEL _l203_:
    MOV %r1 4;
    MOV %r3 r;
    MOV %r4 4;
    MOD %r3 %r4;
    SUB %r1 %r3;
LABEL _l202_:
    SET_KEY %r0 1 %r1;
    MOV $RET %r0;
    RET;
}
func @@f152(.e, .t, .r) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    NEW_ARR s;
    MOV a .t;
LABEL _l204_:
    MOV %r0 a;
    MOV %r1 .r;
    LT %r0 %r1;
    JF %r0 _l205_;
LABEL _l207_:
    MOV %r6 .e;
    MOV %r7 a;
    MOV_PROP %r1 %r6 %r7;
    MOV %r5 16;
    SHL %r1 %r5;
    MOV %r4 16711680;
    AND %r1 %r4;
    MOV %r6 .e;
    MOV %r7 a;
    MOV %r8 1;
    ADD %r7 %r8;
    MOV_PROP %r3 %r6 %r7;
    MOV %r5 8;
    SHL %r3 %r5;
    MOV %r4 65280;
    AND %r3 %r4;
    ADD %r1 %r3;
    MOV %r2 255;
    MOV %r4 .e;
    MOV %r5 a;
    MOV %r6 2;
    ADD %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    ADD %r1 %r2;
    MOV i %r1;
    MOV %r5 @n;
    MOV %r9 i;
    MOV o %r9;
    MOV %r6 %r9;
    MOV %r8 18;
    SHR %r6 %r8;
    MOV %r7 63;
    AND %r6 %r7;
    MOV_PROP %r1 %r5 %r6;
    MOV %r5 @n;
    MOV %r6 o;
    MOV %r8 12;
    SHR %r6 %r8;
    MOV %r7 63;
    AND %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    ADD %r1 %r4;
    MOV %r4 @n;
    MOV %r5 o;
    MOV %r7 6;
    SHR %r5 %r7;
    MOV %r6 63;
    AND %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    ADD %r1 %r3;
    MOV %r3 @n;
    MOV %r4 63;
    MOV %r5 o;
    AND %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 s;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l206_:
    MOV %r1 3;
    MOV %r2 a;
    ADD %r2 %r1;
    MOV a %r2;
    JMP _l204_;
LABEL _l205_:
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 s;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f153(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r0;
    MOV %r1 @s;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l209_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @s 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l208_;
LABEL _l209_:
LABEL _l208_:
    NEW_ARR %r1;
    MOV_THIS %r2;
    MOV %r3 "_bufs";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 "function";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l211_;
    MOV %r1 .e;
    MOV_THIS %r2;
    MOV %r3 "_callback";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    PUSH %r1;
    FUNC %r1 @@f534;
    MOV %r2 "bind";
    CALL_VAR %r1 %r2 1 false;
    MOV @t $RET;
    MOV %r1 "pipe";
    PUSH %r1;
    FUNC %r1 @@f535;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "unpipe";
    PUSH %r1;
    FUNC %r1 @@f536;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    JMP _l210_;
LABEL _l211_:
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "append";
    CALL_VAR %r1 %r2 1 false;
LABEL _l210_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
}
func @@f154(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV r 0;
    MOV n 0;
    MOV %r0 0;
    MOV %r1 .e;
    EQ %r0 %r1;
    JF %r0 _l213_;
    NEW_ARR %r1;
    MOV %r2 0;
    SET_KEY %r1 0 %r2;
    MOV %r2 0;
    SET_KEY %r1 1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l212_;
LABEL _l213_:
LABEL _l212_:
LABEL _l214_:
    MOV %r0 n;
    MOV_THIS %r4;
    MOV %r5 "_bufs";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l215_;
LABEL _l217_:
    MOV %r2 .e;
    MOV %r4 r;
    MOV_THIS %r10;
    MOV %r11 "_bufs";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 n;
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    ADD %r4 %r5;
    MOV t %r4;
    MOV %r3 %r4;
    LT %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l220_;
    MOV %r3 n;
    MOV_THIS %r8;
    MOV %r9 "_bufs";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 1;
    SUB %r4 %r5;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l220_:
    JF %r1 _l219_;
    NEW_ARR %r2;
    MOV %r3 n;
    SET_KEY %r2 0 %r3;
    MOV %r3 .e;
    MOV %r4 r;
    SUB %r3 %r4;
    SET_KEY %r2 1 %r3;
    MOV $RET %r2;
    RET;
    JMP _l218_;
LABEL _l219_:
LABEL _l218_:
    MOV %r1 t;
    MOV r %r1;
LABEL _l216_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l214_;
LABEL _l215_:
}
func @@f155(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV t 0;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l222_;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_appendBuffer";
    CALL_VAR %r1 %r2 1 false;
    JMP _l221_;
LABEL _l222_:
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l223_;
LABEL _l224_:
    MOV %r2 t;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    JF %r2 _l225_;
LABEL _l227_:
    MOV %r4 .e;
    MOV %r5 t;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "append";
    CALL_VAR %r3 %r4 1 false;
LABEL _l226_:
    MOV %r3 t;
    ADD %r3 1;
    MOV t %r3;
    JMP _l224_;
LABEL _l225_:
    JMP _l221_;
LABEL _l223_:
    MOV %r2 .e;
    MOV %r3 @s;
    INST_OF %r2 %r3;
    JF %r2 _l228_;
LABEL _l229_:
    MOV %r3 t;
    MOV %r7 .e;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    JF %r3 _l230_;
LABEL _l232_:
    MOV %r7 .e;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 t;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "append";
    CALL_VAR %r4 %r5 1 false;
LABEL _l231_:
    MOV %r4 t;
    ADD %r4 1;
    MOV t %r4;
    JMP _l229_;
LABEL _l230_:
    JMP _l221_;
LABEL _l228_:
    MOV %r3 null;
    MOV %r4 .e;
    WNE %r3 %r4;
    JF %r3 _l233_;
    MOV %r5 "number";
    MOV %r6 .e;
    TYPE_OF %r6;
    WEQ %r5 %r6;
    JF %r5 _l234_;
    MOV %r8 .e;
    MOV %r9 "toString";
    CALL_VAR %r8 %r9 0 false;
    MOV %r7 $RET;
    MOV .e %r7;
    MOV %r6 %r7;
LABEL _l234_:
    MOV %r6 .e;
    PUSH %r6;
    MOV %r6 @o;
    MOV %r7 "from";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 "_appendBuffer";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
LABEL _l233_:
LABEL _l221_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f156(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_bufs";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV_THIS %r2;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
}
func @@f157(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "_appendBuffer";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 "function";
    MOV %r1 .r;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l235_;
    CALL_REG .r 0 false;
    MOV %r1 $RET;
LABEL _l235_:
}
func @@f158(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l237_;
    MOV %r2 null;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l236_;
LABEL _l237_:
LABEL _l236_:
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "min";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV .e %r0;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "slice";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "consume";
    CALL_VAR %r0 %r1 1 false;
}
func @@f159(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r4 @n;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "end";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV_THIS %r1;
    MOV %r2 "_callback";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l238_;
    MOV %r2 null;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_callback";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 null;
    MOV_THIS %r3;
    MOV %r4 "_callback";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l238_:
}
func @@f160(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 1;
    ADD %r3 %r4;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f161(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 "number";
    MOV %r3 .e;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l240_;
    MOV %r3 .e;
    MOV %r4 0;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l240_:
    JF %r1 _l239_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .e;
    ADD %r4 %r3;
    MOV .e %r4;
    MOV %r2 %r4;
LABEL _l239_:
    MOV %r2 "number";
    MOV %r3 .t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l242_;
    MOV %r3 .t;
    MOV %r4 0;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l242_:
    JF %r1 _l241_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .t;
    ADD %r4 %r3;
    MOV .t %r4;
    MOV %r2 %r4;
LABEL _l241_:
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "copy";
    CALL_VAR %r1 %r2 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f162(.e, .t, .r, .n) {
    VAR i;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r2 "number";
    MOV %r3 .r;
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l246_;
    MOV %r3 .r;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l246_:
    JF %r1 _l245_;
    MOV %r3 0;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l245_:
    MOV %r2 "number";
    MOV %r3 .n;
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l248_;
    MOV %r3 .n;
    MOV_THIS %r5;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l248_:
    JF %r1 _l247_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l247_:
    MOV %r0 .r;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GE %r0 %r1;
    JF %r0 _l244_;
    MOV %r2 .e;
    MOV %r1 %r2;
    JIF %r2 _l249_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 @o;
    MOV %r5 "alloc";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l249_:
    MOV $RET %r1;
    RET;
    JMP _l243_;
LABEL _l244_:
LABEL _l243_:
    MOV %r0 .n;
    MOV %r1 0;
    LE %r0 %r1;
    JF %r0 _l251_;
    MOV %r2 .e;
    MOV %r1 %r2;
    JIF %r2 _l252_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 @o;
    MOV %r5 "alloc";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l252_:
    MOV $RET %r1;
    RET;
    JMP _l250_;
LABEL _l251_:
LABEL _l250_:
    MOV a .e;
    NEG a;
    NEG a;
    MOV %r0 .r;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "_offset";
    CALL_VAR %r0 %r1 1 false;
    MOV u $RET;
    MOV c .n;
    MOV %r0 .r;
    SUB c %r0;
    MOV l c;
    MOV %r1 a;
    MOV %r0 %r1;
    JF %r1 _l254_;
    MOV %r2 .t;
    LG_AND %r0 %r2;
LABEL _l254_:
    MOV f %r0;
    JIF %r0 _l253_;
    MOV %r1 0;
    LG_OR f %r1;
LABEL _l253_:
    MOV %r0 u;
    MOV %r1 1;
    MOV_PROP h %r0 %r1;
    MOV %r1 0;
    MOV %r2 .r;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l257_;
    MOV %r2 .n;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l257_:
    JF %r0 _l256_;
    MOV %r1 a;
    NEG %r1;
    JF %r1 _l259_;
    MOV %r3 1;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    JF %r3 _l261_;
    MOV_THIS %r6;
    MOV %r7 "_bufs";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    MOV_PROP %r2 %r4 %r5;
    JMP _l260_;
LABEL _l261_:
    MOV_THIS %r5;
    MOV %r6 "_bufs";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r5;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @o;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
LABEL _l260_:
    MOV $RET %r2;
    RET;
    JMP _l258_;
LABEL _l259_:
LABEL _l258_:
    MOV %r1 0;
    MOV s %r1;
LABEL _l262_:
    MOV %r1 s;
    MOV_THIS %r5;
    MOV %r6 "_bufs";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l263_;
LABEL _l265_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 f;
    PUSH %r2;
    MOV_THIS %r6;
    MOV %r7 "_bufs";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 s;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "copy";
    CALL_VAR %r2 %r3 2 false;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 s;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 f;
    ADD %r3 %r2;
    MOV f %r3;
LABEL _l264_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l262_;
LABEL _l263_:
    MOV %r1 .e;
    MOV $RET %r1;
    RET;
    JMP _l255_;
LABEL _l256_:
LABEL _l255_:
    MOV %r0 l;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 u;
    MOV %r7 0;
    MOV_PROP %r6 %r8 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 h;
    SUB %r1 %r2;
    LE %r0 %r1;
    JF %r0 _l267_;
    MOV %r2 a;
    JF %r2 _l269_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 h;
    PUSH %r3;
    MOV %r3 h;
    MOV %r4 l;
    ADD %r3 %r4;
    PUSH %r3;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 u;
    MOV %r7 0;
    MOV_PROP %r6 %r8 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "copy";
    CALL_VAR %r3 %r4 4 false;
    MOV %r1 $RET;
    JMP _l268_;
LABEL _l269_:
    MOV %r3 h;
    PUSH %r3;
    MOV %r3 h;
    MOV %r4 l;
    ADD %r3 %r4;
    PUSH %r3;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 u;
    MOV %r7 0;
    MOV_PROP %r6 %r8 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
LABEL _l268_:
    MOV $RET %r1;
    RET;
    JMP _l266_;
LABEL _l267_:
LABEL _l266_:
    BLOCK 4;
    MOV %r0 a;
    JIF %r0 _l273_;
    MOV %r3 c;
    PUSH %r3;
    MOV %r3 @o;
    MOV %r4 "allocUnsafe";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV .e %r2;
    MOV %r1 %r2;
LABEL _l273_:
    MOV %r1 u;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV s %r0;
LABEL _l270_:
    MOV %r0 s;
    MOV_THIS %r4;
    MOV %r5 "_bufs";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l271_;
LABEL _l274_:
    MOV %r1 l;
    MOV_THIS %r9;
    MOV %r10 "_bufs";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 s;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 h;
    SUB %r3 %r4;
    MOV i %r3;
    MOV %r2 %r3;
    GT %r1 %r2;
    NEG %r1;
    JF %r1 _l276_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 f;
    PUSH %r2;
    MOV %r2 h;
    PUSH %r2;
    MOV %r2 h;
    MOV %r3 l;
    ADD %r2 %r3;
    PUSH %r2;
    MOV_THIS %r6;
    MOV %r7 "_bufs";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 s;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "copy";
    CALL_VAR %r2 %r3 4 false;
    CLR_BLOCK 4;
    JMP _l271_;
    JMP _l275_;
LABEL _l276_:
LABEL _l275_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 f;
    PUSH %r1;
    MOV %r1 h;
    PUSH %r1;
    MOV_THIS %r5;
    MOV %r6 "_bufs";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 s;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "copy";
    CALL_VAR %r1 %r2 3 false;
    MOV %r1 i;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
    MOV %r1 i;
    MOV %r2 l;
    SUB %r2 %r1;
    MOV l %r2;
    MOV %r1 h;
    JF %r1 _l277_;
    MOV %r3 0;
    MOV h %r3;
    MOV %r2 %r3;
LABEL _l277_:
LABEL _l272_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l270_;
LABEL _l271_:
    END_BLOCK 4;
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f163(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r1 .e;
    MOV %r0 %r1;
    JIF %r1 _l278_;
    MOV %r2 0;
    LG_OR %r0 %r2;
LABEL _l278_:
    MOV .e %r0;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l279_;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l279_:
    MOV .t %r0;
    MOV %r0 .e;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l280_;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .e;
    ADD %r3 %r2;
    MOV .e %r3;
    MOV %r1 %r3;
LABEL _l280_:
    MOV %r0 .t;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l281_;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .t;
    ADD %r3 %r2;
    MOV .t %r3;
    MOV %r1 %r3;
LABEL _l281_:
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "_offset";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV %r0 .t;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "_offset";
    CALL_VAR %r0 %r1 1 false;
    MOV n $RET;
    MOV %r1 r;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r2 n;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 1;
    ADD %r0 %r1;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_bufs";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "slice";
    CALL_VAR %r0 %r1 2 false;
    MOV i $RET;
    MOV %r1 0;
    MOV %r3 n;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    WEQ %r1 %r2;
    JF %r1 _l283_;
    MOV %r2 i;
    MOV %r3 "pop";
    CALL_VAR %r2 %r3 0 false;
    JMP _l282_;
LABEL _l283_:
    MOV %r3 0;
    PUSH %r3;
    MOV %r4 n;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r5 i;
    MOV %r8 i;
    MOV %r9 "length";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 1;
    SUB %r6 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r3 i;
    MOV %r6 i;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 1;
    SUB %r4 %r5;
    SET_KEY %r3 %r4 %r2;
LABEL _l282_:
    MOV %r1 0;
    MOV %r3 r;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    WNE %r1 %r2;
    JF %r1 _l284_;
    MOV %r5 r;
    MOV %r6 1;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r6 i;
    MOV %r7 0;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV %r4 i;
    MOV %r5 0;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l284_:
    MOV %r1 i;
    PUSH %r1;
    CALL_REG @s 1 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f164(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f165(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    BLOCK 1;
LABEL _l285_:
    MOV_THIS %r3;
    MOV %r4 "_bufs";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l286_;
LABEL _l288_:
    MOV %r1 .e;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GE %r1 %r2;
    NEG %r1;
    JF %r1 _l290_;
    MOV %r3 .e;
    PUSH %r3;
    MOV_THIS %r7;
    MOV %r8 "_bufs";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV_THIS %r5;
    MOV %r6 "_bufs";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 0;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 .e;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 %r2;
    MOV_THIS %r4;
    MOV %r5 "length";
    SET_KEY %r4 %r5 %r3;
    CLR_BLOCK 1;
    JMP _l286_;
    JMP _l289_;
LABEL _l290_:
LABEL _l289_:
    MOV_THIS %r6;
    MOV %r7 "_bufs";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .e;
    SUB %r2 %r1;
    MOV .e %r2;
    MOV_THIS %r6;
    MOV %r7 "_bufs";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 %r1;
    MOV_THIS %r3;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r3;
    MOV %r4 "_bufs";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "shift";
    CALL_VAR %r1 %r2 0 false;
    JMP _l285_;
LABEL _l286_:
    END_BLOCK 1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f166() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV e 0;
    CALL_REG @s 0 true;
    MOV t $RET;
LABEL _l291_:
    MOV %r0 e;
    MOV_THIS %r4;
    MOV %r5 "_bufs";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l292_;
LABEL _l294_:
    MOV_THIS %r4;
    MOV %r5 "_bufs";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 e;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "append";
    CALL_VAR %r1 %r2 1 false;
LABEL _l293_:
    MOV %r1 e;
    ADD %r1 1;
    MOV e %r1;
    JMP _l291_;
LABEL _l292_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f167() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    MOV_THIS %r3;
    MOV %r4 "_bufs";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f168() {
    CLS @e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_OBJ @e;
    MOV %r0 8;
    SET_KEY @e 'readDoubleBE' %r0;
    MOV %r0 8;
    SET_KEY @e 'readDoubleLE' %r0;
    MOV %r0 4;
    SET_KEY @e 'readFloatBE' %r0;
    MOV %r0 4;
    SET_KEY @e 'readFloatLE' %r0;
    MOV %r0 4;
    SET_KEY @e 'readInt32BE' %r0;
    MOV %r0 4;
    SET_KEY @e 'readInt32LE' %r0;
    MOV %r0 4;
    SET_KEY @e 'readUInt32BE' %r0;
    MOV %r0 4;
    SET_KEY @e 'readUInt32LE' %r0;
    MOV %r0 2;
    SET_KEY @e 'readInt16BE' %r0;
    MOV %r0 2;
    SET_KEY @e 'readInt16LE' %r0;
    MOV %r0 2;
    SET_KEY @e 'readUInt16BE' %r0;
    MOV %r0 2;
    SET_KEY @e 'readUInt16LE' %r0;
    MOV %r0 1;
    SET_KEY @e 'readInt8' %r0;
    MOV %r0 1;
    SET_KEY @e 'readUInt8' %r0;
    MOV %r0 @e;
    FORIN t %r0 _l295_ _l296_;
LABEL _l295_:
    MOV %r2 t;
    PUSH %r2;
    FUNC %r2 @@f537;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    NEG %r1;
    FORIN_END;
LABEL _l296_:
}
func @@f169(.t) {
    CLS @n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @t;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    CLS @T;
    CLS @j;
    CLS @A;
    CLS @R;
    CLS @M;
    CLS @P;
    CLS @C;
    CLS @L;
    CLS @B;
    CLS @N;
    CLS @U;
    CLS @D;
    CLS @q;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @s @@f539;
    FUNC @t @@f540;
    FUNC @a @@f541;
    FUNC @u @@f542;
    FUNC @c @@f543;
    FUNC @l @@f544;
    FUNC @f @@f545;
    FUNC @h @@f546;
    FUNC @p @@f547;
    FUNC @d @@f548;
    FUNC @b @@f549;
    FUNC @g @@f550;
    FUNC @_ @@f551;
    FUNC @y @@f552;
    FUNC @m @@f553;
    FUNC @v @@f554;
    FUNC @w @@f555;
    FUNC @S @@f556;
    FUNC @E @@f557;
    FUNC @k @@f581;
    FUNC @I @@f582;
    FUNC @O @@f583;
    FUNC @T @@f584;
    FUNC @j @@f585;
    FUNC @A @@f586;
    FUNC @R @@f587;
    FUNC @M @@f588;
    FUNC @P @@f589;
    FUNC @L @@f629;
    FUNC @B @@f630;
    FUNC @N @@f631;
    FUNC @U @@f632;
    FUNC @D @@f633;
    FUNC @q @@f634;
    MOV %r0 "base64-js";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @n $RET;
    MOV %r0 "ieee754";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @i $RET;
    MOV %r0 @t;
    MOV %r1 @r;
    MOV %r2 "Buffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f538;
    MOV %r1 @r;
    MOV %r2 "SlowBuffer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 50;
    MOV %r1 @r;
    MOV %r2 "INSPECT_MAX_BYTES";
    SET_KEY %r1 %r2 %r0;
    MOV @o 2147483647;
    MOV %r0 @o;
    MOV %r1 @r;
    MOV %r2 "kMaxLength";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f558;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    MOV %r1 @t;
    MOV %r2 "TYPED_ARRAY_SUPPORT";
    SET_KEY %r1 %r2 %r0;
    MOV %r3 @t;
    MOV %r4 "TYPED_ARRAY_SUPPORT";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l299_;
    MOV %r3 "undefined";
    MOV_CTX %r4 "console";
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l299_:
    MOV %r0 %r1;
    JIF %r1 _l298_;
    MOV %r2 "function";
    MOV_CTX %r4 "console";
    MOV %r5 "error";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l298_:
    JIF %r0 _l297_;
    MOV %r2 "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.";
    PUSH %r2;
    MOV_CTX %r2 "console";
    MOV %r3 "error";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l297_:
    MOV %r1 @t;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "parent";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 0;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f559;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @t;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "offset";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 0;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f560;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r2 "undefined";
    MOV_CTX %r3 "Symbol";
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l302_;
    MOV %r3 null;
    MOV_CTX %r5 "Symbol";
    MOV %r6 "species";
    MOV_PROP %r4 %r5 %r6;
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l302_:
    MOV %r0 %r1;
    JF %r1 _l301_;
    MOV %r4 @t;
    MOV_CTX %r7 "Symbol";
    MOV %r6 "species";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 @t;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l301_:
    JF %r0 _l300_;
    MOV %r2 @t;
    PUSH %r2;
    MOV_CTX %r3 "Symbol";
    MOV %r4 "species";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 null;
    SET_KEY %r2 'value' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'configurable' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'enumerable' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'writable' %r3;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "defineProperty";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l300_:
    MOV %r0 8192;
    MOV %r1 @t;
    MOV %r2 "poolSize";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f561;
    MOV %r1 @t;
    MOV %r2 "from";
    SET_KEY %r1 %r2 %r0;
    MOV_CTX %r1 "Uint8Array";
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "__proto__";
    SET_KEY %r1 %r2 %r0;
    MOV_CTX %r0 "Uint8Array";
    MOV %r1 @t;
    MOV %r2 "__proto__";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f562;
    MOV %r1 @t;
    MOV %r2 "alloc";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f563;
    MOV %r1 @t;
    MOV %r2 "allocUnsafe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f564;
    MOV %r1 @t;
    MOV %r2 "allocUnsafeSlow";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f565;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f566;
    MOV %r1 @t;
    MOV %r2 "compare";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f567;
    MOV %r1 @t;
    MOV %r2 "isEncoding";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f568;
    MOV %r1 @t;
    MOV %r2 "concat";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @h;
    MOV %r1 @t;
    MOV %r2 "byteLength";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_isBuffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f569;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "swap16";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f570;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "swap32";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f571;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "swap64";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f572;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "toString";
    SET_KEY %r1 %r2 %r0;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "toString";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "toLocaleString";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f573;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "equals";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f574;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "inspect";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f575;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "compare";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f576;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "includes";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f577;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "indexOf";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f578;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "lastIndexOf";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f579;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f580;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "toJSON";
    SET_KEY %r1 %r2 %r0;
    MOV @x 4096;
    FUNC %r0 @@f590;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "slice";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f591;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUIntLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f592;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUIntBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f593;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUInt8";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f594;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUInt16LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f595;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUInt16BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f596;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUInt32LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f597;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readUInt32BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f598;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readIntLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f599;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readIntBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f600;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readInt8";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f601;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readInt16LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f602;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readInt16BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f603;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readInt32LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f604;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readInt32BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f605;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readFloatLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f606;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readFloatBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f607;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readDoubleLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f608;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "readDoubleBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f609;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUIntLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f610;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUIntBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f611;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUInt8";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f612;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUInt16LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f613;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUInt16BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f614;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUInt32LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f615;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeUInt32BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f616;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeIntLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f617;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeIntBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f618;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeInt8";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f619;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeInt16LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f620;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeInt16BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f621;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeInt32LE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f622;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeInt32BE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f623;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeFloatLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f624;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeFloatBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f625;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeDoubleLE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f626;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "writeDoubleBE";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f627;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "copy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f628;
    MOV %r3 @t;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "fill";
    SET_KEY %r1 %r2 %r0;
    NEW_REG @C "[^+\\/0-9A-Za-z-_]" "g";
}
func @@f170(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @t @@f635;
    FUNC %r0 @@f636;
    MOV %r1 @r;
    MOV %r2 "isArray";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f637;
    MOV %r1 @r;
    MOV %r2 "isBoolean";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f638;
    MOV %r1 @r;
    MOV %r2 "isNull";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f639;
    MOV %r1 @r;
    MOV %r2 "isNullOrUndefined";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f640;
    MOV %r1 @r;
    MOV %r2 "isNumber";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f641;
    MOV %r1 @r;
    MOV %r2 "isString";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f642;
    MOV %r1 @r;
    MOV %r2 "isSymbol";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f643;
    MOV %r1 @r;
    MOV %r2 "isUndefined";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f644;
    MOV %r1 @r;
    MOV %r2 "isRegExp";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f645;
    MOV %r1 @r;
    MOV %r2 "isObject";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f646;
    MOV %r1 @r;
    MOV %r2 "isDate";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f647;
    MOV %r1 @r;
    MOV %r2 "isError";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f648;
    MOV %r1 @r;
    MOV %r2 "isFunction";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f649;
    MOV %r1 @r;
    MOV %r2 "isPrimitive";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .e;
    MOV %r2 "isBuffer";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 @r;
    MOV %r2 "isBuffer";
    SET_KEY %r1 %r2 %r0;
}
func @@f171(.e, .t, .r) {
    VAR n;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r0 $RET;
    MOV @o %r0;
    JF %r0 _l303_;
    MOV %r3 @t;
    MOV %r4 "value";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @u 1 false;
    MOV %r1 $RET;
    LG_AND @o %r1;
LABEL _l303_:
    MOV %r4 @t;
    PUSH %r4;
    CALL_REG @i 1 false;
    MOV %r3 $RET;
    MOV n %r3;
    MOV %r1 %r3;
    MOV %r2 "writable";
    DEL %r1 %r2;
    MOV %r1 n;
    MOV %r2 "value";
    DEL %r1 %r2;
    FUNC %r1 @@f650;
    MOV %r2 n;
    MOV %r3 "get";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f172(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_ARGS %r1;
    MOV %r2 1;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @o 1 false;
    MOV @t $RET;
    MOV %r1 null;
    MOV %r3 @t;
    MOV %r4 "resolveContext";
    MOV_PROP %r2 %r3 %r4;
    WNE %r1 %r2;
    JF %r1 _l304_;
    MOV %r4 @t;
    MOV %r5 "resolveContext";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @s 1 false;
    MOV %r2 $RET;
LABEL _l304_:
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f651;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f173(.e, .t, .r) {
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 "string";
    MOV %r2 .e;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l306_;
    MOV %r2 .r;
    MOV c %r2;
    MOV %r2 .t;
    MOV .r %r2;
    MOV %r2 .e;
    MOV .t %r2;
    MOV %r2 null;
    MOV .e %r2;
    JMP _l305_;
LABEL _l306_:
    MOV_ARGS %r3;
    MOV %r4 3;
    MOV_PROP %r2 %r3 %r4;
    MOV c %r2;
LABEL _l305_:
    MOV %r1 null;
    MOV %r2 .t;
    WEQ %r1 %r2;
    JF %r1 _l308_;
    MOV %r2 0;
    VOID %r2;
    MOV .t %r2;
    JMP _l307_;
LABEL _l308_:
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    JF %r2 _l309_;
    MOV %r3 null;
    MOV %r4 .r;
    WEQ %r3 %r4;
    JF %r3 _l311_;
    MOV %r4 0;
    VOID %r4;
    MOV .r %r4;
    JMP _l310_;
LABEL _l311_:
    MOV %r5 .r;
    PUSH %r5;
    CALL_REG @o 1 false;
    MOV %r4 $RET;
    JIF %r4 _l312_;
    MOV %r6 .r;
    MOV c %r6;
    MOV %r6 0;
    VOID %r6;
    MOV .r %r6;
    MOV %r5 %r6;
LABEL _l312_:
LABEL _l310_:
    JMP _l307_;
LABEL _l309_:
    MOV %r3 .t;
    MOV c %r3;
    MOV %r4 0;
    VOID %r4;
    MOV .r %r4;
    MOV %r3 %r4;
    MOV .t %r3;
LABEL _l307_:
    MOV %r1 null;
    MOV %r2 .e;
    WEQ %r1 %r2;
    JF %r1 _l314_;
    MOV %r2 0;
    NEG %r2;
    MOV a %r2;
    MOV %r2 1;
    NEG %r2;
    MOV u %r2;
    JMP _l313_;
LABEL _l314_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 "c";
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV a %r2;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 "e";
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV u %r2;
LABEL _l313_:
    NEW_OBJ %r1;
    MOV %r2 .t;
    SET_KEY %r1 'get' %r2;
    MOV %r2 .r;
    SET_KEY %r1 'set' %r2;
    MOV %r2 a;
    SET_KEY %r1 'configurable' %r2;
    MOV %r2 u;
    SET_KEY %r1 'enumerable' %r2;
    MOV l %r1;
    MOV %r1 c;
    JF %r1 _l316_;
    MOV %r3 c;
    PUSH %r3;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 l;
    PUSH %r2;
    CALL_REG @n 2 false;
    MOV %r0 $RET;
    JMP _l315_;
LABEL _l316_:
    MOV %r0 l;
LABEL _l315_:
    MOV $RET %r0;
    RET;
}
func @@f174(.e, .t) {
    VAR r;
    VAR o;
    VAR a;
    VAR u;
    VAR c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_ARGS %r4;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 2;
    LT %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l319_;
    MOV %r3 "string";
    MOV %r4 .e;
    TYPE_OF %r4;
    WNE %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l319_:
    JF %r1 _l318_;
    MOV %r2 .t;
    MOV u %r2;
    MOV %r2 .e;
    MOV .t %r2;
    MOV %r2 null;
    MOV .e %r2;
    JMP _l317_;
LABEL _l318_:
    MOV_ARGS %r3;
    MOV %r4 2;
    MOV_PROP %r2 %r3 %r4;
    MOV u %r2;
LABEL _l317_:
    MOV %r1 null;
    MOV %r2 .e;
    WEQ %r1 %r2;
    JF %r1 _l321_;
    MOV %r3 0;
    NEG %r3;
    MOV a %r3;
    MOV %r2 %r3;
    MOV r %r2;
    MOV %r2 1;
    NEG %r2;
    MOV o %r2;
    JMP _l320_;
LABEL _l321_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 "c";
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV r %r2;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 "e";
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV o %r2;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 "w";
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV a %r2;
LABEL _l320_:
    NEW_OBJ %r1;
    MOV %r2 .t;
    SET_KEY %r1 'value' %r2;
    MOV %r2 r;
    SET_KEY %r1 'configurable' %r2;
    MOV %r2 o;
    SET_KEY %r1 'enumerable' %r2;
    MOV %r2 a;
    SET_KEY %r1 'writable' %r2;
    MOV c %r1;
    MOV %r1 u;
    JF %r1 _l323_;
    MOV %r3 u;
    PUSH %r3;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 c;
    PUSH %r2;
    CALL_REG @n 2 false;
    MOV %r0 $RET;
    JMP _l322_;
LABEL _l323_:
    MOV %r0 c;
LABEL _l322_:
    MOV $RET %r0;
    RET;
}
func @@f175(.r, .n) {
    CLS @i;
    CLS @o;
    VAR s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @r;
    MOV @r .r;
    MOV %r0 "readable-stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @i $RET;
    MOV %r0 "end-of-stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 "inherits";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV s $RET;
    MOV %r0 "stream-shift";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @a $RET;
    MOV %r2 .n;
    MOV %r3 "from";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l326_;
    MOV %r4 .n;
    MOV %r5 "from";
    MOV_PROP %r2 %r4 %r5;
    MOV_CTX %r4 "Uint8Array";
    MOV %r5 "from";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l326_:
    JF %r0 _l325_;
    NEW_ARR %r1;
    MOV %r2 0;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 .n;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV @u $RET;
    JMP _l324_;
LABEL _l325_:
    NEW_ARR %r1;
    MOV %r2 0;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    CALL_REG .n 1 true;
    MOV @u $RET;
LABEL _l324_:
    FUNC @c @@f652;
    FUNC @l @@f653;
    FUNC @f @@f654;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "Duplex";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG s 2 false;
    FUNC %r0 @@f655;
    MOV %r1 @f;
    MOV %r2 "obj";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f656;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "cork";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f657;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "uncork";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f658;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setWritable";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f659;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setReadable";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f660;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f661;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_forward";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f662;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f663;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f664;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f665;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_finish";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f666;
    MOV %r3 @f;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @f;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f176() {
}
func @@f177(.e, .t, .r) {
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @e;
    MOV @e .e;
    CLS @r;
    MOV @r .r;
    MOV %r0 "function";
    MOV %r1 .t;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l328_;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @o 3 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l327_;
LABEL _l328_:
LABEL _l327_:
    MOV %r0 .t;
    JIF %r0 _l329_;
    NEW_OBJ %r2;
    MOV .t %r2;
    MOV %r1 %r2;
LABEL _l329_:
    MOV %r2 @r;
    MOV %r1 %r2;
    JIF %r2 _l330_;
    MOV %r3 @i;
    LG_OR %r1 %r3;
LABEL _l330_:
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    MOV @r %r0;
    MOV %r0 @e;
    MOV %r1 "_writableState";
    MOV_PROP @s %r0 %r1;
    MOV %r0 @e;
    MOV %r1 "_readableState";
    MOV_PROP @a %r0 %r1;
    MOV %r1 .t;
    MOV %r2 "readable";
    MOV_PROP %r0 %r1 %r2;
    MOV @u %r0;
    JIF %r0 _l331_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .t;
    MOV %r5 "readable";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l332_;
    MOV %r4 @e;
    MOV %r5 "readable";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l332_:
    LG_OR @u %r1;
LABEL _l331_:
    MOV %r1 .t;
    MOV %r2 "writable";
    MOV_PROP %r0 %r1 %r2;
    MOV @c %r0;
    JIF %r0 _l333_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .t;
    MOV %r5 "writable";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l334_;
    MOV %r4 @e;
    MOV %r5 "writable";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l334_:
    LG_OR @c %r1;
LABEL _l333_:
    FUNC @l @@f667;
    FUNC @f @@f668;
    FUNC @h @@f669;
    FUNC @p @@f670;
    FUNC @d @@f671;
    FUNC @b @@f672;
    FUNC @g @@f673;
    MOV %r2 @e;
    PUSH %r2;
    FUNC %r2 @@f674;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l336_;
    MOV %r3 @c;
    MOV %r2 %r3;
    JF %r3 _l338_;
    MOV %r4 @s;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l338_:
    JF %r2 _l337_;
    MOV %r4 "end";
    PUSH %r4;
    MOV %r4 @l;
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "on";
    CALL_VAR %r4 %r5 2 false;
    MOV %r4 "close";
    PUSH %r4;
    MOV %r4 @l;
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "on";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
LABEL _l337_:
    JMP _l335_;
LABEL _l336_:
    MOV %r2 "complete";
    PUSH %r2;
    MOV %r2 @f;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "abort";
    PUSH %r2;
    MOV %r2 @b;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r3 @e;
    MOV %r4 "req";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l340_;
    CALL_REG @g 0 false;
    JMP _l339_;
LABEL _l340_:
    MOV %r3 "request";
    PUSH %r3;
    MOV %r3 @g;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "on";
    CALL_VAR %r3 %r4 2 false;
LABEL _l339_:
LABEL _l335_:
    MOV %r2 @e;
    PUSH %r2;
    FUNC %r2 @@f675;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    JF %r1 _l341_;
    MOV %r3 "exit";
    PUSH %r3;
    MOV %r3 @p;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "on";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l341_:
    MOV %r1 "end";
    PUSH %r1;
    MOV %r1 @h;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "finish";
    PUSH %r1;
    MOV %r1 @f;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV %r3 .t;
    MOV %r4 "error";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l342_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r3 @d;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "on";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l342_:
    MOV %r1 "close";
    PUSH %r1;
    MOV %r1 @b;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    FUNC %r0 @@f676;
    MOV $RET %r0;
    RET;
}
func @@f178() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 0;
    MOV_THIS %r4;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f179(.e) {
    VAR t;
    VAR r;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l344_;
    MOV_THIS %r2;
    PUSH %r2;
    MOV_ARGS %r2;
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l343_;
LABEL _l344_:
LABEL _l343_:
    MOV_THIS %r4;
    PUSH %r4;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV r %r0;
    MOV_ARGS %r1;
    MOV %r2 1;
    MOV_PROP %r0 %r1 %r2;
    MOV l %r0;
    MOV %r3 l;
    PUSH %r3;
    CALL_CTX 'isNaN' 1 false;
    MOV %r2 $RET;
    JF %r2 _l349_;
    MOV %r1 0;
    JMP _l348_;
LABEL _l349_:
    MOV %r3 l;
    MOV %r4 0;
    GE %r3 %r4;
    JF %r3 _l350_;
    MOV %r4 l;
    PUSH %r4;
    CALL_REG @c 1 false;
    MOV %r1 $RET;
    JMP _l348_;
LABEL _l350_:
    MOV_THIS %r6;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r1 $RET;
    MOV %r6 l;
    PUSH %r6;
    CALL_REG @u 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @c 1 false;
    MOV %r4 $RET;
    SUB %r1 %r4;
LABEL _l348_:
    MOV l %r1;
    MOV %r0 %r1;
    MOV t %r0;
LABEL _l345_:
    MOV %r0 t;
    MOV %r1 r;
    LT %r0 %r1;
    JF %r0 _l346_;
LABEL _l351_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 @a;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l354_;
    MOV_THIS %r5;
    MOV %r6 t;
    MOV_PROP %r4 %r5 %r6;
    MOV f %r4;
    MOV %r4 f;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l354_:
    JF %r1 _l353_;
    MOV %r2 t;
    MOV $RET %r2;
    RET;
    JMP _l352_;
LABEL _l353_:
LABEL _l352_:
LABEL _l347_:
    MOV %r1 t;
    ADD %r1 1;
    MOV t %r1;
    JMP _l345_;
LABEL _l346_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f180() {
    VAR e;
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_CTX %r0 "Array";
    MOV %r1 "from";
    MOV_PROP r %r0 %r1;
    MOV %r1 "function";
    MOV %r2 r;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l355_;
    NEW_ARR %r5;
    MOV %r6 "raz";
    SET_KEY %r5 0 %r6;
    MOV %r6 "dwa";
    SET_KEY %r5 1 %r6;
    MOV e %r5;
    MOV %r4 %r5;
    PUSH %r4;
    CALL_REG r 1 false;
    MOV %r3 $RET;
    MOV t %r3;
    MOV %r5 t;
    MOV %r4 %r5;
    JF %r5 _l357_;
    MOV %r6 t;
    MOV %r7 e;
    NE %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l357_:
    MOV %r3 %r4;
    JF %r4 _l356_;
    MOV %r5 "dwa";
    MOV %r7 t;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l356_:
    PUSH %r3;
    CALL_CTX 'Boolean' 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l355_:
    MOV $RET %r0;
    RET;
}
func @@f181(.e) {
    VAR t;
    VAR r;
    VAR b;
    VAR g;
    VAR _;
    VAR y;
    VAR m;
    VAR v;
    VAR w;
    VAR S;
    VAR E;
    VAR x;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV_ARGS %r0;
    MOV %r1 1;
    MOV_PROP E %r0 %r1;
    MOV_ARGS %r0;
    MOV %r1 2;
    MOV_PROP x %r0 %r1;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @u 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_CTX 'Object' 1 false;
    MOV %r1 $RET;
    MOV .e %r1;
    MOV %r2 E;
    PUSH %r2;
    CALL_REG @c 1 false;
    MOV %r1 $RET;
    JF %r1 _l360_;
    MOV %r3 E;
    PUSH %r3;
    CALL_REG @a 1 false;
    MOV %r2 $RET;
LABEL _l360_:
    MOV_THIS %r2;
    MOV %r1 %r2;
    JF %r2 _l362_;
    MOV_THIS %r3;
    MOV_CTX %r4 "Array";
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l362_:
    MOV %r0 %r1;
    JF %r1 _l361_;
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l361_:
    JF %r0 _l359_;
    MOV_THIS %r1;
    MOV t %r1;
    JMP _l358_;
LABEL _l359_:
    MOV %r1 E;
    NEG %r1;
    JF %r1 _l364_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    JF %r2 _l366_;
    MOV %r4 1;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    MOV _ %r6;
    MOV %r5 %r6;
    NE %r4 %r5;
    JF %r4 _l368_;
    MOV %r5 null;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV_CTX %r5 "Array";
    MOV %r6 "apply";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    JMP _l367_;
LABEL _l368_:
    MOV %r6 .e;
    MOV %r7 0;
    MOV_PROP %r5 %r6 %r7;
    MOV %r9 1;
    PUSH %r9;
    CALL_CTX 'Array' 1 true;
    MOV %r8 $RET;
    MOV g %r8;
    MOV %r6 %r8;
    MOV %r7 0;
    SET_KEY %r6 %r7 %r5;
    MOV %r3 g;
LABEL _l367_:
    MOV $RET %r3;
    RET;
    JMP _l365_;
LABEL _l366_:
LABEL _l365_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @f 1 false;
    MOV %r2 $RET;
    JF %r2 _l370_;
    MOV %r6 .e;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    MOV _ %r5;
    MOV %r4 %r5;
    PUSH %r4;
    CALL_CTX 'Array' 1 true;
    MOV %r3 $RET;
    MOV g %r3;
    MOV %r3 0;
    MOV r %r3;
LABEL _l371_:
    MOV %r3 r;
    MOV %r4 _;
    LT %r3 %r4;
    JF %r3 _l372_;
LABEL _l374_:
    MOV %r5 .e;
    MOV %r6 r;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 g;
    MOV %r6 r;
    SET_KEY %r5 %r6 %r4;
LABEL _l373_:
    MOV %r4 r;
    ADD %r4 1;
    MOV r %r4;
    JMP _l371_;
LABEL _l372_:
    MOV %r3 g;
    MOV $RET %r3;
    RET;
    JMP _l369_;
LABEL _l370_:
LABEL _l369_:
    JMP _l363_;
LABEL _l364_:
LABEL _l363_:
    NEW_ARR %r1;
    MOV g %r1;
LABEL _l358_:
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @f 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l376_;
    MOV %r1 0;
    VOID %r1;
    MOV %r4 .e;
    MOV %r5 @n;
    MOV_PROP %r3 %r4 %r5;
    MOV w %r3;
    MOV %r2 %r3;
    NE %r1 %r2;
    JF %r1 _l378_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r5 w;
    PUSH %r5;
    CALL_REG @a 1 false;
    MOV %r3 $RET;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV m %r2;
    MOV %r2 t;
    JF %r2 _l382_;
    CALL_REG t 0 true;
    MOV %r4 $RET;
    MOV g %r4;
    MOV %r3 %r4;
LABEL _l382_:
    MOV %r3 m;
    MOV %r4 "next";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV v %r2;
    MOV %r2 0;
    MOV r %r2;
LABEL _l379_:
    MOV %r3 v;
    MOV %r4 "done";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    JF %r2 _l380_;
LABEL _l383_:
    MOV %r4 E;
    JF %r4 _l385_;
    MOV %r5 E;
    PUSH %r5;
    MOV %r5 x;
    PUSH %r5;
    MOV %r6 v;
    MOV %r7 "value";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r5 r;
    PUSH %r5;
    MOV %r5 @h;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 4 false;
    MOV %r3 $RET;
    JMP _l384_;
LABEL _l385_:
    MOV %r5 v;
    MOV %r6 "value";
    MOV_PROP %r3 %r5 %r6;
LABEL _l384_:
    MOV S %r3;
    MOV %r3 t;
    JF %r3 _l387_;
    MOV %r4 S;
    MOV %r5 @p;
    MOV %r6 "value";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 g;
    PUSH %r4;
    MOV %r4 r;
    PUSH %r4;
    MOV %r4 @p;
    PUSH %r4;
    CALL_REG @d 3 false;
    JMP _l386_;
LABEL _l387_:
    MOV %r4 S;
    MOV %r5 g;
    MOV %r6 r;
    SET_KEY %r5 %r6 %r4;
LABEL _l386_:
    MOV %r4 m;
    MOV %r5 "next";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV v %r3;
    MOV %r3 r;
    ADD %r3 1;
    MOV r %r3;
    JMP _l379_;
LABEL _l380_:
    MOV %r2 r;
    MOV _ %r2;
    JMP _l377_;
LABEL _l378_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @l 1 false;
    MOV %r2 $RET;
    JF %r2 _l388_;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV _ %r3;
    MOV %r3 t;
    JF %r3 _l392_;
    CALL_REG t 0 true;
    MOV %r5 $RET;
    MOV g %r5;
    MOV %r4 %r5;
LABEL _l392_:
    MOV %r3 0;
    MOV r %r3;
    MOV %r3 0;
    MOV b %r3;
LABEL _l389_:
    MOV %r3 r;
    MOV %r4 _;
    LT %r3 %r4;
    JF %r3 _l390_;
LABEL _l393_:
    MOV %r5 .e;
    MOV %r6 r;
    MOV_PROP %r4 %r5 %r6;
    MOV S %r4;
    MOV %r6 r;
    MOV %r8 1;
    ADD %r6 %r8;
    MOV %r7 _;
    LT %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l396_;
    MOV %r10 0;
    PUSH %r10;
    MOV %r10 S;
    MOV %r11 "charCodeAt";
    CALL_VAR %r10 %r11 1 false;
    MOV %r9 $RET;
    MOV y %r9;
    MOV %r7 %r9;
    MOV %r8 55296;
    GE %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l396_:
    MOV %r4 %r5;
    JF %r5 _l395_;
    MOV %r6 y;
    MOV %r7 56319;
    LE %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l395_:
    JF %r4 _l394_;
    MOV %r7 .e;
    MOV %r9 r;
    ADD %r9 1;
    MOV %r8 %r9;
    MOV r %r9;
    MOV_PROP %r6 %r7 %r8;
    MOV %r7 S;
    ADD %r7 %r6;
    MOV S %r7;
    MOV %r5 %r7;
LABEL _l394_:
    MOV %r5 E;
    JF %r5 _l398_;
    MOV %r6 E;
    PUSH %r6;
    MOV %r6 x;
    PUSH %r6;
    MOV %r6 S;
    PUSH %r6;
    MOV %r6 b;
    PUSH %r6;
    MOV %r6 @h;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 4 false;
    MOV %r4 $RET;
    JMP _l397_;
LABEL _l398_:
    MOV %r4 S;
LABEL _l397_:
    MOV S %r4;
    MOV %r4 t;
    JF %r4 _l400_;
    MOV %r5 S;
    MOV %r6 @p;
    MOV %r7 "value";
    SET_KEY %r6 %r7 %r5;
    MOV %r5 g;
    PUSH %r5;
    MOV %r5 b;
    PUSH %r5;
    MOV %r5 @p;
    PUSH %r5;
    CALL_REG @d 3 false;
    JMP _l399_;
LABEL _l400_:
    MOV %r5 S;
    MOV %r6 g;
    MOV %r7 b;
    SET_KEY %r6 %r7 %r5;
LABEL _l399_:
    MOV %r4 b;
    ADD %r4 1;
    MOV b %r4;
LABEL _l391_:
    MOV %r4 r;
    ADD %r4 1;
    MOV r %r4;
    JMP _l389_;
LABEL _l390_:
    MOV %r3 b;
    MOV _ %r3;
    JMP _l377_;
LABEL _l388_:
LABEL _l377_:
    JMP _l375_;
LABEL _l376_:
LABEL _l375_:
    MOV %r0 0;
    VOID %r0;
    MOV %r1 _;
    EQ %r0 %r1;
    JF %r0 _l402_;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @s 1 false;
    MOV %r1 $RET;
    MOV _ %r1;
    MOV %r1 t;
    JF %r1 _l406_;
    MOV %r4 _;
    PUSH %r4;
    CALL_REG t 1 true;
    MOV %r3 $RET;
    MOV g %r3;
    MOV %r2 %r3;
LABEL _l406_:
    MOV %r1 0;
    MOV r %r1;
LABEL _l403_:
    MOV %r1 r;
    MOV %r2 _;
    LT %r1 %r2;
    JF %r1 _l404_;
LABEL _l407_:
    MOV %r3 E;
    JF %r3 _l409_;
    MOV %r4 E;
    PUSH %r4;
    MOV %r4 x;
    PUSH %r4;
    MOV %r5 .e;
    MOV %r6 r;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 r;
    PUSH %r4;
    MOV %r4 @h;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 4 false;
    MOV %r2 $RET;
    JMP _l408_;
LABEL _l409_:
    MOV %r4 .e;
    MOV %r5 r;
    MOV_PROP %r2 %r4 %r5;
LABEL _l408_:
    MOV S %r2;
    MOV %r2 t;
    JF %r2 _l411_;
    MOV %r3 S;
    MOV %r4 @p;
    MOV %r5 "value";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 g;
    PUSH %r3;
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 @p;
    PUSH %r3;
    CALL_REG @d 3 false;
    JMP _l410_;
LABEL _l411_:
    MOV %r3 S;
    MOV %r4 g;
    MOV %r5 r;
    SET_KEY %r4 %r5 %r3;
LABEL _l410_:
LABEL _l405_:
    MOV %r2 r;
    ADD %r2 1;
    MOV r %r2;
    JMP _l403_;
LABEL _l404_:
    JMP _l401_;
LABEL _l402_:
LABEL _l401_:
    MOV %r1 t;
    JF %r1 _l412_;
    MOV %r3 null;
    MOV %r4 @p;
    MOV %r5 "value";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 _;
    MOV %r4 g;
    MOV %r5 "length";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l412_:
    MOV %r0 g;
    MOV $RET %r0;
    RET;
}
func @@f182() {
    REG %r0;
    MOV_ARGS %r0;
    MOV $RET %r0;
    RET;
}
func @@f183(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 @i;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f184(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "function";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l413_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 @n;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 @i;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l413_:
    MOV $RET %r0;
    RET;
}
func @@f185() {
}
func @@f186() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_CTX %r0 "Math";
    MOV %r1 "sign";
    MOV_PROP e %r0 %r1;
    MOV %r1 "function";
    MOV %r2 e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l414_;
    MOV %r3 1;
    MOV %r5 10;
    PUSH %r5;
    CALL_REG e 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l415_;
    MOV %r4 1;
    MINUS %r4;
    MOV %r6 20;
    MINUS %r6;
    PUSH %r6;
    CALL_REG e 1 false;
    MOV %r5 $RET;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l415_:
    LG_AND %r0 %r2;
LABEL _l414_:
    MOV $RET %r0;
    RET;
}
func @@f187(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'Number' 1 false;
    MOV %r1 $RET;
    MOV .e %r1;
    MOV %r3 .e;
    PUSH %r3;
    CALL_CTX 'isNaN' 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l418_;
    MOV %r3 0;
    MOV %r4 .e;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l418_:
    JF %r1 _l417_;
    MOV %r0 .e;
    JMP _l416_;
LABEL _l417_:
    MOV %r2 .e;
    MOV %r3 0;
    GT %r2 %r3;
    JF %r2 _l419_;
    MOV %r0 1;
    JMP _l416_;
LABEL _l419_:
    MOV %r0 1;
    MINUS %r0;
LABEL _l416_:
    MOV $RET %r0;
    RET;
}
func @@f188() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_CTX %r0 "Number";
    MOV %r1 "isNaN";
    MOV_PROP e %r0 %r1;
    MOV %r1 "function";
    MOV %r2 e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l420_;
    NEW_OBJ %r5;
    PUSH %r5;
    CALL_REG e 1 false;
    MOV %r4 $RET;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l422_;
    MOV_CTX %r6 "NaN";
    PUSH %r6;
    CALL_REG e 1 false;
    MOV %r5 $RET;
    LG_AND %r3 %r5;
LABEL _l422_:
    MOV %r2 %r3;
    JF %r3 _l421_;
    MOV %r5 34;
    PUSH %r5;
    CALL_REG e 1 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l421_:
    LG_AND %r0 %r2;
LABEL _l420_:
    MOV $RET %r0;
    RET;
}
func @@f189(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV %r1 .e;
    WNE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f190(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'isNaN' 1 false;
    MOV %r1 $RET;
    JF %r1 _l424_;
    MOV %r0 0;
    JMP _l423_;
LABEL _l424_:
    MOV %r3 0;
    MOV %r6 .e;
    PUSH %r6;
    CALL_CTX 'Number' 1 false;
    MOV %r5 $RET;
    MOV .e %r5;
    MOV %r4 %r5;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l426_;
    MOV %r5 .e;
    PUSH %r5;
    CALL_CTX 'isFinite' 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l426_:
    JF %r2 _l425_;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    MOV %r5 .e;
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @o 1 false;
    MOV %r3 $RET;
    MUL %r0 %r3;
    JMP _l423_;
LABEL _l425_:
    MOV %r0 .e;
LABEL _l423_:
    MOV $RET %r0;
    RET;
}
func @@f191(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 0;
    PUSH %r1;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @n 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @i 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f192(.e, .t) {
    REG %r0;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f677;
    MOV $RET %r0;
    RET;
}
func @@f193() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_CTX %r0 "Object";
    MOV %r1 "assign";
    MOV_PROP t %r0 %r1;
    MOV %r1 "function";
    MOV %r2 t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l427_;
    NEW_OBJ %r4;
    MOV %r5 "raz";
    SET_KEY %r4 'foo' %r5;
    MOV e %r4;
    MOV %r3 %r4;
    PUSH %r3;
    NEW_OBJ %r3;
    MOV %r4 "dwa";
    SET_KEY %r3 'bar' %r4;
    PUSH %r3;
    NEW_OBJ %r3;
    MOV %r4 "trzy";
    SET_KEY %r3 'trzy' %r4;
    PUSH %r3;
    CALL_REG t 3 false;
    MOV %r6 e;
    MOV %r7 "foo";
    MOV_PROP %r2 %r6 %r7;
    MOV %r6 e;
    MOV %r7 "bar";
    MOV_PROP %r5 %r6 %r7;
    ADD %r2 %r5;
    MOV %r5 e;
    MOV %r6 "trzy";
    MOV_PROP %r4 %r5 %r6;
    ADD %r2 %r4;
    MOV %r3 "razdwatrzy";
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l427_:
    MOV $RET %r0;
    RET;
}
func @@f194(.e, .t) {
    CLS @r;
    VAR s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV_ARGS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 2;
    PUSH %r0;
    CALL_REG @o 2 false;
    MOV u $RET;
    MOV %r2 @e;
    PUSH %r2;
    CALL_REG @i 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_CTX 'Object' 1 false;
    MOV %r0 $RET;
    MOV @e %r0;
    FUNC %r0 @@f678;
    MOV a %r0;
    MOV %r0 1;
    MOV s %r0;
LABEL _l428_:
    MOV %r0 s;
    MOV %r1 u;
    LT %r0 %r1;
    JF %r0 _l429_;
LABEL _l431_:
    MOV_ARGS %r2;
    MOV %r3 s;
    MOV_PROP %r1 %r2 %r3;
    MOV @t %r1;
    MOV %r1 a;
    PUSH %r1;
    MOV %r3 @t;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r1 $RET;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
LABEL _l430_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l428_;
LABEL _l429_:
    MOV %r0 0;
    VOID %r0;
    MOV %r1 @r;
    NE %r0 %r1;
    JF %r0 _l433_;
    MOV %r1 @r;
    THROW %r1;
    JMP _l432_;
LABEL _l433_:
LABEL _l432_:
    MOV %r0 @e;
    MOV $RET %r0;
    RET;
}
func @@f195(.e) {
    VAR t;
    VAR r;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @e;
    MOV @e .e;
    MOV %r1 @e;
    PUSH %r1;
    CALL_REG @o 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_CTX 'Object' 1 false;
    MOV t $RET;
    MOV_ARGS %r0;
    MOV %r1 1;
    MOV_PROP r %r0 %r1;
    MOV_ARGS %r1;
    MOV %r2 2;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Object' 1 false;
    MOV @s $RET;
    MOV %r1 t;
    MOV %r2 @e;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l436_;
    MOV %r2 r;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l436_:
    JF %r0 _l435_;
    MOV %r1 t;
    MOV $RET %r1;
    RET;
    JMP _l434_;
LABEL _l435_:
LABEL _l434_:
    NEW_OBJ @a;
    MOV %r1 r;
    JF %r1 _l438_;
    MOV %r2 r;
    PUSH %r2;
    FUNC %r2 @@f679;
    PUSH %r2;
    CALL_REG @n 2 false;
    JMP _l437_;
LABEL _l438_:
    MOV %r2 @a;
    PUSH %r2;
    MOV %r2 @e;
    PUSH %r2;
    CALL_REG @i 2 false;
LABEL _l437_:
    MOV %r0 @a;
    MOV $RET %r0;
    RET;
}
func @@f196(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "__proto__";
    MOV %r2 .e;
    NE %r1 %r2;
    JF %r1 _l440_;
    MOV %r0 @s;
    JMP _l439_;
LABEL _l440_:
    NEW_OBJ %r0;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r0 'configurable' %r2;
    MOV %r2 1;
    NEG %r2;
    SET_KEY %r0 'enumerable' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r0 'writable' %r2;
    MOV %r2 0;
    VOID %r2;
    SET_KEY %r0 'value' %r2;
LABEL _l439_:
    MOV %r1 @o;
    MOV %r2 .e;
    SET_KEY %r1 %r2 %r0;
}
func @@f197(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 null;
    MOV %r3 .e;
    EQ %r2 %r3;
    JF %r2 _l442_;
    MOV %r1 @i;
    JMP _l441_;
LABEL _l442_:
    MOV %r1 .e;
LABEL _l441_:
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f198(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "function";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f199(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l444_;
    MOV %r4 @i;
    MOV %r5 .e;
    TYPE_OF %r5;
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l444_:
    MOV %r0 %r1;
    JIF %r1 _l443_;
    MOV %r2 1;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l443_:
    MOV $RET %r0;
    RET;
}
func @@f200(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    MOV %r2 @n;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l445_;
    MOV %r2 null;
    MOV %r3 .e;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l445_:
    MOV $RET %r0;
    RET;
}
func @@f201() {
    REG %r0;
    REG %r1;
    REG %r2;
    TRY _l446_ _l447_;
    MOV %r1 "primitive";
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l446_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 1;
    NEG %r0;
    MOV $RET %r0;
    RET;
    END_BLOCK 2;
LABEL _l447_:
}
func @@f202(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    JF %r2 _l449_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_CTX 'Object' 1 false;
    MOV %r1 $RET;
    JMP _l448_;
LABEL _l449_:
    MOV %r1 .e;
LABEL _l448_:
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f203(.e, .t) {
    CLS @r;
    CLS @s;
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    NEW_OBJ @r;
    MOV_ARGS %r0;
    MOV %r1 2;
    MOV_PROP @s %r0 %r1;
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f680;
    PUSH %r1;
    CALL_REG @i 2 false;
    MOV %r0 @r;
    MOV $RET %r0;
    RET;
}
func @@f204(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 null;
    PUSH %r0;
    CALL_REG @o 1 false;
    MOV @t $RET;
    MOV_ARGS %r1;
    PUSH %r1;
    FUNC %r1 @@f681;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f205(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 null;
    PUSH %r0;
    CALL_REG @i 1 false;
    MOV @t $RET;
    MOV_ARGS %r1;
    PUSH %r1;
    FUNC %r1 @@f682;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f206() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_CTX %r0 "Object";
    MOV %r1 "setPrototypeOf";
    MOV_PROP e %r0 %r1;
    MOV_ARGS %r1;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    MOV t %r0;
    JIF %r0 _l450_;
    MOV %r1 @n;
    LG_OR t %r1;
LABEL _l450_:
    MOV %r1 "function";
    MOV %r2 e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l451_;
    MOV %r6 null;
    PUSH %r6;
    CALL_REG t 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @o;
    PUSH %r5;
    CALL_REG e 2 false;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    MOV %r3 @o;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l451_:
    MOV $RET %r0;
    RET;
}
func @@f207(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV %r1 null;
    MOV %r2 .t;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l454_;
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @a 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l454_:
    JF %r0 _l453_;
    MOV %r1 .e;
    MOV $RET %r1;
    RET;
    JMP _l452_;
LABEL _l453_:
LABEL _l452_:
    MOV %r1 "Prototype must be null or an object";
    PUSH %r1;
    CALL_CTX 'TypeError' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f208() {
    VAR e;
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 null;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    CALL_VAR %r0 %r1 1 false;
    MOV t $RET;
    NEW_OBJ r;
    MOV_CTX %r1 "Object";
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "__proto__";
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "getOwnPropertyDescriptor";
    CALL_VAR %r0 %r1 2 false;
    MOV n $RET;
    MOV %r0 n;
    JF %r0 _l456_;
    TRY _l457_ _l458_;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    MOV %r4 n;
    MOV %r5 "set";
    MOV_PROP %r3 %r4 %r5;
    MOV e %r3;
    MOV %r1 %r3;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    TRY_END;
LABEL _l457_:
    BLOCK 3;
    VAR e;
    GET_ERR e;
    END_BLOCK 3;
LABEL _l458_:
    MOV %r3 t;
    PUSH %r3;
    MOV_CTX %r3 "Object";
    MOV %r4 "getPrototypeOf";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 r;
    EQ %r1 %r2;
    JF %r1 _l460_;
    NEW_OBJ %r2;
    MOV %r3 e;
    SET_KEY %r2 'set' %r3;
    MOV %r3 2;
    SET_KEY %r2 'level' %r3;
    MOV $RET %r2;
    RET;
    JMP _l459_;
LABEL _l460_:
LABEL _l459_:
    JMP _l455_;
LABEL _l456_:
LABEL _l455_:
    MOV %r1 r;
    MOV %r2 t;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r3 t;
    PUSH %r3;
    MOV_CTX %r3 "Object";
    MOV %r4 "getPrototypeOf";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 r;
    EQ %r1 %r2;
    JF %r1 _l462_;
    NEW_OBJ %r0;
    MOV %r2 2;
    SET_KEY %r0 'level' %r2;
    JMP _l461_;
LABEL _l462_:
    MOV %r2 r;
    NEW_OBJ %r5;
    MOV t %r5;
    MOV %r3 %r5;
    MOV %r4 "__proto__";
    SET_KEY %r3 %r4 %r2;
    MOV %r4 t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getPrototypeOf";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 r;
    EQ %r2 %r3;
    MOV %r0 %r2;
    JF %r2 _l463_;
    NEW_OBJ %r3;
    MOV %r4 1;
    SET_KEY %r3 'level' %r4;
    LG_AND %r0 %r3;
LABEL _l463_:
LABEL _l461_:
    MOV $RET %r0;
    RET;
}
func @@f209(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @n 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 @s;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f210(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    CALL_REG @n 2 false;
    MOV %r2 $RET;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f211(.t, .r) {
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @n 2 false;
    MOV %r4 @e;
    MOV %r5 "nullPolyfill";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 @c;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV i %r2;
    MOV %r1 %r2;
    JF %r1 _l464_;
    MOV %r5 @e;
    MOV %r6 "nullPolyfill";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "__proto__";
    DEL %r3 %r4;
LABEL _l464_:
    MOV %r1 null;
    MOV %r2 .r;
    EQ %r1 %r2;
    JF %r1 _l465_;
    MOV %r4 @e;
    MOV %r5 "nullPolyfill";
    MOV_PROP %r3 %r4 %r5;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l465_:
    MOV %r1 .r;
    MOV %r2 .t;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 i;
    JF %r1 _l466_;
    MOV %r4 @e;
    MOV %r5 "nullPolyfill";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 "__proto__";
    PUSH %r3;
    MOV %r3 @f;
    PUSH %r3;
    CALL_REG @l 3 false;
    MOV %r2 $RET;
LABEL _l466_:
    MOV %r0 .t;
    MOV $RET %r0;
    RET;
}
func @@f212(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "function";
    MOV %r1 .e;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l468_;
    MOV %r2 .e;
    MOV %r3 " is not a function";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l467_;
LABEL _l468_:
LABEL _l467_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f213(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l470_;
    MOV %r2 "Cannot use null or undefined";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l469_;
LABEL _l470_:
LABEL _l469_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f214() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 "function";
    MOV %r3 @n;
    MOV %r4 "contains";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l471_;
    MOV %r3 0;
    NEG %r3;
    MOV %r5 "dwa";
    PUSH %r5;
    MOV %r5 @n;
    MOV %r6 "contains";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l472_;
    MOV %r4 1;
    NEG %r4;
    MOV %r6 "foo";
    PUSH %r6;
    MOV %r6 @n;
    MOV %r7 "contains";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l472_:
    LG_AND %r0 %r2;
LABEL _l471_:
    MOV $RET %r0;
    RET;
}
func @@f215(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV_ARGS %r3;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 3 false;
    MOV %r0 $RET;
    MOV %r1 1;
    MINUS %r1;
    GT %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f216(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r2 "string";
    MOV %r3 .e;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l474_;
    MOV %r5 .e;
    MOV %r4 %r5;
    JF %r5 _l476_;
    MOV %r6 "object";
    MOV %r7 .e;
    TYPE_OF %r7;
    WEQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l476_:
    MOV %r3 %r4;
    JF %r4 _l475_;
    MOV %r6 .e;
    MOV_CTX %r7 "String";
    INST_OF %r6 %r7;
    MOV %r5 %r6;
    JIF %r6 _l477_;
    MOV %r9 .e;
    PUSH %r9;
    MOV %r9 @n;
    MOV %r10 "call";
    CALL_VAR %r9 %r10 1 false;
    MOV %r7 $RET;
    MOV %r8 @i;
    EQ %r7 %r8;
    LG_OR %r5 %r7;
LABEL _l477_:
    LG_AND %r3 %r5;
LABEL _l475_:
    LG_OR %r1 %r3;
LABEL _l474_:
    MOV %r0 %r1;
    JIF %r1 _l473_;
    MOV %r2 1;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l473_:
    MOV $RET %r0;
    RET;
}
func @@f217(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 @n;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l479_;
    MOV %r2 "Constructor requires 'new'";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l478_;
LABEL _l479_:
LABEL _l478_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @u;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 .t;
    JF %r1 _l481_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 "key+value";
    PUSH %r3;
    MOV %r3 @o;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    JF %r2 _l483_;
    MOV %r0 "key+value";
    JMP _l482_;
LABEL _l483_:
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 "key";
    PUSH %r4;
    MOV %r4 @o;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    JF %r3 _l484_;
    MOV %r0 "key";
    JMP _l482_;
LABEL _l484_:
    MOV %r0 "value";
LABEL _l482_:
    JMP _l480_;
LABEL _l481_:
    MOV %r0 "value";
LABEL _l480_:
    MOV .t %r0;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 "__kind__";
    PUSH %r0;
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @s 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @c 3 false;
}
func @@f218(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 "value";
    MOV_THIS %r3;
    MOV %r4 "__kind__";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l486_;
    MOV_THIS %r4;
    MOV %r5 "__list__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .e;
    MOV_PROP %r0 %r2 %r3;
    JMP _l485_;
LABEL _l486_:
    MOV %r2 "key+value";
    MOV_THIS %r4;
    MOV %r5 "__kind__";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l487_;
    NEW_ARR %r0;
    MOV %r3 .e;
    SET_KEY %r0 0 %r3;
    MOV_THIS %r6;
    MOV %r7 "__list__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r0 1 %r3;
    JMP _l485_;
LABEL _l487_:
    MOV %r0 .e;
LABEL _l485_:
    MOV $RET %r0;
    RET;
}
func @@f219(.e, .t) {
    VAR r;
    VAR l;
    CLS @f;
    CLS @h;
    VAR p;
    VAR d;
    VAR b;
    VAR g;
    CLS @_;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    CLS @t;
    MOV @t .t;
    MOV_ARGS %r0;
    MOV %r1 2;
    MOV_PROP @_ %r0 %r1;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @a 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l492_;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l492_:
    JF %r1 _l491_;
    MOV %r2 "array";
    MOV r %r2;
    JMP _l490_;
LABEL _l491_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @o 1 false;
    MOV %r2 $RET;
    JF %r2 _l493_;
    MOV %r3 "string";
    MOV r %r3;
    JMP _l490_;
LABEL _l493_:
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @s 1 false;
    MOV %r3 $RET;
    MOV .e %r3;
LABEL _l490_:
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @i 1 false;
    FUNC %r1 @@f683;
    MOV @f %r1;
    MOV %r0 "array";
    MOV %r1 r;
    NE %r0 %r1;
    JF %r0 _l489_;
    MOV %r1 "string";
    MOV %r2 r;
    NE %r1 %r2;
    JF %r1 _l495_;
    MOV %r3 .e;
    MOV %r4 "next";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV l %r2;
LABEL _l496_:
    MOV %r3 l;
    MOV %r4 "done";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    JF %r2 _l497_;
LABEL _l499_:
    MOV %r4 @t;
    PUSH %r4;
    MOV %r4 @_;
    PUSH %r4;
    MOV %r5 l;
    MOV %r6 "value";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @f;
    PUSH %r4;
    MOV %r4 @u;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 4 false;
    MOV %r3 @h;
    JF %r3 _l501_;
    RET;
    JMP _l500_;
LABEL _l501_:
LABEL _l500_:
    MOV %r4 .e;
    MOV %r5 "next";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV l %r3;
    JMP _l496_;
LABEL _l497_:
    JMP _l494_;
LABEL _l495_:
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV d %r2;
    MOV %r2 0;
    MOV p %r2;
LABEL _l502_:
    MOV %r3 p;
    MOV %r4 d;
    LT %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l506_;
    MOV %r6 .e;
    MOV %r7 p;
    MOV_PROP %r5 %r6 %r7;
    MOV b %r5;
    MOV %r7 p;
    MOV %r9 1;
    ADD %r7 %r9;
    MOV %r8 d;
    LT %r7 %r8;
    MOV %r6 %r7;
    JF %r7 _l509_;
    MOV %r11 0;
    PUSH %r11;
    MOV %r11 b;
    MOV %r12 "charCodeAt";
    CALL_VAR %r11 %r12 1 false;
    MOV %r10 $RET;
    MOV g %r10;
    MOV %r8 %r10;
    MOV %r9 55296;
    GE %r8 %r9;
    LG_AND %r6 %r8;
LABEL _l509_:
    MOV %r5 %r6;
    JF %r6 _l508_;
    MOV %r7 g;
    MOV %r8 56319;
    LE %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l508_:
    JF %r5 _l507_;
    MOV %r8 .e;
    MOV %r10 p;
    ADD %r10 1;
    MOV %r9 %r10;
    MOV p %r10;
    MOV_PROP %r7 %r8 %r9;
    MOV %r8 b;
    ADD %r8 %r7;
    MOV b %r8;
    MOV %r6 %r8;
LABEL _l507_:
    MOV %r5 @t;
    PUSH %r5;
    MOV %r5 @_;
    PUSH %r5;
    MOV %r5 b;
    PUSH %r5;
    MOV %r5 @f;
    PUSH %r5;
    MOV %r5 @u;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 4 false;
    MOV %r4 @h;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l506_:
    JF %r2 _l503_;
LABEL _l505_:
LABEL _l504_:
    MOV %r3 p;
    ADD %r3 1;
    MOV p %r3;
    JMP _l502_;
LABEL _l503_:
LABEL _l494_:
    JMP _l488_;
LABEL _l489_:
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f684;
    PUSH %r1;
    MOV %r1 @c;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
LABEL _l488_:
}
func @@f220(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "function";
    MOV %r5 .e;
    PUSH %r5;
    CALL_REG @a 1 false;
    MOV %r3 $RET;
    MOV %r4 @u;
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l511_;
    MOV %r2 .e;
    MOV %r3 @u;
    CALL_VAR %r2 %r3 0 false;
    MOV %r0 $RET;
    JMP _l510_;
LABEL _l511_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    JF %r2 _l512_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @o 1 true;
    MOV %r0 $RET;
    JMP _l510_;
LABEL _l512_:
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @i 1 false;
    MOV %r3 $RET;
    JF %r3 _l513_;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @s 1 true;
    MOV %r0 $RET;
    JMP _l510_;
LABEL _l513_:
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @o 1 true;
    MOV %r0 $RET;
LABEL _l510_:
    MOV $RET %r0;
    RET;
}
func @@f221(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 @n;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l515_;
    MOV %r2 "Constructor requires 'new'";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l514_;
LABEL _l515_:
LABEL _l514_:
    MOV_THIS %r0;
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r2 "w";
    PUSH %r2;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @a 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @u 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 '__list__' %r1;
    MOV %r2 "w";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @u 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 '__context__' %r1;
    MOV %r2 "w";
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    CALL_REG @u 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 '__nextIndex__' %r1;
    PUSH %r0;
    CALL_REG @h 2 false;
    MOV %r0 .t;
    JF %r0 _l516_;
    MOV %r3 .t;
    MOV %r4 "on";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @s 1 false;
    MOV %r2 "_add";
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "_onAdd";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "_delete";
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "_onDelete";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "_clear";
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "_onClear";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l516_:
}
func @@f222() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r1;
    MOV %r2 "__list__";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l518_;
    MOV_THIS %r4;
    MOV %r5 "__redo__";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l521_;
    MOV %r4 0;
    VOID %r4;
    MOV_THIS %r9;
    MOV %r10 "__redo__";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "shift";
    CALL_VAR %r7 %r8 0 false;
    MOV %r6 $RET;
    MOV e %r6;
    MOV %r5 %r6;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l521_:
    JF %r2 _l520_;
    MOV %r1 e;
    JMP _l519_;
LABEL _l520_:
    MOV_THIS %r5;
    MOV %r6 "__nextIndex__";
    MOV_PROP %r3 %r5 %r6;
    MOV_THIS %r7;
    MOV %r8 "__list__";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    JF %r3 _l522_;
    MOV_THIS %r5;
    MOV %r6 "__nextIndex__";
    MOV_PROP %r4 %r5 %r6;
    MOV %r1 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "__nextIndex__";
    SET_KEY %r5 %r6 %r4;
    JMP _l519_;
LABEL _l522_:
    MOV_THIS %r4;
    MOV %r5 "_unBind";
    CALL_VAR %r4 %r5 0 false;
    MOV %r1 $RET;
    VOID %r1;
LABEL _l519_:
    MOV $RET %r1;
    RET;
    JMP _l517_;
LABEL _l518_:
LABEL _l517_:
}
func @@f223() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r2;
    MOV %r3 "_next";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_createResult";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f224(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .e;
    EQ %r1 %r2;
    JF %r1 _l524_;
    NEW_OBJ %r0;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r0 'done' %r2;
    MOV %r2 0;
    VOID %r2;
    SET_KEY %r0 'value' %r2;
    JMP _l523_;
LABEL _l524_:
    NEW_OBJ %r0;
    MOV %r2 1;
    NEG %r2;
    SET_KEY %r0 'done' %r2;
    MOV %r3 .e;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_resolve";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    SET_KEY %r0 'value' %r2;
LABEL _l523_:
    MOV $RET %r0;
    RET;
}
func @@f225(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "__list__";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 .e;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f226() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "__list__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    MOV %r1 "__redo__";
    DEL %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "__context__";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l525_;
    MOV %r2 "_add";
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "_onAdd";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "__context__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "off";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "_delete";
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "_onDelete";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "__context__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "off";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "_clear";
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "_onClear";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "__context__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "off";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 null;
    MOV_THIS %r3;
    MOV %r4 "__context__";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l525_:
}
func @@f227() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "[object ";
    MOV_THIS %r4;
    MOV %r7 @l;
    MOV %r6 "toStringTag";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l526_;
    MOV %r4 "Object";
    LG_OR %r2 %r4;
LABEL _l526_:
    ADD %r0 %r2;
    MOV %r1 "]";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f228(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @e;
    MOV @e .e;
    MOV %r0 @e;
    MOV_THIS %r2;
    MOV %r3 "__nextIndex__";
    MOV_PROP %r1 %r2 %r3;
    GE %r0 %r1;
    JIF %r0 _l527_;
    MOV_THIS %r3;
    MOV %r4 "__nextIndex__";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 1;
    MOV_THIS %r3;
    MOV %r4 "__nextIndex__";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r3;
    MOV %r4 "__redo__";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l529_;
    FUNC %r3 @@f685;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "__redo__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "forEach";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 @e;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "__redo__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l528_;
LABEL _l529_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 "__redo__";
    PUSH %r3;
    MOV %r4 "c";
    PUSH %r4;
    NEW_ARR %r4;
    MOV %r5 @e;
    SET_KEY %r4 0 %r5;
    PUSH %r4;
    CALL_REG @u 2 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @f 3 false;
    MOV %r1 $RET;
LABEL _l528_:
LABEL _l527_:
}
func @@f229(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    CLS @e;
    MOV @e .e;
    MOV %r0 @e;
    MOV_THIS %r2;
    MOV %r3 "__nextIndex__";
    MOV_PROP %r1 %r2 %r3;
    GE %r0 %r1;
    JIF %r0 _l530_;
    MOV_THIS %r3;
    MOV %r4 "__nextIndex__";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 1;
    MOV_THIS %r3;
    MOV %r4 "__nextIndex__";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r3;
    MOV %r4 "__redo__";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l531_;
    MOV %r4 1;
    MINUS %r4;
    MOV %r7 @e;
    PUSH %r7;
    MOV_THIS %r9;
    MOV %r10 "__redo__";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "indexOf";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV t %r6;
    MOV %r5 %r6;
    NE %r4 %r5;
    JF %r4 _l532_;
    MOV %r6 t;
    PUSH %r6;
    MOV %r6 1;
    PUSH %r6;
    MOV_THIS %r8;
    MOV %r9 "__redo__";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "splice";
    CALL_VAR %r6 %r7 2 false;
    MOV %r5 $RET;
LABEL _l532_:
    FUNC %r4 @@f686;
    PUSH %r4;
    MOV_THIS %r4;
    PUSH %r4;
    MOV_THIS %r6;
    MOV %r7 "__redo__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "forEach";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l531_:
LABEL _l530_:
}
func @@f230() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r1;
    MOV %r2 "__redo__";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l533_;
    MOV_THIS %r3;
    MOV %r4 "__redo__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l533_:
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "__nextIndex__";
    SET_KEY %r1 %r2 %r0;
}
func @@f231() {
    REG %r0;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f232(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @i 1 false;
    MOV %r1 $RET;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l534_;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @a 1 false;
    MOV %r3 $RET;
    NEG %r3;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l535_;
    MOV %r6 .e;
    PUSH %r6;
    CALL_REG @o 1 false;
    MOV %r5 $RET;
    NEG %r5;
    NEG %r5;
    MOV %r4 %r5;
    JIF %r5 _l536_;
    MOV %r8 .e;
    PUSH %r8;
    CALL_REG @n 1 false;
    MOV %r7 $RET;
    NEG %r7;
    NEG %r7;
    MOV %r6 %r7;
    JIF %r7 _l537_;
    MOV %r8 "function";
    MOV %r10 .e;
    MOV %r11 @s;
    MOV_PROP %r9 %r10 %r11;
    TYPE_OF %r9;
    WEQ %r8 %r9;
    LG_OR %r6 %r8;
LABEL _l537_:
    LG_OR %r4 %r6;
LABEL _l536_:
    LG_OR %r2 %r4;
LABEL _l535_:
    LG_AND %r0 %r2;
LABEL _l534_:
    MOV $RET %r0;
    RET;
}
func @@f233(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r0;
    MOV %r1 @n;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l539_;
    MOV %r2 "Constructor requires 'new'";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l538_;
LABEL _l539_:
LABEL _l538_:
    MOV %r1 .e;
    PUSH %r1;
    CALL_CTX 'String' 1 false;
    MOV %r0 $RET;
    MOV .e %r0;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @a;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 "__length__";
    PUSH %r0;
    MOV %r1 "";
    PUSH %r1;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @o 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @u 3 false;
}
func @@f234() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r1;
    MOV %r2 "__list__";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l541_;
    MOV_THIS %r4;
    MOV %r5 "__nextIndex__";
    MOV_PROP %r2 %r4 %r5;
    MOV_THIS %r4;
    MOV %r5 "__length__";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    JF %r2 _l543_;
    MOV_THIS %r4;
    MOV %r5 "__nextIndex__";
    MOV_PROP %r3 %r4 %r5;
    MOV %r1 %r3;
    ADD %r3 1;
    MOV_THIS %r4;
    MOV %r5 "__nextIndex__";
    SET_KEY %r4 %r5 %r3;
    JMP _l542_;
LABEL _l543_:
    MOV_THIS %r3;
    MOV %r4 "_unBind";
    CALL_VAR %r3 %r4 0 false;
    MOV %r1 $RET;
    VOID %r1;
LABEL _l542_:
    MOV $RET %r1;
    RET;
    JMP _l540_;
LABEL _l541_:
LABEL _l540_:
}
func @@f235(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r2;
    MOV %r3 "__list__";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .e;
    MOV_PROP r %r0 %r1;
    MOV_THIS %r3;
    MOV %r4 "__nextIndex__";
    MOV_PROP %r1 %r3 %r4;
    MOV_THIS %r3;
    MOV %r4 "__length__";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l545_;
    MOV %r0 r;
    JMP _l544_;
LABEL _l545_:
    MOV %r6 0;
    PUSH %r6;
    MOV %r6 r;
    MOV %r7 "charCodeAt";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV t %r5;
    MOV %r3 %r5;
    MOV %r4 55296;
    GE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l547_;
    MOV %r4 t;
    MOV %r5 56319;
    LE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l547_:
    JF %r2 _l546_;
    MOV %r0 r;
    MOV_THIS %r6;
    MOV %r7 "__list__";
    MOV_PROP %r4 %r6 %r7;
    MOV_THIS %r7;
    MOV %r8 "__nextIndex__";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    ADD %r6 1;
    MOV_THIS %r7;
    MOV %r8 "__nextIndex__";
    SET_KEY %r7 %r8 %r6;
    MOV_PROP %r3 %r4 %r5;
    ADD %r0 %r3;
    JMP _l544_;
LABEL _l546_:
    MOV %r0 r;
LABEL _l544_:
    MOV $RET %r0;
    RET;
}
func @@f236(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l549_;
    MOV %r2 .e;
    MOV %r3 " is not iterable";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l548_;
LABEL _l549_:
LABEL _l548_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f237() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    REG %r16;
    REG %r17;
    REG %r18;
    REG %r19;
    REG %r20;
    REG %r21;
    REG %r22;
    REG %r23;
    REG %r24;
    REG %r25;
    REG %r26;
    REG %r27;
    REG %r28;
    REG %r29;
    REG %r30;
    REG %r31;
    REG %r32;
    REG %r33;
    MOV %r0 "function";
    MOV_CTX %r1 "Map";
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l551_;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l550_;
LABEL _l551_:
LABEL _l550_:
    TRY _l552_ _l553_;
    NEW_ARR %r1;
    NEW_ARR %r2;
    MOV %r3 "raz";
    SET_KEY %r2 0 %r3;
    MOV %r3 "one";
    SET_KEY %r2 1 %r3;
    SET_KEY %r1 0 %r2;
    NEW_ARR %r2;
    MOV %r3 "dwa";
    SET_KEY %r2 0 %r3;
    MOV %r3 "two";
    SET_KEY %r2 1 %r3;
    SET_KEY %r1 1 %r2;
    NEW_ARR %r2;
    MOV %r3 "trzy";
    SET_KEY %r2 0 %r3;
    MOV %r3 "three";
    SET_KEY %r2 1 %r3;
    SET_KEY %r1 2 %r2;
    PUSH %r1;
    CALL_CTX 'Map' 1 true;
    MOV %r0 $RET;
    MOV e %r0;
    TRY_END;
LABEL _l552_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 1;
    NEG %r0;
    MOV $RET %r0;
    RET;
    END_BLOCK 2;
LABEL _l553_:
    MOV %r1 "[object Map]";
    MOV %r3 e;
    PUSH %r3;
    CALL_CTX 'String' 1 false;
    MOV %r2 $RET;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l554_;
    MOV %r3 3;
    MOV %r5 e;
    MOV %r6 "size";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l555_;
    MOV %r5 "function";
    MOV %r7 e;
    MOV %r8 "clear";
    MOV_PROP %r6 %r7 %r8;
    TYPE_OF %r6;
    WEQ %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l556_;
    MOV %r7 "function";
    MOV %r9 e;
    MOV %r10 "delete";
    MOV_PROP %r8 %r9 %r10;
    TYPE_OF %r8;
    WEQ %r7 %r8;
    MOV %r6 %r7;
    JF %r7 _l557_;
    MOV %r9 "function";
    MOV %r11 e;
    MOV %r12 "entries";
    MOV_PROP %r10 %r11 %r12;
    TYPE_OF %r10;
    WEQ %r9 %r10;
    MOV %r8 %r9;
    JF %r9 _l558_;
    MOV %r11 "function";
    MOV %r13 e;
    MOV %r14 "forEach";
    MOV_PROP %r12 %r13 %r14;
    TYPE_OF %r12;
    WEQ %r11 %r12;
    MOV %r10 %r11;
    JF %r11 _l559_;
    MOV %r13 "function";
    MOV %r15 e;
    MOV %r16 "get";
    MOV_PROP %r14 %r15 %r16;
    TYPE_OF %r14;
    WEQ %r13 %r14;
    MOV %r12 %r13;
    JF %r13 _l560_;
    MOV %r15 "function";
    MOV %r17 e;
    MOV %r18 "has";
    MOV_PROP %r16 %r17 %r18;
    TYPE_OF %r16;
    WEQ %r15 %r16;
    MOV %r14 %r15;
    JF %r15 _l561_;
    MOV %r17 "function";
    MOV %r19 e;
    MOV %r20 "keys";
    MOV_PROP %r18 %r19 %r20;
    TYPE_OF %r18;
    WEQ %r17 %r18;
    MOV %r16 %r17;
    JF %r17 _l562_;
    MOV %r19 "function";
    MOV %r21 e;
    MOV %r22 "set";
    MOV_PROP %r20 %r21 %r22;
    TYPE_OF %r20;
    WEQ %r19 %r20;
    MOV %r18 %r19;
    JF %r19 _l563_;
    MOV %r21 "function";
    MOV %r23 e;
    MOV %r24 "values";
    MOV_PROP %r22 %r23 %r24;
    TYPE_OF %r22;
    WEQ %r21 %r22;
    MOV %r20 %r21;
    JF %r21 _l564_;
    MOV %r23 1;
    NEG %r23;
    MOV %r30 e;
    MOV %r31 "entries";
    CALL_VAR %r30 %r31 0 false;
    MOV %r28 $RET;
    MOV %r29 "next";
    CALL_VAR %r28 %r29 0 false;
    MOV %r27 $RET;
    MOV t %r27;
    MOV %r25 %r27;
    MOV %r26 "done";
    MOV_PROP %r24 %r25 %r26;
    EQ %r23 %r24;
    MOV %r22 %r23;
    JF %r23 _l565_;
    MOV %r26 t;
    MOV %r27 "value";
    MOV_PROP %r25 %r26 %r27;
    NEG %r25;
    NEG %r25;
    MOV %r24 %r25;
    JF %r25 _l566_;
    MOV %r27 "raz";
    MOV %r31 t;
    MOV %r32 "value";
    MOV_PROP %r29 %r31 %r32;
    MOV %r30 0;
    MOV_PROP %r28 %r29 %r30;
    EQ %r27 %r28;
    MOV %r26 %r27;
    JF %r27 _l567_;
    MOV %r28 "one";
    MOV %r32 t;
    MOV %r33 "value";
    MOV_PROP %r30 %r32 %r33;
    MOV %r31 1;
    MOV_PROP %r29 %r30 %r31;
    EQ %r28 %r29;
    LG_AND %r26 %r28;
LABEL _l567_:
    LG_AND %r24 %r26;
LABEL _l566_:
    LG_AND %r22 %r24;
LABEL _l565_:
    LG_AND %r20 %r22;
LABEL _l564_:
    LG_AND %r18 %r20;
LABEL _l563_:
    LG_AND %r16 %r18;
LABEL _l562_:
    LG_AND %r14 %r16;
LABEL _l561_:
    LG_AND %r12 %r14;
LABEL _l560_:
    LG_AND %r10 %r12;
LABEL _l559_:
    LG_AND %r8 %r10;
LABEL _l558_:
    LG_AND %r6 %r8;
LABEL _l557_:
    LG_AND %r4 %r6;
LABEL _l556_:
    LG_AND %r2 %r4;
LABEL _l555_:
    LG_AND %r0 %r2;
LABEL _l554_:
    MOV $RET %r0;
    RET;
}
func @@f238(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 @n;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l569_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @n 2 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l568_;
LABEL _l569_:
LABEL _l568_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r1 .e;
    MOV %r2 "__mapKeysData__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 .t;
    MOV %r0 %r1;
    JF %r1 _l571_;
    MOV %r3 @u;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l571_:
    JIF %r0 _l570_;
    MOV %r2 "key+value";
    MOV .t %r2;
    MOV %r1 %r2;
LABEL _l570_:
    MOV_THIS %r0;
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @o 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 '__kind__' %r1;
    MOV %r2 "w";
    PUSH %r2;
    MOV %r3 .e;
    MOV %r4 "__mapValuesData__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @o 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 '__values__' %r1;
    PUSH %r0;
    CALL_REG @c 2 false;
}
func @@f239(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 "value";
    MOV_THIS %r3;
    MOV %r4 "__kind__";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l573_;
    MOV_THIS %r4;
    MOV %r5 "__values__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .e;
    MOV_PROP %r0 %r2 %r3;
    JMP _l572_;
LABEL _l573_:
    MOV %r2 "key";
    MOV_THIS %r4;
    MOV %r5 "__kind__";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l574_;
    MOV_THIS %r5;
    MOV %r6 "__list__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .e;
    MOV_PROP %r0 %r3 %r4;
    JMP _l572_;
LABEL _l574_:
    NEW_ARR %r0;
    MOV_THIS %r6;
    MOV %r7 "__list__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r0 0 %r3;
    MOV_THIS %r6;
    MOV %r7 "__values__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r0 1 %r3;
LABEL _l572_:
    MOV $RET %r0;
    RET;
}
func @@f240() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "__values__";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @l;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
}
func @@f241() {
    REG %r0;
    MOV %r0 "[object Map Iterator]";
    MOV $RET %r0;
    RET;
}
func @@f242() {
    CLS @e;
    CLS @t;
    VAR r;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_ARGS %r0;
    MOV %r1 0;
    MOV_PROP i %r0 %r1;
    MOV_THIS %r0;
    MOV %r1 @n;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l576_;
    MOV %r2 "Constructor requires 'new'";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l575_;
LABEL _l576_:
LABEL _l575_:
    MOV %r4 @b;
    MOV %r3 %r4;
    JF %r4 _l580_;
    MOV %r5 @s;
    LG_AND %r3 %r5;
LABEL _l580_:
    MOV %r2 %r3;
    JF %r3 _l579_;
    MOV_CTX %r4 "Map";
    MOV %r5 @n;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l579_:
    JF %r2 _l578_;
    CALL_CTX 'Map' 0 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r4;
    PUSH %r4;
    CALL_REG @y 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @s 2 false;
    MOV %r1 $RET;
    JMP _l577_;
LABEL _l578_:
    MOV_THIS %r1;
LABEL _l577_:
    MOV r %r1;
    MOV %r1 null;
    MOV %r2 i;
    WNE %r1 %r2;
    JF %r1 _l581_;
    MOV %r3 i;
    PUSH %r3;
    CALL_REG @h 1 false;
    MOV %r2 $RET;
LABEL _l581_:
    MOV %r1 r;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r3 "c";
    PUSH %r3;
    NEW_ARR %r4;
    MOV @e %r4;
    MOV %r3 %r4;
    PUSH %r3;
    CALL_REG @c 2 false;
    MOV %r2 $RET;
    SET_KEY %r1 '__mapKeysData__' %r2;
    MOV %r3 "c";
    PUSH %r3;
    NEW_ARR %r4;
    MOV @t %r4;
    MOV %r3 %r4;
    PUSH %r3;
    CALL_REG @c 2 false;
    MOV %r2 $RET;
    SET_KEY %r1 '__mapValuesData__' %r2;
    PUSH %r1;
    CALL_REG @_ 2 false;
    MOV %r1 i;
    JF %r1 _l583_;
    MOV %r2 i;
    PUSH %r2;
    FUNC %r2 @@f687;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    CALL_REG @p 3 false;
    MOV %r0 r;
    JMP _l582_;
LABEL _l583_:
    MOV %r0 r;
LABEL _l582_:
    MOV $RET %r0;
    RET;
}
func @@f243() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "__mapKeysData__";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l584_;
    MOV_THIS %r3;
    MOV %r4 "__mapKeysData__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV_THIS %r3;
    MOV %r4 "__mapValuesData__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 "_clear";
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l584_:
}
func @@f244(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "__mapKeysData__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV t $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 t;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l585_;
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "__mapKeysData__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "splice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "__mapValuesData__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "splice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 "_delete";
    PUSH %r3;
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 3 false;
    MOV %r2 0;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l585_:
    MOV $RET %r0;
    RET;
}
func @@f245() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 "key+value";
    PUSH %r1;
    CALL_REG @d 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f246(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_ARGS %r0;
    MOV %r1 1;
    MOV_PROP n %r0 %r1;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @a 1 false;
    MOV_THIS %r4;
    MOV %r5 "entries";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV t %r3;
    MOV %r1 %r3;
    MOV %r2 "_next";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV r %r0;
LABEL _l586_:
    MOV %r0 0;
    VOID %r0;
    MOV %r1 r;
    NE %r0 %r1;
    JF %r0 _l587_;
LABEL _l589_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV_THIS %r4;
    MOV %r5 "__mapValuesData__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 r;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r4;
    MOV %r5 "__mapKeysData__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 r;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @g;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 5 false;
    MOV %r2 t;
    MOV %r3 "_next";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV r %r1;
    JMP _l586_;
LABEL _l587_:
}
func @@f247(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r1;
    MOV %r2 "__mapKeysData__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV t $RET;
    MOV %r0 1;
    MINUS %r0;
    MOV %r1 t;
    NE %r0 %r1;
    JF %r0 _l591_;
    MOV_THIS %r4;
    MOV %r5 "__mapValuesData__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 t;
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l590_;
LABEL _l591_:
LABEL _l590_:
}
func @@f248(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 1;
    MINUS %r0;
    MOV_THIS %r3;
    MOV %r4 "__mapKeysData__";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    NE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f249() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 "key";
    PUSH %r1;
    CALL_REG @d 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f250(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r1;
    MOV %r2 "__mapKeysData__";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV n $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 n;
    EQ %r1 %r2;
    JF %r1 _l592_;
    MOV %r5 .e;
    PUSH %r5;
    MOV_THIS %r7;
    MOV %r8 "__mapKeysData__";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "push";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 1;
    SUB %r3 %r4;
    MOV n %r3;
    MOV %r3 0;
    NEG %r3;
    MOV r %r3;
    MOV %r2 %r3;
LABEL _l592_:
    MOV %r1 .t;
    MOV_THIS %r4;
    MOV %r5 "__mapValuesData__";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 n;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 r;
    JF %r1 _l593_;
    MOV %r3 "_add";
    PUSH %r3;
    MOV %r3 n;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 3 false;
    MOV %r2 $RET;
LABEL _l593_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f251() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "__mapKeysData__";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f252() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 "value";
    PUSH %r1;
    CALL_REG @d 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f253() {
    REG %r0;
    MOV %r0 "[object Map]";
    MOV $RET %r0;
    RET;
}
func @@f254() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r1;
    MOV %r2 "entries";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f255() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 "function";
    MOV_CTX %r1 "Symbol";
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l595_;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l594_;
LABEL _l595_:
LABEL _l594_:
    MOV %r1 "test symbol";
    PUSH %r1;
    CALL_CTX 'Symbol' 1 false;
    MOV %r0 $RET;
    MOV e %r0;
    TRY _l596_ _l597_;
    MOV %r0 e;
    PUSH %r0;
    CALL_CTX 'String' 1 false;
    TRY_END;
LABEL _l596_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 1;
    NEG %r0;
    MOV $RET %r0;
    RET;
    END_BLOCK 2;
LABEL _l597_:
    MOV %r2 @n;
    MOV_CTX %r4 "Symbol";
    MOV %r5 "iterator";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l598_;
    MOV %r4 @n;
    MOV_CTX %r6 "Symbol";
    MOV %r7 "toPrimitive";
    MOV_PROP %r5 %r6 %r7;
    TYPE_OF %r5;
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l599_;
    MOV %r5 @n;
    MOV_CTX %r7 "Symbol";
    MOV %r8 "toStringTag";
    MOV_PROP %r6 %r7 %r8;
    TYPE_OF %r6;
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l599_:
    LG_AND %r0 %r2;
LABEL _l598_:
    MOV $RET %r0;
    RET;
}
func @@f256(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    MOV %r1 .e;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l600_;
    MOV %r3 "symbol";
    MOV %r4 .e;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l601_;
    MOV %r6 .e;
    MOV %r7 "constructor";
    MOV_PROP %r5 %r6 %r7;
    NEG %r5;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l602_;
    MOV %r7 "Symbol";
    MOV %r11 .e;
    MOV %r12 "constructor";
    MOV_PROP %r9 %r11 %r12;
    MOV %r10 "name";
    MOV_PROP %r8 %r9 %r10;
    EQ %r7 %r8;
    MOV %r6 %r7;
    JF %r7 _l603_;
    MOV %r8 "Symbol";
    MOV %r10 .e;
    MOV %r14 .e;
    MOV %r15 "constructor";
    MOV_PROP %r13 %r14 %r15;
    MOV %r12 "toStringTag";
    MOV_PROP %r11 %r13 %r12;
    MOV_PROP %r9 %r10 %r11;
    EQ %r8 %r9;
    LG_AND %r6 %r8;
LABEL _l603_:
    LG_AND %r4 %r6;
LABEL _l602_:
    LG_OR %r2 %r4;
LABEL _l601_:
    LG_AND %r0 %r2;
LABEL _l600_:
    MOV $RET %r0;
    RET;
}
func @@f257(.e) {
    CLS @t;
    CLS @r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV n 0;
LABEL _l604_:
    MOV %r1 @d;
    MOV %r2 .e;
    MOV %r4 n;
    MOV %r3 %r4;
    JIF %r4 _l608_;
    MOV %r5 "";
    LG_OR %r3 %r5;
LABEL _l608_:
    ADD %r2 %r3;
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l605_;
LABEL _l607_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l604_;
LABEL _l605_:
    MOV %r1 0;
    NEG %r1;
    MOV %r2 @d;
    MOV %r5 n;
    MOV %r4 %r5;
    JIF %r5 _l609_;
    MOV %r6 "";
    LG_OR %r4 %r6;
LABEL _l609_:
    MOV %r5 .e;
    ADD %r5 %r4;
    MOV .e %r5;
    MOV %r3 %r5;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @h;
    PUSH %r1;
    MOV %r2 "@@";
    MOV %r3 .e;
    ADD %r2 %r3;
    MOV @t %r2;
    MOV %r1 %r2;
    PUSH %r1;
    MOV %r2 null;
    PUSH %r2;
    FUNC %r2 @@f688;
    PUSH %r2;
    MOV %r2 @a;
    MOV %r3 "gs";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @f 3 false;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f258(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 @o;
    INST_OF %r0 %r1;
    JF %r0 _l611_;
    MOV %r2 "Symbol is not a constructor";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l610_;
LABEL _l611_:
LABEL _l610_:
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f259(.t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 @e;
    INST_OF %r0 %r1;
    JF %r0 _l613_;
    MOV %r2 "Symbol is not a constructor";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l612_;
LABEL _l613_:
LABEL _l612_:
    MOV %r1 @s;
    JF %r1 _l615_;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    JMP _l614_;
LABEL _l615_:
    MOV %r4 @o;
    MOV %r5 "prototype";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r2 $RET;
    MOV r %r2;
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .t;
    EQ %r3 %r4;
    JF %r3 _l617_;
    MOV %r2 "";
    JMP _l616_;
LABEL _l617_:
    MOV %r4 .t;
    PUSH %r4;
    CALL_CTX 'String' 1 false;
    MOV %r2 $RET;
LABEL _l616_:
    MOV .t %r2;
    MOV %r2 r;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r4 "";
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    CALL_REG @a 2 false;
    MOV %r3 $RET;
    SET_KEY %r2 '__description__' %r3;
    MOV %r4 "";
    PUSH %r4;
    MOV %r5 .t;
    PUSH %r5;
    CALL_REG @b 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @a 2 false;
    MOV %r3 $RET;
    SET_KEY %r2 '__name__' %r3;
    PUSH %r2;
    CALL_REG @l 2 false;
    MOV %r0 $RET;
LABEL _l614_:
    MOV $RET %r0;
    RET;
}
func @@f260(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @p;
    MOV %r3 .e;
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l619_;
    MOV %r2 @p;
    MOV %r3 .e;
    MOV_PROP %r0 %r2 %r3;
    JMP _l618_;
LABEL _l619_:
    MOV %r4 .e;
    PUSH %r4;
    CALL_CTX 'String' 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    MOV %r3 @p;
    MOV %r4 .e;
    SET_KEY %r3 %r4 %r2;
    MOV %r0 %r2;
LABEL _l618_:
    MOV $RET %r0;
    RET;
}
func @@f261(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV %r0 @p;
    FORIN t %r0 _l620_ _l621_;
LABEL _l620_:
    MOV %r3 @p;
    MOV %r4 t;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 .e;
    EQ %r1 %r2;
    JF %r1 _l623_;
    MOV %r2 t;
    MOV $RET %r2;
    RET;
    JMP _l622_;
LABEL _l623_:
LABEL _l622_:
    FORIN_END;
LABEL _l621_:
}
func @@f262() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r1;
    MOV %r2 "__name__";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f263() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "Symbol (";
    MOV_THIS %r5;
    PUSH %r5;
    CALL_REG @u 1 false;
    MOV %r3 $RET;
    MOV %r4 "__description__";
    MOV_PROP %r2 %r3 %r4;
    ADD %r0 %r2;
    MOV %r1 ")";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f264() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f265() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r0;
    PUSH %r0;
    CALL_REG @u 1 false;
    MOV e $RET;
    MOV %r1 "symbol";
    MOV %r2 e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l625_;
    MOV %r0 e;
    JMP _l624_;
LABEL _l625_:
    MOV %r2 e;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 0 false;
    MOV %r0 $RET;
LABEL _l624_:
    MOV $RET %r0;
    RET;
}
func @@f266(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l627_;
    MOV %r2 .e;
    MOV %r3 " is not a symbol";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l626_;
LABEL _l627_:
LABEL _l626_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f267(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @f 1 false;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 "__ee__";
    PUSH %r2;
    MOV %r2 @_;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    JF %r1 _l629_;
    MOV_THIS %r3;
    MOV %r4 "__ee__";
    MOV_PROP %r2 %r3 %r4;
    MOV r %r2;
    JMP _l628_;
LABEL _l629_:
    MOV %r4 null;
    PUSH %r4;
    CALL_REG @d 1 false;
    MOV %r3 $RET;
    MOV %r4 @y;
    MOV %r5 "value";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    MOV r %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 "__ee__";
    PUSH %r2;
    MOV %r2 @y;
    PUSH %r2;
    CALL_REG @b 3 false;
    MOV %r2 null;
    MOV %r3 @y;
    MOV %r4 "value";
    SET_KEY %r3 %r4 %r2;
LABEL _l628_:
    MOV %r2 r;
    MOV %r3 .e;
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l631_;
    MOV %r2 "object";
    MOV %r4 r;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l633_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r5 r;
    MOV %r6 .e;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l632_;
LABEL _l633_:
    NEW_ARR %r3;
    MOV %r5 r;
    MOV %r6 .e;
    MOV_PROP %r4 %r5 %r6;
    SET_KEY %r3 0 %r4;
    MOV %r4 .t;
    SET_KEY %r3 1 %r4;
    MOV %r4 r;
    MOV %r5 .e;
    SET_KEY %r4 %r5 %r3;
LABEL _l632_:
    JMP _l630_;
LABEL _l631_:
    MOV %r2 .t;
    MOV %r3 r;
    MOV %r4 .e;
    SET_KEY %r3 %r4 %r2;
LABEL _l630_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f268(.e, .t) {
    CLS @r;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @f 1 false;
    MOV_THIS %r1;
    MOV @i %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    FUNC %r2 @@f689;
    MOV @r %r2;
    MOV %r1 %r2;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r1 @t;
    MOV %r2 @r;
    MOV %r3 "__eeOnceListener__";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f269(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @f 1 false;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 "__ee__";
    PUSH %r1;
    MOV %r1 @_;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l635_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l634_;
LABEL _l635_:
LABEL _l634_:
    MOV_THIS %r4;
    MOV %r5 "__ee__";
    MOV_PROP %r3 %r4 %r5;
    MOV r %r3;
    MOV %r1 %r3;
    MOV %r2 .e;
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l637_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l636_;
LABEL _l637_:
LABEL _l636_:
    MOV %r0 "object";
    MOV %r3 r;
    MOV %r4 .e;
    MOV_PROP %r2 %r3 %r4;
    MOV n %r2;
    MOV %r1 %r2;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l639_;
    MOV %r1 0;
    MOV o %r1;
LABEL _l640_:
    MOV %r3 n;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    MOV i %r2;
    MOV %r1 %r2;
    JF %r1 _l641_;
LABEL _l643_:
    MOV %r3 i;
    MOV %r4 .t;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l645_;
    MOV %r6 i;
    MOV %r7 "__eeOnceListener__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .t;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l645_:
    JIF %r2 _l644_;
    MOV %r4 2;
    MOV %r6 n;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    JF %r4 _l647_;
    MOV %r6 n;
    MOV %r8 o;
    JF %r8 _l649_;
    MOV %r7 0;
    JMP _l648_;
LABEL _l649_:
    MOV %r7 1;
LABEL _l648_:
    MOV_PROP %r5 %r6 %r7;
    MOV %r6 r;
    MOV %r7 .e;
    SET_KEY %r6 %r7 %r5;
    MOV %r3 %r5;
    JMP _l646_;
LABEL _l647_:
    MOV %r5 o;
    PUSH %r5;
    MOV %r5 1;
    PUSH %r5;
    MOV %r5 n;
    MOV %r6 "splice";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
LABEL _l646_:
LABEL _l644_:
LABEL _l642_:
    MOV %r2 o;
    ADD %r2 1;
    MOV o %r2;
    JMP _l640_;
LABEL _l641_:
    JMP _l638_;
LABEL _l639_:
    MOV %r2 n;
    MOV %r3 .t;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l651_;
    MOV %r5 n;
    MOV %r6 "__eeOnceListener__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l651_:
    JIF %r1 _l650_;
    MOV %r3 r;
    MOV %r4 .e;
    DEL %r3 %r4;
LABEL _l650_:
LABEL _l638_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f270(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 "__ee__";
    PUSH %r2;
    MOV %r2 @_;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l654_;
    MOV_THIS %r6;
    MOV %r7 "__ee__";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    MOV i %r3;
    MOV %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l654_:
    JF %r0 _l653_;
    MOV %r1 "object";
    MOV %r2 i;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l656_;
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV r %r2;
    MOV %r3 r;
    MOV %r4 1;
    SUB %r3 %r4;
    PUSH %r3;
    CALL_CTX 'Array' 1 true;
    MOV %r2 $RET;
    MOV o %r2;
    MOV %r2 1;
    MOV t %r2;
LABEL _l657_:
    MOV %r2 t;
    MOV %r3 r;
    LT %r2 %r3;
    JF %r2 _l658_;
LABEL _l660_:
    MOV_ARGS %r4;
    MOV %r5 t;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 o;
    MOV %r5 t;
    MOV %r6 1;
    SUB %r5 %r6;
    SET_KEY %r4 %r5 %r3;
LABEL _l659_:
    MOV %r3 t;
    ADD %r3 1;
    MOV t %r3;
    JMP _l657_;
LABEL _l658_:
    MOV %r3 i;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV i %r2;
    MOV %r2 0;
    MOV t %r2;
LABEL _l661_:
    MOV %r4 i;
    MOV %r5 t;
    MOV_PROP %r3 %r4 %r5;
    MOV n %r3;
    MOV %r2 %r3;
    JF %r2 _l662_;
LABEL _l664_:
    MOV %r3 n;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 o;
    PUSH %r3;
    MOV %r3 @h;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 3 false;
LABEL _l663_:
    MOV %r3 t;
    ADD %r3 1;
    MOV t %r3;
    JMP _l661_;
LABEL _l662_:
    JMP _l655_;
LABEL _l656_:
    BLOCK 6;
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 1;
    JE %r2 %r3 _l666_;
    JMP _l667_;
LABEL _l666_:
    MOV %r4 i;
    PUSH %r4;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 @p;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    CLR_BLOCK 6;
    JMP _l665_;
    JMP _l668_;
LABEL _l667_:
    MOV %r4 2;
    JE %r2 %r4 _l668_;
    JMP _l669_;
LABEL _l668_:
    MOV %r5 i;
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV_ARGS %r6;
    MOV %r7 1;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r5 @p;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 3 false;
    CLR_BLOCK 6;
    JMP _l665_;
    JMP _l670_;
LABEL _l669_:
    MOV %r5 3;
    JE %r2 %r5 _l670_;
    JMP _l671_;
LABEL _l670_:
    MOV %r6 i;
    PUSH %r6;
    MOV_THIS %r6;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 2;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 @p;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 4 false;
    CLR_BLOCK 6;
    JMP _l665_;
    JMP _l672_;
LABEL _l671_:
LABEL _l672_:
    MOV_ARGS %r7;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    MOV r %r6;
    MOV %r7 r;
    MOV %r8 1;
    SUB %r7 %r8;
    PUSH %r7;
    CALL_CTX 'Array' 1 true;
    MOV %r6 $RET;
    MOV o %r6;
    MOV %r6 1;
    MOV t %r6;
LABEL _l674_:
    MOV %r6 t;
    MOV %r7 r;
    LT %r6 %r7;
    JF %r6 _l675_;
LABEL _l677_:
    MOV_ARGS %r8;
    MOV %r9 t;
    MOV_PROP %r7 %r8 %r9;
    MOV %r8 o;
    MOV %r9 t;
    MOV %r10 1;
    SUB %r9 %r10;
    SET_KEY %r8 %r9 %r7;
LABEL _l676_:
    MOV %r7 t;
    ADD %r7 1;
    MOV t %r7;
    JMP _l674_;
LABEL _l675_:
    MOV %r6 i;
    PUSH %r6;
    MOV_THIS %r6;
    PUSH %r6;
    MOV %r6 o;
    PUSH %r6;
    MOV %r6 @h;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 3 false;
    JMP _l678_;
LABEL _l673_:
LABEL _l678_:
LABEL _l665_:
    END_BLOCK 6;
LABEL _l655_:
    JMP _l652_;
LABEL _l653_:
LABEL _l652_:
}
func @@f271(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 null;
    MOV %r2 .e;
    WEQ %r1 %r2;
    JF %r1 _l680_;
    MOV %r2 @c;
    PUSH %r2;
    CALL_REG @d 1 false;
    MOV %r0 $RET;
    JMP _l679_;
LABEL _l680_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_CTX 'Object' 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @u;
    PUSH %r2;
    CALL_REG @g 2 false;
    MOV %r0 $RET;
LABEL _l679_:
    MOV $RET %r0;
    RET;
}
func @@f272(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC t @@f690;
    MOV %r1 .e;
    MOV %r2 t;
    MOV %r3 "prototype";
    SET_KEY %r2 %r3 %r1;
    CALL_REG t 0 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f273(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    NEW_ARR t;
    MOV %r0 .e;
    FORIN r %r0 _l681_ _l682_;
LABEL _l681_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV_CTX %r6 "Object";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "hasOwnProperty";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    JF %r1 _l683_;
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 t;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l683_:
    FORIN_END;
LABEL _l682_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f274(.e) {
    CLS @t;
    REG %r0;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    FUNC %r0 @@f691;
    MOV $RET %r0;
    RET;
}
func @@f275() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r2;
    MOV %r3 "_events";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l685_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 "_events";
    PUSH %r3;
    MOV_CTX %r7 "Object";
    MOV %r8 "prototype";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "hasOwnProperty";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l685_:
    JIF %r0 _l684_;
    MOV %r3 null;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "_events";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 0;
    MOV_THIS %r3;
    MOV %r4 "_eventsCount";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l684_:
    MOV_THIS %r2;
    MOV %r3 "_maxListeners";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l686_;
    MOV %r2 0;
    VOID %r2;
    LG_OR %r0 %r2;
LABEL _l686_:
    MOV_THIS %r1;
    MOV %r2 "_maxListeners";
    SET_KEY %r1 %r2 %r0;
}
func @@f276(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 0;
    VOID %r1;
    MOV %r3 .e;
    MOV %r4 "_maxListeners";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l688_;
    MOV %r2 @s;
    MOV %r3 "defaultMaxListeners";
    MOV_PROP %r0 %r2 %r3;
    JMP _l687_;
LABEL _l688_:
    MOV %r2 .e;
    MOV %r3 "_maxListeners";
    MOV_PROP %r0 %r2 %r3;
LABEL _l687_:
    MOV $RET %r0;
    RET;
}
func @@f277(.e, .t, .r, .i) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 "function";
    MOV %r1 .r;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l690_;
    MOV %r2 "\"listener\" argument must be a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l689_;
LABEL _l690_:
LABEL _l689_:
    MOV %r3 .e;
    MOV %r4 "_events";
    MOV_PROP %r2 %r3 %r4;
    MOV s %r2;
    MOV %r1 %r2;
    JF %r1 _l694_;
    MOV %r3 s;
    MOV %r4 "newListener";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l695_;
    MOV %r4 "newListener";
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r6 .r;
    MOV %r7 "listener";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l697_;
    MOV %r6 .r;
    MOV %r7 "listener";
    MOV_PROP %r4 %r6 %r7;
    JMP _l696_;
LABEL _l697_:
    MOV %r4 .r;
LABEL _l696_:
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 3 false;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r4 %r5 %r6;
    MOV s %r4;
    MOV %r3 %r4;
LABEL _l695_:
    MOV %r3 s;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    MOV a %r2;
    JMP _l693_;
LABEL _l694_:
    MOV %r4 null;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r3 $RET;
    MOV %r4 .e;
    MOV %r5 "_events";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    MOV s %r2;
    MOV %r2 0;
    MOV %r3 .e;
    MOV %r4 "_eventsCount";
    SET_KEY %r3 %r4 %r2;
LABEL _l693_:
    MOV %r0 a;
    JF %r0 _l692_;
    MOV %r2 "function";
    MOV %r3 a;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l701_;
    MOV %r5 .i;
    JF %r5 _l703_;
    NEW_ARR %r4;
    MOV %r6 .r;
    SET_KEY %r4 0 %r6;
    MOV %r6 a;
    SET_KEY %r4 1 %r6;
    JMP _l702_;
LABEL _l703_:
    NEW_ARR %r4;
    MOV %r6 a;
    SET_KEY %r4 0 %r6;
    MOV %r6 .r;
    SET_KEY %r4 1 %r6;
LABEL _l702_:
    MOV %r5 s;
    MOV %r6 .t;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV a %r3;
    JMP _l700_;
LABEL _l701_:
    MOV %r3 .i;
    JF %r3 _l704_;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r4 a;
    MOV %r5 "unshift";
    CALL_VAR %r4 %r5 1 false;
    JMP _l700_;
LABEL _l704_:
    MOV %r4 .r;
    PUSH %r4;
    MOV %r4 a;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 1 false;
LABEL _l700_:
    MOV %r5 a;
    MOV %r6 "warned";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l707_;
    MOV %r7 .e;
    PUSH %r7;
    CALL_REG @l 1 false;
    MOV %r6 $RET;
    MOV o %r6;
    MOV %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l707_:
    MOV %r2 %r3;
    JF %r3 _l706_;
    MOV %r4 o;
    MOV %r5 0;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l706_:
    MOV %r1 %r2;
    JF %r2 _l705_;
    MOV %r5 a;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 o;
    GT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l705_:
    JF %r1 _l699_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 a;
    MOV %r4 "warned";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "Possible EventEmitter memory leak detected. ";
    MOV %r7 a;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    ADD %r2 %r6;
    MOV %r5 " \"";
    ADD %r2 %r5;
    MOV %r5 .t;
    PUSH %r5;
    CALL_CTX 'String' 1 false;
    MOV %r4 $RET;
    ADD %r2 %r4;
    MOV %r3 "\" listeners added. Use emitter.setMaxListeners() to increase limit.";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV u $RET;
    MOV %r2 "MaxListenersExceededWarning";
    MOV %r3 u;
    MOV %r4 "name";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 .e;
    MOV %r3 u;
    MOV %r4 "emitter";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 .t;
    MOV %r3 u;
    MOV %r4 "type";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 a;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 u;
    MOV %r4 "count";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 "object";
    MOV_CTX %r4 "console";
    TYPE_OF %r4;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l709_;
    MOV_CTX %r5 "console";
    MOV %r6 "warn";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l709_:
    JF %r2 _l708_;
    MOV %r4 "%s: %s";
    PUSH %r4;
    MOV %r5 u;
    MOV %r6 "name";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 u;
    MOV %r6 "message";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_CTX %r4 "console";
    MOV %r5 "warn";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
LABEL _l708_:
    JMP _l698_;
LABEL _l699_:
LABEL _l698_:
    JMP _l691_;
LABEL _l692_:
    MOV %r2 .r;
    MOV %r3 s;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV a %r1;
    MOV %r2 .e;
    MOV %r3 "_eventsCount";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV %r2 .e;
    MOV %r3 "_eventsCount";
    SET_KEY %r2 %r3 %r1;
LABEL _l691_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f278() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r1;
    MOV %r2 "fired";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l711_;
    MOV_THIS %r3;
    MOV %r4 "type";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "wrapFn";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "target";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 0;
    NEG %r2;
    MOV_THIS %r3;
    MOV %r4 "fired";
    SET_KEY %r3 %r4 %r2;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 0;
    JE %r1 %r2 _l713_;
    JMP _l714_;
LABEL _l713_:
    MOV_THIS %r5;
    MOV %r6 "target";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r6;
    MOV %r7 "listener";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l715_;
LABEL _l714_:
    MOV %r3 1;
    JE %r1 %r3 _l715_;
    JMP _l716_;
LABEL _l715_:
    MOV_THIS %r6;
    MOV %r7 "target";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_ARGS %r6;
    MOV %r7 0;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_THIS %r7;
    MOV %r8 "listener";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    JMP _l717_;
LABEL _l716_:
    MOV %r4 2;
    JE %r1 %r4 _l717_;
    JMP _l718_;
LABEL _l717_:
    MOV_THIS %r7;
    MOV %r8 "target";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 0;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_THIS %r8;
    MOV %r9 "listener";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 3 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
    JMP _l719_;
LABEL _l718_:
    MOV %r5 3;
    JE %r1 %r5 _l719_;
    JMP _l720_;
LABEL _l719_:
    MOV_THIS %r8;
    MOV %r9 "target";
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV_ARGS %r8;
    MOV %r9 0;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV_ARGS %r8;
    MOV %r9 1;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV_ARGS %r8;
    MOV %r9 2;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV_THIS %r9;
    MOV %r10 "listener";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "call";
    CALL_VAR %r7 %r8 4 false;
    MOV %r6 $RET;
    MOV $RET %r6;
    RET;
    JMP _l721_;
LABEL _l720_:
LABEL _l721_:
    MOV_ARGS %r7;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    CALL_CTX 'Array' 1 true;
    MOV e $RET;
    MOV t 0;
LABEL _l723_:
    MOV %r6 t;
    MOV %r8 e;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    LT %r6 %r7;
    JF %r6 _l724_;
LABEL _l726_:
    MOV_ARGS %r8;
    MOV %r9 t;
    MOV_PROP %r7 %r8 %r9;
    MOV %r8 e;
    MOV %r9 t;
    SET_KEY %r8 %r9 %r7;
LABEL _l725_:
    MOV %r7 t;
    ADD %r7 1;
    MOV t %r7;
    JMP _l723_;
LABEL _l724_:
    MOV_THIS %r7;
    MOV %r8 "target";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 e;
    PUSH %r6;
    MOV_THIS %r8;
    MOV %r9 "listener";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "apply";
    CALL_VAR %r6 %r7 2 false;
    JMP _l727_;
LABEL _l722_:
LABEL _l727_:
LABEL _l712_:
    JMP _l710_;
LABEL _l711_:
LABEL _l710_:
}
func @@f279(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    NEW_OBJ n;
    MOV %r0 1;
    NEG %r0;
    SET_KEY n 'fired' %r0;
    MOV %r0 0;
    VOID %r0;
    SET_KEY n 'wrapFn' %r0;
    MOV %r0 .e;
    SET_KEY n 'target' %r0;
    MOV %r0 .t;
    SET_KEY n 'type' %r0;
    MOV %r0 .r;
    SET_KEY n 'listener' %r0;
    MOV %r0 @h;
    PUSH %r0;
    MOV %r0 n;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV i $RET;
    MOV %r1 .r;
    MOV %r2 i;
    MOV %r3 "listener";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 i;
    MOV %r2 n;
    MOV %r3 "wrapFn";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f280(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .e;
    MOV %r1 "_events";
    MOV_PROP n %r0 %r1;
    MOV %r0 n;
    NEG %r0;
    JF %r0 _l729_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l728_;
LABEL _l729_:
LABEL _l728_:
    MOV %r0 n;
    MOV %r1 .t;
    MOV_PROP i %r0 %r1;
    MOV %r1 i;
    JF %r1 _l731_;
    MOV %r2 "function";
    MOV %r3 i;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l733_;
    MOV %r3 .r;
    JF %r3 _l735_;
    NEW_ARR %r0;
    MOV %r6 i;
    MOV %r7 "listener";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l736_;
    MOV %r6 i;
    LG_OR %r4 %r6;
LABEL _l736_:
    SET_KEY %r0 0 %r4;
    JMP _l734_;
LABEL _l735_:
    NEW_ARR %r0;
    MOV %r4 i;
    SET_KEY %r0 0 %r4;
LABEL _l734_:
    JMP _l732_;
LABEL _l733_:
    MOV %r3 .r;
    JF %r3 _l737_;
    MOV %r4 i;
    PUSH %r4;
    FUNC %r4 @@f692;
    CALL_REG %r4 1 false;
    MOV %r0 $RET;
    JMP _l732_;
LABEL _l737_:
    MOV %r4 i;
    PUSH %r4;
    MOV %r5 i;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @g 2 false;
    MOV %r0 $RET;
LABEL _l732_:
    JMP _l730_;
LABEL _l731_:
    NEW_ARR %r0;
LABEL _l730_:
    MOV $RET %r0;
    RET;
}
func @@f281(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 "_events";
    MOV_PROP t %r0 %r1;
    MOV %r0 t;
    JF %r0 _l739_;
    MOV %r1 t;
    MOV %r2 .e;
    MOV_PROP r %r1 %r2;
    MOV %r1 "function";
    MOV %r2 r;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l741_;
    MOV %r2 1;
    MOV $RET %r2;
    RET;
    JMP _l740_;
LABEL _l741_:
LABEL _l740_:
    MOV %r1 r;
    JF %r1 _l743_;
    MOV %r3 r;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV $RET %r2;
    RET;
    JMP _l742_;
LABEL _l743_:
LABEL _l742_:
    JMP _l738_;
LABEL _l739_:
LABEL _l738_:
    MOV %r0 0;
    MOV $RET %r0;
    RET;
}
func @@f282(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .t;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV r $RET;
    MOV n 0;
LABEL _l744_:
    MOV %r0 n;
    MOV %r1 .t;
    LT %r0 %r1;
    JF %r0 _l745_;
LABEL _l747_:
    MOV %r2 .e;
    MOV %r3 n;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 n;
    SET_KEY %r2 %r3 %r1;
LABEL _l746_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l744_;
LABEL _l745_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f283() {
    REG %r0;
    MOV %r0 @u;
    MOV $RET %r0;
    RET;
}
func @@f284(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 "number";
    MOV %r3 .e;
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l751_;
    MOV %r3 .e;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l751_:
    MOV %r0 %r1;
    JIF %r1 _l750_;
    MOV %r2 .e;
    MOV %r3 .e;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l750_:
    JF %r0 _l749_;
    MOV %r2 "\"defaultMaxListeners\" must be a positive number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l748_;
LABEL _l749_:
LABEL _l748_:
    MOV %r0 .e;
    MOV @u %r0;
}
func @@f285(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 "number";
    MOV %r3 .e;
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l755_;
    MOV %r3 .e;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l755_:
    MOV %r0 %r1;
    JIF %r1 _l754_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_CTX 'isNaN' 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l754_:
    JF %r0 _l753_;
    MOV %r2 "\"n\" argument must be a positive number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l752_;
LABEL _l753_:
LABEL _l752_:
    MOV %r1 .e;
    MOV_THIS %r2;
    MOV %r3 "_maxListeners";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f286() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @l 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f287(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV a "error";
    MOV %r0 .e;
    EQ a %r0;
    MOV_THIS %r2;
    MOV %r3 "_events";
    MOV_PROP %r1 %r2 %r3;
    MOV s %r1;
    MOV %r0 %r1;
    JF %r0 _l757_;
    MOV %r2 a;
    MOV %r1 %r2;
    JF %r2 _l758_;
    MOV %r3 null;
    MOV %r5 s;
    MOV %r6 "error";
    MOV_PROP %r4 %r5 %r6;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l758_:
    MOV a %r1;
    JMP _l756_;
LABEL _l757_:
    MOV %r1 a;
    NEG %r1;
    JF %r1 _l759_;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l756_;
LABEL _l759_:
LABEL _l756_:
    MOV %r0 a;
    JF %r0 _l761_;
    MOV_ARGS %r4;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    GT %r2 %r3;
    JF %r2 _l764_;
    MOV_ARGS %r5;
    MOV %r6 1;
    MOV_PROP %r4 %r5 %r6;
    MOV t %r4;
    MOV %r3 %r4;
LABEL _l764_:
    MOV %r1 t;
    MOV_CTX %r2 "Error";
    INST_OF %r1 %r2;
    JF %r1 _l763_;
    MOV %r2 t;
    THROW %r2;
    JMP _l762_;
LABEL _l763_:
LABEL _l762_:
    MOV %r1 "Unhandled \"error\" event. (";
    MOV %r3 t;
    ADD %r1 %r3;
    MOV %r2 ")";
    ADD %r1 %r2;
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV u $RET;
    MOV %r2 t;
    MOV %r3 u;
    MOV %r4 "context";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 u;
    THROW %r1;
    JMP _l760_;
LABEL _l761_:
LABEL _l760_:
    MOV %r2 s;
    MOV %r3 .e;
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r0 %r1;
    NEG %r0;
    JF %r0 _l766_;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l765_;
LABEL _l766_:
LABEL _l765_:
    MOV c "function";
    MOV %r0 r;
    TYPE_OF %r0;
    WEQ c %r0;
    BLOCK 2;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV n %r1;
    MOV %r0 %r1;
    MOV %r1 1;
    JE %r0 %r1 _l768_;
    JMP _l769_;
LABEL _l768_:
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 c;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    FUNC %r3 @@f693;
    CALL_REG %r3 3 false;
    MOV %r2 $RET;
    NEG %r2;
    CLR_BLOCK 2;
    JMP _l767_;
    JMP _l770_;
LABEL _l769_:
    MOV %r2 2;
    JE %r0 %r2 _l770_;
    JMP _l771_;
LABEL _l770_:
    MOV %r4 r;
    PUSH %r4;
    MOV %r4 c;
    PUSH %r4;
    MOV_THIS %r4;
    PUSH %r4;
    MOV_ARGS %r5;
    MOV %r6 1;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    FUNC %r4 @@f694;
    CALL_REG %r4 4 false;
    MOV %r3 $RET;
    NEG %r3;
    CLR_BLOCK 2;
    JMP _l767_;
    JMP _l772_;
LABEL _l771_:
    MOV %r3 3;
    JE %r0 %r3 _l772_;
    JMP _l773_;
LABEL _l772_:
    MOV %r5 r;
    PUSH %r5;
    MOV %r5 c;
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV_ARGS %r6;
    MOV %r7 1;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_ARGS %r6;
    MOV %r7 2;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    FUNC %r5 @@f695;
    CALL_REG %r5 5 false;
    MOV %r4 $RET;
    NEG %r4;
    CLR_BLOCK 2;
    JMP _l767_;
    JMP _l774_;
LABEL _l773_:
    MOV %r4 4;
    JE %r0 %r4 _l774_;
    JMP _l775_;
LABEL _l774_:
    MOV %r6 r;
    PUSH %r6;
    MOV %r6 c;
    PUSH %r6;
    MOV_THIS %r6;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 1;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 2;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_ARGS %r7;
    MOV %r8 3;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    FUNC %r6 @@f696;
    CALL_REG %r6 6 false;
    MOV %r5 $RET;
    NEG %r5;
    CLR_BLOCK 2;
    JMP _l767_;
    JMP _l776_;
LABEL _l775_:
LABEL _l776_:
    MOV %r6 n;
    MOV %r7 1;
    SUB %r6 %r7;
    PUSH %r6;
    CALL_CTX 'Array' 1 true;
    MOV %r5 $RET;
    MOV i %r5;
    MOV %r5 1;
    MOV o %r5;
LABEL _l778_:
    MOV %r5 o;
    MOV %r6 n;
    LT %r5 %r6;
    JF %r5 _l779_;
LABEL _l781_:
    MOV_ARGS %r7;
    MOV %r8 o;
    MOV_PROP %r6 %r7 %r8;
    MOV %r7 i;
    MOV %r8 o;
    MOV %r9 1;
    SUB %r8 %r9;
    SET_KEY %r7 %r8 %r6;
LABEL _l780_:
    MOV %r6 o;
    ADD %r6 1;
    MOV o %r6;
    JMP _l778_;
LABEL _l779_:
    MOV %r6 r;
    PUSH %r6;
    MOV %r6 c;
    PUSH %r6;
    MOV_THIS %r6;
    PUSH %r6;
    MOV %r6 i;
    PUSH %r6;
    FUNC %r6 @@f697;
    CALL_REG %r6 4 false;
    MOV %r5 $RET;
    NEG %r5;
    JMP _l782_;
LABEL _l777_:
LABEL _l782_:
LABEL _l767_:
    END_BLOCK 2;
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f288(.e, .t) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    CALL_REG @f 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f289(.e, .t) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    CALL_REG @f 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f290(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "function";
    MOV %r1 .t;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l784_;
    MOV %r2 "\"listener\" argument must be a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l783_;
LABEL _l784_:
LABEL _l783_:
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @p 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f291(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "function";
    MOV %r1 .t;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l786_;
    MOV %r2 "\"listener\" argument must be a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l785_;
LABEL _l786_:
LABEL _l785_:
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @p 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "prependListener";
    CALL_VAR %r1 %r2 2 false;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f292(.e, .t) {
    VAR r;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r0 "function";
    MOV %r1 .t;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l788_;
    MOV %r2 "\"listener\" argument must be a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l787_;
LABEL _l788_:
LABEL _l787_:
    MOV_THIS %r2;
    MOV %r3 "_events";
    MOV_PROP %r1 %r2 %r3;
    MOV i %r1;
    MOV %r0 %r1;
    NEG %r0;
    JF %r0 _l790_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l789_;
LABEL _l790_:
LABEL _l789_:
    MOV %r2 i;
    MOV %r3 .e;
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r0 %r1;
    NEG %r0;
    JF %r0 _l792_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l791_;
LABEL _l792_:
LABEL _l791_:
    MOV %r1 r;
    MOV %r2 .t;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l795_;
    MOV %r4 r;
    MOV %r5 "listener";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .t;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l795_:
    JF %r0 _l794_;
    MOV %r1 0;
    MOV_THIS %r4;
    MOV %r5 "_eventsCount";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 1;
    MOV %r2 %r3;
    MOV_THIS %r4;
    MOV %r5 "_eventsCount";
    SET_KEY %r4 %r5 %r3;
    WEQ %r1 %r2;
    JF %r1 _l797_;
    MOV %r3 null;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "_events";
    SET_KEY %r3 %r4 %r2;
    JMP _l796_;
LABEL _l797_:
    MOV %r2 i;
    MOV %r3 .e;
    DEL %r2 %r3;
    MOV %r3 i;
    MOV %r4 "removeListener";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l798_;
    MOV %r4 "removeListener";
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r6 r;
    MOV %r7 "listener";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l799_;
    MOV %r6 .t;
    LG_OR %r4 %r6;
LABEL _l799_:
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
LABEL _l798_:
LABEL _l796_:
    JMP _l793_;
LABEL _l794_:
    MOV %r1 "function";
    MOV %r2 r;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l800_;
    BLOCK 2;
    MOV %r2 1;
    MINUS %r2;
    MOV o %r2;
    MOV %r4 r;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    SUB %r2 %r3;
    MOV s %r2;
LABEL _l801_:
    MOV %r2 s;
    MOV %r3 0;
    GE %r2 %r3;
    JF %r2 _l802_;
LABEL _l804_:
    MOV %r6 r;
    MOV %r7 s;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .t;
    EQ %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l807_;
    MOV %r9 r;
    MOV %r10 s;
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "listener";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 .t;
    EQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l807_:
    JF %r3 _l806_;
    MOV %r7 r;
    MOV %r8 s;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "listener";
    MOV_PROP %r4 %r5 %r6;
    MOV a %r4;
    MOV %r4 s;
    MOV o %r4;
    CLR_BLOCK 2;
    JMP _l802_;
    JMP _l805_;
LABEL _l806_:
LABEL _l805_:
LABEL _l803_:
    MOV %r3 s;
    SUB %r3 1;
    MOV s %r3;
    JMP _l801_;
LABEL _l802_:
    END_BLOCK 2;
    MOV %r2 o;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l809_;
    MOV_THIS %r3;
    MOV $RET %r3;
    RET;
    JMP _l808_;
LABEL _l809_:
LABEL _l808_:
    MOV %r2 0;
    MOV %r3 o;
    EQ %r2 %r3;
    JF %r2 _l811_;
    MOV %r3 r;
    MOV %r4 "shift";
    CALL_VAR %r3 %r4 0 false;
    JMP _l810_;
LABEL _l811_:
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 o;
    PUSH %r3;
    FUNC %r3 @@f698;
    CALL_REG %r3 2 false;
LABEL _l810_:
    MOV %r2 1;
    MOV %r4 r;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l812_;
    MOV %r5 r;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 i;
    MOV %r6 .e;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l812_:
    MOV %r3 i;
    MOV %r4 "removeListener";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l813_;
    MOV %r4 "removeListener";
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r5 a;
    MOV %r4 %r5;
    JIF %r5 _l814_;
    MOV %r6 .t;
    LG_OR %r4 %r6;
LABEL _l814_:
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
LABEL _l813_:
    JMP _l793_;
LABEL _l800_:
LABEL _l793_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f293(.e) {
    VAR t;
    VAR r;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r2;
    MOV %r3 "_events";
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r0 %r1;
    NEG %r0;
    JF %r0 _l816_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l815_;
LABEL _l816_:
LABEL _l815_:
    MOV %r1 r;
    MOV %r2 "removeListener";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l818_;
    MOV %r2 0;
    MOV_ARGS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l820_;
    MOV %r4 null;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r3 $RET;
    MOV_THIS %r4;
    MOV %r5 "_events";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    MOV_THIS %r4;
    MOV %r5 "_eventsCount";
    SET_KEY %r4 %r5 %r3;
    JMP _l819_;
LABEL _l820_:
    MOV %r4 r;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l821_;
    MOV %r5 0;
    MOV_THIS %r8;
    MOV %r9 "_eventsCount";
    MOV_PROP %r7 %r8 %r9;
    SUB %r7 1;
    MOV %r6 %r7;
    MOV_THIS %r8;
    MOV %r9 "_eventsCount";
    SET_KEY %r8 %r9 %r7;
    WEQ %r5 %r6;
    JF %r5 _l823_;
    MOV %r7 null;
    PUSH %r7;
    CALL_REG @n 1 false;
    MOV %r6 $RET;
    MOV_THIS %r7;
    MOV %r8 "_events";
    SET_KEY %r7 %r8 %r6;
    MOV %r4 %r6;
    JMP _l822_;
LABEL _l823_:
    MOV %r6 r;
    MOV %r7 .e;
    DEL %r6 %r7;
LABEL _l822_:
LABEL _l821_:
LABEL _l819_:
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l817_;
LABEL _l818_:
LABEL _l817_:
    MOV %r0 0;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l825_;
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV a $RET;
    MOV %r1 0;
    MOV o %r1;
LABEL _l826_:
    MOV %r1 o;
    MOV %r3 a;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l827_;
LABEL _l829_:
    MOV %r2 "removeListener";
    MOV %r5 a;
    MOV %r6 o;
    MOV_PROP %r4 %r5 %r6;
    MOV s %r4;
    MOV %r3 %r4;
    NE %r2 %r3;
    JF %r2 _l830_;
    MOV %r4 s;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "removeAllListeners";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
LABEL _l830_:
LABEL _l828_:
    MOV %r2 o;
    ADD %r2 1;
    MOV o %r2;
    JMP _l826_;
LABEL _l827_:
    MOV %r2 "removeListener";
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "removeAllListeners";
    CALL_VAR %r2 %r3 1 false;
    MOV %r3 null;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "_events";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 0;
    MOV_THIS %r3;
    MOV %r4 "_eventsCount";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l824_;
LABEL _l825_:
LABEL _l824_:
    MOV %r0 "function";
    MOV %r3 r;
    MOV %r4 .e;
    MOV_PROP %r2 %r3 %r4;
    MOV t %r2;
    MOV %r1 %r2;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l832_;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 t;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "removeListener";
    CALL_VAR %r1 %r2 2 false;
    JMP _l831_;
LABEL _l832_:
    MOV %r1 t;
    JF %r1 _l833_;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    SUB %r2 %r3;
    MOV o %r2;
LABEL _l834_:
    MOV %r2 o;
    MOV %r3 0;
    GE %r2 %r3;
    JF %r2 _l835_;
LABEL _l837_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r4 t;
    MOV %r5 o;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "removeListener";
    CALL_VAR %r3 %r4 2 false;
LABEL _l836_:
    MOV %r3 o;
    SUB %r3 1;
    MOV o %r3;
    JMP _l834_;
LABEL _l835_:
    JMP _l831_;
LABEL _l833_:
LABEL _l831_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f294(.e) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    CALL_REG @d 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f295(.e) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    CALL_REG @d 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f296(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 "function";
    MOV %r3 .e;
    MOV %r4 "listenerCount";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l839_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "listenerCount";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l838_;
LABEL _l839_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @b;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l838_:
    MOV $RET %r0;
    RET;
}
func @@f297() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_eventsCount";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    GT %r1 %r2;
    JF %r1 _l841_;
    MOV_THIS %r3;
    MOV %r4 "_events";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_CTX %r2 "Reflect";
    MOV %r3 "ownKeys";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l840_;
LABEL _l841_:
    NEW_ARR %r0;
LABEL _l840_:
    MOV $RET %r0;
    RET;
}
func @@f298(.e, .t, .r, .n, .i) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV a 8;
    MOV %r2 .i;
    MUL a %r2;
    MOV %r1 .n;
    SUB a %r1;
    MOV %r0 1;
    SUB a %r0;
    MOV u 1;
    MOV %r1 a;
    SHL u %r1;
    MOV %r0 1;
    SUB u %r0;
    MOV c u;
    MOV %r0 1;
    SHR c %r0;
    MOV l 7;
    MINUS l;
    MOV %r0 .r;
    JF %r0 _l843_;
    MOV f .i;
    MOV %r1 1;
    SUB f %r1;
    JMP _l842_;
LABEL _l843_:
    MOV f 0;
LABEL _l842_:
    MOV %r0 .r;
    JF %r0 _l845_;
    MOV h 1;
    MINUS h;
    JMP _l844_;
LABEL _l845_:
    MOV h 1;
LABEL _l844_:
    MOV %r0 .e;
    MOV %r1 .t;
    MOV %r2 f;
    ADD %r1 %r2;
    MOV_PROP p %r0 %r1;
    MOV %r0 h;
    MOV %r1 f;
    ADD %r1 %r0;
    MOV f %r1;
    MOV %r0 p;
    MOV %r1 1;
    MOV %r3 l;
    MINUS %r3;
    SHL %r1 %r3;
    MOV %r2 1;
    SUB %r1 %r2;
    AND %r0 %r1;
    MOV o %r0;
    MOV %r0 l;
    MINUS %r0;
    MOV %r1 p;
    SHR %r1 %r0;
    MOV p %r1;
    MOV %r0 a;
    MOV %r1 l;
    ADD %r1 %r0;
    MOV l %r1;
LABEL _l846_:
    MOV %r0 l;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l847_;
LABEL _l849_:
LABEL _l848_:
    MOV %r1 256;
    MOV %r3 o;
    MUL %r1 %r3;
    MOV %r3 .e;
    MOV %r4 .t;
    MOV %r5 f;
    ADD %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    MOV o %r1;
    MOV %r1 h;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
    MOV %r1 8;
    MOV %r2 l;
    SUB %r2 %r1;
    MOV l %r2;
    JMP _l846_;
LABEL _l847_:
    MOV %r0 o;
    MOV %r1 1;
    MOV %r3 l;
    MINUS %r3;
    SHL %r1 %r3;
    MOV %r2 1;
    SUB %r1 %r2;
    AND %r0 %r1;
    MOV s %r0;
    MOV %r0 l;
    MINUS %r0;
    MOV %r1 o;
    SHR %r1 %r0;
    MOV o %r1;
    MOV %r0 .n;
    MOV %r1 l;
    ADD %r1 %r0;
    MOV l %r1;
LABEL _l850_:
    MOV %r0 l;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l851_;
LABEL _l853_:
LABEL _l852_:
    MOV %r1 256;
    MOV %r3 s;
    MUL %r1 %r3;
    MOV %r3 .e;
    MOV %r4 .t;
    MOV %r5 f;
    ADD %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    MOV s %r1;
    MOV %r1 h;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
    MOV %r1 8;
    MOV %r2 l;
    SUB %r2 %r1;
    MOV l %r2;
    JMP _l850_;
LABEL _l851_:
    MOV %r0 0;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l855_;
    MOV %r1 1;
    MOV %r2 c;
    SUB %r1 %r2;
    MOV o %r1;
    JMP _l854_;
LABEL _l855_:
    MOV %r1 o;
    MOV %r2 u;
    EQ %r1 %r2;
    JF %r1 _l857_;
    MOV %r3 s;
    JF %r3 _l859_;
    MOV_CTX %r2 "NaN";
    JMP _l858_;
LABEL _l859_:
    MOV %r2 1;
    MOV %r5 0;
    DIV %r2 %r5;
    MOV %r5 p;
    JF %r5 _l861_;
    MOV %r4 1;
    MINUS %r4;
    JMP _l860_;
LABEL _l861_:
    MOV %r4 1;
LABEL _l860_:
    MUL %r2 %r4;
LABEL _l858_:
    MOV $RET %r2;
    RET;
    JMP _l856_;
LABEL _l857_:
LABEL _l856_:
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "pow";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r2 s;
    ADD %r2 %r1;
    MOV s %r2;
    MOV %r1 c;
    MOV %r2 o;
    SUB %r2 %r1;
    MOV o %r2;
LABEL _l854_:
    MOV %r3 p;
    JF %r3 _l863_;
    MOV %r0 1;
    MINUS %r0;
    JMP _l862_;
LABEL _l863_:
    MOV %r0 1;
LABEL _l862_:
    MOV %r2 s;
    MUL %r0 %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 o;
    MOV %r3 .n;
    SUB %r2 %r3;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "pow";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MUL %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f299(.e, .t, .r, .n, .i, .o) {
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR d;
    VAR b;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV c 8;
    MOV %r2 .o;
    MUL c %r2;
    MOV %r1 .i;
    SUB c %r1;
    MOV %r0 1;
    SUB c %r0;
    MOV l 1;
    MOV %r1 c;
    SHL l %r1;
    MOV %r0 1;
    SUB l %r0;
    MOV f l;
    MOV %r0 1;
    SHR f %r0;
    MOV %r0 23;
    MOV %r1 .i;
    EQ %r0 %r1;
    JF %r0 _l865_;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 24;
    MINUS %r2;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "pow";
    CALL_VAR %r2 %r3 2 false;
    MOV h $RET;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 77;
    MINUS %r2;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "pow";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    SUB h %r1;
    JMP _l864_;
LABEL _l865_:
    MOV h 0;
LABEL _l864_:
    MOV %r0 .n;
    JF %r0 _l867_;
    MOV p 0;
    JMP _l866_;
LABEL _l867_:
    MOV p .o;
    MOV %r1 1;
    SUB p %r1;
LABEL _l866_:
    MOV %r0 .n;
    JF %r0 _l869_;
    MOV d 1;
    JMP _l868_;
LABEL _l869_:
    MOV d 1;
    MINUS d;
LABEL _l868_:
    MOV %r1 .t;
    MOV %r2 0;
    LT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l872_;
    MOV %r3 0;
    MOV %r4 .t;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l873_;
    MOV %r4 1;
    MOV %r6 .t;
    DIV %r4 %r6;
    MOV %r5 0;
    LT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l873_:
    LG_OR %r0 %r2;
LABEL _l872_:
    JF %r0 _l871_;
    MOV b 1;
    JMP _l870_;
LABEL _l871_:
    MOV b 0;
LABEL _l870_:
    MOV %r1 .t;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "abs";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV .t %r0;
    MOV %r2 .t;
    PUSH %r2;
    CALL_CTX 'isNaN' 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l879_;
    MOV %r2 .t;
    MOV %r3 1;
    MOV %r4 0;
    DIV %r3 %r4;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l879_:
    JF %r0 _l878_;
    MOV %r3 .t;
    PUSH %r3;
    CALL_CTX 'isNaN' 1 false;
    MOV %r2 $RET;
    JF %r2 _l881_;
    MOV %r1 1;
    JMP _l880_;
LABEL _l881_:
    MOV %r1 0;
LABEL _l880_:
    MOV a %r1;
    MOV %r1 l;
    MOV s %r1;
    JMP _l877_;
LABEL _l878_:
    MOV %r4 .t;
    PUSH %r4;
    MOV_CTX %r4 "Math";
    MOV %r5 "log";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV_CTX %r4 "Math";
    MOV %r5 "LN2";
    MOV_PROP %r3 %r4 %r5;
    DIV %r2 %r3;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "floor";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV s %r1;
    MOV %r1 .t;
    MOV %r5 2;
    PUSH %r5;
    MOV %r5 s;
    MINUS %r5;
    PUSH %r5;
    MOV_CTX %r5 "Math";
    MOV %r6 "pow";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV u %r4;
    MOV %r3 %r4;
    MUL %r1 %r3;
    MOV %r2 1;
    LT %r1 %r2;
    JF %r1 _l882_;
    MOV %r3 s;
    SUB %r3 1;
    MOV s %r3;
    MOV %r3 2;
    MOV %r4 u;
    MUL %r4 %r3;
    MOV u %r4;
    MOV %r2 %r4;
LABEL _l882_:
    MOV %r5 s;
    MOV %r7 f;
    ADD %r5 %r7;
    MOV %r6 1;
    GE %r5 %r6;
    JF %r5 _l885_;
    MOV %r4 h;
    MOV %r6 u;
    DIV %r4 %r6;
    JMP _l884_;
LABEL _l885_:
    MOV %r4 h;
    MOV %r7 2;
    PUSH %r7;
    MOV %r7 1;
    MOV %r8 f;
    SUB %r7 %r8;
    PUSH %r7;
    MOV_CTX %r7 "Math";
    MOV %r8 "pow";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    MUL %r4 %r6;
LABEL _l884_:
    MOV %r5 .t;
    ADD %r5 %r4;
    MOV .t %r5;
    MOV %r1 %r5;
    MOV %r3 u;
    MUL %r1 %r3;
    MOV %r2 2;
    GE %r1 %r2;
    JF %r1 _l883_;
    MOV %r3 s;
    ADD %r3 1;
    MOV s %r3;
    MOV %r3 2;
    MOV %r4 u;
    DIV %r4 %r3;
    MOV u %r4;
    MOV %r2 %r4;
LABEL _l883_:
    MOV %r1 s;
    MOV %r3 f;
    ADD %r1 %r3;
    MOV %r2 l;
    GE %r1 %r2;
    JF %r1 _l887_;
    MOV %r2 0;
    MOV a %r2;
    MOV %r2 l;
    MOV s %r2;
    JMP _l886_;
LABEL _l887_:
    MOV %r2 s;
    MOV %r4 f;
    ADD %r2 %r4;
    MOV %r3 1;
    GE %r2 %r3;
    JF %r2 _l888_;
    MOV %r3 .t;
    MOV %r6 u;
    MUL %r3 %r6;
    MOV %r5 1;
    SUB %r3 %r5;
    MOV %r5 2;
    PUSH %r5;
    MOV %r5 .i;
    PUSH %r5;
    MOV_CTX %r5 "Math";
    MOV %r6 "pow";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MUL %r3 %r4;
    MOV a %r3;
    MOV %r3 f;
    MOV %r4 s;
    ADD %r4 %r3;
    MOV s %r4;
    JMP _l886_;
LABEL _l888_:
    MOV %r3 .t;
    MOV %r6 2;
    PUSH %r6;
    MOV %r6 f;
    MOV %r7 1;
    SUB %r6 %r7;
    PUSH %r6;
    MOV_CTX %r6 "Math";
    MOV %r7 "pow";
    CALL_VAR %r6 %r7 2 false;
    MOV %r5 $RET;
    MUL %r3 %r5;
    MOV %r5 2;
    PUSH %r5;
    MOV %r5 .i;
    PUSH %r5;
    MOV_CTX %r5 "Math";
    MOV %r6 "pow";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MUL %r3 %r4;
    MOV a %r3;
    MOV %r3 0;
    MOV s %r3;
LABEL _l886_:
LABEL _l877_:
LABEL _l874_:
    MOV %r0 .i;
    MOV %r1 8;
    GE %r0 %r1;
    JF %r0 _l875_;
LABEL _l889_:
LABEL _l876_:
    MOV %r1 255;
    MOV %r2 a;
    AND %r1 %r2;
    MOV %r2 .e;
    MOV %r3 .r;
    MOV %r4 p;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 d;
    MOV %r2 p;
    ADD %r2 %r1;
    MOV p %r2;
    MOV %r1 256;
    MOV %r2 a;
    DIV %r2 %r1;
    MOV a %r2;
    MOV %r1 8;
    MOV %r2 .i;
    SUB %r2 %r1;
    MOV .i %r2;
    JMP _l874_;
LABEL _l875_:
    MOV %r0 s;
    MOV %r2 .i;
    SHL %r0 %r2;
    MOV %r1 a;
    OR %r0 %r1;
    MOV s %r0;
    MOV %r0 .i;
    MOV %r1 c;
    ADD %r1 %r0;
    MOV c %r1;
LABEL _l890_:
    MOV %r0 c;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l891_;
LABEL _l893_:
LABEL _l892_:
    MOV %r1 255;
    MOV %r2 s;
    AND %r1 %r2;
    MOV %r2 .e;
    MOV %r3 .r;
    MOV %r4 p;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 d;
    MOV %r2 p;
    ADD %r2 %r1;
    MOV p %r2;
    MOV %r1 256;
    MOV %r2 s;
    DIV %r2 %r1;
    MOV s %r2;
    MOV %r1 8;
    MOV %r2 c;
    SUB %r2 %r1;
    MOV c %r2;
    JMP _l890_;
LABEL _l891_:
    MOV %r0 128;
    MOV %r1 b;
    MUL %r0 %r1;
    MOV %r2 .e;
    MOV %r3 .r;
    MOV %r5 p;
    ADD %r3 %r5;
    MOV %r4 d;
    SUB %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    OR %r1 %r0;
    MOV %r2 .e;
    MOV %r3 .r;
    MOV %r5 p;
    ADD %r3 %r5;
    MOV %r4 d;
    SUB %r3 %r4;
    SET_KEY %r2 %r3 %r1;
}
func @@f300(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .t;
    MOV %r1 .e;
    MOV %r2 "super_";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 .t;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    NEW_OBJ %r2;
    MOV %r3 .e;
    SET_KEY %r2 'value' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'enumerable' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'writable' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'configurable' %r3;
    SET_KEY %r1 'constructor' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "create";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV %r1 .e;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
}
func @@f301(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .t;
    MOV %r1 .e;
    MOV %r2 "super_";
    SET_KEY %r1 %r2 %r0;
    FUNC r @@f699;
    MOV %r1 .t;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 r;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    CALL_REG r 0 true;
    MOV %r0 $RET;
    MOV %r1 .e;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    MOV %r3 .e;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "constructor";
    SET_KEY %r1 %r2 %r0;
}
func @@f302(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r3 .e;
    MOV %r4 "constructor";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l895_;
    MOV %r3 "function";
    MOV %r7 .e;
    MOV %r8 "constructor";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "isBuffer";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l895_:
    MOV %r0 %r1;
    JF %r1 _l894_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r5 .e;
    MOV %r6 "constructor";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "isBuffer";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l894_:
    MOV $RET %r0;
    RET;
}
func @@f303(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 null;
    MOV %r2 .e;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l896_;
    MOV %r5 .e;
    PUSH %r5;
    CALL_REG @n 1 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JIF %r4 _l898_;
    MOV %r6 .e;
    PUSH %r6;
    FUNC %r6 @@f700;
    CALL_REG %r6 1 false;
    MOV %r5 $RET;
    LG_OR %r3 %r5;
LABEL _l898_:
    MOV %r2 %r3;
    JIF %r3 _l897_;
    MOV %r5 .e;
    MOV %r6 "_isBuffer";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l897_:
    LG_AND %r0 %r2;
LABEL _l896_:
    MOV $RET %r0;
    RET;
}
func @@f304(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "[object Array]";
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f305(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    FUNC %r1 @@f701;
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r3 0;
    SET_KEY %r1 0 %r3;
    MOV %r3 1;
    SET_KEY %r1 1 %r3;
    MOV %r3 2;
    SET_KEY %r1 2 %r3;
    MOV %r2 "map";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f306(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_ARR %r1;
    MOV %r2 .e;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f307() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 20;
    PUSH %r1;
    CALL_CTX 'Array' 1 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_array";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "_i";
    SET_KEY %r1 %r2 %r0;
}
func @@f308(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    MOV_THIS %r4;
    MOV %r5 "_array";
    MOV_PROP %r2 %r4 %r5;
    MOV_THIS %r5;
    MOV %r6 "_i";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "_i";
    SET_KEY %r5 %r6 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f309() {
    VAR e;
    VAR t;
    VAR r;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV r 0;
    MOV_THIS %r3;
    MOV %r4 "_array";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV i $RET;
    MOV_THIS %r0;
    MOV %r1 "_array";
    MOV_PROP o %r0 %r1;
    MOV s 0;
    MOV %r0 0;
    MOV e %r0;
LABEL _l899_:
    MOV %r1 e;
    MOV %r3 o;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l903_;
    MOV %r2 0;
    VOID %r2;
    MOV %r4 o;
    MOV %r5 e;
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l903_:
    JF %r0 _l900_;
LABEL _l902_:
    MOV %r1 "string";
    MOV %r3 o;
    MOV %r4 e;
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l905_;
    MOV %r5 o;
    MOV %r6 e;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 i;
    MOV %r4 e;
    SET_KEY %r3 %r4 %r2;
    JMP _l904_;
LABEL _l905_:
    MOV %r4 o;
    MOV %r5 e;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 @n;
    MOV %r4 "byteLength";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r3 i;
    MOV %r4 e;
    SET_KEY %r3 %r4 %r2;
LABEL _l904_:
    MOV %r2 i;
    MOV %r3 e;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    ADD %r2 %r1;
    MOV r %r2;
LABEL _l901_:
    MOV %r1 e;
    ADD %r1 1;
    MOV e %r1;
    JMP _l899_;
LABEL _l900_:
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "allocUnsafe";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV t %r0;
    MOV %r0 0;
    MOV e %r0;
LABEL _l906_:
    MOV %r1 e;
    MOV %r3 o;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l910_;
    MOV %r2 0;
    VOID %r2;
    MOV %r4 o;
    MOV %r5 e;
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l910_:
    JF %r0 _l907_;
LABEL _l909_:
    MOV %r1 "string";
    MOV %r3 o;
    MOV %r4 e;
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l912_;
    MOV %r2 t;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r4 o;
    MOV %r5 e;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "copy";
    CALL_VAR %r2 %r3 2 false;
    MOV %r3 i;
    MOV %r4 e;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 s;
    ADD %r3 %r2;
    MOV s %r3;
    JMP _l911_;
LABEL _l912_:
    MOV %r3 o;
    MOV %r4 e;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 t;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 2 false;
    MOV %r3 i;
    MOV %r4 e;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 s;
    ADD %r3 %r2;
    MOV s %r3;
LABEL _l911_:
LABEL _l908_:
    MOV %r1 e;
    ADD %r1 1;
    MOV e %r1;
    JMP _l906_;
LABEL _l907_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f310(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    CALL_REG @s 0 true;
    MOV r $RET;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 r;
    MOV %r2 "concat";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f311(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 2;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV t $RET;
    MOV %r1 .e;
    MOV %r2 8;
    SHR %r1 %r2;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "writeUInt8";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    PUSH %r1;
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "writeUInt8";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f312() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV e 0;
LABEL _l913_:
    MOV %r0 e;
    MOV %r1 @i;
    LT %r0 %r1;
    JF %r0 _l914_;
LABEL _l916_:
    MOV %r2 e;
    PUSH %r2;
    CALL_REG @s 1 false;
    MOV %r1 $RET;
    MOV %r2 @o;
    MOV %r3 e;
    SET_KEY %r2 %r3 %r1;
LABEL _l915_:
    MOV %r1 e;
    ADD %r1 1;
    MOV e %r1;
    JMP _l913_;
LABEL _l914_:
}
func @@f313(.e) {
    VAR t;
    VAR r;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV t 0;
    MOV r 0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f702;
    CALL_REG %r0 1 false;
    MOV i $RET;
    MOV %r0 i;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV o $RET;
    JMP _l920_;
LABEL _l917_:
    MOV %r0 .e;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l918_;
LABEL _l920_:
    MOV %r1 .e;
    MOV %r3 128;
    MOD %r1 %r3;
    MOV %r2 0;
    OR %r1 %r2;
    MOV t %r1;
    MOV %r3 .e;
    MOV %r5 128;
    DIV %r3 %r5;
    MOV %r4 0;
    OR %r3 %r4;
    MOV .e %r3;
    MOV %r1 %r3;
    MOV %r2 0;
    GT %r1 %r2;
    JF %r1 _l921_;
    MOV %r3 128;
    MOV %r4 t;
    OR %r4 %r3;
    MOV t %r4;
    MOV %r2 %r4;
LABEL _l921_:
    MOV %r1 t;
    PUSH %r1;
    MOV %r2 r;
    MOV %r1 %r2;
    ADD %r2 1;
    MOV r %r2;
    PUSH %r1;
    MOV %r1 o;
    MOV %r2 "writeUInt8";
    CALL_VAR %r1 %r2 2 false;
    JMP _l917_;
LABEL _l918_:
    NEW_OBJ %r0;
    MOV %r1 o;
    SET_KEY %r0 'data' %r1;
    MOV %r1 i;
    SET_KEY %r0 'length' %r1;
    MOV $RET %r0;
    RET;
}
func @@f314(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 4;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV t $RET;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "writeUInt32BE";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f315() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "cmd";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "retain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "qos";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "dup";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    MINUS %r0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "topic";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "payload";
    SET_KEY %r1 %r2 %r0;
}
func @@f316(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 @u;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l923_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @u 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l922_;
LABEL _l923_:
LABEL _l922_:
    MOV %r1 .e;
    MOV %r0 %r1;
    JIF %r1 _l924_;
    NEW_OBJ %r2;
    LG_OR %r0 %r2;
LABEL _l924_:
    MOV_THIS %r1;
    MOV %r2 "settings";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV %r1 "_parseHeader";
    SET_KEY %r0 0 %r1;
    MOV %r1 "_parseLength";
    SET_KEY %r0 1 %r1;
    MOV %r1 "_parsePayload";
    SET_KEY %r0 2 %r1;
    MOV %r1 "_newPacket";
    SET_KEY %r0 3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_states";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    MOV %r1 "_resetState";
    CALL_VAR %r0 %r1 0 false;
}
func @@f317() {
    REG %r0;
    REG %r1;
    REG %r2;
    CALL_REG @s 0 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "packet";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "error";
    SET_KEY %r1 %r2 %r0;
    CALL_REG @n 0 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_list";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "_stateCounter";
    SET_KEY %r1 %r2 %r0;
}
func @@f318(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r1;
    MOV %r2 "error";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l928_;
    MOV_THIS %r2;
    MOV %r3 "_resetState";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l928_:
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_list";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "append";
    CALL_VAR %r0 %r1 1 false;
LABEL _l925_:
    MOV %r3 1;
    MINUS %r3;
    MOV_THIS %r7;
    MOV %r8 "packet";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l932_;
    MOV_THIS %r8;
    MOV %r9 "_list";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    GT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l932_:
    MOV %r1 %r2;
    JF %r2 _l931_;
    MOV_THIS %r4;
    MOV_THIS %r8;
    MOV %r9 "_states";
    MOV_PROP %r7 %r8 %r9;
    MOV_THIS %r9;
    MOV %r8 "_stateCounter";
    MOV_PROP %r6 %r9 %r8;
    MOV_PROP %r5 %r7 %r6;
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l931_:
    MOV %r0 %r1;
    JF %r1 _l930_;
    MOV_THIS %r3;
    MOV %r4 "error";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l930_:
    JF %r0 _l926_;
LABEL _l929_:
    MOV_THIS %r2;
    MOV %r3 "_stateCounter";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV_THIS %r2;
    MOV %r3 "_stateCounter";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r3;
    MOV %r4 "_stateCounter";
    MOV_PROP %r1 %r3 %r4;
    MOV_THIS %r5;
    MOV %r6 "_states";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GE %r1 %r2;
    JF %r1 _l933_;
    MOV %r3 0;
    MOV_THIS %r4;
    MOV %r5 "_stateCounter";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l933_:
    JMP _l925_;
LABEL _l926_:
    MOV_THIS %r3;
    MOV %r4 "_list";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f319() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 0;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_list";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "readUInt8";
    CALL_VAR %r0 %r1 1 false;
    MOV e $RET;
    MOV %r4 @a;
    MOV %r5 "types";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 e;
    MOV %r5 @a;
    MOV %r6 "CMD_SHIFT";
    MOV_PROP %r4 %r5 %r6;
    SHR %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "cmd";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 0;
    MOV %r2 e;
    MOV %r4 @a;
    MOV %r5 "RETAIN_MASK";
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    WNE %r1 %r2;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "retain";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 e;
    MOV %r4 @a;
    MOV %r5 "QOS_SHIFT";
    MOV_PROP %r3 %r4 %r5;
    SHR %r1 %r3;
    MOV %r3 @a;
    MOV %r4 "QOS_MASK";
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "qos";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 0;
    MOV %r2 e;
    MOV %r4 @a;
    MOV %r5 "DUP_MASK";
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    WNE %r1 %r2;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "dup";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "_list";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "consume";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f320() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 0;
    NEG %r0;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "_parseVarByteNum";
    CALL_VAR %r0 %r1 1 false;
    MOV e $RET;
    MOV %r1 e;
    JF %r1 _l934_;
    MOV %r4 e;
    MOV %r5 "value";
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r6;
    MOV %r7 "packet";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 e;
    MOV %r5 "bytes";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "consume";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l934_:
    MOV %r0 e;
    NEG %r0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f321() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    REG %r16;
    REG %r17;
    REG %r18;
    MOV e 1;
    NEG e;
    MOV %r1 0;
    MOV_THIS %r5;
    MOV %r6 "packet";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l937_;
    MOV_THIS %r6;
    MOV %r7 "_list";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV_THIS %r6;
    MOV %r7 "packet";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    GE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l937_:
    JF %r0 _l936_;
    BLOCK 2;
    MOV %r2 0;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "cmd";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 "connect";
    JE %r1 %r2 _l939_;
    JMP _l940_;
LABEL _l939_:
    MOV_THIS %r3;
    MOV %r4 "_parseConnect";
    CALL_VAR %r3 %r4 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l941_;
LABEL _l940_:
    MOV %r3 "connack";
    JE %r1 %r3 _l941_;
    JMP _l942_;
LABEL _l941_:
    MOV_THIS %r4;
    MOV %r5 "_parseConnack";
    CALL_VAR %r4 %r5 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l943_;
LABEL _l942_:
    MOV %r4 "publish";
    JE %r1 %r4 _l943_;
    JMP _l944_;
LABEL _l943_:
    MOV_THIS %r5;
    MOV %r6 "_parsePublish";
    CALL_VAR %r5 %r6 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l945_;
LABEL _l944_:
    MOV %r5 "puback";
    JE %r1 %r5 _l945_;
    JMP _l946_;
LABEL _l946_:
    MOV %r6 "pubrec";
    JE %r1 %r6 _l945_;
    JMP _l947_;
LABEL _l947_:
    MOV %r7 "pubrel";
    JE %r1 %r7 _l945_;
    JMP _l948_;
LABEL _l948_:
    MOV %r8 "pubcomp";
    JE %r1 %r8 _l945_;
    JMP _l949_;
LABEL _l945_:
    MOV_THIS %r9;
    MOV %r10 "_parseConfirmation";
    CALL_VAR %r9 %r10 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l950_;
LABEL _l949_:
    MOV %r9 "subscribe";
    JE %r1 %r9 _l950_;
    JMP _l951_;
LABEL _l950_:
    MOV_THIS %r10;
    MOV %r11 "_parseSubscribe";
    CALL_VAR %r10 %r11 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l952_;
LABEL _l951_:
    MOV %r10 "suback";
    JE %r1 %r10 _l952_;
    JMP _l953_;
LABEL _l952_:
    MOV_THIS %r11;
    MOV %r12 "_parseSuback";
    CALL_VAR %r11 %r12 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l954_;
LABEL _l953_:
    MOV %r11 "unsubscribe";
    JE %r1 %r11 _l954_;
    JMP _l955_;
LABEL _l954_:
    MOV_THIS %r12;
    MOV %r13 "_parseUnsubscribe";
    CALL_VAR %r12 %r13 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l956_;
LABEL _l955_:
    MOV %r12 "unsuback";
    JE %r1 %r12 _l956_;
    JMP _l957_;
LABEL _l956_:
    MOV_THIS %r13;
    MOV %r14 "_parseUnsuback";
    CALL_VAR %r13 %r14 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l958_;
LABEL _l957_:
    MOV %r13 "pingreq";
    JE %r1 %r13 _l958_;
    JMP _l959_;
LABEL _l959_:
    MOV %r14 "pingresp";
    JE %r1 %r14 _l958_;
    JMP _l960_;
LABEL _l958_:
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l961_;
LABEL _l960_:
    MOV %r15 "disconnect";
    JE %r1 %r15 _l961_;
    JMP _l962_;
LABEL _l961_:
    MOV_THIS %r16;
    MOV %r17 "_parseDisconnect";
    CALL_VAR %r16 %r17 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l963_;
LABEL _l962_:
    MOV %r16 "auth";
    JE %r1 %r16 _l963_;
    JMP _l964_;
LABEL _l963_:
    MOV_THIS %r17;
    MOV %r18 "_parseAuth";
    CALL_VAR %r17 %r18 0 false;
    CLR_BLOCK 2;
    JMP _l938_;
    JMP _l965_;
LABEL _l964_:
LABEL _l965_:
    MOV %r18 "Not supported";
    PUSH %r18;
    CALL_CTX 'Error' 1 true;
    MOV %r17 $RET;
    PUSH %r17;
    MOV_THIS %r17;
    MOV %r18 "_emitError";
    CALL_VAR %r17 %r18 1 false;
    JMP _l967_;
LABEL _l966_:
LABEL _l967_:
LABEL _l938_:
    END_BLOCK 2;
    MOV %r1 0;
    NEG %r1;
    MOV e %r1;
    JMP _l935_;
LABEL _l936_:
LABEL _l935_:
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f322() {
    VAR e;
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    VAR u;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    NEW_OBJ s;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP u %r0 %r1;
    MOV %r0 null;
    MOV_THIS %r3;
    MOV %r4 "_parseString";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV e %r2;
    MOV %r1 %r2;
    EQ %r0 %r1;
    JF %r0 _l969_;
    MOV %r3 "Cannot parse protocolId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l968_;
LABEL _l969_:
LABEL _l968_:
    MOV %r1 "MQTT";
    MOV %r2 e;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l972_;
    MOV %r2 "MQIsdp";
    MOV %r3 e;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l972_:
    JF %r0 _l971_;
    MOV %r3 "Invalid protocolId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l970_;
LABEL _l971_:
LABEL _l970_:
    MOV %r1 e;
    MOV %r2 u;
    MOV %r3 "protocolId";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    MOV_PROP %r0 %r2 %r3;
    MOV_THIS %r4;
    MOV %r5 "_list";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GE %r0 %r1;
    JF %r0 _l974_;
    MOV %r3 "Packet too short";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l973_;
LABEL _l974_:
LABEL _l973_:
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "_list";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "readUInt8";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 u;
    MOV %r3 "protocolVersion";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 3;
    MOV %r4 u;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l978_;
    MOV %r3 4;
    MOV %r5 u;
    MOV %r6 "protocolVersion";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l978_:
    MOV %r0 %r1;
    JF %r1 _l977_;
    MOV %r2 5;
    MOV %r4 u;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l977_:
    JF %r0 _l976_;
    MOV %r3 "Invalid protocol version";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l975_;
LABEL _l976_:
LABEL _l975_:
    MOV_THIS %r2;
    MOV %r3 "_pos";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    MOV_PROP %r0 %r2 %r3;
    MOV_THIS %r4;
    MOV %r5 "_list";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GE %r0 %r1;
    JF %r0 _l980_;
    MOV %r3 "Packet too short";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l979_;
LABEL _l980_:
LABEL _l979_:
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r3 @a;
    MOV %r4 "USERNAME_MASK";
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    MOV %r2 s;
    MOV %r3 "username";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r3 @a;
    MOV %r4 "PASSWORD_MASK";
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    MOV %r2 s;
    MOV %r3 "password";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r3 @a;
    MOV %r4 "WILL_FLAG_MASK";
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    MOV %r2 s;
    MOV %r3 "will";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 s;
    MOV %r3 "will";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l983_;
    NEW_OBJ %r3;
    MOV %r4 u;
    MOV %r5 "will";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    MOV_THIS %r7;
    MOV %r8 "_pos";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_THIS %r8;
    MOV %r9 "_list";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "readUInt8";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r6 @a;
    MOV %r7 "WILL_RETAIN_MASK";
    MOV_PROP %r5 %r6 %r7;
    AND %r4 %r5;
    WNE %r3 %r4;
    MOV %r6 u;
    MOV %r7 "will";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "retain";
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r7;
    MOV %r8 "_pos";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_THIS %r8;
    MOV %r9 "_list";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "readUInt8";
    CALL_VAR %r6 %r7 1 false;
    MOV %r3 $RET;
    MOV %r6 @a;
    MOV %r7 "WILL_QOS_MASK";
    MOV_PROP %r5 %r6 %r7;
    AND %r3 %r5;
    MOV %r5 @a;
    MOV %r6 "WILL_QOS_SHIFT";
    MOV_PROP %r4 %r5 %r6;
    SHR %r3 %r4;
    MOV %r6 u;
    MOV %r7 "will";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "qos";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l983_:
    MOV %r1 0;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r6;
    MOV %r7 "_list";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "readUInt8";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r4 @a;
    MOV %r5 "CLEAN_SESSION_MASK";
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    WNE %r1 %r2;
    MOV %r2 u;
    MOV %r3 "clean";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r2;
    MOV %r3 "_parseNum";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV %r2 u;
    MOV %r3 "keepalive";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 1;
    MINUS %r0;
    MOV %r2 u;
    MOV %r3 "keepalive";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l982_;
    MOV %r3 "Packet too short";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l981_;
LABEL _l982_:
LABEL _l981_:
    MOV %r0 5;
    MOV %r2 u;
    MOV %r3 "protocolVersion";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l985_;
    MOV_THIS %r1;
    MOV %r2 "_parseProperties";
    CALL_VAR %r1 %r2 0 false;
    MOV c $RET;
    MOV %r4 c;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l986_;
    MOV %r3 c;
    MOV %r4 u;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l986_:
    JMP _l984_;
LABEL _l985_:
LABEL _l984_:
    MOV %r0 null;
    MOV_THIS %r3;
    MOV %r4 "_parseString";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV t %r2;
    MOV %r1 %r2;
    EQ %r0 %r1;
    JF %r0 _l988_;
    MOV %r3 "Packet too short";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l987_;
LABEL _l988_:
LABEL _l987_:
    MOV %r1 t;
    MOV %r2 u;
    MOV %r3 "clientId";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 s;
    MOV %r2 "will";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l990_;
    MOV %r1 5;
    MOV %r3 u;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l992_;
    MOV_THIS %r2;
    MOV %r3 "_parseProperties";
    CALL_VAR %r2 %r3 0 false;
    MOV l $RET;
    MOV %r5 l;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "getOwnPropertyNames";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l993_;
    MOV %r4 l;
    MOV %r7 u;
    MOV %r8 "will";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "properties";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l993_:
    JMP _l991_;
LABEL _l992_:
LABEL _l991_:
    MOV %r1 null;
    MOV_THIS %r4;
    MOV %r5 "_parseString";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV r %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l995_;
    MOV %r4 "Cannot parse will topic";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_emitError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l994_;
LABEL _l995_:
LABEL _l994_:
    MOV %r2 r;
    MOV %r5 u;
    MOV %r6 "will";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "topic";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 null;
    MOV_THIS %r4;
    MOV %r5 "_parseBuffer";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV n %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l997_;
    MOV %r4 "Cannot parse will payload";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_emitError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l996_;
LABEL _l997_:
LABEL _l996_:
    MOV %r1 n;
    MOV %r4 u;
    MOV %r5 "will";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "payload";
    SET_KEY %r2 %r3 %r1;
    JMP _l989_;
LABEL _l990_:
LABEL _l989_:
    MOV %r1 s;
    MOV %r2 "username";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l999_;
    MOV %r1 null;
    MOV_THIS %r4;
    MOV %r5 "_parseString";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV o %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l1001_;
    MOV %r4 "Cannot parse username";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_emitError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l1000_;
LABEL _l1001_:
LABEL _l1000_:
    MOV %r1 o;
    MOV %r2 u;
    MOV %r3 "username";
    SET_KEY %r2 %r3 %r1;
    JMP _l998_;
LABEL _l999_:
LABEL _l998_:
    MOV %r1 s;
    MOV %r2 "password";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1003_;
    MOV %r1 null;
    MOV_THIS %r4;
    MOV %r5 "_parseBuffer";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV i %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l1005_;
    MOV %r4 "Cannot parse password";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_emitError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l1004_;
LABEL _l1005_:
LABEL _l1004_:
    MOV %r1 i;
    MOV %r2 u;
    MOV %r3 "password";
    SET_KEY %r2 %r3 %r1;
    JMP _l1002_;
LABEL _l1003_:
LABEL _l1002_:
    MOV %r1 u;
    MOV_THIS %r2;
    MOV %r3 "settings";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 u;
    MOV $RET %r0;
    RET;
}
func @@f323() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV_THIS %r4;
    MOV %r5 "_list";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 2;
    LT %r0 %r1;
    JF %r0 _l1007_;
    MOV %r1 null;
    MOV $RET %r1;
    RET;
    JMP _l1006_;
LABEL _l1007_:
LABEL _l1006_:
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    SET_KEY %r5 %r6 %r4;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r3 @a;
    MOV %r4 "SESSIONPRESENT_MASK";
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    NEG %r1;
    NEG %r1;
    MOV %r2 e;
    MOV %r3 "sessionPresent";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 5;
    MOV_THIS %r5;
    MOV %r6 "settings";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1011_;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    SET_KEY %r5 %r6 %r4;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r3 e;
    MOV %r4 "reasonCode";
    SET_KEY %r3 %r4 %r2;
    JMP _l1010_;
LABEL _l1011_:
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    SET_KEY %r5 %r6 %r4;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r3 e;
    MOV %r4 "returnCode";
    SET_KEY %r3 %r4 %r2;
LABEL _l1010_:
    MOV %r1 1;
    MINUS %r1;
    MOV %r3 e;
    MOV %r4 "returnCode";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1012_;
    MOV %r2 1;
    MINUS %r2;
    MOV %r4 e;
    MOV %r5 "reasonCode";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1012_:
    JF %r0 _l1009_;
    MOV %r3 "Cannot parse return code";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1008_;
LABEL _l1009_:
LABEL _l1008_:
    MOV %r0 5;
    MOV_THIS %r4;
    MOV %r5 "settings";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "protocolVersion";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l1014_;
    MOV_THIS %r1;
    MOV %r2 "_parseProperties";
    CALL_VAR %r1 %r2 0 false;
    MOV t $RET;
    MOV %r4 t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1015_;
    MOV %r3 t;
    MOV %r4 e;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1015_:
    JMP _l1013_;
LABEL _l1014_:
LABEL _l1013_:
}
func @@f324() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV_THIS %r2;
    MOV %r3 "_parseString";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV %r2 e;
    MOV %r3 "topic";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 null;
    MOV %r2 e;
    MOV %r3 "topic";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l1017_;
    MOV %r3 "Cannot parse topic";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1016_;
LABEL _l1017_:
LABEL _l1016_:
    MOV %r3 e;
    MOV %r4 "qos";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    GT %r1 %r2;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l1020_;
    MOV_THIS %r3;
    MOV %r4 "_parseMessageId";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1020_:
    JF %r0 _l1019_;
    MOV %r1 5;
    MOV_THIS %r5;
    MOV %r6 "settings";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1022_;
    MOV_THIS %r2;
    MOV %r3 "_parseProperties";
    CALL_VAR %r2 %r3 0 false;
    MOV t $RET;
    MOV %r5 t;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "getOwnPropertyNames";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1023_;
    MOV %r4 t;
    MOV %r5 e;
    MOV %r6 "properties";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1023_:
    JMP _l1021_;
LABEL _l1022_:
LABEL _l1021_:
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r3 e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "_list";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r2 e;
    MOV %r3 "payload";
    SET_KEY %r2 %r3 %r1;
    JMP _l1018_;
LABEL _l1019_:
LABEL _l1018_:
}
func @@f325() {
    VAR e;
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    VAR u;
    VAR c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP u %r0 %r1;
    MOV %r0 1;
    MOV %r2 u;
    MOV %r3 "qos";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l1025_;
    MOV %r3 "Wrong subscribe header";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1024_;
LABEL _l1025_:
LABEL _l1024_:
    NEW_ARR %r1;
    MOV %r2 u;
    MOV %r3 "subscriptions";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseMessageId";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    JF %r0 _l1027_;
    MOV %r1 5;
    MOV_THIS %r5;
    MOV %r6 "settings";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1029_;
    MOV_THIS %r2;
    MOV %r3 "_parseProperties";
    CALL_VAR %r2 %r3 0 false;
    MOV c $RET;
    MOV %r5 c;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "getOwnPropertyNames";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1030_;
    MOV %r4 c;
    MOV %r5 u;
    MOV %r6 "properties";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1030_:
    JMP _l1028_;
LABEL _l1029_:
LABEL _l1028_:
LABEL _l1031_:
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r1 %r3 %r4;
    MOV %r3 u;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1032_;
LABEL _l1034_:
    MOV %r2 null;
    MOV_THIS %r5;
    MOV %r6 "_parseString";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    MOV e %r4;
    MOV %r3 %r4;
    EQ %r2 %r3;
    JF %r2 _l1036_;
    MOV %r5 "Cannot parse topic";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_emitError";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l1035_;
LABEL _l1036_:
LABEL _l1035_:
    MOV_THIS %r5;
    MOV %r6 "_parseByte";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    MOV t %r4;
    MOV %r2 %r4;
    MOV %r4 @a;
    MOV %r5 "SUBSCRIBE_OPTIONS_QOS_MASK";
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    MOV r %r2;
    MOV %r2 0;
    MOV %r3 t;
    MOV %r6 @a;
    MOV %r7 "SUBSCRIBE_OPTIONS_NL_SHIFT";
    MOV_PROP %r5 %r6 %r7;
    SHR %r3 %r5;
    MOV %r5 @a;
    MOV %r6 "SUBSCRIBE_OPTIONS_NL_MASK";
    MOV_PROP %r4 %r5 %r6;
    AND %r3 %r4;
    WNE %r2 %r3;
    MOV o %r2;
    MOV %r2 0;
    MOV %r3 t;
    MOV %r6 @a;
    MOV %r7 "SUBSCRIBE_OPTIONS_RAP_SHIFT";
    MOV_PROP %r5 %r6 %r7;
    SHR %r3 %r5;
    MOV %r5 @a;
    MOV %r6 "SUBSCRIBE_OPTIONS_RAP_MASK";
    MOV_PROP %r4 %r5 %r6;
    AND %r3 %r4;
    WNE %r2 %r3;
    MOV i %r2;
    MOV %r2 t;
    MOV %r5 @a;
    MOV %r6 "SUBSCRIBE_OPTIONS_RH_SHIFT";
    MOV_PROP %r4 %r5 %r6;
    SHR %r2 %r4;
    MOV %r4 @a;
    MOV %r5 "SUBSCRIBE_OPTIONS_RH_MASK";
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    MOV n %r2;
    NEW_OBJ %r2;
    MOV %r3 e;
    SET_KEY %r2 'topic' %r3;
    MOV %r3 r;
    SET_KEY %r2 'qos' %r3;
    MOV s %r2;
    MOV %r2 5;
    MOV_THIS %r6;
    MOV %r7 "settings";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l1037_;
    MOV %r4 o;
    MOV %r5 s;
    MOV %r6 "nl";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 i;
    MOV %r5 s;
    MOV %r6 "rap";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 n;
    MOV %r5 s;
    MOV %r6 "rh";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1037_:
    MOV %r2 s;
    PUSH %r2;
    MOV %r4 u;
    MOV %r5 "subscriptions";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l1031_;
LABEL _l1032_:
    JMP _l1026_;
LABEL _l1027_:
LABEL _l1026_:
}
func @@f326() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    NEW_ARR %r1;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "granted";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseMessageId";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    JF %r0 _l1039_;
    MOV %r1 5;
    MOV_THIS %r5;
    MOV %r6 "settings";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1041_;
    MOV_THIS %r2;
    MOV %r3 "_parseProperties";
    CALL_VAR %r2 %r3 0 false;
    MOV t $RET;
    MOV %r5 t;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "getOwnPropertyNames";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1042_;
    MOV %r4 t;
    MOV %r5 e;
    MOV %r6 "properties";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1042_:
    JMP _l1040_;
LABEL _l1041_:
LABEL _l1040_:
LABEL _l1043_:
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r1 %r3 %r4;
    MOV_THIS %r5;
    MOV %r6 "packet";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1044_;
LABEL _l1046_:
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    SET_KEY %r5 %r6 %r4;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r6;
    MOV %r7 "packet";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "granted";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l1043_;
LABEL _l1044_:
    JMP _l1038_;
LABEL _l1039_:
LABEL _l1038_:
}
func @@f327() {
    VAR e;
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    NEW_ARR %r1;
    MOV %r2 e;
    MOV %r3 "unsubscriptions";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseMessageId";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    JF %r0 _l1048_;
    MOV %r1 5;
    MOV_THIS %r5;
    MOV %r6 "settings";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1050_;
    MOV_THIS %r2;
    MOV %r3 "_parseProperties";
    CALL_VAR %r2 %r3 0 false;
    MOV t $RET;
    MOV %r5 t;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "getOwnPropertyNames";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1051_;
    MOV %r4 t;
    MOV %r5 e;
    MOV %r6 "properties";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1051_:
    JMP _l1049_;
LABEL _l1050_:
LABEL _l1049_:
LABEL _l1052_:
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r1 %r3 %r4;
    MOV %r3 e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1053_;
LABEL _l1055_:
    MOV %r2 null;
    MOV_THIS %r5;
    MOV %r6 "_parseString";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    MOV r %r4;
    MOV %r3 %r4;
    EQ %r2 %r3;
    JF %r2 _l1057_;
    MOV %r5 "Cannot parse topic";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_emitError";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l1056_;
LABEL _l1057_:
LABEL _l1056_:
    MOV %r2 r;
    PUSH %r2;
    MOV %r4 e;
    MOV %r5 "unsubscriptions";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l1052_;
LABEL _l1053_:
    JMP _l1047_;
LABEL _l1048_:
LABEL _l1047_:
}
func @@f328() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseMessageId";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1059_;
    MOV %r3 "Cannot parse messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1058_;
LABEL _l1059_:
LABEL _l1058_:
    MOV %r0 5;
    MOV_THIS %r4;
    MOV %r5 "settings";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "protocolVersion";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l1061_;
    MOV_THIS %r1;
    MOV %r2 "_parseProperties";
    CALL_VAR %r1 %r2 0 false;
    MOV t $RET;
    MOV %r4 t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1065_;
    MOV %r3 t;
    MOV %r4 e;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1065_:
    NEW_ARR %r1;
    MOV %r2 e;
    MOV %r3 "granted";
    SET_KEY %r2 %r3 %r1;
LABEL _l1062_:
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r1 %r3 %r4;
    MOV_THIS %r5;
    MOV %r6 "packet";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1063_;
LABEL _l1066_:
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    SET_KEY %r5 %r6 %r4;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "readUInt8";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r6;
    MOV %r7 "packet";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "granted";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l1062_;
LABEL _l1063_:
    JMP _l1060_;
LABEL _l1061_:
LABEL _l1060_:
}
func @@f329() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseMessageId";
    CALL_VAR %r1 %r2 0 false;
    MOV %r1 5;
    MOV_THIS %r5;
    MOV %r6 "settings";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1069_;
    MOV %r4 e;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 2;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1069_:
    JF %r0 _l1068_;
    MOV_THIS %r2;
    MOV %r3 "_parseByte";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV %r2 e;
    MOV %r3 "reasonCode";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseProperties";
    CALL_VAR %r1 %r2 0 false;
    MOV t $RET;
    MOV %r4 t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1070_;
    MOV %r3 t;
    MOV %r4 e;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1070_:
    JMP _l1067_;
LABEL _l1068_:
LABEL _l1067_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f330() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV %r0 5;
    MOV_THIS %r4;
    MOV %r5 "settings";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "protocolVersion";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l1072_;
    MOV_THIS %r2;
    MOV %r3 "_parseByte";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV %r2 e;
    MOV %r3 "reasonCode";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_parseProperties";
    CALL_VAR %r1 %r2 0 false;
    MOV t $RET;
    MOV %r4 t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1073_;
    MOV %r3 t;
    MOV %r4 e;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1073_:
    JMP _l1071_;
LABEL _l1072_:
LABEL _l1071_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f331() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV %r0 5;
    MOV_THIS %r4;
    MOV %r5 "settings";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "protocolVersion";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l1075_;
    MOV %r3 "Not supported auth packet for this version MQTT";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_emitError";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1074_;
LABEL _l1075_:
LABEL _l1074_:
    MOV_THIS %r1;
    MOV %r2 "_parseByte";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV %r1 e;
    MOV %r2 "reasonCode";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    MOV %r1 "_parseProperties";
    CALL_VAR %r0 %r1 0 false;
    MOV t $RET;
    MOV %r4 t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1076_;
    MOV %r3 t;
    MOV %r4 e;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1076_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f332() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 "packet";
    MOV_PROP e %r0 %r1;
    MOV_THIS %r2;
    MOV %r3 "_parseNum";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV %r2 e;
    MOV %r3 "messageId";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 null;
    MOV %r3 e;
    MOV %r4 "messageId";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1077_;
    MOV %r4 "Cannot parse messageId";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_emitError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 1;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l1077_:
    MOV $RET %r0;
    RET;
}
func @@f333(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r0;
    MOV %r1 "_parseNum";
    CALL_VAR %r0 %r1 0 false;
    MOV r $RET;
    MOV n r;
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP %r0 %r1 %r2;
    ADD n %r0;
    MOV %r3 1;
    MINUS %r3;
    MOV %r4 r;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1081_;
    MOV %r4 n;
    MOV_THIS %r8;
    MOV %r9 "_list";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    GT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1081_:
    MOV %r1 %r2;
    JIF %r2 _l1080_;
    MOV %r3 n;
    MOV_THIS %r7;
    MOV %r8 "packet";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1080_:
    JF %r1 _l1079_;
    MOV %r0 null;
    JMP _l1078_;
LABEL _l1079_:
    MOV %r3 "utf8";
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 n;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toString";
    CALL_VAR %r3 %r4 3 false;
    MOV %r2 $RET;
    MOV t %r2;
    MOV %r2 r;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    ADD %r3 %r2;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    SET_KEY %r4 %r5 %r3;
    MOV %r0 t;
LABEL _l1078_:
    MOV $RET %r0;
    RET;
}
func @@f334() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    NEW_OBJ %r0;
    MOV_THIS %r2;
    MOV %r3 "_parseString";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    SET_KEY %r0 'name' %r1;
    MOV_THIS %r2;
    MOV %r3 "_parseString";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    SET_KEY %r0 'value' %r1;
    MOV $RET %r0;
    RET;
}
func @@f335() {
    VAR e;
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r0;
    MOV %r1 "_parseNum";
    CALL_VAR %r0 %r1 0 false;
    MOV t $RET;
    MOV r t;
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP %r0 %r1 %r2;
    ADD r %r0;
    MOV %r3 1;
    MINUS %r3;
    MOV %r4 t;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1085_;
    MOV %r4 r;
    MOV_THIS %r8;
    MOV %r9 "_list";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    GT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1085_:
    MOV %r1 %r2;
    JIF %r2 _l1084_;
    MOV %r3 r;
    MOV_THIS %r7;
    MOV %r8 "packet";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1084_:
    JF %r1 _l1083_;
    MOV %r0 null;
    JMP _l1082_;
LABEL _l1083_:
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 r;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV e %r2;
    MOV %r2 t;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    MOV_PROP %r3 %r4 %r5;
    ADD %r3 %r2;
    MOV_THIS %r4;
    MOV %r5 "_pos";
    SET_KEY %r4 %r5 %r3;
    MOV %r0 e;
LABEL _l1082_:
    MOV $RET %r0;
    RET;
}
func @@f336() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r0 %r3 %r4;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r2 %r3 %r4;
    SUB %r0 %r2;
    MOV %r1 2;
    LT %r0 %r1;
    JF %r0 _l1087_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1086_;
LABEL _l1087_:
LABEL _l1086_:
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_list";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "readUInt16BE";
    CALL_VAR %r0 %r1 1 false;
    MOV e $RET;
    MOV %r1 2;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f337() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r0 %r3 %r4;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r2 %r3 %r4;
    SUB %r0 %r2;
    MOV %r1 4;
    LT %r0 %r1;
    JF %r0 _l1089_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1088_;
LABEL _l1089_:
LABEL _l1088_:
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_list";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "readUInt32BE";
    CALL_VAR %r0 %r1 1 false;
    MOV e $RET;
    MOV %r1 4;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV_THIS %r3;
    MOV %r4 "_pos";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f338(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    BLOCK 1;
    MOV r 0;
    MOV n 1;
    MOV i 0;
    MOV o 0;
    NEG o;
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1094_;
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP s %r1 %r2;
    JMP _l1093_;
LABEL _l1094_:
    MOV s 0;
LABEL _l1093_:
LABEL _l1090_:
    MOV %r1 r;
    MOV %r2 5;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1096_;
    MOV %r3 n;
    MOV %r7 s;
    MOV %r9 r;
    MOV %r8 %r9;
    ADD %r9 1;
    MOV r %r9;
    ADD %r7 %r8;
    PUSH %r7;
    MOV_THIS %r9;
    MOV %r10 "_list";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "readUInt8";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV t %r6;
    MOV %r4 %r6;
    MOV %r6 @a;
    MOV %r7 "LENGTH_MASK";
    MOV_PROP %r5 %r6 %r7;
    AND %r4 %r5;
    MUL %r3 %r4;
    MOV %r4 i;
    ADD %r4 %r3;
    MOV i %r4;
    MOV %r3 128;
    MOV %r4 n;
    MUL %r4 %r3;
    MOV n %r4;
    MOV %r2 0;
    MOV %r3 t;
    MOV %r5 @a;
    MOV %r6 "LENGTH_FIN_MASK";
    MOV_PROP %r4 %r5 %r6;
    AND %r3 %r4;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1096_:
    JF %r0 _l1091_;
LABEL _l1095_:
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 r;
    LE %r1 %r2;
    JF %r1 _l1098_;
    MOV %r2 1;
    NEG %r2;
    MOV o %r2;
    CLR_BLOCK 1;
    JMP _l1091_;
    JMP _l1097_;
LABEL _l1098_:
LABEL _l1097_:
    JMP _l1090_;
LABEL _l1091_:
    END_BLOCK 1;
    MOV %r1 s;
    JF %r1 _l1099_;
    MOV %r3 r;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    MOV_PROP %r4 %r5 %r6;
    ADD %r4 %r3;
    MOV_THIS %r5;
    MOV %r6 "_pos";
    SET_KEY %r5 %r6 %r4;
    MOV %r2 %r4;
LABEL _l1099_:
    MOV %r2 o;
    NEG %r2;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l1100_;
    MOV %r4 .e;
    JF %r4 _l1102_;
    NEW_OBJ %r3;
    MOV %r5 r;
    SET_KEY %r3 'bytes' %r5;
    MOV %r5 i;
    SET_KEY %r3 'value' %r5;
    JMP _l1101_;
LABEL _l1102_:
    MOV %r3 i;
LABEL _l1101_:
    LG_AND %r1 %r3;
LABEL _l1100_:
    MOV o %r1;
    MOV %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f339() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_list";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "readUInt8";
    CALL_VAR %r0 %r1 1 false;
    MOV e $RET;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f340(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r0 .e;
    MOV %r1 "byte";
    JE %r0 %r1 _l1104_;
    JMP _l1105_;
LABEL _l1104_:
    MOV %r2 0;
    MOV_THIS %r4;
    MOV %r5 "_parseByte";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    MOV $RET %r2;
    RET;
    JMP _l1106_;
LABEL _l1105_:
    MOV %r2 "int8";
    JE %r0 %r2 _l1106_;
    JMP _l1107_;
LABEL _l1106_:
    MOV_THIS %r4;
    MOV %r5 "_parseByte";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l1108_;
LABEL _l1107_:
    MOV %r3 "int16";
    JE %r0 %r3 _l1108_;
    JMP _l1109_;
LABEL _l1108_:
    MOV_THIS %r5;
    MOV %r6 "_parseNum";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    JMP _l1110_;
LABEL _l1109_:
    MOV %r4 "int32";
    JE %r0 %r4 _l1110_;
    JMP _l1111_;
LABEL _l1110_:
    MOV_THIS %r6;
    MOV %r7 "_parse4ByteNum";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
    JMP _l1112_;
LABEL _l1111_:
    MOV %r5 "var";
    JE %r0 %r5 _l1112_;
    JMP _l1113_;
LABEL _l1112_:
    MOV_THIS %r7;
    MOV %r8 "_parseVarByteNum";
    CALL_VAR %r7 %r8 0 false;
    MOV %r6 $RET;
    MOV $RET %r6;
    RET;
    JMP _l1114_;
LABEL _l1113_:
    MOV %r6 "string";
    JE %r0 %r6 _l1114_;
    JMP _l1115_;
LABEL _l1114_:
    MOV_THIS %r8;
    MOV %r9 "_parseString";
    CALL_VAR %r8 %r9 0 false;
    MOV %r7 $RET;
    MOV $RET %r7;
    RET;
    JMP _l1116_;
LABEL _l1115_:
    MOV %r7 "pair";
    JE %r0 %r7 _l1116_;
    JMP _l1117_;
LABEL _l1116_:
    MOV_THIS %r9;
    MOV %r10 "_parseStringPair";
    CALL_VAR %r9 %r10 0 false;
    MOV %r8 $RET;
    MOV $RET %r8;
    RET;
    JMP _l1118_;
LABEL _l1117_:
    MOV %r8 "binary";
    JE %r0 %r8 _l1118_;
    JMP _l1119_;
LABEL _l1118_:
    MOV_THIS %r10;
    MOV %r11 "_parseBuffer";
    CALL_VAR %r10 %r11 0 false;
    MOV %r9 $RET;
    MOV $RET %r9;
    RET;
    JMP _l1120_;
LABEL _l1119_:
LABEL _l1120_:
LABEL _l1103_:
}
func @@f341() {
    VAR e;
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r0;
    MOV %r1 "_parseVarByteNum";
    CALL_VAR %r0 %r1 0 false;
    MOV e $RET;
    MOV_THIS %r1;
    MOV %r2 "_pos";
    MOV_PROP t %r1 %r2;
    MOV %r0 e;
    ADD t %r0;
    NEW_OBJ r;
LABEL _l1121_:
    MOV_THIS %r2;
    MOV %r3 "_pos";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 t;
    LT %r0 %r1;
    JF %r0 _l1122_;
LABEL _l1124_:
    MOV_THIS %r1;
    MOV %r2 "_parseByte";
    CALL_VAR %r1 %r2 0 false;
    MOV n $RET;
    MOV %r3 @a;
    MOV %r4 "propertiesCodes";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 n;
    MOV_PROP i %r1 %r2;
    MOV %r1 i;
    NEG %r1;
    JF %r1 _l1126_;
    MOV %r4 "Unknown property";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_emitError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l1125_;
LABEL _l1126_:
LABEL _l1125_:
    MOV %r1 "userProperties";
    MOV %r2 i;
    NE %r1 %r2;
    JF %r1 _l1128_;
    MOV %r6 @a;
    MOV %r7 "propertiesTypes";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 i;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_parseByType";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 i;
    SET_KEY %r3 %r4 %r2;
    JMP _l1127_;
LABEL _l1128_:
    MOV %r3 r;
    MOV %r4 i;
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l1129_;
    NEW_OBJ %r4;
    MOV %r5 r;
    MOV %r6 i;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1129_:
    MOV %r5 @a;
    MOV %r6 "propertiesTypes";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 i;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_parseByType";
    CALL_VAR %r2 %r3 1 false;
    MOV o $RET;
    MOV %r5 r;
    MOV %r6 i;
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 o;
    MOV %r5 "name";
    MOV_PROP %r4 %r6 %r5;
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1131_;
    MOV %r7 r;
    MOV %r8 i;
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 o;
    MOV %r7 "name";
    MOV_PROP %r6 %r8 %r7;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_CTX %r4 "Array";
    MOV %r5 "isArray";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    JF %r3 _l1133_;
    MOV %r5 o;
    MOV %r6 "value";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r8 r;
    MOV %r9 i;
    MOV_PROP %r6 %r8 %r9;
    MOV %r9 o;
    MOV %r8 "name";
    MOV_PROP %r7 %r9 %r8;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 1 false;
    JMP _l1132_;
LABEL _l1133_:
    MOV %r6 r;
    MOV %r7 i;
    MOV_PROP %r4 %r6 %r7;
    MOV %r7 o;
    MOV %r6 "name";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP s %r4 %r5;
    NEW_ARR %r4;
    MOV %r5 s;
    SET_KEY %r4 0 %r5;
    MOV %r7 r;
    MOV %r8 i;
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 o;
    MOV %r7 "name";
    MOV_PROP %r6 %r8 %r7;
    SET_KEY %r5 %r6 %r4;
    MOV %r5 o;
    MOV %r6 "value";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r8 r;
    MOV %r9 i;
    MOV_PROP %r6 %r8 %r9;
    MOV %r9 o;
    MOV %r8 "name";
    MOV_PROP %r7 %r9 %r8;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 1 false;
LABEL _l1132_:
    JMP _l1130_;
LABEL _l1131_:
    MOV %r4 o;
    MOV %r5 "value";
    MOV_PROP %r3 %r4 %r5;
    MOV %r6 r;
    MOV %r7 i;
    MOV_PROP %r4 %r6 %r7;
    MOV %r7 o;
    MOV %r6 "name";
    MOV_PROP %r5 %r7 %r6;
    SET_KEY %r4 %r5 %r3;
LABEL _l1130_:
LABEL _l1127_:
    JMP _l1121_;
LABEL _l1122_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f342() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r2;
    MOV %r3 "packet";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1134_;
    MOV_THIS %r6;
    MOV %r7 "packet";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_list";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "consume";
    CALL_VAR %r3 %r4 1 false;
    MOV %r3 "packet";
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "packet";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l1134_:
    CALL_REG @s 0 true;
    MOV %r1 $RET;
    MOV_THIS %r2;
    MOV %r3 "packet";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 0;
    MOV_THIS %r2;
    MOV %r3 "_pos";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f343(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    MOV_THIS %r1;
    MOV %r2 "error";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f344(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    REG %r16;
    REG %r17;
    REG %r18;
    MOV %r2 .t;
    MOV %r3 "cork";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1135_;
    MOV %r3 .t;
    MOV %r4 "cork";
    CALL_VAR %r3 %r4 0 false;
    MOV %r3 @_;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @u 2 false;
    MOV %r2 $RET;
LABEL _l1135_:
    MOV %r1 @b;
    JF %r1 _l1136_;
    MOV %r3 1;
    NEG %r3;
    MOV @b %r3;
    CALL_REG @f 0 false;
    MOV %r2 $RET;
LABEL _l1136_:
    MOV %r1 .e;
    MOV %r2 "cmd";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 "connect";
    JE %r0 %r1 _l1138_;
    JMP _l1139_;
LABEL _l1138_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    FUNC %r3 @@f703;
    CALL_REG %r3 2 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l1140_;
LABEL _l1139_:
    MOV %r2 "connack";
    JE %r0 %r2 _l1140_;
    JMP _l1141_;
LABEL _l1140_:
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    FUNC %r4 @@f704;
    CALL_REG %r4 3 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l1142_;
LABEL _l1141_:
    MOV %r3 "publish";
    JE %r0 %r3 _l1142_;
    JMP _l1143_;
LABEL _l1142_:
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 .r;
    PUSH %r5;
    FUNC %r5 @@f705;
    CALL_REG %r5 3 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    JMP _l1144_;
LABEL _l1143_:
    MOV %r4 "puback";
    JE %r0 %r4 _l1144_;
    JMP _l1145_;
LABEL _l1145_:
    MOV %r5 "pubrec";
    JE %r0 %r5 _l1144_;
    JMP _l1146_;
LABEL _l1146_:
    MOV %r6 "pubrel";
    JE %r0 %r6 _l1144_;
    JMP _l1147_;
LABEL _l1147_:
    MOV %r7 "pubcomp";
    JE %r0 %r7 _l1144_;
    JMP _l1148_;
LABEL _l1144_:
    MOV %r9 .e;
    PUSH %r9;
    MOV %r9 .t;
    PUSH %r9;
    MOV %r9 .r;
    PUSH %r9;
    FUNC %r9 @@f706;
    CALL_REG %r9 3 false;
    MOV %r8 $RET;
    MOV $RET %r8;
    RET;
    JMP _l1149_;
LABEL _l1148_:
    MOV %r8 "subscribe";
    JE %r0 %r8 _l1149_;
    JMP _l1150_;
LABEL _l1149_:
    MOV %r10 .e;
    PUSH %r10;
    MOV %r10 .t;
    PUSH %r10;
    MOV %r10 .r;
    PUSH %r10;
    FUNC %r10 @@f707;
    CALL_REG %r10 3 false;
    MOV %r9 $RET;
    MOV $RET %r9;
    RET;
    JMP _l1151_;
LABEL _l1150_:
    MOV %r9 "suback";
    JE %r0 %r9 _l1151_;
    JMP _l1152_;
LABEL _l1151_:
    MOV %r11 .e;
    PUSH %r11;
    MOV %r11 .t;
    PUSH %r11;
    MOV %r11 .r;
    PUSH %r11;
    FUNC %r11 @@f708;
    CALL_REG %r11 3 false;
    MOV %r10 $RET;
    MOV $RET %r10;
    RET;
    JMP _l1153_;
LABEL _l1152_:
    MOV %r10 "unsubscribe";
    JE %r0 %r10 _l1153_;
    JMP _l1154_;
LABEL _l1153_:
    MOV %r12 .e;
    PUSH %r12;
    MOV %r12 .t;
    PUSH %r12;
    MOV %r12 .r;
    PUSH %r12;
    FUNC %r12 @@f709;
    CALL_REG %r12 3 false;
    MOV %r11 $RET;
    MOV $RET %r11;
    RET;
    JMP _l1155_;
LABEL _l1154_:
    MOV %r11 "unsuback";
    JE %r0 %r11 _l1155_;
    JMP _l1156_;
LABEL _l1155_:
    MOV %r13 .e;
    PUSH %r13;
    MOV %r13 .t;
    PUSH %r13;
    MOV %r13 .r;
    PUSH %r13;
    FUNC %r13 @@f710;
    CALL_REG %r13 3 false;
    MOV %r12 $RET;
    MOV $RET %r12;
    RET;
    JMP _l1157_;
LABEL _l1156_:
    MOV %r12 "pingreq";
    JE %r0 %r12 _l1157_;
    JMP _l1158_;
LABEL _l1158_:
    MOV %r13 "pingresp";
    JE %r0 %r13 _l1157_;
    JMP _l1159_;
LABEL _l1157_:
    MOV %r15 .e;
    PUSH %r15;
    MOV %r15 .t;
    PUSH %r15;
    FUNC %r15 @@f711;
    CALL_REG %r15 2 false;
    MOV %r14 $RET;
    MOV $RET %r14;
    RET;
    JMP _l1160_;
LABEL _l1159_:
    MOV %r14 "disconnect";
    JE %r0 %r14 _l1160_;
    JMP _l1161_;
LABEL _l1160_:
    MOV %r16 .e;
    PUSH %r16;
    MOV %r16 .t;
    PUSH %r16;
    MOV %r16 .r;
    PUSH %r16;
    FUNC %r16 @@f712;
    CALL_REG %r16 3 false;
    MOV %r15 $RET;
    MOV $RET %r15;
    RET;
    JMP _l1162_;
LABEL _l1161_:
    MOV %r15 "auth";
    JE %r0 %r15 _l1162_;
    JMP _l1163_;
LABEL _l1162_:
    MOV %r17 .e;
    PUSH %r17;
    MOV %r17 .t;
    PUSH %r17;
    MOV %r17 .r;
    PUSH %r17;
    FUNC %r17 @@f713;
    CALL_REG %r17 3 false;
    MOV %r16 $RET;
    MOV $RET %r16;
    RET;
    JMP _l1164_;
LABEL _l1163_:
LABEL _l1164_:
    MOV %r17 "error";
    PUSH %r17;
    MOV %r18 "Unknown command";
    PUSH %r18;
    CALL_CTX 'Error' 1 true;
    MOV %r17 $RET;
    PUSH %r17;
    MOV %r17 .t;
    MOV %r18 "emit";
    CALL_VAR %r17 %r18 2 false;
    MOV %r16 1;
    NEG %r16;
    MOV $RET %r16;
    RET;
    JMP _l1166_;
LABEL _l1165_:
LABEL _l1166_:
LABEL _l1137_:
}
func @@f345(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV %r1 "uncork";
    CALL_VAR %r0 %r1 0 false;
}
func @@f346() {
    REG %r0;
    REG %r1;
    MOV %r0 @d;
    MOV %r1 @S;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f347(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 .e;
    JF %r0 _l1168_;
    MOV %r2 @c;
    MOV %r1 %r2;
    JF %r2 _l1170_;
    MOV %r3 0;
    MOV %r7 @c;
    PUSH %r7;
    MOV_CTX %r7 "Object";
    MOV %r8 "keys";
    CALL_VAR %r7 %r8 1 false;
    MOV %r5 $RET;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1170_:
    JIF %r1 _l1169_;
    MOV %r3 0;
    NEG %r3;
    MOV @b %r3;
    MOV %r2 %r3;
LABEL _l1169_:
    MOV %r1 @S;
    MOV @d %r1;
    JMP _l1167_;
LABEL _l1168_:
    MOV %r1 1;
    NEG %r1;
    MOV @b %r1;
    MOV %r1 @E;
    MOV @d %r1;
LABEL _l1167_:
}
func @@f348(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 @y;
    MOV %r1 .t;
    MOV_PROP r %r0 %r1;
    MOV %r0 r;
    JIF %r0 _l1171_;
    MOV %r5 .t;
    PUSH %r5;
    CALL_REG @h 1 false;
    MOV %r3 $RET;
    MOV %r4 "data";
    MOV_PROP %r2 %r3 %r4;
    MOV r %r2;
    MOV %r2 .t;
    MOV %r3 16384;
    LT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1172_;
    MOV %r4 r;
    MOV %r5 @y;
    MOV %r6 .t;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1172_:
LABEL _l1171_:
    MOV %r0 r;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
}
func @@f349(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "byteLength";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 r;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 "utf8";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 2 false;
}
func @@f350(.e, .t, .r) {
    REG %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @v 2 false;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    CALL_REG @v 2 false;
}
func @@f351(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 @c;
    MOV %r3 .t;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f352(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @l 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f353(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @p 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f354(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "string";
    MOV %r1 .t;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l1174_;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @v 2 false;
    JMP _l1173_;
LABEL _l1174_:
    MOV %r1 .t;
    JF %r1 _l1175_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @d 2 false;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 1 false;
    JMP _l1173_;
LABEL _l1175_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    CALL_REG @d 2 false;
LABEL _l1173_:
}
func @@f355(.e, .t) {
    CLS @r;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    FUNC o @@f715;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV %r1 "object";
    MOV %r2 @t;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1178_;
    MOV %r2 null;
    MOV %r4 @t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1178_:
    JF %r0 _l1177_;
    NEW_OBJ %r1;
    MOV %r2 1;
    SET_KEY %r1 'length' %r2;
    FUNC %r2 @@f714;
    SET_KEY %r1 'write' %r2;
    MOV $RET %r1;
    RET;
    JMP _l1176_;
LABEL _l1177_:
LABEL _l1176_:
    MOV @r 0;
    MOV %r0 @t;
    JF %r0 _l1180_;
    MOV %r1 @t;
    FORIN s %r1 _l1181_ _l1182_;
LABEL _l1181_:
    MOV %r2 s;
    PUSH %r2;
    CALL_REG o 1 false;
    MOV a $RET;
    MOV %r2 a;
    NEG %r2;
    JF %r2 _l1184_;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l1183_;
LABEL _l1184_:
LABEL _l1183_:
    MOV %r2 a;
    MOV %r3 @r;
    ADD %r3 %r2;
    MOV @r %r3;
    FORIN_END;
LABEL _l1182_:
    JMP _l1179_;
LABEL _l1180_:
LABEL _l1179_:
    NEW_OBJ %r0;
    MOV %r5 @r;
    PUSH %r5;
    CALL_REG @h 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 @r;
    ADD %r1 %r2;
    SET_KEY %r0 'length' %r1;
    FUNC %r1 @@f716;
    SET_KEY %r0 'write' %r1;
    MOV $RET %r0;
    RET;
}
func @@f356(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    NEW_ARR i;
    MOV %r0 "reasonString";
    SET_KEY i 0 %r0;
    MOV %r0 "userProperties";
    SET_KEY i 1 %r0;
    MOV %r2 .r;
    MOV %r1 %r2;
    JF %r2 _l1188_;
    MOV %r4 .r;
    MOV %r5 "properties";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1188_:
    MOV %r0 %r1;
    JF %r1 _l1187_;
    MOV %r5 .r;
    MOV %r6 "properties";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "maximumPacketSize";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1187_:
    JF %r0 _l1186_;
    MOV %r3 .r;
    MOV %r4 "properties";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "maximumPacketSize";
    MOV_PROP o %r1 %r2;
    JMP _l1185_;
LABEL _l1186_:
    MOV o 0;
LABEL _l1185_:
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @I 2 false;
    MOV s $RET;
    MOV %r0 o;
    JF %r0 _l1190_;
LABEL _l1191_:
    MOV %r1 .n;
    MOV %r4 s;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    ADD %r1 %r3;
    MOV %r2 o;
    GT %r1 %r2;
    JF %r1 _l1192_;
LABEL _l1194_:
    MOV %r2 i;
    MOV %r3 "shift";
    CALL_VAR %r2 %r3 0 false;
    MOV a $RET;
    MOV %r3 a;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l1197_;
    MOV %r5 .t;
    MOV %r6 a;
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l1197_:
    JF %r2 _l1196_;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l1195_;
LABEL _l1196_:
LABEL _l1195_:
    MOV %r2 .t;
    MOV %r3 a;
    DEL %r2 %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @I 2 false;
    MOV %r2 $RET;
    MOV s %r2;
    JMP _l1191_;
LABEL _l1192_:
    JMP _l1189_;
LABEL _l1190_:
LABEL _l1189_:
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f357(.e, .t, .r) {
    CLS @o;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    REG %r16;
    CLS @e;
    MOV @e .e;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    FORIN @o %r0 _l1198_ _l1199_;
LABEL _l1198_:
    MOV %r3 @o;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "hasOwnProperty";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l1202_;
    MOV %r3 null;
    MOV %r5 .t;
    MOV %r6 @o;
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1202_:
    JF %r1 _l1201_;
    MOV %r2 .t;
    MOV %r3 @o;
    MOV_PROP @s %r2 %r3;
    BLOCK 4;
    MOV %r5 @n;
    MOV %r6 "propertiesTypes";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 @o;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 "byte";
    JE %r2 %r3 _l1204_;
    JMP _l1205_;
LABEL _l1204_:
    NEW_ARR %r5;
    MOV %r9 @n;
    MOV %r10 "properties";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 @o;
    MOV_PROP %r6 %r7 %r8;
    SET_KEY %r5 0 %r6;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "from";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "write";
    CALL_VAR %r4 %r5 1 false;
    NEW_ARR %r5;
    MOV %r6 @s;
    PLUS %r6;
    SET_KEY %r5 0 %r6;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "from";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "write";
    CALL_VAR %r4 %r5 1 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1206_;
LABEL _l1205_:
    MOV %r4 "int8";
    JE %r2 %r4 _l1206_;
    JMP _l1207_;
LABEL _l1206_:
    NEW_ARR %r6;
    MOV %r10 @n;
    MOV %r11 "properties";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 @o;
    MOV_PROP %r7 %r8 %r9;
    SET_KEY %r6 0 %r7;
    PUSH %r6;
    MOV %r6 @i;
    MOV %r7 "from";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @e;
    MOV %r6 "write";
    CALL_VAR %r5 %r6 1 false;
    NEW_ARR %r6;
    MOV %r7 @s;
    SET_KEY %r6 0 %r7;
    PUSH %r6;
    MOV %r6 @i;
    MOV %r7 "from";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @e;
    MOV %r6 "write";
    CALL_VAR %r5 %r6 1 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1208_;
LABEL _l1207_:
    MOV %r5 "binary";
    JE %r2 %r5 _l1208_;
    JMP _l1209_;
LABEL _l1208_:
    NEW_ARR %r7;
    MOV %r11 @n;
    MOV %r12 "properties";
    MOV_PROP %r9 %r11 %r12;
    MOV %r10 @o;
    MOV_PROP %r8 %r9 %r10;
    SET_KEY %r7 0 %r8;
    PUSH %r7;
    MOV %r7 @i;
    MOV %r8 "from";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    PUSH %r6;
    MOV %r6 @e;
    MOV %r7 "write";
    CALL_VAR %r6 %r7 1 false;
    MOV %r6 @e;
    PUSH %r6;
    MOV %r6 @s;
    PUSH %r6;
    CALL_REG @k 2 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1210_;
LABEL _l1209_:
    MOV %r6 "int16";
    JE %r2 %r6 _l1210_;
    JMP _l1211_;
LABEL _l1210_:
    NEW_ARR %r8;
    MOV %r12 @n;
    MOV %r13 "properties";
    MOV_PROP %r10 %r12 %r13;
    MOV %r11 @o;
    MOV_PROP %r9 %r10 %r11;
    SET_KEY %r8 0 %r9;
    PUSH %r8;
    MOV %r8 @i;
    MOV %r9 "from";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    PUSH %r7;
    MOV %r7 @e;
    MOV %r8 "write";
    CALL_VAR %r7 %r8 1 false;
    MOV %r7 @e;
    PUSH %r7;
    MOV %r7 @s;
    PUSH %r7;
    CALL_REG @d 2 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1212_;
LABEL _l1211_:
    MOV %r7 "int32";
    JE %r2 %r7 _l1212_;
    JMP _l1213_;
LABEL _l1212_:
    NEW_ARR %r9;
    MOV %r13 @n;
    MOV %r14 "properties";
    MOV_PROP %r11 %r13 %r14;
    MOV %r12 @o;
    MOV_PROP %r10 %r11 %r12;
    SET_KEY %r9 0 %r10;
    PUSH %r9;
    MOV %r9 @i;
    MOV %r10 "from";
    CALL_VAR %r9 %r10 1 false;
    MOV %r8 $RET;
    PUSH %r8;
    MOV %r8 @e;
    MOV %r9 "write";
    CALL_VAR %r8 %r9 1 false;
    MOV %r8 @e;
    PUSH %r8;
    MOV %r8 @s;
    PUSH %r8;
    CALL_REG @x 2 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1214_;
LABEL _l1213_:
    MOV %r8 "var";
    JE %r2 %r8 _l1214_;
    JMP _l1215_;
LABEL _l1214_:
    NEW_ARR %r10;
    MOV %r14 @n;
    MOV %r15 "properties";
    MOV_PROP %r12 %r14 %r15;
    MOV %r13 @o;
    MOV_PROP %r11 %r12 %r13;
    SET_KEY %r10 0 %r11;
    PUSH %r10;
    MOV %r10 @i;
    MOV %r11 "from";
    CALL_VAR %r10 %r11 1 false;
    MOV %r9 $RET;
    PUSH %r9;
    MOV %r9 @e;
    MOV %r10 "write";
    CALL_VAR %r9 %r10 1 false;
    MOV %r9 @e;
    PUSH %r9;
    MOV %r9 @s;
    PUSH %r9;
    CALL_REG @m 2 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1216_;
LABEL _l1215_:
    MOV %r9 "string";
    JE %r2 %r9 _l1216_;
    JMP _l1217_;
LABEL _l1216_:
    NEW_ARR %r11;
    MOV %r15 @n;
    MOV %r16 "properties";
    MOV_PROP %r13 %r15 %r16;
    MOV %r14 @o;
    MOV_PROP %r12 %r13 %r14;
    SET_KEY %r11 0 %r12;
    PUSH %r11;
    MOV %r11 @i;
    MOV %r12 "from";
    CALL_VAR %r11 %r12 1 false;
    MOV %r10 $RET;
    PUSH %r10;
    MOV %r10 @e;
    MOV %r11 "write";
    CALL_VAR %r10 %r11 1 false;
    MOV %r10 @e;
    PUSH %r10;
    MOV %r10 @s;
    PUSH %r10;
    CALL_REG @v 2 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1218_;
LABEL _l1217_:
    MOV %r10 "pair";
    JE %r2 %r10 _l1218_;
    JMP _l1219_;
LABEL _l1218_:
    FUNC %r11 @@f717;
    PUSH %r11;
    MOV %r13 @s;
    PUSH %r13;
    MOV_CTX %r13 "Object";
    MOV %r14 "getOwnPropertyNames";
    CALL_VAR %r13 %r14 1 false;
    MOV %r11 $RET;
    MOV %r12 "forEach";
    CALL_VAR %r11 %r12 1 false;
    CLR_BLOCK 4;
    JMP _l1203_;
    JMP _l1220_;
LABEL _l1219_:
LABEL _l1220_:
    MOV %r12 "error";
    PUSH %r12;
    MOV %r13 "Invalid property ";
    MOV %r14 @o;
    ADD %r13 %r14;
    PUSH %r13;
    CALL_CTX 'Error' 1 true;
    MOV %r12 $RET;
    PUSH %r12;
    MOV %r12 @e;
    MOV %r13 "emit";
    CALL_VAR %r12 %r13 2 false;
    MOV %r11 1;
    NEG %r11;
    MOV $RET %r11;
    RET;
    JMP _l1222_;
LABEL _l1221_:
LABEL _l1222_:
LABEL _l1203_:
    END_BLOCK 4;
    JMP _l1200_;
LABEL _l1201_:
LABEL _l1200_:
    FORIN_END;
LABEL _l1199_:
}
func @@f358(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    JF %r1 _l1224_;
    MOV %r2 .e;
    MOV %r3 @i;
    INST_OF %r2 %r3;
    JF %r2 _l1226_;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r0 %r3 %r4;
    JMP _l1225_;
LABEL _l1226_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "byteLength";
    CALL_VAR %r3 %r4 1 false;
    MOV %r0 $RET;
LABEL _l1225_:
    JMP _l1223_;
LABEL _l1224_:
    MOV %r0 0;
LABEL _l1223_:
    MOV $RET %r0;
    RET;
}
func @@f359(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 "string";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1227_;
    MOV %r2 .e;
    MOV %r3 @i;
    INST_OF %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1227_:
    MOV $RET %r0;
    RET;
}
func @@f360(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    FUNC @t @@f718;
    MOV %r1 1;
    NEG %r1;
    MOV %r2 @t;
    MOV %r3 "called";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f361(.e) {
    CLS @t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    FUNC @t @@f719;
    MOV %r1 @e;
    MOV %r2 "name";
    MOV_PROP %r0 %r1 %r2;
    MOV r %r0;
    JIF %r0 _l1228_;
    MOV %r1 "Function wrapped with `once`";
    LG_OR r %r1;
LABEL _l1228_:
    MOV %r1 r;
    MOV %r2 " shouldn't be called more than once";
    ADD %r1 %r2;
    MOV %r2 @t;
    MOV %r3 "onceError";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    NEG %r1;
    MOV %r2 @t;
    MOV %r3 "called";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f362() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_CTX %r1 "Function";
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "once";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r1 @@f720;
    SET_KEY %r0 'value' %r1;
    MOV %r1 0;
    NEG %r1;
    SET_KEY %r0 'configurable' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV_CTX %r1 "Function";
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "onceStrict";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r1 @@f721;
    SET_KEY %r0 'value' %r1;
    MOV %r1 0;
    NEG %r1;
    SET_KEY %r0 'configurable' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
}
func @@f363(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    CLS @e;
    MOV @e .e;
    MOV %r3 @e;
    MOV %r4 "version";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l1232_;
    MOV %r3 0;
    MOV %r5 "v0.";
    PUSH %r5;
    MOV %r7 @e;
    MOV %r8 "version";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "indexOf";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1232_:
    MOV %r0 %r1;
    JIF %r1 _l1231_;
    MOV %r3 0;
    MOV %r5 "v1.";
    PUSH %r5;
    MOV %r7 @e;
    MOV %r8 "version";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "indexOf";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1233_;
    MOV %r4 0;
    MOV %r6 "v1.8.";
    PUSH %r6;
    MOV %r8 @e;
    MOV %r9 "version";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "indexOf";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1233_:
    LG_OR %r0 %r2;
LABEL _l1231_:
    JF %r0 _l1230_;
    NEW_OBJ %r1;
    FUNC %r2 @@f722;
    SET_KEY %r1 'nextTick' %r2;
    MOV %r2 @t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
    JMP _l1229_;
LABEL _l1230_:
    MOV %r1 @e;
    MOV %r2 @t;
    MOV %r3 "exports";
    SET_KEY %r2 %r3 %r1;
LABEL _l1229_:
}
func @@f364() {
    REG %r0;
    REG %r1;
    MOV %r1 "setTimeout has not been defined";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f365() {
    REG %r0;
    REG %r1;
    MOV %r1 "clearTimeout has not been defined";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f366(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @n;
    MOV_CTX %r1 "setTimeout";
    EQ %r0 %r1;
    JF %r0 _l1235_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    CALL_CTX 'setTimeout' 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1234_;
LABEL _l1235_:
LABEL _l1234_:
    MOV %r2 @n;
    MOV %r3 @s;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l1239_;
    MOV %r3 @n;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l1239_:
    MOV %r0 %r1;
    JF %r1 _l1238_;
    MOV_CTX %r2 "setTimeout";
    LG_AND %r0 %r2;
LABEL _l1238_:
    JF %r0 _l1237_;
    MOV_CTX %r2 "setTimeout";
    MOV @n %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    CALL_CTX 'setTimeout' 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1236_;
LABEL _l1237_:
LABEL _l1236_:
    TRY _l1240_ _l1241_;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    CALL_REG @n 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l1240_:
    BLOCK 2;
    VAR t;
    GET_ERR t;
    TRY _l1242_ _l1243_;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l1242_:
    BLOCK 5;
    VAR t;
    GET_ERR t;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    END_BLOCK 5;
LABEL _l1243_:
    END_BLOCK 2;
LABEL _l1241_:
}
func @@f367() {
    REG %r0;
    REG %r1;
    REG %r2;
    TRY _l1244_ _l1245_;
    MOV %r1 "function";
    MOV_CTX %r2 "setTimeout";
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1247_;
    MOV_CTX %r0 "setTimeout";
    JMP _l1246_;
LABEL _l1247_:
    MOV %r0 @s;
LABEL _l1246_:
    MOV @n %r0;
    TRY_END;
LABEL _l1244_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 @s;
    MOV @n %r0;
    END_BLOCK 2;
LABEL _l1245_:
    TRY _l1248_ _l1249_;
    MOV %r1 "function";
    MOV_CTX %r2 "clearTimeout";
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1251_;
    MOV_CTX %r0 "clearTimeout";
    JMP _l1250_;
LABEL _l1251_:
    MOV %r0 @a;
LABEL _l1250_:
    MOV @i %r0;
    TRY_END;
LABEL _l1248_:
    BLOCK 5;
    VAR e;
    GET_ERR e;
    MOV %r0 @a;
    MOV @i %r0;
    END_BLOCK 5;
LABEL _l1249_:
}
func @@f368() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 @f;
    MOV %r0 %r1;
    JF %r1 _l1253_;
    MOV %r2 @c;
    LG_AND %r0 %r2;
LABEL _l1253_:
    JF %r0 _l1252_;
    MOV %r2 1;
    NEG %r2;
    MOV @f %r2;
    MOV %r3 @c;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1255_;
    MOV %r4 @l;
    PUSH %r4;
    MOV %r4 @c;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV @l %r3;
    JMP _l1254_;
LABEL _l1255_:
    MOV %r3 1;
    MINUS %r3;
    MOV @h %r3;
LABEL _l1254_:
    MOV %r3 @l;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1256_;
    CALL_REG @d 0 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1256_:
LABEL _l1252_:
}
func @@f369() {
    VAR e;
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 @f;
    NEG %r0;
    JF %r0 _l1258_;
    MOV %r1 @p;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV e $RET;
    MOV %r1 0;
    NEG %r1;
    MOV @f %r1;
    MOV %r1 @l;
    MOV %r2 "length";
    MOV_PROP @t %r1 %r2;
LABEL _l1259_:
    MOV %r1 @t;
    JF %r1 _l1260_;
LABEL _l1262_:
    MOV %r2 @l;
    MOV @c %r2;
    NEW_ARR %r2;
    MOV @l %r2;
LABEL _l1263_:
    MOV %r4 @h;
    ADD %r4 1;
    MOV %r2 %r4;
    MOV @h %r4;
    MOV %r3 @t;
    LT %r2 %r3;
    JF %r2 _l1264_;
LABEL _l1266_:
    MOV %r3 @c;
    JF %r3 _l1267_;
    MOV %r7 @c;
    MOV %r8 @h;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "run";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
LABEL _l1267_:
    JMP _l1263_;
LABEL _l1264_:
    MOV %r2 1;
    MINUS %r2;
    MOV @h %r2;
    MOV %r3 @l;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV @t %r2;
    JMP _l1259_;
LABEL _l1260_:
    MOV %r1 null;
    MOV @c %r1;
    MOV %r1 1;
    NEG %r1;
    MOV @f %r1;
    MOV %r1 e;
    PUSH %r1;
    FUNC %r1 @@f723;
    CALL_REG %r1 1 false;
    JMP _l1257_;
LABEL _l1258_:
LABEL _l1257_:
}
func @@f370(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    MOV_THIS %r1;
    MOV %r2 "fun";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    MOV_THIS %r1;
    MOV %r2 "array";
    SET_KEY %r1 %r2 %r0;
}
func @@f371() {
}
func @@f372(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 1;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV t $RET;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 1;
    GT %r0 %r1;
    JF %r0 _l1269_;
    MOV r 1;
LABEL _l1270_:
    MOV %r1 r;
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1271_;
LABEL _l1273_:
    MOV_ARGS %r3;
    MOV %r4 r;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 t;
    MOV %r4 r;
    MOV %r5 1;
    SUB %r4 %r5;
    SET_KEY %r3 %r4 %r2;
LABEL _l1272_:
    MOV %r2 r;
    ADD %r2 1;
    MOV r %r2;
    JMP _l1270_;
LABEL _l1271_:
    JMP _l1268_;
LABEL _l1269_:
LABEL _l1268_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 t;
    PUSH %r1;
    CALL_REG @b 2 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @l;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    MOV %r1 1;
    MOV %r3 @l;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1275_;
    MOV %r2 @f;
    LG_OR %r0 %r2;
LABEL _l1275_:
    JIF %r0 _l1274_;
    MOV %r2 @d;
    PUSH %r2;
    CALL_REG @u 1 false;
    MOV %r1 $RET;
LABEL _l1274_:
}
func @@f373() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 null;
    PUSH %r0;
    MOV_THIS %r1;
    MOV %r2 "array";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "fun";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
}
func @@f374(.e) {
    REG %r0;
    NEW_ARR %r0;
    MOV $RET %r0;
    RET;
}
func @@f375(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 "process.binding is not supported";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f376() {
    REG %r0;
    MOV %r0 "/";
    MOV $RET %r0;
    RET;
}
func @@f377(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 "process.chdir is not supported";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f378() {
    REG %r0;
    MOV %r0 0;
    MOV $RET %r0;
    RET;
}
func @@f379(.e) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    MOV_THIS %r1;
    PUSH %r1;
    FUNC %r1 @@f724;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    NEG %r0;
}
func @@f380(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV_CTX %r5 "Object";
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "hasOwnProperty";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f381(.e, .t, .r, .o) {
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR d;
    VAR b;
    VAR g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l1276_;
    MOV %r2 "&";
    LG_OR %r0 %r2;
LABEL _l1276_:
    MOV .t %r0;
    MOV %r1 .r;
    MOV %r0 %r1;
    JIF %r1 _l1277_;
    MOV %r2 "=";
    LG_OR %r0 %r2;
LABEL _l1277_:
    MOV .r %r0;
    NEW_OBJ s;
    MOV %r1 "string";
    MOV %r2 .e;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1280_;
    MOV %r2 0;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l1280_:
    JF %r0 _l1279_;
    MOV %r1 s;
    MOV $RET %r1;
    RET;
    JMP _l1278_;
LABEL _l1279_:
LABEL _l1278_:
    NEW_REG a "\\+" "g";
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "split";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV .e %r0;
    MOV u 1000;
    MOV %r1 .o;
    MOV %r0 %r1;
    JF %r1 _l1282_;
    MOV %r2 "number";
    MOV %r4 .o;
    MOV %r5 "maxKeys";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1282_:
    JF %r0 _l1281_;
    MOV %r3 .o;
    MOV %r4 "maxKeys";
    MOV_PROP %r2 %r3 %r4;
    MOV u %r2;
    MOV %r1 %r2;
LABEL _l1281_:
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP c %r0 %r1;
    MOV %r1 u;
    MOV %r2 0;
    GT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1284_;
    MOV %r2 c;
    MOV %r3 u;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1284_:
    JF %r0 _l1283_;
    MOV %r2 u;
    MOV c %r2;
    MOV %r1 %r2;
LABEL _l1283_:
    MOV l 0;
LABEL _l1285_:
    MOV %r0 l;
    MOV %r1 c;
    LT %r0 %r1;
    JF %r0 _l1286_;
LABEL _l1288_:
    MOV %r1 a;
    PUSH %r1;
    MOV %r1 "%20";
    PUSH %r1;
    MOV %r3 .e;
    MOV %r4 l;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "replace";
    CALL_VAR %r1 %r2 2 false;
    MOV b $RET;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 b;
    MOV %r2 "indexOf";
    CALL_VAR %r1 %r2 1 false;
    MOV g $RET;
    MOV %r1 g;
    MOV %r2 0;
    GE %r1 %r2;
    JF %r1 _l1290_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 g;
    PUSH %r3;
    MOV %r3 b;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV f %r2;
    MOV %r3 g;
    MOV %r4 1;
    ADD %r3 %r4;
    PUSH %r3;
    MOV %r3 b;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV h %r2;
    JMP _l1289_;
LABEL _l1290_:
    MOV %r2 b;
    MOV f %r2;
    MOV %r2 "";
    MOV h %r2;
LABEL _l1289_:
    MOV %r2 f;
    PUSH %r2;
    CALL_CTX 'decodeURIComponent' 1 false;
    MOV %r1 $RET;
    MOV p %r1;
    MOV %r2 h;
    PUSH %r2;
    CALL_CTX 'decodeURIComponent' 1 false;
    MOV %r1 $RET;
    MOV d %r1;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 p;
    PUSH %r2;
    CALL_REG @n 2 false;
    MOV %r1 $RET;
    JF %r1 _l1292_;
    MOV %r4 s;
    MOV %r5 p;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    JF %r2 _l1294_;
    MOV %r3 d;
    PUSH %r3;
    MOV %r5 s;
    MOV %r6 p;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l1293_;
LABEL _l1294_:
    NEW_ARR %r3;
    MOV %r5 s;
    MOV %r6 p;
    MOV_PROP %r4 %r5 %r6;
    SET_KEY %r3 0 %r4;
    MOV %r4 d;
    SET_KEY %r3 1 %r4;
    MOV %r4 s;
    MOV %r5 p;
    SET_KEY %r4 %r5 %r3;
LABEL _l1293_:
    JMP _l1291_;
LABEL _l1292_:
    MOV %r2 d;
    MOV %r3 s;
    MOV %r4 p;
    SET_KEY %r3 %r4 %r2;
LABEL _l1291_:
LABEL _l1287_:
    MOV %r1 l;
    ADD %r1 1;
    MOV l %r1;
    JMP _l1285_;
LABEL _l1286_:
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f382(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "[object Array]";
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r6 "Object";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "toString";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f383(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .e;
    TYPE_OF %r0;
    MOV %r1 "string";
    JE %r0 %r1 _l1296_;
    JMP _l1297_;
LABEL _l1296_:
    MOV %r2 .e;
    MOV $RET %r2;
    RET;
    JMP _l1298_;
LABEL _l1297_:
    MOV %r2 "boolean";
    JE %r0 %r2 _l1298_;
    JMP _l1299_;
LABEL _l1298_:
    MOV %r4 .e;
    JF %r4 _l1301_;
    MOV %r3 "true";
    JMP _l1300_;
LABEL _l1301_:
    MOV %r3 "false";
LABEL _l1300_:
    MOV $RET %r3;
    RET;
    JMP _l1302_;
LABEL _l1299_:
    MOV %r3 "number";
    JE %r0 %r3 _l1302_;
    JMP _l1303_;
LABEL _l1302_:
    MOV %r6 .e;
    PUSH %r6;
    CALL_CTX 'isFinite' 1 false;
    MOV %r5 $RET;
    JF %r5 _l1305_;
    MOV %r4 .e;
    JMP _l1304_;
LABEL _l1305_:
    MOV %r4 "";
LABEL _l1304_:
    MOV $RET %r4;
    RET;
    JMP _l1306_;
LABEL _l1303_:
LABEL _l1306_:
    MOV %r4 "";
    MOV $RET %r4;
    RET;
    JMP _l1308_;
LABEL _l1307_:
LABEL _l1308_:
LABEL _l1295_:
}
func @@f384(.e, .t, .r, .a) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    MOV %r2 @t;
    MOV %r1 %r2;
    JIF %r2 _l1309_;
    MOV %r3 "&";
    LG_OR %r1 %r3;
LABEL _l1309_:
    MOV @t %r1;
    MOV %r2 @r;
    MOV %r1 %r2;
    JIF %r2 _l1310_;
    MOV %r3 "=";
    LG_OR %r1 %r3;
LABEL _l1310_:
    MOV @r %r1;
    MOV %r1 null;
    MOV %r2 @e;
    EQ %r1 %r2;
    JF %r1 _l1311_;
    MOV %r3 0;
    VOID %r3;
    MOV @e %r3;
    MOV %r2 %r3;
LABEL _l1311_:
    MOV %r1 "object";
    MOV %r2 @e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1313_;
    MOV %r2 @t;
    PUSH %r2;
    MOV %r5 @e;
    PUSH %r5;
    CALL_REG @s 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    FUNC %r4 @@f725;
    PUSH %r4;
    CALL_REG @o 2 false;
    MOV %r2 $RET;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1312_;
LABEL _l1313_:
    MOV %r2 .a;
    JF %r2 _l1314_;
    MOV %r6 .a;
    PUSH %r6;
    CALL_REG @n 1 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV %r0 $RET;
    MOV %r4 @r;
    ADD %r0 %r4;
    MOV %r5 @e;
    PUSH %r5;
    CALL_REG @n 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV %r3 $RET;
    ADD %r0 %r3;
    JMP _l1312_;
LABEL _l1314_:
    MOV %r0 "";
LABEL _l1312_:
    MOV $RET %r0;
    RET;
}
func @@f385(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "[object Array]";
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r6 "Object";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "toString";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f386(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    MOV %r2 "map";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1316_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "map";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1315_;
LABEL _l1316_:
LABEL _l1315_:
    NEW_ARR r;
    MOV n 0;
LABEL _l1317_:
    MOV %r0 n;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l1318_;
LABEL _l1320_:
    MOV %r3 .e;
    MOV %r4 n;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    CALL_REG .t 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 r;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l1319_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l1317_;
LABEL _l1318_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f387(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    NEW_ARR t;
    MOV %r0 .e;
    FORIN r %r0 _l1321_ _l1322_;
LABEL _l1321_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV_CTX %r6 "Object";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "hasOwnProperty";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    JF %r1 _l1323_;
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 t;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l1323_:
    FORIN_END;
LABEL _l1322_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f388(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_ARR t;
    MOV %r0 .e;
    FORIN r %r0 _l1324_ _l1325_;
LABEL _l1324_:
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    FORIN_END;
LABEL _l1325_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f389(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 @f;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l1327_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @f 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1326_;
LABEL _l1327_:
LABEL _l1326_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @a;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l1329_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .e;
    MOV %r5 "readable";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1329_:
    JF %r0 _l1328_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r3;
    MOV %r4 "readable";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1328_:
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l1331_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .e;
    MOV %r5 "writable";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1331_:
    JF %r0 _l1330_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r3;
    MOV %r4 "writable";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1330_:
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "allowHalfOpen";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l1333_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .e;
    MOV %r5 "allowHalfOpen";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1333_:
    JF %r0 _l1332_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r3;
    MOV %r4 "allowHalfOpen";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1332_:
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @h;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "once";
    CALL_VAR %r0 %r1 2 false;
}
func @@f390() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r2;
    MOV %r3 "allowHalfOpen";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l1335_;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l1335_:
    JIF %r0 _l1334_;
    MOV %r2 @p;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l1334_:
}
func @@f391(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
}
func @@f392() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f393() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r2 0;
    VOID %r2;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1337_;
    MOV %r3 0;
    VOID %r3;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1337_:
    MOV %r0 %r1;
    JF %r1 _l1336_;
    MOV_THIS %r6;
    MOV %r7 "_readableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "destroyed";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l1338_;
    MOV_THIS %r7;
    MOV %r8 "_writableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroyed";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l1338_:
    LG_AND %r0 %r2;
LABEL _l1336_:
    MOV $RET %r0;
    RET;
}
func @@f394(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1340_;
    MOV %r2 0;
    VOID %r2;
    MOV_THIS %r4;
    MOV %r5 "_writableState";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1340_:
    JF %r0 _l1339_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1339_:
}
func @@f395(.e, .t) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    MOV_THIS %r0;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 2 false;
}
func @@f396(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 @o;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l1342_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @o 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1341_;
LABEL _l1342_:
LABEL _l1341_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f397(.e, .t, .r) {
    REG %r0;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG .r 2 false;
}
func @@f398(.r, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    VAR f;
    VAR h;
    CLS @p;
    CLS @d;
    CLS @b;
    VAR g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    CLS @T;
    CLS @j;
    CLS @A;
    CLS @R;
    CLS @M;
    CLS @P;
    CLS @C;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    FUNC @y @@f729;
    FUNC @m @@f730;
    FUNC @v @@f731;
    FUNC @w @@f732;
    FUNC @E @@f740;
    FUNC @x @@f741;
    FUNC @k @@f742;
    FUNC @I @@f743;
    FUNC @O @@f744;
    FUNC @T @@f745;
    FUNC @j @@f746;
    FUNC @A @@f747;
    FUNC @R @@f748;
    FUNC @M @@f749;
    FUNC @P @@f750;
    FUNC @C @@f751;
    CLS @r;
    MOV @r .r;
    MOV %r0 "process-nextick-args";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @i $RET;
    MOV %r0 @m;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "isarray";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @s $RET;
    MOV %r0 @y;
    MOV %r1 @m;
    MOV %r2 "ReadableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 "events";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "EventEmitter";
    FUNC @a @@f726;
    MOV %r0 "./internal/streams/stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @u $RET;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @c %r0 %r1;
    MOV %r1 .n;
    MOV %r2 "Uint8Array";
    MOV_PROP %r0 %r1 %r2;
    MOV @l %r0;
    JIF %r0 _l1343_;
    FUNC %r1 @@f727;
    LG_OR @l %r1;
LABEL _l1343_:
    MOV %r0 "core-util-is";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV f $RET;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 f;
    MOV %r2 "inherits";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "util";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV h $RET;
    MOV @p 0;
    VOID @p;
    MOV %r2 h;
    MOV %r1 %r2;
    JF %r2 _l1346_;
    MOV %r4 h;
    MOV %r5 "debuglog";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1346_:
    JF %r1 _l1345_;
    MOV %r2 "stream";
    PUSH %r2;
    MOV %r2 h;
    MOV %r3 "debuglog";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1344_;
LABEL _l1345_:
    FUNC %r0 @@f728;
LABEL _l1344_:
    MOV @p %r0;
    MOV %r0 "./internal/streams/BufferList";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @b $RET;
    MOV %r0 "./internal/streams/destroy";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV g $RET;
    MOV %r0 @m;
    PUSH %r0;
    MOV %r0 @u;
    PUSH %r0;
    MOV %r0 f;
    MOV %r1 "inherits";
    CALL_VAR %r0 %r1 2 false;
    NEW_ARR @_;
    MOV %r0 "error";
    SET_KEY @_ 0 %r0;
    MOV %r0 "close";
    SET_KEY @_ 1 %r0;
    MOV %r0 "destroy";
    SET_KEY @_ 2 %r0;
    MOV %r0 "pause";
    SET_KEY @_ 3 %r0;
    MOV %r0 "resume";
    SET_KEY @_ 4 %r0;
    MOV %r1 @m;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "destroyed";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r1 @@f733;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f734;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 g;
    MOV %r2 "destroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 g;
    MOV %r2 "undestroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_undestroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f735;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f736;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "push";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f737;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "unshift";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f738;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "isPaused";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f739;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV @S 8388608;
    FUNC %r0 @@f752;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f753;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f754;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pipe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f755;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "unpipe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f756;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    SET_KEY %r1 %r2 %r0;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "addListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f757;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "resume";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f758;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pause";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f759;
    MOV %r3 @m;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "wrap";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @m;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "readableHighWaterMark";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f760;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r0 @R;
    MOV %r1 @m;
    MOV %r2 "_fromList";
    SET_KEY %r1 %r2 %r0;
}
func @@f399(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 @o;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l1348_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @o 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1347_;
LABEL _l1348_:
LABEL _l1347_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    NEW_OBJ %r0;
    MOV_THIS %r2;
    PUSH %r2;
    FUNC %r2 @@f761;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'afterTransform' %r1;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'needTransform' %r1;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'transforming' %r1;
    MOV %r1 null;
    SET_KEY %r0 'writecb' %r1;
    MOV %r1 null;
    SET_KEY %r0 'writechunk' %r1;
    MOV %r1 null;
    SET_KEY %r0 'writeencoding' %r1;
    MOV_THIS %r1;
    MOV %r2 "_transformState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    JF %r0 _l1349_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "transform";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l1350_;
    MOV %r5 .e;
    MOV %r6 "transform";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_transform";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1350_:
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "flush";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1351_;
    MOV %r5 .e;
    MOV %r6 "flush";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_flush";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1351_:
LABEL _l1349_:
    MOV %r0 "prefinish";
    PUSH %r0;
    MOV %r0 @s;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
}
func @@f400() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS @e;
    MOV %r0 "function";
    MOV_THIS %r2;
    MOV %r3 "_flush";
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l1353_;
    FUNC %r1 @@f762;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_flush";
    CALL_VAR %r1 %r2 1 false;
    JMP _l1352_;
LABEL _l1353_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 null;
    PUSH %r1;
    CALL_REG @a 3 false;
LABEL _l1352_:
}
func @@f401(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .t;
    JF %r0 _l1355_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1354_;
LABEL _l1355_:
LABEL _l1354_:
    MOV %r1 null;
    MOV %r2 .r;
    WNE %r1 %r2;
    JF %r1 _l1358_;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l1358_:
    MOV %r3 .e;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1357_;
    MOV %r2 "Calling transform done when ws.length != 0";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1356_;
LABEL _l1357_:
LABEL _l1356_:
    MOV %r3 .e;
    MOV %r4 "_transformState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "transforming";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1360_;
    MOV %r2 "Calling transform done when still transforming";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1359_;
LABEL _l1360_:
LABEL _l1359_:
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f402(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r4;
    MOV %r5 "_transformState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "needTransform";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r5 @n;
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f403(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 "_transform() is not implemented";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f404(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "_transformState";
    MOV_PROP n %r0 %r1;
    MOV %r1 .r;
    MOV %r2 n;
    MOV %r3 "writecb";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 n;
    MOV %r3 "writechunk";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 n;
    MOV %r3 "writeencoding";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 n;
    MOV %r2 "transforming";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l1362_;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP i %r1 %r2;
    MOV %r4 n;
    MOV %r5 "needTransform";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1365_;
    MOV %r5 i;
    MOV %r6 "needReadable";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l1365_:
    MOV %r1 %r2;
    JIF %r2 _l1364_;
    MOV %r5 i;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 i;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1364_:
    JF %r1 _l1363_;
    MOV %r4 i;
    MOV %r5 "highWaterMark";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_read";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l1363_:
    JMP _l1361_;
LABEL _l1362_:
LABEL _l1361_:
}
func @@f405(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "_transformState";
    MOV_PROP t %r0 %r1;
    MOV %r2 null;
    MOV %r4 t;
    MOV %r5 "writechunk";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1369_;
    MOV %r4 t;
    MOV %r5 "writecb";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1369_:
    MOV %r0 %r1;
    JF %r1 _l1368_;
    MOV %r3 t;
    MOV %r4 "transforming";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1368_:
    JF %r0 _l1367_;
    MOV %r1 0;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "transforming";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 t;
    MOV %r3 "writechunk";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 t;
    MOV %r3 "writeencoding";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 t;
    MOV %r3 "afterTransform";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_transform";
    CALL_VAR %r1 %r2 3 false;
    JMP _l1366_;
LABEL _l1367_:
    MOV %r1 0;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "needTransform";
    SET_KEY %r2 %r3 %r1;
LABEL _l1366_:
}
func @@f406(.e, .t) {
    CLS @r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @t;
    MOV @t .t;
    MOV_THIS @r;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f763;
    PUSH %r0;
    MOV %r4 @n;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "_destroy";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f407(.r, .n, .i) {
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    VAR c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    VAR b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    FUNC @s @@f764;
    FUNC @g @@f766;
    FUNC @_ @@f767;
    FUNC @y @@f768;
    FUNC @m @@f769;
    FUNC @v @@f770;
    FUNC @w @@f771;
    FUNC @S @@f772;
    FUNC @E @@f773;
    FUNC @x @@f774;
    MOV %r0 "process-nextick-args";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 @y;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 .r;
    MOV %r3 "browser";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1372_;
    MOV %r5 0;
    PUSH %r5;
    MOV %r5 5;
    PUSH %r5;
    MOV %r7 .r;
    MOV %r8 "version";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "slice";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    PUSH %r4;
    NEW_ARR %r4;
    MOV %r6 "v0.10";
    SET_KEY %r4 0 %r6;
    MOV %r6 "v0.9.";
    SET_KEY %r4 1 %r6;
    MOV %r5 "indexOf";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 1;
    MINUS %r3;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1372_:
    JF %r0 _l1371_;
    MOV @u .i;
    JMP _l1370_;
LABEL _l1371_:
    MOV %r1 @o;
    MOV %r2 "nextTick";
    MOV_PROP @u %r1 %r2;
LABEL _l1370_:
    MOV %r0 @_;
    MOV %r1 @y;
    MOV %r2 "WritableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "core-util-is";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV c $RET;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 c;
    MOV %r2 "inherits";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ @l;
    MOV %r1 "util-deprecate";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    SET_KEY @l 'deprecate' %r0;
    MOV %r0 "./internal/streams/stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @f $RET;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @h %r0 %r1;
    MOV %r1 .n;
    MOV %r2 "Uint8Array";
    MOV_PROP %r0 %r1 %r2;
    MOV @p %r0;
    JIF %r0 _l1373_;
    FUNC %r1 @@f765;
    LG_OR @p %r1;
LABEL _l1373_:
    MOV %r0 "./internal/streams/destroy";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV b $RET;
    MOV %r0 @y;
    PUSH %r0;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r0 c;
    MOV %r1 "inherits";
    CALL_VAR %r0 %r1 2 false;
    FUNC %r0 @@f775;
    MOV %r3 @_;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "getBuffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f776;
    CALL_REG %r0 0 false;
    MOV %r2 "function";
    MOV_CTX %r3 "Symbol";
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1377_;
    MOV_CTX %r4 "Symbol";
    MOV %r5 "hasInstance";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1377_:
    MOV %r0 %r1;
    JF %r1 _l1376_;
    MOV %r2 "function";
    MOV_CTX %r6 "Function";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV_CTX %r7 "Symbol";
    MOV %r6 "hasInstance";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1376_:
    JF %r0 _l1375_;
    MOV_CTX %r4 "Function";
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV_CTX %r5 "Symbol";
    MOV %r4 "hasInstance";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV @d %r1;
    MOV %r1 @y;
    PUSH %r1;
    MOV_CTX %r2 "Symbol";
    MOV %r3 "hasInstance";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    FUNC %r2 @@f777;
    SET_KEY %r1 'value' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "defineProperty";
    CALL_VAR %r1 %r2 3 false;
    JMP _l1374_;
LABEL _l1375_:
    FUNC %r1 @@f778;
    MOV @d %r1;
LABEL _l1374_:
    FUNC %r0 @@f779;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pipe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f780;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f781;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "cork";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f782;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "uncork";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f783;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setDefaultEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @y;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableHighWaterMark";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f784;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    FUNC %r0 @@f785;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_write";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_writev";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f786;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @y;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "destroyed";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r1 @@f787;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f788;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 b;
    MOV %r2 "destroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 b;
    MOV %r2 "undestroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_undestroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f789;
    MOV %r3 @y;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
}
func @@f408() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    FUNC @e @@f790;
    FUNC %r1 @@f791;
    MOV %r4 @e;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f792;
    MOV %r4 @e;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "unshift";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f793;
    MOV %r4 @e;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "shift";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f794;
    MOV %r4 @e;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "clear";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f795;
    MOV %r4 @e;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "join";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f796;
    MOV %r4 @e;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "concat";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 @e;
    MOV $RET %r0;
    RET;
}
func @@f409() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    NEW_OBJ %r0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY %r0 'length' %r1;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "inspect";
    CALL_VAR %r0 %r1 1 false;
    MOV e $RET;
    MOV_THIS %r5;
    MOV %r6 "constructor";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "name";
    MOV_PROP %r0 %r3 %r4;
    MOV %r2 " ";
    ADD %r0 %r2;
    MOV %r1 e;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f410(.e, .t) {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f411(.e, .t) {
    CLS @r;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    CLS @t;
    MOV @t .t;
    MOV_THIS @r;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    MOV o %r0;
    JF %r0 _l1378_;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "destroyed";
    MOV_PROP %r1 %r2 %r3;
    LG_AND o %r1;
LABEL _l1378_:
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    MOV s %r0;
    JF %r0 _l1379_;
    MOV_THIS %r4;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "destroyed";
    MOV_PROP %r1 %r2 %r3;
    LG_AND s %r1;
LABEL _l1379_:
    MOV %r2 o;
    MOV %r1 %r2;
    JIF %r2 _l1382_;
    MOV %r3 s;
    LG_OR %r1 %r3;
LABEL _l1382_:
    JF %r1 _l1381_;
    MOV %r2 @t;
    JF %r2 _l1384_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @t 1 false;
    JMP _l1383_;
LABEL _l1384_:
    MOV %r4 .e;
    NEG %r4;
    MOV %r3 %r4;
    JIF %r4 _l1386_;
    MOV_THIS %r7;
    MOV %r8 "_writableState";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    JF %r6 _l1387_;
    MOV_THIS %r10;
    MOV %r11 "_writableState";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "errorEmitted";
    MOV_PROP %r7 %r8 %r9;
    LG_AND %r5 %r7;
LABEL _l1387_:
    LG_OR %r3 %r5;
LABEL _l1386_:
    JIF %r3 _l1385_;
    MOV %r5 @i;
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 @n;
    MOV %r6 "nextTick";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
LABEL _l1385_:
LABEL _l1383_:
    MOV_THIS %r0;
    JMP _l1380_;
LABEL _l1381_:
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1388_;
    MOV %r4 0;
    NEG %r4;
    MOV_THIS %r7;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroyed";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1388_:
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1389_;
    MOV %r4 0;
    NEG %r4;
    MOV_THIS %r7;
    MOV %r8 "_writableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroyed";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1389_:
    MOV %r3 .e;
    MOV %r2 %r3;
    JIF %r3 _l1390_;
    MOV %r4 null;
    LG_OR %r2 %r4;
LABEL _l1390_:
    PUSH %r2;
    FUNC %r2 @@f797;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_destroy";
    CALL_VAR %r2 %r3 2 false;
    MOV_THIS %r0;
LABEL _l1380_:
    MOV $RET %r0;
    RET;
}
func @@f412() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1391_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "reading";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ended";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "endEmitted";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1391_:
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1392_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ended";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ending";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "finished";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "errorEmitted";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1392_:
}
func @@f413() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "function";
    MOV_ARGS %r2;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l1394_;
    MOV %r2 "callback needed";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1393_;
LABEL _l1394_:
LABEL _l1393_:
    MOV %r0 "number";
    MOV_ARGS %r2;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l1396_;
    MOV %r2 "interval needed";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1395_;
LABEL _l1396_:
LABEL _l1395_:
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l1398_;
    MOV_ARGS %r4;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 2;
    SUB %r2 %r3;
    PUSH %r2;
    CALL_CTX 'Array' 1 true;
    MOV %r1 $RET;
    MOV e %r1;
    MOV t 0;
LABEL _l1399_:
    MOV %r1 t;
    MOV %r3 e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1400_;
LABEL _l1402_:
    MOV_ARGS %r3;
    MOV %r4 t;
    MOV %r5 2;
    ADD %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 e;
    MOV %r4 t;
    SET_KEY %r3 %r4 %r2;
LABEL _l1401_:
    MOV %r2 t;
    ADD %r2 1;
    MOV t %r2;
    JMP _l1399_;
LABEL _l1400_:
    JMP _l1397_;
LABEL _l1398_:
LABEL _l1397_:
    MOV_ARGS %r2;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_ARGS %r2;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 e;
    PUSH %r1;
    FUNC %r1 @@f798;
    CALL_REG %r1 3 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f414(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .e;
    FORIN r %r0 _l1403_ _l1404_;
LABEL _l1403_:
    MOV %r2 .e;
    MOV %r3 r;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .t;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
    FORIN_END;
LABEL _l1404_:
}
func @@f415(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f416(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l1406_;
    MOV %r2 "Argument must not be a number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1405_;
LABEL _l1406_:
LABEL _l1405_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f417(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l1408_;
    MOV %r2 "Argument must be a number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1407_;
LABEL _l1408_:
LABEL _l1407_:
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @i 1 false;
    MOV n $RET;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .t;
    NE %r1 %r2;
    JF %r1 _l1410_;
    MOV %r2 "string";
    MOV %r3 .r;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l1412_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 n;
    MOV %r4 "fill";
    CALL_VAR %r3 %r4 2 false;
    JMP _l1411_;
LABEL _l1412_:
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 n;
    MOV %r4 "fill";
    CALL_VAR %r3 %r4 1 false;
LABEL _l1411_:
    JMP _l1409_;
LABEL _l1410_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 n;
    MOV %r3 "fill";
    CALL_VAR %r2 %r3 1 false;
LABEL _l1409_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f418(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l1414_;
    MOV %r2 "Argument must be a number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1413_;
LABEL _l1414_:
LABEL _l1413_:
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f419(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l1416_;
    MOV %r2 "Argument must be a number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1415_;
LABEL _l1416_:
LABEL _l1415_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "SlowBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f420(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r1 t;
    JF %r1 _l1418_;
    MOV %r3 t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1420_;
    MOV %r3 .e;
    MOV %r4 "read";
    CALL_VAR %r3 %r4 0 false;
    MOV %r0 $RET;
    JMP _l1419_;
LABEL _l1420_:
    MOV %r4 t;
    MOV r %r4;
    MOV %r7 r;
    MOV %r8 "buffer";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l1422_;
    MOV %r8 r;
    MOV %r9 "buffer";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "head";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l1424_;
    MOV %r12 r;
    MOV %r13 "buffer";
    MOV_PROP %r10 %r12 %r13;
    MOV %r11 "head";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "data";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
    JMP _l1423_;
LABEL _l1424_:
    MOV %r10 r;
    MOV %r11 "buffer";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 0;
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
LABEL _l1423_:
    JMP _l1421_;
LABEL _l1422_:
    MOV %r5 r;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
LABEL _l1421_:
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "read";
    CALL_VAR %r3 %r4 1 false;
    MOV %r0 $RET;
LABEL _l1419_:
    JMP _l1417_;
LABEL _l1418_:
    MOV %r0 null;
LABEL _l1417_:
    MOV $RET %r0;
    RET;
}
func @@f421(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    MOV %r2 "";
    MOV %r3 .e;
    ADD %r2 %r3;
    MOV .e %r2;
    MOV %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1425_;
    MOV %r3 .e;
    MOV %r4 "toLowerCase";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1425_:
    MOV %r1 "hex";
    JE %r0 %r1 _l1427_;
    JMP _l1428_;
LABEL _l1428_:
    MOV %r2 "utf8";
    JE %r0 %r2 _l1427_;
    JMP _l1429_;
LABEL _l1429_:
    MOV %r3 "utf-8";
    JE %r0 %r3 _l1427_;
    JMP _l1430_;
LABEL _l1430_:
    MOV %r4 "ascii";
    JE %r0 %r4 _l1427_;
    JMP _l1431_;
LABEL _l1431_:
    MOV %r5 "binary";
    JE %r0 %r5 _l1427_;
    JMP _l1432_;
LABEL _l1432_:
    MOV %r6 "base64";
    JE %r0 %r6 _l1427_;
    JMP _l1433_;
LABEL _l1433_:
    MOV %r7 "ucs2";
    JE %r0 %r7 _l1427_;
    JMP _l1434_;
LABEL _l1434_:
    MOV %r8 "ucs-2";
    JE %r0 %r8 _l1427_;
    JMP _l1435_;
LABEL _l1435_:
    MOV %r9 "utf16le";
    JE %r0 %r9 _l1427_;
    JMP _l1436_;
LABEL _l1436_:
    MOV %r10 "utf-16le";
    JE %r0 %r10 _l1427_;
    JMP _l1437_;
LABEL _l1437_:
    MOV %r11 "raw";
    JE %r0 %r11 _l1427_;
    JMP _l1438_;
LABEL _l1427_:
    MOV %r12 0;
    NEG %r12;
    MOV $RET %r12;
    RET;
    JMP _l1439_;
LABEL _l1438_:
LABEL _l1439_:
    MOV %r12 1;
    NEG %r12;
    MOV $RET %r12;
    RET;
    JMP _l1441_;
LABEL _l1440_:
LABEL _l1441_:
LABEL _l1426_:
}
func @@f422(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    BLOCK 1;
    MOV %r2 .e;
    PUSH %r2;
    FUNC %r2 @@f799;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    MOV_THIS %r2;
    MOV %r3 "encoding";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "encoding";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 "utf16le";
    JE %r0 %r1 _l1443_;
    JMP _l1444_;
LABEL _l1443_:
    MOV %r2 @u;
    MOV_THIS %r3;
    MOV %r4 "text";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @c;
    MOV_THIS %r3;
    MOV %r4 "end";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 4;
    MOV t %r2;
    CLR_BLOCK 1;
    JMP _l1442_;
    JMP _l1445_;
LABEL _l1444_:
    MOV %r2 "utf8";
    JE %r0 %r2 _l1445_;
    JMP _l1446_;
LABEL _l1445_:
    MOV %r3 @a;
    MOV_THIS %r4;
    MOV %r5 "fillLast";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 4;
    MOV t %r3;
    CLR_BLOCK 1;
    JMP _l1442_;
    JMP _l1447_;
LABEL _l1446_:
    MOV %r3 "base64";
    JE %r0 %r3 _l1447_;
    JMP _l1448_;
LABEL _l1447_:
    MOV %r4 @l;
    MOV_THIS %r5;
    MOV %r6 "text";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 @f;
    MOV_THIS %r5;
    MOV %r6 "end";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 3;
    MOV t %r4;
    CLR_BLOCK 1;
    JMP _l1442_;
    JMP _l1449_;
LABEL _l1448_:
LABEL _l1449_:
    MOV %r5 @h;
    MOV_THIS %r6;
    MOV %r7 "write";
    SET_KEY %r6 %r7 %r5;
    MOV %r5 @p;
    MOV_THIS %r6;
    MOV %r7 "end";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    VOID %r4;
    MOV $RET %r4;
    RET;
    JMP _l1451_;
LABEL _l1450_:
LABEL _l1451_:
LABEL _l1442_:
    END_BLOCK 1;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "lastNeed";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "lastTotal";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "allocUnsafe";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "lastChar";
    SET_KEY %r1 %r2 %r0;
}
func @@f423(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .e;
    MOV %r2 127;
    LE %r1 %r2;
    JF %r1 _l1453_;
    MOV %r0 0;
    JMP _l1452_;
LABEL _l1453_:
    MOV %r2 .e;
    MOV %r4 5;
    SHR %r2 %r4;
    MOV %r3 6;
    WEQ %r2 %r3;
    JF %r2 _l1454_;
    MOV %r0 2;
    JMP _l1452_;
LABEL _l1454_:
    MOV %r3 .e;
    MOV %r5 4;
    SHR %r3 %r5;
    MOV %r4 14;
    WEQ %r3 %r4;
    JF %r3 _l1455_;
    MOV %r0 3;
    JMP _l1452_;
LABEL _l1455_:
    MOV %r4 .e;
    MOV %r6 3;
    SHR %r4 %r6;
    MOV %r5 30;
    WEQ %r4 %r5;
    JF %r4 _l1456_;
    MOV %r0 4;
    JMP _l1452_;
LABEL _l1456_:
    MOV %r5 .e;
    MOV %r7 6;
    SHR %r5 %r7;
    MOV %r6 2;
    WEQ %r5 %r6;
    JF %r5 _l1457_;
    MOV %r0 1;
    MINUS %r0;
    JMP _l1452_;
LABEL _l1457_:
    MOV %r0 2;
    MINUS %r0;
LABEL _l1452_:
    MOV $RET %r0;
    RET;
}
func @@f424(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "lastTotal";
    MOV_PROP t %r1 %r2;
    MOV_THIS %r1;
    MOV %r2 "lastNeed";
    MOV_PROP %r0 %r1 %r2;
    SUB t %r0;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f800;
    CALL_REG %r0 2 false;
    MOV r $RET;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 r;
    NE %r1 %r2;
    JF %r1 _l1459_;
    MOV %r0 r;
    JMP _l1458_;
LABEL _l1459_:
    MOV_THIS %r4;
    MOV %r5 "lastNeed";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LE %r2 %r3;
    JF %r2 _l1460_;
    MOV_THIS %r4;
    MOV %r5 "lastChar";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "lastNeed";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "copy";
    CALL_VAR %r3 %r4 4 false;
    MOV_THIS %r4;
    MOV %r5 "encoding";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "lastTotal";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "lastChar";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toString";
    CALL_VAR %r3 %r4 3 false;
    MOV %r0 $RET;
    JMP _l1458_;
LABEL _l1460_:
    MOV_THIS %r4;
    MOV %r5 "lastChar";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "copy";
    CALL_VAR %r3 %r4 4 false;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r5;
    MOV %r6 "lastNeed";
    MOV_PROP %r4 %r5 %r6;
    SUB %r4 %r3;
    MOV_THIS %r5;
    MOV %r6 "lastNeed";
    SET_KEY %r5 %r6 %r4;
    MOV %r0 %r4;
    VOID %r0;
LABEL _l1458_:
    MOV $RET %r0;
    RET;
}
func @@f425(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r0 %r4 %r5;
    MOV %r3 .t;
    SUB %r0 %r3;
    MOV %r2 2;
    MOD %r0 %r2;
    MOV %r1 0;
    WEQ %r0 %r1;
    JF %r0 _l1462_;
    MOV %r1 "utf16le";
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 2 false;
    MOV r $RET;
    MOV %r1 r;
    JF %r1 _l1464_;
    MOV %r4 r;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 r;
    MOV %r3 "charCodeAt";
    CALL_VAR %r2 %r3 1 false;
    MOV n $RET;
    MOV %r3 n;
    MOV %r4 55296;
    GE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1467_;
    MOV %r4 n;
    MOV %r5 56319;
    LE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1467_:
    JF %r2 _l1466_;
    MOV %r4 2;
    MOV_THIS %r5;
    MOV %r6 "lastNeed";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 4;
    MOV_THIS %r5;
    MOV %r6 "lastTotal";
    SET_KEY %r5 %r6 %r4;
    MOV %r5 .e;
    MOV %r8 .e;
    MOV %r9 "length";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 2;
    SUB %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r7;
    MOV %r8 "lastChar";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 0;
    SET_KEY %r5 %r6 %r4;
    MOV %r5 .e;
    MOV %r8 .e;
    MOV %r9 "length";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 1;
    SUB %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r7;
    MOV %r8 "lastChar";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 1;
    MINUS %r4;
    PUSH %r4;
    MOV %r4 r;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l1465_;
LABEL _l1466_:
LABEL _l1465_:
    JMP _l1463_;
LABEL _l1464_:
LABEL _l1463_:
    MOV %r1 r;
    MOV $RET %r1;
    RET;
    JMP _l1461_;
LABEL _l1462_:
LABEL _l1461_:
    MOV %r1 1;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 2;
    MOV_THIS %r2;
    MOV %r3 "lastTotal";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .e;
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    SUB %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV_THIS %r4;
    MOV %r5 "lastChar";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "utf16le";
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 1;
    SUB %r1 %r2;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f426(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l1470_;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1470_:
    JF %r0 _l1469_;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV t $RET;
    JMP _l1468_;
LABEL _l1469_:
    MOV t "";
LABEL _l1468_:
    MOV_THIS %r1;
    MOV %r2 "lastNeed";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1472_;
    MOV_THIS %r2;
    MOV %r3 "lastTotal";
    MOV_PROP r %r2 %r3;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    SUB r %r1;
    MOV %r1 t;
    MOV %r3 "utf16le";
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 r;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "lastChar";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toString";
    CALL_VAR %r3 %r4 3 false;
    MOV %r2 $RET;
    ADD %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l1471_;
LABEL _l1472_:
LABEL _l1471_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f427(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP r %r2 %r3;
    MOV %r1 .t;
    SUB r %r1;
    MOV %r0 3;
    MOD r %r0;
    MOV %r1 0;
    MOV %r2 r;
    EQ %r1 %r2;
    JF %r1 _l1474_;
    MOV %r2 "base64";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l1473_;
LABEL _l1474_:
    MOV %r2 3;
    MOV %r3 r;
    SUB %r2 %r3;
    MOV_THIS %r3;
    MOV %r4 "lastNeed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 3;
    MOV_THIS %r3;
    MOV %r4 "lastTotal";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    MOV %r3 r;
    EQ %r2 %r3;
    JF %r2 _l1476_;
    MOV %r4 .e;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    SUB %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r6;
    MOV %r7 "lastChar";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    SET_KEY %r4 %r5 %r3;
    JMP _l1475_;
LABEL _l1476_:
    MOV %r4 .e;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 2;
    SUB %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r6;
    MOV %r7 "lastChar";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    SET_KEY %r4 %r5 %r3;
    MOV %r4 .e;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    SUB %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r6;
    MOV %r7 "lastChar";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 1;
    SET_KEY %r4 %r5 %r3;
LABEL _l1475_:
    MOV %r2 "base64";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 r;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 3 false;
    MOV %r0 $RET;
LABEL _l1473_:
    MOV $RET %r0;
    RET;
}
func @@f428(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l1479_;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1479_:
    JF %r0 _l1478_;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV t $RET;
    JMP _l1477_;
LABEL _l1478_:
    MOV t "";
LABEL _l1477_:
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1481_;
    MOV %r0 t;
    MOV %r3 "base64";
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 3;
    MOV_THIS %r5;
    MOV %r6 "lastNeed";
    MOV_PROP %r4 %r5 %r6;
    SUB %r3 %r4;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "lastChar";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toString";
    CALL_VAR %r3 %r4 3 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    JMP _l1480_;
LABEL _l1481_:
    MOV %r0 t;
LABEL _l1480_:
    MOV $RET %r0;
    RET;
}
func @@f429(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r2;
    MOV %r3 "encoding";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f430(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .e;
    MOV %r1 %r2;
    JF %r2 _l1484_;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1484_:
    JF %r1 _l1483_;
    MOV %r2 .e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1482_;
LABEL _l1483_:
    MOV %r0 "";
LABEL _l1482_:
    MOV $RET %r0;
    RET;
}
func @@f431(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 0;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l1486_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l1485_;
LABEL _l1486_:
LABEL _l1485_:
    MOV_THIS %r1;
    MOV %r2 "lastNeed";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1488_;
    MOV %r1 0;
    VOID %r1;
    MOV %r4 .e;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "fillLast";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV t %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l1490_;
    MOV %r2 "";
    MOV $RET %r2;
    RET;
    JMP _l1489_;
LABEL _l1490_:
LABEL _l1489_:
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r1 0;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    SET_KEY %r2 %r3 %r1;
    JMP _l1487_;
LABEL _l1488_:
    MOV %r1 0;
    MOV r %r1;
LABEL _l1487_:
    MOV %r1 r;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1492_;
    MOV %r2 t;
    JF %r2 _l1494_;
    MOV %r0 t;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 r;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "text";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    ADD %r0 %r3;
    JMP _l1493_;
LABEL _l1494_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 r;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "text";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
LABEL _l1493_:
    JMP _l1491_;
LABEL _l1492_:
    MOV %r2 t;
    MOV %r0 %r2;
    JIF %r2 _l1495_;
    MOV %r3 "";
    LG_OR %r0 %r3;
LABEL _l1495_:
LABEL _l1491_:
    MOV $RET %r0;
    RET;
}
func @@f432(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l1498_;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1498_:
    JF %r0 _l1497_;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV t $RET;
    JMP _l1496_;
LABEL _l1497_:
    MOV t "";
LABEL _l1496_:
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1500_;
    MOV %r0 t;
    MOV %r2 "�";
    ADD %r0 %r2;
    JMP _l1499_;
LABEL _l1500_:
    MOV %r0 t;
LABEL _l1499_:
    MOV $RET %r0;
    RET;
}
func @@f433(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    FUNC %r0 @@f801;
    CALL_REG %r0 3 false;
    MOV r $RET;
    MOV_THIS %r1;
    MOV %r2 "lastNeed";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l1502_;
    MOV %r2 "utf8";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1501_;
LABEL _l1502_:
LABEL _l1501_:
    MOV %r0 r;
    MOV_THIS %r1;
    MOV %r2 "lastTotal";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP n %r1 %r2;
    MOV %r0 r;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    SUB %r0 %r1;
    SUB n %r0;
    MOV_THIS %r2;
    MOV %r3 "lastChar";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "copy";
    CALL_VAR %r1 %r2 3 false;
    MOV %r1 "utf8";
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f434(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r0 %r2 %r3;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LE %r0 %r1;
    JF %r0 _l1504_;
    MOV_THIS %r3;
    MOV %r4 "lastChar";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "lastTotal";
    MOV_PROP %r2 %r4 %r5;
    MOV_THIS %r4;
    MOV %r5 "lastNeed";
    MOV_PROP %r3 %r4 %r5;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "lastNeed";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "copy";
    CALL_VAR %r2 %r3 4 false;
    MOV_THIS %r3;
    MOV %r4 "encoding";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "lastTotal";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "lastChar";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1503_;
LABEL _l1504_:
LABEL _l1503_:
    MOV_THIS %r1;
    MOV %r2 "lastChar";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "lastTotal";
    MOV_PROP %r0 %r2 %r3;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    SUB %r0 %r1;
    PUSH %r0;
    MOV %r0 0;
    PUSH %r0;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "copy";
    CALL_VAR %r0 %r1 4 false;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 %r0;
    MOV_THIS %r2;
    MOV %r3 "lastNeed";
    SET_KEY %r2 %r3 %r1;
}
func @@f435(.t, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    FUNC @c @@f802;
    MOV %r2 "process/browser.js";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "nextTick";
    MOV_PROP @i %r0 %r1;
    MOV_CTX %r2 "Function";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    MOV_PROP @o %r0 %r1;
    MOV_CTX %r2 "Array";
    MOV %r3 "prototype";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "slice";
    MOV_PROP @s %r0 %r1;
    NEW_OBJ @a;
    MOV @u 0;
    FUNC %r0 @@f803;
    MOV %r1 @r;
    MOV %r2 "setTimeout";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f804;
    MOV %r1 @r;
    MOV %r2 "setInterval";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f805;
    MOV %r2 @r;
    MOV %r3 "clearInterval";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 @r;
    MOV %r2 "clearTimeout";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f806;
    MOV %r4 @c;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "ref";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "unref";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f807;
    MOV %r3 @c;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "close";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f808;
    MOV %r1 @r;
    MOV %r2 "enroll";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f809;
    MOV %r1 @r;
    MOV %r2 "unenroll";
    SET_KEY %r1 %r2 %r0;
    FUNC %r1 @@f810;
    MOV %r2 @r;
    MOV %r3 "active";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r1 @r;
    MOV %r2 "_unrefActive";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "function";
    MOV %r2 .t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1506_;
    MOV %r0 .t;
    JMP _l1505_;
LABEL _l1506_:
    FUNC %r0 @@f811;
LABEL _l1505_:
    MOV %r1 @r;
    MOV %r2 "setImmediate";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "function";
    MOV %r2 .n;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1508_;
    MOV %r0 .n;
    JMP _l1507_;
LABEL _l1508_:
    FUNC %r0 @@f812;
LABEL _l1507_:
    MOV %r1 @r;
    MOV %r2 "clearImmediate";
    SET_KEY %r1 %r2 %r0;
}
func @@f436() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "protocol";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "slashes";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "auth";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "host";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "port";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "hostname";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "hash";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "search";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "query";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "pathname";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "path";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "href";
    SET_KEY %r1 %r2 %r0;
}
func @@f437(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 1;
    NEG %r3;
    PUSH %r3;
    MOV %r3 0;
    NEG %r3;
    PUSH %r3;
    CALL_REG @m 3 false;
    MOV %r1 $RET;
    MOV %r2 "resolve";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f438(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    JF %r1 _l1510_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 1;
    NEG %r4;
    PUSH %r4;
    MOV %r4 0;
    NEG %r4;
    PUSH %r4;
    CALL_REG @m 3 false;
    MOV %r2 $RET;
    MOV %r3 "resolveObject";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1509_;
LABEL _l1510_:
    MOV %r0 .t;
LABEL _l1509_:
    MOV $RET %r0;
    RET;
}
func @@f439(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "isString";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l1511_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @m 1 false;
    MOV %r2 $RET;
    MOV .e %r2;
    MOV %r1 %r2;
LABEL _l1511_:
    MOV %r1 .e;
    MOV %r2 @o;
    INST_OF %r1 %r2;
    JF %r1 _l1513_;
    MOV %r2 .e;
    MOV %r3 "format";
    CALL_VAR %r2 %r3 0 false;
    MOV %r0 $RET;
    JMP _l1512_;
LABEL _l1513_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r6 @o;
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "format";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l1512_:
    MOV $RET %r0;
    RET;
}
func @@f440(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .e;
    MOV %r1 %r2;
    JF %r2 _l1517_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "isObject";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1517_:
    MOV %r0 %r1;
    JF %r1 _l1516_;
    MOV %r2 .e;
    MOV %r3 @o;
    INST_OF %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1516_:
    JF %r0 _l1515_;
    MOV %r1 .e;
    MOV $RET %r1;
    RET;
    JMP _l1514_;
LABEL _l1515_:
LABEL _l1514_:
    CALL_REG @o 0 true;
    MOV n $RET;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 n;
    MOV %r2 "parse";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f441(.e, .t, .r) {
    VAR o;
    VAR a;
    VAR c;
    VAR m;
    VAR v;
    VAR w;
    VAR S;
    VAR E;
    VAR x;
    VAR k;
    VAR I;
    VAR O;
    VAR T;
    VAR j;
    VAR A;
    VAR R;
    VAR M;
    VAR P;
    VAR C;
    VAR L;
    VAR B;
    VAR N;
    VAR U;
    VAR D;
    VAR q;
    VAR W;
    VAR F;
    VAR H;
    VAR K;
    VAR z;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "isString";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l1519_;
    MOV %r2 "Parameter 'url' must be a string, not ";
    MOV %r3 .e;
    TYPE_OF %r3;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1518_;
LABEL _l1519_:
LABEL _l1518_:
    MOV %r0 "?";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "indexOf";
    CALL_VAR %r0 %r1 1 false;
    MOV o $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 o;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1522_;
    MOV %r2 o;
    MOV %r4 "#";
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "indexOf";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1522_:
    JF %r0 _l1521_;
    MOV a "?";
    JMP _l1520_;
LABEL _l1521_:
    MOV a "#";
LABEL _l1520_:
    MOV %r0 a;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "split";
    CALL_VAR %r0 %r1 1 false;
    MOV c $RET;
    NEW_REG %r1 "\\\\" "g";
    PUSH %r1;
    MOV %r1 "/";
    PUSH %r1;
    MOV %r3 c;
    MOV %r4 0;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "replace";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV %r1 c;
    MOV %r2 0;
    SET_KEY %r1 %r2 %r0;
    MOV %r1 a;
    PUSH %r1;
    MOV %r1 c;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV .e %r0;
    MOV m %r0;
    MOV %r2 m;
    MOV %r3 "trim";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV m %r1;
    MOV %r1 .r;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1525_;
    MOV %r2 1;
    MOV %r6 "#";
    PUSH %r6;
    MOV %r6 .e;
    MOV %r7 "split";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1525_:
    JF %r0 _l1524_;
    MOV %r1 m;
    PUSH %r1;
    MOV %r1 @u;
    MOV %r2 "exec";
    CALL_VAR %r1 %r2 1 false;
    MOV v $RET;
    MOV %r1 v;
    JF %r1 _l1527_;
    MOV %r3 m;
    MOV_THIS %r4;
    MOV %r5 "path";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 m;
    MOV_THIS %r4;
    MOV %r5 "href";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 v;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r4;
    MOV %r5 "pathname";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 v;
    MOV %r5 2;
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l1529_;
    MOV %r5 v;
    MOV %r6 2;
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "search";
    SET_KEY %r5 %r6 %r4;
    MOV %r5 .t;
    JF %r5 _l1531_;
    MOV %r7 1;
    PUSH %r7;
    MOV_THIS %r9;
    MOV %r10 "search";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "substr";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    PUSH %r6;
    MOV %r6 @y;
    MOV %r7 "parse";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    JMP _l1530_;
LABEL _l1531_:
    MOV %r6 1;
    PUSH %r6;
    MOV_THIS %r8;
    MOV %r9 "search";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "substr";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
LABEL _l1530_:
    MOV_THIS %r5;
    MOV %r6 "query";
    SET_KEY %r5 %r6 %r4;
    JMP _l1528_;
LABEL _l1529_:
    MOV %r4 .t;
    JF %r4 _l1532_;
    MOV %r6 "";
    MOV_THIS %r7;
    MOV %r8 "search";
    SET_KEY %r7 %r8 %r6;
    NEW_OBJ %r6;
    MOV_THIS %r7;
    MOV %r8 "query";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l1532_:
LABEL _l1528_:
    MOV_THIS %r2;
    MOV $RET %r2;
    RET;
    JMP _l1526_;
LABEL _l1527_:
LABEL _l1526_:
    JMP _l1523_;
LABEL _l1524_:
LABEL _l1523_:
    MOV %r0 m;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "exec";
    CALL_VAR %r0 %r1 1 false;
    MOV w $RET;
    MOV %r0 w;
    JF %r0 _l1534_;
    MOV %r4 w;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    MOV w %r3;
    MOV %r1 %r3;
    MOV %r2 "toLowerCase";
    CALL_VAR %r1 %r2 0 false;
    MOV S $RET;
    MOV %r1 S;
    MOV_THIS %r2;
    MOV %r3 "protocol";
    SET_KEY %r2 %r3 %r1;
    MOV %r3 w;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 m;
    MOV %r3 "substr";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV m %r1;
    JMP _l1533_;
LABEL _l1534_:
LABEL _l1533_:
    MOV %r2 .r;
    MOV %r1 %r2;
    JIF %r2 _l1538_;
    MOV %r3 w;
    LG_OR %r1 %r3;
LABEL _l1538_:
    MOV %r0 %r1;
    JIF %r1 _l1537_;
    NEW_REG %r3 "^\\/\\/[^@\\/]+@[^@\\/]+" "";
    PUSH %r3;
    MOV %r3 m;
    MOV %r4 "match";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1537_:
    JF %r0 _l1536_;
    MOV E "//";
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 m;
    MOV %r3 "substr";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    EQ E %r1;
    MOV %r2 E;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l1540_;
    MOV %r4 w;
    MOV %r3 %r4;
    JF %r4 _l1541_;
    MOV %r6 @g;
    MOV %r7 w;
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l1541_:
    LG_OR %r1 %r3;
LABEL _l1540_:
    JIF %r1 _l1539_;
    MOV %r4 2;
    PUSH %r4;
    MOV %r4 m;
    MOV %r5 "substr";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV m %r3;
    MOV %r3 0;
    NEG %r3;
    MOV_THIS %r4;
    MOV %r5 "slashes";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1539_:
    JMP _l1535_;
LABEL _l1536_:
LABEL _l1535_:
    MOV %r2 @g;
    MOV %r3 w;
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1544_;
    MOV %r3 E;
    MOV %r2 %r3;
    JIF %r3 _l1545_;
    MOV %r5 w;
    MOV %r4 %r5;
    JF %r5 _l1546_;
    MOV %r7 @_;
    MOV %r8 w;
    MOV_PROP %r6 %r7 %r8;
    NEG %r6;
    LG_AND %r4 %r6;
LABEL _l1546_:
    LG_OR %r2 %r4;
LABEL _l1545_:
    LG_AND %r0 %r2;
LABEL _l1544_:
    JF %r0 _l1543_;
    MOV I 1;
    MINUS I;
    MOV O 0;
LABEL _l1547_:
    MOV %r1 O;
    MOV %r3 @h;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1548_;
LABEL _l1550_:
    MOV %r3 1;
    MINUS %r3;
    MOV %r7 @h;
    MOV %r8 O;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 m;
    MOV %r7 "indexOf";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV T %r5;
    MOV %r4 %r5;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1552_;
    MOV %r5 1;
    MINUS %r5;
    MOV %r6 I;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l1553_;
    MOV %r6 T;
    MOV %r7 I;
    LT %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l1553_:
    LG_AND %r2 %r4;
LABEL _l1552_:
    JF %r2 _l1551_;
    MOV %r4 T;
    MOV I %r4;
    MOV %r3 %r4;
LABEL _l1551_:
LABEL _l1549_:
    MOV %r2 O;
    ADD %r2 1;
    MOV O %r2;
    JMP _l1547_;
LABEL _l1548_:
    MOV %r1 1;
    MINUS %r1;
    MOV %r4 1;
    MINUS %r4;
    MOV %r5 I;
    EQ %r4 %r5;
    JF %r4 _l1556_;
    MOV %r5 "@";
    PUSH %r5;
    MOV %r5 m;
    MOV %r6 "lastIndexOf";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    JMP _l1555_;
LABEL _l1556_:
    MOV %r5 "@";
    PUSH %r5;
    MOV %r5 I;
    PUSH %r5;
    MOV %r5 m;
    MOV %r6 "lastIndexOf";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
LABEL _l1555_:
    MOV k %r3;
    MOV %r2 %r3;
    NE %r1 %r2;
    JF %r1 _l1554_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 k;
    PUSH %r4;
    MOV %r4 m;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV x %r3;
    MOV %r4 k;
    MOV %r5 1;
    ADD %r4 %r5;
    PUSH %r4;
    MOV %r4 m;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV m %r3;
    MOV %r4 x;
    PUSH %r4;
    CALL_CTX 'decodeURIComponent' 1 false;
    MOV %r3 $RET;
    MOV_THIS %r4;
    MOV %r5 "auth";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1554_:
    MOV %r1 1;
    MINUS %r1;
    MOV I %r1;
    MOV %r1 0;
    MOV O %r1;
LABEL _l1557_:
    MOV %r1 O;
    MOV %r3 @f;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1558_;
LABEL _l1560_:
    MOV %r3 1;
    MINUS %r3;
    MOV %r7 @f;
    MOV %r8 O;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 m;
    MOV %r7 "indexOf";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV T %r5;
    MOV %r4 %r5;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1562_;
    MOV %r5 1;
    MINUS %r5;
    MOV %r6 I;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l1563_;
    MOV %r6 T;
    MOV %r7 I;
    LT %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l1563_:
    LG_AND %r2 %r4;
LABEL _l1562_:
    JF %r2 _l1561_;
    MOV %r4 T;
    MOV I %r4;
    MOV %r3 %r4;
LABEL _l1561_:
LABEL _l1559_:
    MOV %r2 O;
    ADD %r2 1;
    MOV O %r2;
    JMP _l1557_;
LABEL _l1558_:
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 I;
    EQ %r1 %r2;
    JF %r1 _l1564_;
    MOV %r4 m;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV I %r3;
    MOV %r2 %r3;
LABEL _l1564_:
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 I;
    PUSH %r2;
    MOV %r2 m;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV_THIS %r2;
    MOV %r3 "host";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 I;
    PUSH %r2;
    MOV %r2 m;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV m %r1;
    MOV_THIS %r1;
    MOV %r2 "parseHost";
    CALL_VAR %r1 %r2 0 false;
    MOV_THIS %r3;
    MOV %r4 "hostname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1565_;
    MOV %r3 "";
    LG_OR %r1 %r3;
LABEL _l1565_:
    MOV_THIS %r2;
    MOV %r3 "hostname";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "[";
    MOV_THIS %r5;
    MOV %r6 "hostname";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV j %r1;
    JF %r1 _l1566_;
    MOV %r2 "]";
    MOV_THIS %r6;
    MOV %r7 "hostname";
    MOV_PROP %r4 %r6 %r7;
    MOV_THIS %r9;
    MOV %r10 "hostname";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "length";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    SUB %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND j %r2;
LABEL _l1566_:
    MOV %r1 j;
    NEG %r1;
    JF %r1 _l1568_;
    BLOCK 11;
    NEW_REG %r2 "\\." "";
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "hostname";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "split";
    CALL_VAR %r2 %r3 1 false;
    MOV A $RET;
    MOV %r2 0;
    MOV O %r2;
    MOV %r2 A;
    MOV %r3 "length";
    MOV_PROP R %r2 %r3;
LABEL _l1569_:
    MOV %r2 O;
    MOV %r3 R;
    LT %r2 %r3;
    JF %r2 _l1570_;
LABEL _l1572_:
    MOV %r3 A;
    MOV %r4 O;
    MOV_PROP M %r3 %r4;
    MOV %r4 M;
    MOV %r3 %r4;
    JF %r4 _l1575_;
    MOV %r6 @p;
    PUSH %r6;
    MOV %r6 M;
    MOV %r7 "match";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l1575_:
    JF %r3 _l1574_;
    MOV P "";
    MOV C 0;
    MOV %r4 M;
    MOV %r5 "length";
    MOV_PROP L %r4 %r5;
LABEL _l1576_:
    MOV %r4 C;
    MOV %r5 L;
    LT %r4 %r5;
    JF %r4 _l1577_;
LABEL _l1579_:
    MOV %r7 C;
    PUSH %r7;
    MOV %r7 M;
    MOV %r8 "charCodeAt";
    CALL_VAR %r7 %r8 1 false;
    MOV %r5 $RET;
    MOV %r6 127;
    GT %r5 %r6;
    JF %r5 _l1581_;
    MOV %r6 "x";
    MOV %r7 P;
    ADD %r7 %r6;
    MOV P %r7;
    JMP _l1580_;
LABEL _l1581_:
    MOV %r7 M;
    MOV %r8 C;
    MOV_PROP %r6 %r7 %r8;
    MOV %r7 P;
    ADD %r7 %r6;
    MOV P %r7;
LABEL _l1580_:
LABEL _l1578_:
    MOV %r5 C;
    ADD %r5 1;
    MOV C %r5;
    JMP _l1576_;
LABEL _l1577_:
    MOV %r5 @p;
    PUSH %r5;
    MOV %r5 P;
    MOV %r6 "match";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NEG %r4;
    JF %r4 _l1583_;
    MOV %r5 0;
    PUSH %r5;
    MOV %r5 O;
    PUSH %r5;
    MOV %r5 A;
    MOV %r6 "slice";
    CALL_VAR %r5 %r6 2 false;
    MOV B $RET;
    MOV %r5 O;
    MOV %r6 1;
    ADD %r5 %r6;
    PUSH %r5;
    MOV %r5 A;
    MOV %r6 "slice";
    CALL_VAR %r5 %r6 1 false;
    MOV N $RET;
    MOV %r5 @d;
    PUSH %r5;
    MOV %r5 M;
    MOV %r6 "match";
    CALL_VAR %r5 %r6 1 false;
    MOV U $RET;
    MOV %r5 U;
    JF %r5 _l1584_;
    MOV %r8 U;
    MOV %r9 1;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r7 B;
    MOV %r8 "push";
    CALL_VAR %r7 %r8 1 false;
    MOV %r8 U;
    MOV %r9 2;
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r7 N;
    MOV %r8 "unshift";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
LABEL _l1584_:
    MOV %r6 N;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l1585_;
    MOV %r7 "/";
    MOV %r10 ".";
    PUSH %r10;
    MOV %r10 N;
    MOV %r11 "join";
    CALL_VAR %r10 %r11 1 false;
    MOV %r9 $RET;
    ADD %r7 %r9;
    MOV %r8 m;
    ADD %r7 %r8;
    MOV m %r7;
    MOV %r6 %r7;
LABEL _l1585_:
    MOV %r6 ".";
    PUSH %r6;
    MOV %r6 B;
    MOV %r7 "join";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV_THIS %r6;
    MOV %r7 "hostname";
    SET_KEY %r6 %r7 %r5;
    CLR_BLOCK 11;
    JMP _l1570_;
    JMP _l1582_;
LABEL _l1583_:
LABEL _l1582_:
    JMP _l1573_;
LABEL _l1574_:
LABEL _l1573_:
LABEL _l1571_:
    MOV %r3 O;
    ADD %r3 1;
    MOV O %r3;
    JMP _l1569_;
LABEL _l1570_:
    END_BLOCK 11;
    JMP _l1567_;
LABEL _l1568_:
LABEL _l1567_:
    MOV_THIS %r5;
    MOV %r6 "hostname";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 255;
    GT %r1 %r2;
    JF %r1 _l1587_;
    MOV %r2 "";
    MOV_THIS %r3;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    JMP _l1586_;
LABEL _l1587_:
    MOV_THIS %r5;
    MOV %r6 "hostname";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toLowerCase";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
LABEL _l1586_:
    MOV %r1 j;
    JIF %r1 _l1588_;
    MOV_THIS %r5;
    MOV %r6 "hostname";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @n;
    MOV %r5 "toASCII";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV_THIS %r4;
    MOV %r5 "hostname";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1588_:
    MOV_THIS %r2;
    MOV %r3 "port";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1590_;
    MOV D ":";
    MOV_THIS %r3;
    MOV %r4 "port";
    MOV_PROP %r2 %r3 %r4;
    ADD D %r2;
    JMP _l1589_;
LABEL _l1590_:
    MOV D "";
LABEL _l1589_:
    MOV_THIS %r2;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    MOV q %r1;
    JIF %r1 _l1591_;
    MOV %r2 "";
    LG_OR q %r2;
LABEL _l1591_:
    MOV %r1 q;
    MOV %r2 D;
    ADD %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 "host";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r2;
    MOV %r3 "host";
    MOV_PROP %r1 %r2 %r3;
    MOV_THIS %r3;
    MOV %r4 "href";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV_THIS %r3;
    MOV %r4 "href";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 j;
    JF %r1 _l1592_;
    MOV %r4 1;
    PUSH %r4;
    MOV_THIS %r8;
    MOV %r9 "hostname";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 2;
    SUB %r4 %r5;
    PUSH %r4;
    MOV_THIS %r6;
    MOV %r7 "hostname";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "substr";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV_THIS %r4;
    MOV %r5 "hostname";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 "/";
    MOV %r5 m;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1593_;
    MOV %r5 "/";
    MOV %r6 m;
    ADD %r5 %r6;
    MOV m %r5;
    MOV %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1593_:
LABEL _l1592_:
    JMP _l1542_;
LABEL _l1543_:
LABEL _l1542_:
    MOV %r1 @b;
    MOV %r2 S;
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l1595_;
    MOV %r1 0;
    MOV O %r1;
    MOV %r2 @l;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV R %r1;
LABEL _l1596_:
    MOV %r1 O;
    MOV %r2 R;
    LT %r1 %r2;
    JF %r1 _l1597_;
LABEL _l1599_:
    MOV %r2 @l;
    MOV %r3 O;
    MOV_PROP W %r2 %r3;
    MOV %r2 1;
    MINUS %r2;
    MOV %r4 W;
    PUSH %r4;
    MOV %r4 m;
    MOV %r5 "indexOf";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    JF %r2 _l1601_;
    MOV %r3 W;
    PUSH %r3;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV F $RET;
    MOV %r3 F;
    MOV %r4 W;
    EQ %r3 %r4;
    JF %r3 _l1602_;
    MOV %r6 W;
    PUSH %r6;
    CALL_CTX 'escape' 1 false;
    MOV %r5 $RET;
    MOV F %r5;
    MOV %r4 %r5;
LABEL _l1602_:
    MOV %r4 F;
    PUSH %r4;
    MOV %r6 W;
    PUSH %r6;
    MOV %r6 m;
    MOV %r7 "split";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 "join";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV m %r3;
    JMP _l1600_;
LABEL _l1601_:
LABEL _l1600_:
LABEL _l1598_:
    MOV %r2 O;
    ADD %r2 1;
    MOV O %r2;
    JMP _l1596_;
LABEL _l1597_:
    JMP _l1594_;
LABEL _l1595_:
LABEL _l1594_:
    MOV %r0 "#";
    PUSH %r0;
    MOV %r0 m;
    MOV %r1 "indexOf";
    CALL_VAR %r0 %r1 1 false;
    MOV H $RET;
    MOV %r0 1;
    MINUS %r0;
    MOV %r1 H;
    NE %r0 %r1;
    JF %r0 _l1603_;
    MOV %r3 H;
    PUSH %r3;
    MOV %r3 m;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "hash";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 H;
    PUSH %r3;
    MOV %r3 m;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV m %r2;
    MOV %r1 %r2;
LABEL _l1603_:
    MOV %r0 "?";
    PUSH %r0;
    MOV %r0 m;
    MOV %r1 "indexOf";
    CALL_VAR %r0 %r1 1 false;
    MOV K $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 K;
    NE %r1 %r2;
    JF %r1 _l1607_;
    MOV %r3 K;
    PUSH %r3;
    MOV %r3 m;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "search";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 K;
    MOV %r4 1;
    ADD %r3 %r4;
    PUSH %r3;
    MOV %r3 m;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "query";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 .t;
    JF %r2 _l1608_;
    MOV_THIS %r6;
    MOV %r7 "query";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r5 @y;
    MOV %r6 "parse";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV_THIS %r5;
    MOV %r6 "query";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1608_:
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 K;
    PUSH %r3;
    MOV %r3 m;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV m %r2;
    JMP _l1606_;
LABEL _l1607_:
    MOV %r2 .t;
    JF %r2 _l1609_;
    MOV %r4 "";
    MOV_THIS %r5;
    MOV %r6 "search";
    SET_KEY %r5 %r6 %r4;
    NEW_OBJ %r4;
    MOV_THIS %r5;
    MOV %r6 "query";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1609_:
LABEL _l1606_:
    MOV %r1 m;
    JF %r1 _l1610_;
    MOV %r3 m;
    MOV_THIS %r4;
    MOV %r5 "pathname";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1610_:
    MOV %r4 @_;
    MOV %r5 S;
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l1613_;
    MOV_THIS %r5;
    MOV %r6 "hostname";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l1613_:
    MOV %r1 %r2;
    JF %r2 _l1612_;
    MOV_THIS %r4;
    MOV %r5 "pathname";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l1612_:
    JF %r1 _l1611_;
    MOV %r3 "/";
    MOV_THIS %r4;
    MOV %r5 "pathname";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1611_:
    MOV_THIS %r2;
    MOV %r3 "pathname";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l1614_;
    MOV_THIS %r3;
    MOV %r4 "search";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l1614_:
    JF %r0 _l1605_;
    MOV_THIS %r3;
    MOV %r4 "pathname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1615_;
    MOV %r3 "";
    LG_OR %r1 %r3;
LABEL _l1615_:
    MOV D %r1;
    MOV_THIS %r2;
    MOV %r3 "search";
    MOV_PROP %r1 %r2 %r3;
    MOV z %r1;
    JIF %r1 _l1616_;
    MOV %r2 "";
    LG_OR z %r2;
LABEL _l1616_:
    MOV %r1 D;
    MOV %r2 z;
    ADD %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 "path";
    SET_KEY %r2 %r3 %r1;
    JMP _l1604_;
LABEL _l1605_:
LABEL _l1604_:
    MOV_THIS %r2;
    MOV %r3 "format";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV_THIS %r2;
    MOV %r3 "href";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f442() {
    VAR e;
    VAR t;
    VAR r;
    VAR n;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r1;
    MOV %r2 "auth";
    MOV_PROP %r0 %r1 %r2;
    MOV e %r0;
    JIF %r0 _l1617_;
    MOV %r1 "";
    LG_OR e %r1;
LABEL _l1617_:
    MOV %r0 e;
    JF %r0 _l1618_;
    NEW_REG %r3 "%3A" "i";
    PUSH %r3;
    MOV %r3 ":";
    PUSH %r3;
    MOV %r6 e;
    PUSH %r6;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV %r5 $RET;
    MOV e %r5;
    MOV %r3 %r5;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV e %r2;
    MOV %r2 "@";
    MOV %r3 e;
    ADD %r3 %r2;
    MOV e %r3;
    MOV %r1 %r3;
LABEL _l1618_:
    MOV_THIS %r1;
    MOV %r2 "protocol";
    MOV_PROP %r0 %r1 %r2;
    MOV t %r0;
    JIF %r0 _l1619_;
    MOV %r1 "";
    LG_OR t %r1;
LABEL _l1619_:
    MOV_THIS %r1;
    MOV %r2 "pathname";
    MOV_PROP %r0 %r1 %r2;
    MOV r %r0;
    JIF %r0 _l1620_;
    MOV %r1 "";
    LG_OR r %r1;
LABEL _l1620_:
    MOV_THIS %r1;
    MOV %r2 "hash";
    MOV_PROP %r0 %r1 %r2;
    MOV n %r0;
    JIF %r0 _l1621_;
    MOV %r1 "";
    LG_OR n %r1;
LABEL _l1621_:
    MOV o 1;
    NEG o;
    MOV s "";
    MOV_THIS %r1;
    MOV %r2 "host";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1623_;
    MOV %r1 e;
    MOV_THIS %r3;
    MOV %r4 "host";
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    MOV o %r1;
    JMP _l1622_;
LABEL _l1623_:
    MOV_THIS %r2;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1624_;
    MOV %r3 e;
    MOV %r5 1;
    MINUS %r5;
    MOV %r7 ":";
    PUSH %r7;
    MOV_THIS %r9;
    MOV %r10 "hostname";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "indexOf";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    EQ %r5 %r6;
    JF %r5 _l1626_;
    MOV_THIS %r6;
    MOV %r7 "hostname";
    MOV_PROP %r4 %r6 %r7;
    JMP _l1625_;
LABEL _l1626_:
    MOV %r4 "[";
    MOV_THIS %r8;
    MOV %r9 "hostname";
    MOV_PROP %r7 %r8 %r9;
    ADD %r4 %r7;
    MOV %r6 "]";
    ADD %r4 %r6;
LABEL _l1625_:
    ADD %r3 %r4;
    MOV o %r3;
    MOV_THIS %r4;
    MOV %r5 "port";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l1627_;
    MOV %r5 ":";
    MOV_THIS %r7;
    MOV %r8 "port";
    MOV_PROP %r6 %r7 %r8;
    ADD %r5 %r6;
    MOV %r6 o;
    ADD %r6 %r5;
    MOV o %r6;
    MOV %r4 %r6;
    LG_AND %r2 %r4;
LABEL _l1627_:
LABEL _l1624_:
LABEL _l1622_:
    MOV_THIS %r3;
    MOV %r4 "query";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1630_;
    MOV_THIS %r5;
    MOV %r6 "query";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "isObject";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1630_:
    MOV %r0 %r1;
    JF %r1 _l1629_;
    MOV_THIS %r6;
    MOV %r7 "query";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "keys";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l1629_:
    JF %r0 _l1628_;
    MOV_THIS %r4;
    MOV %r5 "query";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 @y;
    MOV %r4 "stringify";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV s %r2;
    MOV %r1 %r2;
LABEL _l1628_:
    MOV_THIS %r2;
    MOV %r3 "search";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l1632_;
    MOV %r3 s;
    MOV %r2 %r3;
    JF %r3 _l1633_;
    MOV %r4 "?";
    MOV %r5 s;
    ADD %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1633_:
    LG_OR %r0 %r2;
LABEL _l1632_:
    MOV a %r0;
    JIF %r0 _l1631_;
    MOV %r1 "";
    LG_OR a %r1;
LABEL _l1631_:
    MOV %r2 t;
    MOV %r1 %r2;
    JF %r2 _l1635_;
    MOV %r3 ":";
    MOV %r5 1;
    MINUS %r5;
    PUSH %r5;
    MOV %r5 t;
    MOV %r6 "substr";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1635_:
    JF %r1 _l1634_;
    MOV %r3 ":";
    MOV %r4 t;
    ADD %r4 %r3;
    MOV t %r4;
    MOV %r2 %r4;
LABEL _l1634_:
    MOV_THIS %r3;
    MOV %r4 "slashes";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1638_;
    MOV %r5 t;
    NEG %r5;
    MOV %r4 %r5;
    JIF %r5 _l1640_;
    MOV %r7 @_;
    MOV %r8 t;
    MOV_PROP %r6 %r7 %r8;
    LG_OR %r4 %r6;
LABEL _l1640_:
    MOV %r3 %r4;
    JF %r4 _l1639_;
    MOV %r5 1;
    NEG %r5;
    MOV %r6 o;
    NE %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l1639_:
    LG_OR %r1 %r3;
LABEL _l1638_:
    JF %r1 _l1637_;
    MOV %r2 "//";
    MOV %r4 o;
    MOV %r3 %r4;
    JIF %r4 _l1641_;
    MOV %r5 "";
    LG_OR %r3 %r5;
LABEL _l1641_:
    ADD %r2 %r3;
    MOV o %r2;
    MOV %r3 r;
    MOV %r2 %r3;
    JF %r3 _l1643_;
    MOV %r4 "/";
    MOV %r6 0;
    PUSH %r6;
    MOV %r6 r;
    MOV %r7 "charAt";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1643_:
    JF %r2 _l1642_;
    MOV %r4 "/";
    MOV %r5 r;
    ADD %r4 %r5;
    MOV r %r4;
    MOV %r3 %r4;
LABEL _l1642_:
    JMP _l1636_;
LABEL _l1637_:
    MOV %r2 o;
    JIF %r2 _l1644_;
    MOV %r4 "";
    MOV o %r4;
    MOV %r3 %r4;
LABEL _l1644_:
LABEL _l1636_:
    MOV %r2 n;
    MOV %r1 %r2;
    JF %r2 _l1646_;
    MOV %r3 "#";
    MOV %r5 0;
    PUSH %r5;
    MOV %r5 n;
    MOV %r6 "charAt";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1646_:
    JF %r1 _l1645_;
    MOV %r3 "#";
    MOV %r4 n;
    ADD %r3 %r4;
    MOV n %r3;
    MOV %r2 %r3;
LABEL _l1645_:
    MOV %r2 a;
    MOV %r1 %r2;
    JF %r2 _l1648_;
    MOV %r3 "?";
    MOV %r5 0;
    PUSH %r5;
    MOV %r5 a;
    MOV %r6 "charAt";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1648_:
    JF %r1 _l1647_;
    MOV %r3 "?";
    MOV %r4 a;
    ADD %r3 %r4;
    MOV a %r3;
    MOV %r2 %r3;
LABEL _l1647_:
    MOV %r0 t;
    MOV %r4 o;
    ADD %r0 %r4;
    NEW_REG %r5 "[?#]" "g";
    PUSH %r5;
    FUNC %r5 @@f813;
    PUSH %r5;
    MOV %r5 r;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV r %r4;
    MOV %r3 %r4;
    ADD %r0 %r3;
    MOV %r4 "#";
    PUSH %r4;
    MOV %r4 "%23";
    PUSH %r4;
    MOV %r4 a;
    MOV %r5 "replace";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV a %r3;
    MOV %r2 %r3;
    ADD %r0 %r2;
    MOV %r1 n;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f443(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 1;
    NEG %r4;
    PUSH %r4;
    MOV %r4 0;
    NEG %r4;
    PUSH %r4;
    CALL_REG @m 3 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "resolveObject";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 "format";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f444(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR d;
    VAR b;
    VAR y;
    VAR m;
    VAR v;
    VAR w;
    VAR S;
    VAR E;
    VAR x;
    VAR k;
    VAR I;
    VAR O;
    VAR T;
    VAR j;
    VAR A;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "isString";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l1650_;
    CALL_REG @o 0 true;
    MOV t $RET;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "parse";
    CALL_VAR %r1 %r2 3 false;
    MOV %r1 t;
    MOV .e %r1;
    JMP _l1649_;
LABEL _l1650_:
LABEL _l1649_:
    CALL_REG @o 0 true;
    MOV r $RET;
    MOV_THIS %r0;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "keys";
    CALL_VAR %r0 %r1 1 false;
    MOV n $RET;
    MOV s 0;
LABEL _l1651_:
    MOV %r0 s;
    MOV %r2 n;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l1652_;
LABEL _l1654_:
    MOV %r1 n;
    MOV %r2 s;
    MOV_PROP a %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 a;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 a;
    SET_KEY %r2 %r3 %r1;
LABEL _l1653_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l1651_;
LABEL _l1652_:
    MOV %r2 .e;
    MOV %r3 "hash";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 "hash";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 "";
    MOV %r2 .e;
    MOV %r3 "href";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l1656_;
    MOV %r3 r;
    MOV %r4 "format";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 "href";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 r;
    MOV $RET %r1;
    RET;
    JMP _l1655_;
LABEL _l1656_:
LABEL _l1655_:
    MOV %r2 .e;
    MOV %r3 "slashes";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l1659_;
    MOV %r3 .e;
    MOV %r4 "protocol";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1659_:
    JF %r0 _l1658_;
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    CALL_VAR %r1 %r2 1 false;
    MOV u $RET;
    MOV c 0;
LABEL _l1660_:
    MOV %r1 c;
    MOV %r3 u;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l1661_;
LABEL _l1663_:
    MOV %r2 u;
    MOV %r3 c;
    MOV_PROP l %r2 %r3;
    MOV %r2 "protocol";
    MOV %r3 l;
    NE %r2 %r3;
    JF %r2 _l1664_;
    MOV %r5 .e;
    MOV %r6 l;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 r;
    MOV %r6 l;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1664_:
LABEL _l1662_:
    MOV %r2 c;
    ADD %r2 1;
    MOV c %r2;
    JMP _l1660_;
LABEL _l1661_:
    MOV %r5 @_;
    MOV %r8 r;
    MOV %r7 "protocol";
    MOV_PROP %r6 %r8 %r7;
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l1667_;
    MOV %r6 r;
    MOV %r7 "hostname";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l1667_:
    MOV %r2 %r3;
    JF %r3 _l1666_;
    MOV %r5 r;
    MOV %r6 "pathname";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l1666_:
    JF %r2 _l1665_;
    MOV %r5 "/";
    MOV %r6 r;
    MOV %r7 "pathname";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 r;
    MOV %r6 "path";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1665_:
    MOV %r3 r;
    MOV %r4 "format";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 "href";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 r;
    MOV $RET %r1;
    RET;
    JMP _l1657_;
LABEL _l1658_:
LABEL _l1657_:
    MOV %r2 .e;
    MOV %r3 "protocol";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l1670_;
    MOV %r4 .e;
    MOV %r5 "protocol";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 r;
    MOV %r5 "protocol";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1670_:
    JF %r0 _l1669_;
    MOV %r2 @_;
    MOV %r5 .e;
    MOV %r4 "protocol";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    JF %r1 _l1672_;
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "keys";
    CALL_VAR %r2 %r3 1 false;
    MOV f $RET;
    MOV h 0;
LABEL _l1673_:
    MOV %r2 h;
    MOV %r4 f;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    JF %r2 _l1674_;
LABEL _l1676_:
    MOV %r3 f;
    MOV %r4 h;
    MOV_PROP p %r3 %r4;
    MOV %r4 .e;
    MOV %r5 p;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 r;
    MOV %r5 p;
    SET_KEY %r4 %r5 %r3;
LABEL _l1675_:
    MOV %r3 h;
    ADD %r3 1;
    MOV h %r3;
    JMP _l1673_;
LABEL _l1674_:
    MOV %r4 r;
    MOV %r5 "format";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV %r4 r;
    MOV %r5 "href";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 r;
    MOV $RET %r2;
    RET;
    JMP _l1671_;
LABEL _l1672_:
LABEL _l1671_:
    MOV %r3 .e;
    MOV %r4 "protocol";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "protocol";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .e;
    MOV %r4 "host";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1679_;
    MOV %r4 @g;
    MOV %r7 .e;
    MOV %r6 "protocol";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l1679_:
    JF %r1 _l1678_;
    MOV %r3 .e;
    MOV %r4 "pathname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "pathname";
    SET_KEY %r3 %r4 %r2;
    JMP _l1677_;
LABEL _l1678_:
    MOV %r2 "/";
    PUSH %r2;
    MOV %r5 .e;
    MOV %r6 "pathname";
    MOV_PROP %r4 %r5 %r6;
    MOV %r2 %r4;
    JIF %r4 _l1683_;
    MOV %r5 "";
    LG_OR %r2 %r5;
LABEL _l1683_:
    MOV %r3 "split";
    CALL_VAR %r2 %r3 1 false;
    MOV d $RET;
LABEL _l1680_:
    MOV %r4 d;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l1685_;
    MOV %r6 d;
    MOV %r7 "shift";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    MOV %r6 .e;
    MOV %r7 "host";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l1685_:
    JF %r2 _l1681_;
LABEL _l1684_:
    JMP _l1680_;
LABEL _l1681_:
    MOV %r3 .e;
    MOV %r4 "host";
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l1686_;
    MOV %r4 "";
    MOV %r5 .e;
    MOV %r6 "host";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1686_:
    MOV %r3 .e;
    MOV %r4 "hostname";
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l1687_;
    MOV %r4 "";
    MOV %r5 .e;
    MOV %r6 "hostname";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1687_:
    MOV %r2 "";
    MOV %r4 d;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    JF %r2 _l1688_;
    MOV %r4 "";
    PUSH %r4;
    MOV %r4 d;
    MOV %r5 "unshift";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
LABEL _l1688_:
    MOV %r4 d;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 2;
    LT %r2 %r3;
    JF %r2 _l1689_;
    MOV %r4 "";
    PUSH %r4;
    MOV %r4 d;
    MOV %r5 "unshift";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
LABEL _l1689_:
    MOV %r3 "/";
    PUSH %r3;
    MOV %r3 d;
    MOV %r4 "join";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 "pathname";
    SET_KEY %r3 %r4 %r2;
LABEL _l1677_:
    MOV %r3 .e;
    MOV %r4 "search";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "search";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .e;
    MOV %r4 "query";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "query";
    SET_KEY %r3 %r4 %r2;
    MOV %r4 .e;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1692_;
    MOV %r4 "";
    LG_OR %r2 %r4;
LABEL _l1692_:
    MOV %r3 r;
    MOV %r4 "host";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .e;
    MOV %r4 "auth";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "auth";
    SET_KEY %r3 %r4 %r2;
    MOV %r4 .e;
    MOV %r5 "hostname";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1693_;
    MOV %r5 .e;
    MOV %r6 "host";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l1693_:
    MOV %r3 r;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .e;
    MOV %r4 "port";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "port";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 r;
    MOV %r4 "pathname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1694_;
    MOV %r4 r;
    MOV %r5 "search";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l1694_:
    JF %r1 _l1691_;
    MOV %r3 r;
    MOV %r4 "pathname";
    MOV_PROP %r2 %r3 %r4;
    MOV b %r2;
    JIF %r2 _l1695_;
    MOV %r3 "";
    LG_OR b %r3;
LABEL _l1695_:
    MOV %r3 r;
    MOV %r4 "search";
    MOV_PROP %r2 %r3 %r4;
    MOV y %r2;
    JIF %r2 _l1696_;
    MOV %r3 "";
    LG_OR y %r3;
LABEL _l1696_:
    MOV %r2 b;
    MOV %r3 y;
    ADD %r2 %r3;
    MOV %r3 r;
    MOV %r4 "path";
    SET_KEY %r3 %r4 %r2;
    JMP _l1690_;
LABEL _l1691_:
LABEL _l1690_:
    MOV %r4 r;
    MOV %r5 "slashes";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1697_;
    MOV %r5 .e;
    MOV %r6 "slashes";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l1697_:
    MOV %r3 r;
    MOV %r4 "slashes";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 r;
    MOV %r4 "format";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 "href";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 r;
    MOV $RET %r1;
    RET;
    JMP _l1668_;
LABEL _l1669_:
LABEL _l1668_:
    MOV %r1 r;
    MOV %r2 "pathname";
    MOV_PROP %r0 %r1 %r2;
    MOV m %r0;
    JF %r0 _l1698_;
    MOV %r1 "/";
    MOV %r3 0;
    PUSH %r3;
    MOV %r5 r;
    MOV %r6 "pathname";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "charAt";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    EQ %r1 %r2;
    LG_AND m %r1;
LABEL _l1698_:
    MOV %r1 .e;
    MOV %r2 "host";
    MOV_PROP %r0 %r1 %r2;
    MOV v %r0;
    JIF %r0 _l1699_;
    MOV %r3 .e;
    MOV %r4 "pathname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1700_;
    MOV %r3 "/";
    MOV %r5 0;
    PUSH %r5;
    MOV %r7 .e;
    MOV %r8 "pathname";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "charAt";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1700_:
    LG_OR v %r1;
LABEL _l1699_:
    MOV %r1 v;
    MOV %r0 %r1;
    JIF %r1 _l1702_;
    MOV %r2 m;
    LG_OR %r0 %r2;
LABEL _l1702_:
    MOV w %r0;
    JIF %r0 _l1701_;
    MOV %r3 r;
    MOV %r4 "host";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1703_;
    MOV %r4 .e;
    MOV %r5 "pathname";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1703_:
    LG_OR w %r1;
LABEL _l1701_:
    MOV S w;
    MOV %r2 r;
    MOV %r3 "pathname";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l1705_;
    MOV %r3 "/";
    PUSH %r3;
    MOV %r5 r;
    MOV %r6 "pathname";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "split";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l1705_:
    MOV E %r0;
    JIF %r0 _l1704_;
    NEW_ARR %r1;
    LG_OR E %r1;
LABEL _l1704_:
    MOV %r3 .e;
    MOV %r4 "pathname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1707_;
    MOV %r4 "/";
    PUSH %r4;
    MOV %r6 .e;
    MOV %r7 "pathname";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "split";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1707_:
    MOV %r0 %r1;
    JIF %r1 _l1706_;
    NEW_ARR %r2;
    LG_OR %r0 %r2;
LABEL _l1706_:
    MOV d %r0;
    MOV %r1 r;
    MOV %r2 "protocol";
    MOV_PROP %r0 %r1 %r2;
    MOV x %r0;
    JF %r0 _l1708_;
    MOV %r2 @_;
    MOV %r5 r;
    MOV %r4 "protocol";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    LG_AND x %r1;
LABEL _l1708_:
    MOV %r1 x;
    JF %r1 _l1711_;
    MOV %r3 "";
    MOV %r4 r;
    MOV %r5 "hostname";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 null;
    MOV %r4 r;
    MOV %r5 "port";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 r;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l1712_;
    MOV %r5 "";
    MOV %r7 E;
    MOV %r8 0;
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    JF %r5 _l1714_;
    MOV %r7 r;
    MOV %r8 "host";
    MOV_PROP %r6 %r7 %r8;
    MOV %r7 E;
    MOV %r8 0;
    SET_KEY %r7 %r8 %r6;
    MOV %r4 %r6;
    JMP _l1713_;
LABEL _l1714_:
    MOV %r7 r;
    MOV %r8 "host";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 E;
    MOV %r7 "unshift";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
LABEL _l1713_:
LABEL _l1712_:
    MOV %r3 "";
    MOV %r4 r;
    MOV %r5 "host";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 .e;
    MOV %r5 "protocol";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l1715_;
    MOV %r5 null;
    MOV %r6 .e;
    MOV %r7 "hostname";
    SET_KEY %r6 %r7 %r5;
    MOV %r5 null;
    MOV %r6 .e;
    MOV %r7 "port";
    SET_KEY %r6 %r7 %r5;
    MOV %r6 .e;
    MOV %r7 "host";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l1716_;
    MOV %r7 "";
    MOV %r9 d;
    MOV %r10 0;
    MOV_PROP %r8 %r9 %r10;
    EQ %r7 %r8;
    JF %r7 _l1718_;
    MOV %r9 .e;
    MOV %r10 "host";
    MOV_PROP %r8 %r9 %r10;
    MOV %r9 d;
    MOV %r10 0;
    SET_KEY %r9 %r10 %r8;
    MOV %r6 %r8;
    JMP _l1717_;
LABEL _l1718_:
    MOV %r9 .e;
    MOV %r10 "host";
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    MOV %r8 d;
    MOV %r9 "unshift";
    CALL_VAR %r8 %r9 1 false;
    MOV %r6 $RET;
LABEL _l1717_:
LABEL _l1716_:
    MOV %r5 null;
    MOV %r6 .e;
    MOV %r7 "host";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l1715_:
    MOV %r4 w;
    MOV %r3 %r4;
    JF %r4 _l1719_;
    MOV %r6 "";
    MOV %r8 d;
    MOV %r9 0;
    MOV_PROP %r7 %r8 %r9;
    EQ %r6 %r7;
    MOV %r5 %r6;
    JIF %r6 _l1720_;
    MOV %r7 "";
    MOV %r9 E;
    MOV %r10 0;
    MOV_PROP %r8 %r9 %r10;
    EQ %r7 %r8;
    LG_OR %r5 %r7;
LABEL _l1720_:
    LG_AND %r3 %r5;
LABEL _l1719_:
    MOV w %r3;
    MOV %r2 %r3;
LABEL _l1711_:
    MOV %r0 v;
    JF %r0 _l1710_;
    MOV %r4 .e;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1723_;
    MOV %r4 "";
    MOV %r6 .e;
    MOV %r7 "host";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1723_:
    JF %r2 _l1722_;
    MOV %r3 .e;
    MOV %r4 "host";
    MOV_PROP %r1 %r3 %r4;
    JMP _l1721_;
LABEL _l1722_:
    MOV %r3 r;
    MOV %r4 "host";
    MOV_PROP %r1 %r3 %r4;
LABEL _l1721_:
    MOV %r2 r;
    MOV %r3 "host";
    SET_KEY %r2 %r3 %r1;
    MOV %r4 .e;
    MOV %r5 "hostname";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1726_;
    MOV %r4 "";
    MOV %r6 .e;
    MOV %r7 "hostname";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1726_:
    JF %r2 _l1725_;
    MOV %r3 .e;
    MOV %r4 "hostname";
    MOV_PROP %r1 %r3 %r4;
    JMP _l1724_;
LABEL _l1725_:
    MOV %r3 r;
    MOV %r4 "hostname";
    MOV_PROP %r1 %r3 %r4;
LABEL _l1724_:
    MOV %r2 r;
    MOV %r3 "hostname";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .e;
    MOV %r3 "search";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 "search";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .e;
    MOV %r3 "query";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 "query";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 d;
    MOV E %r1;
    JMP _l1709_;
LABEL _l1710_:
    MOV %r2 d;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1727_;
    MOV %r2 E;
    JIF %r2 _l1728_;
    NEW_ARR %r4;
    MOV E %r4;
    MOV %r3 %r4;
LABEL _l1728_:
    MOV %r2 E;
    MOV %r3 "pop";
    CALL_VAR %r2 %r3 0 false;
    MOV %r3 d;
    PUSH %r3;
    MOV %r3 E;
    MOV %r4 "concat";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV E %r2;
    MOV %r3 .e;
    MOV %r4 "search";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "search";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .e;
    MOV %r4 "query";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 "query";
    SET_KEY %r3 %r4 %r2;
    JMP _l1709_;
LABEL _l1727_:
    MOV %r4 .e;
    MOV %r5 "search";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "isNullOrUndefined";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NEG %r2;
    JF %r2 _l1729_;
    MOV %r3 x;
    JF %r3 _l1731_;
    MOV %r6 E;
    MOV %r7 "shift";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    MOV %r6 r;
    MOV %r7 "host";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 r;
    MOV %r6 "hostname";
    SET_KEY %r5 %r6 %r4;
    MOV %r8 r;
    MOV %r9 "host";
    MOV_PROP %r7 %r8 %r9;
    MOV %r6 %r7;
    JF %r7 _l1734_;
    MOV %r10 "@";
    PUSH %r10;
    MOV %r12 r;
    MOV %r13 "host";
    MOV_PROP %r10 %r12 %r13;
    MOV %r11 "indexOf";
    CALL_VAR %r10 %r11 1 false;
    MOV %r8 $RET;
    MOV %r9 0;
    GT %r8 %r9;
    LG_AND %r6 %r8;
LABEL _l1734_:
    NEG %r6;
    NEG %r6;
    MOV %r5 %r6;
    JF %r6 _l1733_;
    MOV %r8 "@";
    PUSH %r8;
    MOV %r10 r;
    MOV %r11 "host";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "split";
    CALL_VAR %r8 %r9 1 false;
    MOV %r7 $RET;
    LG_AND %r5 %r7;
LABEL _l1733_:
    MOV j %r5;
    MOV %r4 %r5;
    JF %r4 _l1732_;
    MOV %r7 j;
    MOV %r8 "shift";
    CALL_VAR %r7 %r8 0 false;
    MOV %r6 $RET;
    MOV %r7 r;
    MOV %r8 "auth";
    SET_KEY %r7 %r8 %r6;
    MOV %r8 j;
    MOV %r9 "shift";
    CALL_VAR %r8 %r9 0 false;
    MOV %r7 $RET;
    MOV %r8 r;
    MOV %r9 "hostname";
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
    MOV %r7 r;
    MOV %r8 "host";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l1732_:
    JMP _l1730_;
LABEL _l1731_:
LABEL _l1730_:
    MOV %r5 .e;
    MOV %r6 "search";
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 r;
    MOV %r6 "search";
    SET_KEY %r5 %r6 %r4;
    MOV %r5 .e;
    MOV %r6 "query";
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 r;
    MOV %r6 "query";
    SET_KEY %r5 %r6 %r4;
    MOV %r7 r;
    MOV %r8 "pathname";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 @i;
    MOV %r7 "isNull";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV %r4 %r5;
    JF %r5 _l1736_;
    MOV %r8 r;
    MOV %r9 "search";
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r7 @i;
    MOV %r8 "isNull";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    LG_AND %r4 %r6;
LABEL _l1736_:
    JIF %r4 _l1735_;
    MOV %r9 r;
    MOV %r10 "pathname";
    MOV_PROP %r8 %r9 %r10;
    JF %r8 _l1738_;
    MOV %r9 r;
    MOV %r10 "pathname";
    MOV_PROP %r6 %r9 %r10;
    JMP _l1737_;
LABEL _l1738_:
    MOV %r6 "";
LABEL _l1737_:
    MOV %r9 r;
    MOV %r10 "search";
    MOV_PROP %r8 %r9 %r10;
    JF %r8 _l1740_;
    MOV %r9 r;
    MOV %r10 "search";
    MOV_PROP %r7 %r9 %r10;
    JMP _l1739_;
LABEL _l1740_:
    MOV %r7 "";
LABEL _l1739_:
    ADD %r6 %r7;
    MOV %r7 r;
    MOV %r8 "path";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l1735_:
    MOV %r5 r;
    MOV %r6 "format";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    MOV %r5 r;
    MOV %r6 "href";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 r;
    MOV $RET %r3;
    RET;
    JMP _l1709_;
LABEL _l1729_:
LABEL _l1709_:
    MOV %r1 E;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l1742_;
    MOV %r2 null;
    MOV %r3 r;
    MOV %r4 "pathname";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 r;
    MOV %r4 "search";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1744_;
    MOV %r3 "/";
    MOV %r5 r;
    MOV %r6 "search";
    MOV_PROP %r4 %r5 %r6;
    ADD %r3 %r4;
    MOV %r4 r;
    MOV %r5 "path";
    SET_KEY %r4 %r5 %r3;
    JMP _l1743_;
LABEL _l1744_:
    MOV %r3 null;
    MOV %r4 r;
    MOV %r5 "path";
    SET_KEY %r4 %r5 %r3;
LABEL _l1743_:
    MOV %r3 r;
    MOV %r4 "format";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 "href";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 r;
    MOV $RET %r1;
    RET;
    JMP _l1741_;
LABEL _l1742_:
LABEL _l1741_:
    MOV %r2 1;
    MINUS %r2;
    PUSH %r2;
    MOV %r2 E;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 0;
    MOV_PROP k %r0 %r1;
    MOV %r4 r;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1751_;
    MOV %r5 .e;
    MOV %r6 "host";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l1751_:
    MOV %r1 %r2;
    JIF %r2 _l1750_;
    MOV %r5 E;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1750_:
    MOV %r0 %r1;
    JF %r1 _l1749_;
    MOV %r3 ".";
    MOV %r4 k;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l1752_;
    MOV %r4 "..";
    MOV %r5 k;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1752_:
    LG_AND %r0 %r2;
LABEL _l1749_:
    MOV I %r0;
    JIF %r0 _l1748_;
    MOV %r1 "";
    MOV %r2 k;
    EQ %r1 %r2;
    LG_OR I %r1;
LABEL _l1748_:
    MOV O 0;
    MOV %r0 E;
    MOV %r1 "length";
    MOV_PROP T %r0 %r1;
LABEL _l1745_:
    MOV %r0 T;
    MOV %r1 0;
    GE %r0 %r1;
    JF %r0 _l1746_;
LABEL _l1753_:
    MOV %r1 ".";
    MOV %r4 E;
    MOV %r5 T;
    MOV_PROP %r3 %r4 %r5;
    MOV k %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l1755_;
    MOV %r2 T;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 E;
    MOV %r3 "splice";
    CALL_VAR %r2 %r3 2 false;
    JMP _l1754_;
LABEL _l1755_:
    MOV %r2 "..";
    MOV %r3 k;
    EQ %r2 %r3;
    JF %r2 _l1756_;
    MOV %r3 T;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 E;
    MOV %r4 "splice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 O;
    ADD %r3 1;
    MOV O %r3;
    JMP _l1754_;
LABEL _l1756_:
    MOV %r3 O;
    JF %r3 _l1757_;
    MOV %r5 T;
    PUSH %r5;
    MOV %r5 1;
    PUSH %r5;
    MOV %r5 E;
    MOV %r6 "splice";
    CALL_VAR %r5 %r6 2 false;
    MOV %r5 O;
    MOV %r4 %r5;
    SUB %r5 1;
    MOV O %r5;
LABEL _l1757_:
LABEL _l1754_:
LABEL _l1747_:
    MOV %r1 T;
    SUB %r1 1;
    MOV T %r1;
    JMP _l1745_;
LABEL _l1746_:
    MOV %r1 w;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1760_;
    MOV %r2 S;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l1760_:
    JF %r0 _l1759_;
LABEL _l1761_:
    MOV %r2 O;
    MOV %r1 %r2;
    SUB %r2 1;
    MOV O %r2;
    JF %r1 _l1762_;
LABEL _l1764_:
    MOV %r2 "..";
    PUSH %r2;
    MOV %r2 E;
    MOV %r3 "unshift";
    CALL_VAR %r2 %r3 1 false;
LABEL _l1763_:
    JMP _l1761_;
LABEL _l1762_:
    JMP _l1758_;
LABEL _l1759_:
LABEL _l1758_:
    MOV %r2 w;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l1767_;
    MOV %r3 "";
    MOV %r5 E;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1767_:
    MOV %r0 %r1;
    JIF %r1 _l1766_;
    MOV %r4 E;
    MOV %r5 0;
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l1768_;
    MOV %r4 "/";
    MOV %r6 0;
    PUSH %r6;
    MOV %r8 E;
    MOV %r9 0;
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "charAt";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1768_:
    LG_OR %r0 %r2;
LABEL _l1766_:
    JIF %r0 _l1765_;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 E;
    MOV %r3 "unshift";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l1765_:
    MOV %r1 I;
    MOV %r0 %r1;
    JF %r1 _l1770_;
    MOV %r2 "/";
    MOV %r4 1;
    MINUS %r4;
    PUSH %r4;
    MOV %r6 "/";
    PUSH %r6;
    MOV %r6 E;
    MOV %r7 "join";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 "substr";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1770_:
    JF %r0 _l1769_;
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 E;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l1769_:
    MOV %r0 "";
    MOV %r2 E;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    MOV A %r0;
    JIF %r0 _l1771_;
    MOV %r3 E;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l1772_;
    MOV %r3 "/";
    MOV %r5 0;
    PUSH %r5;
    MOV %r7 E;
    MOV %r8 0;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "charAt";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1772_:
    LG_OR A %r1;
LABEL _l1771_:
    MOV %r0 x;
    JF %r0 _l1773_;
    MOV %r4 A;
    JF %r4 _l1775_;
    MOV %r3 "";
    JMP _l1774_;
LABEL _l1775_:
    MOV %r6 E;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l1776_;
    MOV %r6 E;
    MOV %r7 "shift";
    CALL_VAR %r6 %r7 0 false;
    MOV %r3 $RET;
    JMP _l1774_;
LABEL _l1776_:
    MOV %r3 "";
LABEL _l1774_:
    MOV %r4 r;
    MOV %r5 "host";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
    MOV %r3 r;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    MOV %r6 r;
    MOV %r7 "host";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JF %r5 _l1779_;
    MOV %r8 "@";
    PUSH %r8;
    MOV %r10 r;
    MOV %r11 "host";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "indexOf";
    CALL_VAR %r8 %r9 1 false;
    MOV %r6 $RET;
    MOV %r7 0;
    GT %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l1779_:
    NEG %r4;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l1778_;
    MOV %r6 "@";
    PUSH %r6;
    MOV %r8 r;
    MOV %r9 "host";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "split";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    LG_AND %r3 %r5;
LABEL _l1778_:
    MOV j %r3;
    MOV %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1777_;
    MOV %r5 j;
    MOV %r6 "shift";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    MOV %r5 r;
    MOV %r6 "auth";
    SET_KEY %r5 %r6 %r4;
    MOV %r6 j;
    MOV %r7 "shift";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    MOV %r6 r;
    MOV %r7 "hostname";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 r;
    MOV %r6 "host";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1777_:
LABEL _l1773_:
    MOV %r4 w;
    MOV %r3 %r4;
    JIF %r4 _l1782_;
    MOV %r7 r;
    MOV %r8 "host";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    JF %r6 _l1783_;
    MOV %r8 E;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    LG_AND %r5 %r7;
LABEL _l1783_:
    LG_OR %r3 %r5;
LABEL _l1782_:
    MOV w %r3;
    MOV %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1781_;
    MOV %r3 A;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l1781_:
    JF %r1 _l1780_;
    MOV %r3 "";
    PUSH %r3;
    MOV %r3 E;
    MOV %r4 "unshift";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l1780_:
    MOV %r2 E;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1785_;
    MOV %r3 "/";
    PUSH %r3;
    MOV %r3 E;
    MOV %r4 "join";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 "pathname";
    SET_KEY %r3 %r4 %r2;
    JMP _l1784_;
LABEL _l1785_:
    MOV %r2 null;
    MOV %r3 r;
    MOV %r4 "pathname";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 null;
    MOV %r3 r;
    MOV %r4 "path";
    SET_KEY %r3 %r4 %r2;
LABEL _l1784_:
    MOV %r4 r;
    MOV %r5 "pathname";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "isNull";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l1787_;
    MOV %r5 r;
    MOV %r6 "search";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "isNull";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l1787_:
    JIF %r1 _l1786_;
    MOV %r6 r;
    MOV %r7 "pathname";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l1789_;
    MOV %r6 r;
    MOV %r7 "pathname";
    MOV_PROP %r3 %r6 %r7;
    JMP _l1788_;
LABEL _l1789_:
    MOV %r3 "";
LABEL _l1788_:
    MOV %r6 r;
    MOV %r7 "search";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l1791_;
    MOV %r6 r;
    MOV %r7 "search";
    MOV_PROP %r4 %r6 %r7;
    JMP _l1790_;
LABEL _l1791_:
    MOV %r4 "";
LABEL _l1790_:
    ADD %r3 %r4;
    MOV %r4 r;
    MOV %r5 "path";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1786_:
    MOV %r3 .e;
    MOV %r4 "auth";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1792_;
    MOV %r4 r;
    MOV %r5 "auth";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l1792_:
    MOV %r2 r;
    MOV %r3 "auth";
    SET_KEY %r2 %r3 %r1;
    MOV %r3 r;
    MOV %r4 "slashes";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l1793_;
    MOV %r4 .e;
    MOV %r5 "slashes";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l1793_:
    MOV %r2 r;
    MOV %r3 "slashes";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 r;
    MOV %r3 "format";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV %r2 r;
    MOV %r3 "href";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f445() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "host";
    MOV_PROP e %r0 %r1;
    MOV %r0 e;
    PUSH %r0;
    MOV %r0 @a;
    MOV %r1 "exec";
    CALL_VAR %r0 %r1 1 false;
    MOV t $RET;
    MOV %r0 t;
    JF %r0 _l1794_;
    MOV %r2 ":";
    MOV %r5 t;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    MOV t %r4;
    MOV %r3 %r4;
    NE %r2 %r3;
    JF %r2 _l1795_;
    MOV %r5 1;
    PUSH %r5;
    MOV %r5 t;
    MOV %r6 "substr";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV_THIS %r5;
    MOV %r6 "port";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1795_:
    MOV %r3 0;
    PUSH %r3;
    MOV %r5 e;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 e;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV e %r2;
    MOV %r1 %r2;
LABEL _l1794_:
    MOV %r0 e;
    JF %r0 _l1796_;
    MOV %r2 e;
    MOV_THIS %r3;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1796_:
}
func @@f446(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "string";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f447(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 "object";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l1797_;
    MOV %r2 null;
    MOV %r3 .e;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1797_:
    MOV $RET %r0;
    RET;
}
func @@f448(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    MOV %r1 .e;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f449(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    MOV %r1 .e;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f450(.e) {
    CLS @r;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @r @@f814;
    CLS @e;
    MOV @e .e;
    FUNC %r0 @@f815;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f451(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r4 .e;
    MOV %r3 %r4;
    JF %r4 _l1801_;
    MOV %r5 "object";
    MOV %r6 .e;
    TYPE_OF %r6;
    WEQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l1801_:
    MOV %r2 %r3;
    JF %r3 _l1800_;
    MOV %r4 "function";
    MOV %r6 .e;
    MOV %r7 "copy";
    MOV_PROP %r5 %r6 %r7;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l1800_:
    MOV %r1 %r2;
    JF %r2 _l1799_;
    MOV %r3 "function";
    MOV %r5 .e;
    MOV %r6 "fill";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1799_:
    MOV %r0 %r1;
    JF %r1 _l1798_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "readUInt8";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1798_:
    MOV $RET %r0;
    RET;
}
func @@f452(.t, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @a @@f818;
    FUNC @u @@f819;
    FUNC @c @@f820;
    FUNC @l @@f821;
    FUNC @f @@f822;
    FUNC @h @@f823;
    FUNC @p @@f824;
    FUNC @d @@f825;
    FUNC @b @@f826;
    FUNC @g @@f827;
    FUNC @_ @@f828;
    FUNC @y @@f829;
    FUNC @m @@f830;
    FUNC @v @@f831;
    FUNC @w @@f832;
    FUNC @S @@f833;
    FUNC @E @@f834;
    FUNC @x @@f835;
    FUNC @k @@f836;
    FUNC @O @@f841;
    CLS @t;
    MOV @t .t;
    CLS @n;
    MOV @n .n;
    NEW_REG @i "%[sdj%]" "g";
    FUNC %r0 @@f816;
    MOV %r1 @r;
    MOV %r2 "format";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f817;
    MOV %r1 @r;
    MOV %r2 "deprecate";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ @s;
    FUNC %r0 @@f837;
    MOV %r1 @r;
    MOV %r2 "debuglog";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @a;
    MOV %r1 @r;
    MOV %r2 "inspect";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    NEW_ARR %r1;
    MOV %r2 1;
    SET_KEY %r1 0 %r2;
    MOV %r2 22;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'bold' %r1;
    NEW_ARR %r1;
    MOV %r2 3;
    SET_KEY %r1 0 %r2;
    MOV %r2 23;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'italic' %r1;
    NEW_ARR %r1;
    MOV %r2 4;
    SET_KEY %r1 0 %r2;
    MOV %r2 24;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'underline' %r1;
    NEW_ARR %r1;
    MOV %r2 7;
    SET_KEY %r1 0 %r2;
    MOV %r2 27;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'inverse' %r1;
    NEW_ARR %r1;
    MOV %r2 37;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'white' %r1;
    NEW_ARR %r1;
    MOV %r2 90;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'grey' %r1;
    NEW_ARR %r1;
    MOV %r2 30;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'black' %r1;
    NEW_ARR %r1;
    MOV %r2 34;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'blue' %r1;
    NEW_ARR %r1;
    MOV %r2 36;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'cyan' %r1;
    NEW_ARR %r1;
    MOV %r2 32;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'green' %r1;
    NEW_ARR %r1;
    MOV %r2 35;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'magenta' %r1;
    NEW_ARR %r1;
    MOV %r2 31;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'red' %r1;
    NEW_ARR %r1;
    MOV %r2 33;
    SET_KEY %r1 0 %r2;
    MOV %r2 39;
    SET_KEY %r1 1 %r2;
    SET_KEY %r0 'yellow' %r1;
    MOV %r1 @a;
    MOV %r2 "colors";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r1 "cyan";
    SET_KEY %r0 'special' %r1;
    MOV %r1 "yellow";
    SET_KEY %r0 'number' %r1;
    MOV %r1 "yellow";
    SET_KEY %r0 'boolean' %r1;
    MOV %r1 "grey";
    SET_KEY %r0 'undefined' %r1;
    MOV %r1 "bold";
    SET_KEY %r0 'null' %r1;
    MOV %r1 "green";
    SET_KEY %r0 'string' %r1;
    MOV %r1 "magenta";
    SET_KEY %r0 'date' %r1;
    MOV %r1 "red";
    SET_KEY %r0 'regexp' %r1;
    MOV %r1 @a;
    MOV %r2 "styles";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @p;
    MOV %r1 @r;
    MOV %r2 "isArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @d;
    MOV %r1 @r;
    MOV %r2 "isBoolean";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @b;
    MOV %r1 @r;
    MOV %r2 "isNull";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f838;
    MOV %r1 @r;
    MOV %r2 "isNullOrUndefined";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @g;
    MOV %r1 @r;
    MOV %r2 "isNumber";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @_;
    MOV %r1 @r;
    MOV %r2 "isString";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f839;
    MOV %r1 @r;
    MOV %r2 "isSymbol";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @y;
    MOV %r1 @r;
    MOV %r2 "isUndefined";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @m;
    MOV %r1 @r;
    MOV %r2 "isRegExp";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @v;
    MOV %r1 @r;
    MOV %r2 "isObject";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @w;
    MOV %r1 @r;
    MOV %r2 "isDate";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @S;
    MOV %r1 @r;
    MOV %r2 "isError";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @E;
    MOV %r1 @r;
    MOV %r2 "isFunction";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f840;
    MOV %r1 @r;
    MOV %r2 "isPrimitive";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "./support/isBuffer";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 @r;
    MOV %r2 "isBuffer";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR @I;
    MOV %r0 "Jan";
    SET_KEY @I 0 %r0;
    MOV %r0 "Feb";
    SET_KEY @I 1 %r0;
    MOV %r0 "Mar";
    SET_KEY @I 2 %r0;
    MOV %r0 "Apr";
    SET_KEY @I 3 %r0;
    MOV %r0 "May";
    SET_KEY @I 4 %r0;
    MOV %r0 "Jun";
    SET_KEY @I 5 %r0;
    MOV %r0 "Jul";
    SET_KEY @I 6 %r0;
    MOV %r0 "Aug";
    SET_KEY @I 7 %r0;
    MOV %r0 "Sep";
    SET_KEY @I 8 %r0;
    MOV %r0 "Oct";
    SET_KEY @I 9 %r0;
    MOV %r0 "Nov";
    SET_KEY @I 10 %r0;
    MOV %r0 "Dec";
    SET_KEY @I 11 %r0;
    FUNC %r0 @@f842;
    MOV %r1 @r;
    MOV %r2 "log";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 @r;
    MOV %r2 "inherits";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f843;
    MOV %r1 @r;
    MOV %r2 "_extend";
    SET_KEY %r1 %r2 %r0;
}
func @@f453(.e, .t, .r) {
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @t;
    MOV @t .t;
    MOV %r0 .r;
    JIF %r0 _l1802_;
    MOV_CTX %r2 "Error";
    MOV .r %r2;
    MOV %r1 %r2;
LABEL _l1802_:
    MOV %r0 .r;
    PUSH %r0;
    FUNC %r0 @@f844;
    CALL_REG %r0 1 false;
    MOV i $RET;
    MOV %r1 .r;
    MOV %r2 "name";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 i;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "name";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    MOV %r3 i;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "code";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 i;
    MOV %r1 @n;
    MOV %r2 .e;
    SET_KEY %r1 %r2 %r0;
}
func @@f454(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r1 "Array";
    MOV %r2 "isArray";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l1804_;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP r %r1 %r2;
    FUNC %r3 @@f845;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "map";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV .e %r2;
    MOV %r2 r;
    MOV %r3 2;
    GT %r2 %r3;
    JF %r2 _l1806_;
    MOV %r5 ", ";
    PUSH %r5;
    MOV %r7 0;
    PUSH %r7;
    MOV %r7 r;
    MOV %r8 1;
    SUB %r7 %r8;
    PUSH %r7;
    MOV %r7 .e;
    MOV %r8 "slice";
    CALL_VAR %r7 %r8 2 false;
    MOV %r5 $RET;
    MOV %r6 "join";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 ", or ";
    PUSH %r4;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 " ";
    PUSH %r6;
    MOV %r6 "one of ";
    MOV %r7 "concat";
    CALL_VAR %r6 %r7 2 false;
    MOV %r4 $RET;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 2 false;
    MOV %r1 $RET;
    MOV %r4 .e;
    MOV %r5 r;
    MOV %r6 1;
    SUB %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    ADD %r1 %r3;
    JMP _l1805_;
LABEL _l1806_:
    MOV %r3 2;
    MOV %r4 r;
    EQ %r3 %r4;
    JF %r3 _l1807_;
    MOV %r5 .e;
    MOV %r6 1;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r7 .e;
    MOV %r8 0;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 " or ";
    PUSH %r6;
    MOV %r8 .t;
    PUSH %r8;
    MOV %r8 " ";
    PUSH %r8;
    MOV %r8 "one of ";
    MOV %r9 "concat";
    CALL_VAR %r8 %r9 2 false;
    MOV %r6 $RET;
    MOV %r7 "concat";
    CALL_VAR %r6 %r7 2 false;
    MOV %r4 $RET;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 1 false;
    MOV %r1 $RET;
    JMP _l1805_;
LABEL _l1807_:
    MOV %r5 .e;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 " ";
    PUSH %r6;
    MOV %r6 "of ";
    MOV %r7 "concat";
    CALL_VAR %r6 %r7 2 false;
    MOV %r4 $RET;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 1 false;
    MOV %r1 $RET;
LABEL _l1805_:
    MOV $RET %r1;
    RET;
    JMP _l1803_;
LABEL _l1804_:
LABEL _l1803_:
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'String' 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 " ";
    PUSH %r3;
    MOV %r3 "of ";
    MOV %r4 "concat";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 "concat";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f455(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "The value \"";
    MOV %r4 .t;
    ADD %r0 %r4;
    MOV %r3 "\" is invalid for option \"";
    ADD %r0 %r3;
    MOV %r2 .e;
    ADD %r0 %r2;
    MOV %r1 "\"";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f456(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r2 "string";
    MOV %r3 .t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1812_;
    MOV %r4 "not ";
    MOV i %r4;
    MOV %r7 s;
    NEG %r7;
    MOV %r6 %r7;
    JIF %r7 _l1815_;
    MOV %r8 s;
    MOV %r9 0;
    LT %r8 %r9;
    LG_OR %r6 %r8;
LABEL _l1815_:
    JF %r6 _l1814_;
    MOV %r5 0;
    JMP _l1813_;
LABEL _l1814_:
    MOV %r5 s;
    PLUS %r5;
LABEL _l1813_:
    PUSH %r5;
    MOV %r6 i;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r5 .t;
    MOV %r6 "substr";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 i;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1812_:
    JF %r1 _l1811_;
    MOV %r2 "must not be";
    MOV n %r2;
    NEW_REG %r3 "^not " "";
    PUSH %r3;
    MOV %r3 "";
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV .t %r2;
    JMP _l1810_;
LABEL _l1811_:
    MOV %r2 "must be";
    MOV n %r2;
LABEL _l1810_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 " argument";
    PUSH %r1;
    FUNC %r1 @@f846;
    CALL_REG %r1 2 false;
    MOV %r0 $RET;
    JF %r0 _l1809_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 "type";
    PUSH %r3;
    CALL_REG @o 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r4 n;
    PUSH %r4;
    MOV %r4 " ";
    PUSH %r4;
    MOV %r6 .e;
    PUSH %r6;
    MOV %r6 " ";
    PUSH %r6;
    MOV %r6 "The ";
    MOV %r7 "concat";
    CALL_VAR %r6 %r7 2 false;
    MOV %r4 $RET;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    MOV %r3 "concat";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV a %r1;
    JMP _l1808_;
LABEL _l1809_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 ".";
    PUSH %r2;
    FUNC %r2 @@f847;
    CALL_REG %r2 2 false;
    MOV %r1 $RET;
    JF %r1 _l1817_;
    MOV u "property";
    JMP _l1816_;
LABEL _l1817_:
    MOV u "argument";
LABEL _l1816_:
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 "type";
    PUSH %r3;
    CALL_REG @o 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r4 n;
    PUSH %r4;
    MOV %r4 " ";
    PUSH %r4;
    MOV %r6 u;
    PUSH %r6;
    MOV %r6 " ";
    PUSH %r6;
    MOV %r8 .e;
    PUSH %r8;
    MOV %r8 "\" ";
    PUSH %r8;
    MOV %r8 "The \"";
    MOV %r9 "concat";
    CALL_VAR %r8 %r9 2 false;
    MOV %r6 $RET;
    MOV %r7 "concat";
    CALL_VAR %r6 %r7 2 false;
    MOV %r4 $RET;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    MOV %r3 "concat";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV a %r1;
LABEL _l1808_:
    MOV %r2 .r;
    TYPE_OF %r2;
    PUSH %r2;
    MOV %r2 ". Received type ";
    MOV %r3 "concat";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 a;
    ADD %r2 %r1;
    MOV a %r2;
    MOV %r0 %r2;
    MOV $RET %r0;
    RET;
}
func @@f457(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "The ";
    MOV %r2 .e;
    ADD %r0 %r2;
    MOV %r1 " method is not implemented";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f458(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "Cannot call ";
    MOV %r2 .e;
    ADD %r0 %r2;
    MOV %r1 " after a stream was destroyed";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f459(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "Unknown encoding: ";
    MOV %r1 .e;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f460(.e) {
    CLS @r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CALL_CTX 'Set' 0 true;
    MOV @r $RET;
    MOV %r2 @e;
    MOV %r3 "emitWarning";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1819_;
    FUNC %r0 @@f848;
    JMP _l1818_;
LABEL _l1819_:
    FUNC %r0 @@f849;
LABEL _l1818_:
    MOV %r3 @t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "emitExperimentalWarning";
    SET_KEY %r1 %r2 %r0;
}
func @@f461(.r) {
    VAR n;
    CLS @i;
    CLS @o;
    VAR s;
    VAR a;
    VAR u;
    CLS @c;
    CLS @l;
    CLS @f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @c @@f851;
    FUNC @l @@f852;
    FUNC @f @@f853;
    CLS @r;
    MOV @r .r;
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    MOV_PROP %r0 %r1 %r2;
    MOV n %r0;
    JIF %r0 _l1820_;
    FUNC %r1 @@f850;
    LG_OR n %r1;
LABEL _l1820_:
    MOV %r0 @c;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "./_stream_readable";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @i $RET;
    MOV %r0 "./_stream_writable";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 @c;
    PUSH %r0;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 2 false;
    MOV %r1 @o;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG n 1 false;
    MOV s $RET;
    MOV a 0;
LABEL _l1821_:
    MOV %r0 a;
    MOV %r2 s;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l1822_;
LABEL _l1824_:
    MOV %r1 s;
    MOV %r2 a;
    MOV_PROP u %r1 %r2;
    MOV %r4 @c;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 u;
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l1825_;
    MOV %r6 @o;
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 u;
    MOV_PROP %r3 %r4 %r5;
    MOV %r6 @c;
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 u;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l1825_:
LABEL _l1823_:
    MOV %r1 a;
    ADD %r1 1;
    MOV a %r1;
    JMP _l1821_;
LABEL _l1822_:
    MOV %r1 @c;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableHighWaterMark";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f854;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @c;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableBuffer";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f855;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @c;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableLength";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f856;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @c;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "destroyed";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f857;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f858;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
}
func @@f462(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 @i;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l1827_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @i 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1826_;
LABEL _l1827_:
LABEL _l1826_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f463(.e, .t, .r) {
    REG %r0;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG .r 2 false;
}
func @@f464(.r, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    VAR l;
    CLS @f;
    CLS @h;
    CLS @p;
    VAR d;
    CLS @b;
    VAR g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    CLS @T;
    CLS @j;
    CLS @A;
    CLS @R;
    CLS @M;
    CLS @P;
    CLS @C;
    CLS @L;
    CLS @B;
    CLS @N;
    CLS @U;
    CLS @D;
    CLS @q;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    FUNC @E @@f862;
    FUNC @x @@f863;
    FUNC @k @@f864;
    FUNC @I @@f865;
    FUNC @T @@f873;
    FUNC @j @@f874;
    FUNC @A @@f875;
    FUNC @R @@f876;
    FUNC @M @@f877;
    FUNC @P @@f878;
    FUNC @C @@f879;
    FUNC @L @@f880;
    FUNC @B @@f881;
    FUNC @N @@f882;
    FUNC @U @@f883;
    FUNC @D @@f884;
    FUNC @q @@f885;
    CLS @r;
    MOV @r .r;
    MOV %r0 @x;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @E;
    MOV %r1 @x;
    MOV %r2 "ReadableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 "events";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "EventEmitter";
    FUNC @o @@f859;
    MOV %r0 "./internal/streams/stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @s $RET;
    MOV %r2 "buffer";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @a %r0 %r1;
    MOV %r1 .n;
    MOV %r2 "Uint8Array";
    MOV_PROP %r0 %r1 %r2;
    MOV @u %r0;
    JIF %r0 _l1828_;
    FUNC %r1 @@f860;
    LG_OR @u %r1;
LABEL _l1828_:
    MOV %r0 "util";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV l $RET;
    MOV %r2 l;
    MOV %r1 %r2;
    JF %r2 _l1831_;
    MOV %r4 l;
    MOV %r5 "debuglog";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1831_:
    JF %r1 _l1830_;
    MOV %r2 "stream";
    PUSH %r2;
    MOV %r2 l;
    MOV %r3 "debuglog";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l1829_;
LABEL _l1830_:
    FUNC %r0 @@f861;
LABEL _l1829_:
    MOV @c %r0;
    MOV %r0 "./internal/streams/buffer_list";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @p $RET;
    MOV %r0 "./internal/streams/destroy";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV d $RET;
    MOV %r2 "./internal/streams/state";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "getHighWaterMark";
    MOV_PROP @b %r0 %r1;
    MOV %r2 "../errors";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "codes";
    MOV_PROP g %r0 %r1;
    MOV %r0 g;
    MOV %r1 "ERR_INVALID_ARG_TYPE";
    MOV_PROP @_ %r0 %r1;
    MOV %r0 g;
    MOV %r1 "ERR_STREAM_PUSH_AFTER_EOF";
    MOV_PROP @y %r0 %r1;
    MOV %r0 g;
    MOV %r1 "ERR_METHOD_NOT_IMPLEMENTED";
    MOV_PROP @m %r0 %r1;
    MOV %r0 g;
    MOV %r1 "ERR_STREAM_UNSHIFT_AFTER_END_EVENT";
    MOV_PROP @v %r0 %r1;
    MOV %r2 "../experimentalWarning";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "emitExperimentalWarning";
    MOV_PROP @w %r0 %r1;
    MOV %r0 @x;
    PUSH %r0;
    MOV %r0 @s;
    PUSH %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 2 false;
    NEW_ARR @S;
    MOV %r0 "error";
    SET_KEY @S 0 %r0;
    MOV %r0 "close";
    SET_KEY @S 1 %r0;
    MOV %r0 "destroy";
    SET_KEY @S 2 %r0;
    MOV %r0 "pause";
    SET_KEY @S 3 %r0;
    MOV %r0 "resume";
    SET_KEY @S 4 %r0;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "destroyed";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f866;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f867;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 d;
    MOV %r2 "destroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 d;
    MOV %r2 "undestroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_undestroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f868;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f869;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "push";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f870;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "unshift";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f871;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "isPaused";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f872;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV @O 8388608;
    FUNC %r0 @@f886;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f887;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_read";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f888;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pipe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f889;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "unpipe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f890;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    SET_KEY %r1 %r2 %r0;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "addListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f891;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "removeListener";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f892;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "removeAllListeners";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f893;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "resume";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f894;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pause";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f895;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "wrap";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "function";
    MOV_CTX %r1 "Symbol";
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l1832_;
    FUNC %r2 @@f896;
    MOV %r5 @x;
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV_CTX %r6 "Symbol";
    MOV %r5 "asyncIterator";
    MOV_PROP %r4 %r6 %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l1832_:
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "readableHighWaterMark";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f897;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "readableBuffer";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f898;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "readableFlowing";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f899;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f900;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r0 @N;
    MOV %r1 @x;
    MOV %r2 "_fromList";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "readableLength";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f901;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
}
func @@f465(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 @c;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l1834_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @c 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1833_;
LABEL _l1834_:
LABEL _l1833_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @u;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    NEW_OBJ %r0;
    MOV_THIS %r2;
    PUSH %r2;
    FUNC %r2 @@f902;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    SET_KEY %r0 'afterTransform' %r1;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'needTransform' %r1;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'transforming' %r1;
    MOV %r1 null;
    SET_KEY %r0 'writecb' %r1;
    MOV %r1 null;
    SET_KEY %r0 'writechunk' %r1;
    MOV %r1 null;
    SET_KEY %r0 'writeencoding' %r1;
    MOV_THIS %r1;
    MOV %r2 "_transformState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    JF %r0 _l1835_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "transform";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l1836_;
    MOV %r5 .e;
    MOV %r6 "transform";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_transform";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1836_:
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "flush";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1837_;
    MOV %r5 .e;
    MOV %r6 "flush";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_flush";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1837_:
LABEL _l1835_:
    MOV %r0 "prefinish";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
}
func @@f466() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS @e;
    MOV %r1 "function";
    MOV_THIS %r3;
    MOV %r4 "_flush";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1840_;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l1840_:
    JF %r0 _l1839_;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 null;
    PUSH %r1;
    CALL_REG @f 3 false;
    JMP _l1838_;
LABEL _l1839_:
    FUNC %r1 @@f903;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_flush";
    CALL_VAR %r1 %r2 1 false;
LABEL _l1838_:
}
func @@f467(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .t;
    JF %r0 _l1842_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1841_;
LABEL _l1842_:
LABEL _l1841_:
    MOV %r1 null;
    MOV %r2 .r;
    WNE %r1 %r2;
    JF %r1 _l1845_;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l1845_:
    MOV %r3 .e;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1844_;
    CALL_REG @a 0 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1843_;
LABEL _l1844_:
LABEL _l1843_:
    MOV %r3 .e;
    MOV %r4 "_transformState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "transforming";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1847_;
    CALL_REG @s 0 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1846_;
LABEL _l1847_:
LABEL _l1846_:
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f468(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r4;
    MOV %r5 "_transformState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "needTransform";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r5 @u;
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f469(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 "_transform()";
    PUSH %r1;
    CALL_REG @i 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG .r 1 false;
}
func @@f470(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "_transformState";
    MOV_PROP n %r0 %r1;
    MOV %r1 .r;
    MOV %r2 n;
    MOV %r3 "writecb";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 n;
    MOV %r3 "writechunk";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 n;
    MOV %r3 "writeencoding";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 n;
    MOV %r2 "transforming";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l1849_;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP i %r1 %r2;
    MOV %r4 n;
    MOV %r5 "needTransform";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l1852_;
    MOV %r5 i;
    MOV %r6 "needReadable";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l1852_:
    MOV %r1 %r2;
    JIF %r2 _l1851_;
    MOV %r5 i;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 i;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1851_:
    JF %r1 _l1850_;
    MOV %r4 i;
    MOV %r5 "highWaterMark";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "_read";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l1850_:
    JMP _l1848_;
LABEL _l1849_:
LABEL _l1848_:
}
func @@f471(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 "_transformState";
    MOV_PROP t %r0 %r1;
    MOV %r1 null;
    MOV %r3 t;
    MOV %r4 "writechunk";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1855_;
    MOV %r3 t;
    MOV %r4 "transforming";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l1855_:
    JF %r0 _l1854_;
    MOV %r1 0;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "needTransform";
    SET_KEY %r2 %r3 %r1;
    JMP _l1853_;
LABEL _l1854_:
    MOV %r1 0;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "transforming";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 t;
    MOV %r3 "writechunk";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 t;
    MOV %r3 "writeencoding";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 t;
    MOV %r3 "afterTransform";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_transform";
    CALL_VAR %r1 %r2 3 false;
LABEL _l1853_:
}
func @@f472(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @t;
    MOV @t .t;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f904;
    PUSH %r0;
    MOV %r4 @u;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "_destroy";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f473(.r, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    VAR f;
    CLS @h;
    VAR p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    CLS @T;
    CLS @j;
    CLS @A;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @i @@f905;
    FUNC @S @@f907;
    FUNC @E @@f908;
    FUNC @x @@f909;
    FUNC @k @@f910;
    FUNC @I @@f911;
    FUNC @O @@f912;
    FUNC @T @@f913;
    FUNC @j @@f914;
    FUNC @A @@f915;
    CLS @r;
    MOV @r .r;
    MOV %r0 @x;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @E;
    MOV %r1 @x;
    MOV %r2 "WritableState";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ @s;
    MOV %r1 "util-deprecate";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    SET_KEY @s 'deprecate' %r0;
    MOV %r0 "./internal/streams/stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @a $RET;
    MOV %r2 "buffer";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @u %r0 %r1;
    MOV %r1 .n;
    MOV %r2 "Uint8Array";
    MOV_PROP %r0 %r1 %r2;
    MOV @c %r0;
    JIF %r0 _l1856_;
    FUNC %r1 @@f906;
    LG_OR @c %r1;
LABEL _l1856_:
    MOV %r0 "./internal/streams/destroy";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV f $RET;
    MOV %r2 "./internal/streams/state";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "getHighWaterMark";
    MOV_PROP @h %r0 %r1;
    MOV %r2 "../errors";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "codes";
    MOV_PROP p %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_INVALID_ARG_TYPE";
    MOV_PROP @d %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_METHOD_NOT_IMPLEMENTED";
    MOV_PROP @b %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_MULTIPLE_CALLBACK";
    MOV_PROP @g %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_STREAM_CANNOT_PIPE";
    MOV_PROP @_ %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_STREAM_DESTROYED";
    MOV_PROP @y %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_STREAM_NULL_VALUES";
    MOV_PROP @m %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_STREAM_WRITE_AFTER_END";
    MOV_PROP @v %r0 %r1;
    MOV %r0 p;
    MOV %r1 "ERR_UNKNOWN_ENCODING";
    MOV_PROP @w %r0 %r1;
    MOV %r0 @x;
    PUSH %r0;
    MOV %r0 @a;
    PUSH %r0;
    MOV %r1 "inherits";
    PUSH %r1;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    CALL_REG %r0 2 false;
    FUNC %r0 @@f916;
    MOV %r3 @E;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "getBuffer";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f917;
    CALL_REG %r0 0 false;
    MOV %r2 "function";
    MOV_CTX %r3 "Symbol";
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1860_;
    MOV_CTX %r4 "Symbol";
    MOV %r5 "hasInstance";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1860_:
    MOV %r0 %r1;
    JF %r1 _l1859_;
    MOV %r2 "function";
    MOV_CTX %r6 "Function";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV_CTX %r7 "Symbol";
    MOV %r6 "hasInstance";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1859_:
    JF %r0 _l1858_;
    MOV_CTX %r4 "Function";
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV_CTX %r5 "Symbol";
    MOV %r4 "hasInstance";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV @l %r1;
    MOV %r1 @x;
    PUSH %r1;
    MOV_CTX %r2 "Symbol";
    MOV %r3 "hasInstance";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    NEW_OBJ %r1;
    FUNC %r2 @@f918;
    SET_KEY %r1 'value' %r2;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "defineProperty";
    CALL_VAR %r1 %r2 3 false;
    JMP _l1857_;
LABEL _l1858_:
    FUNC %r1 @@f919;
    MOV @l %r1;
LABEL _l1857_:
    FUNC %r0 @@f920;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pipe";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f921;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "write";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f922;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "cork";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f923;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "uncork";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f924;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "setDefaultEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableBuffer";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f925;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableHighWaterMark";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f926;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    FUNC %r0 @@f927;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_write";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_writev";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f928;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "writableLength";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f929;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 @x;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "destroyed";
    PUSH %r0;
    NEW_OBJ %r0;
    MOV %r1 1;
    NEG %r1;
    SET_KEY %r0 'enumerable' %r1;
    FUNC %r1 @@f930;
    SET_KEY %r0 'get' %r1;
    FUNC %r1 @@f931;
    SET_KEY %r0 'set' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    MOV %r1 f;
    MOV %r2 "destroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 f;
    MOV %r2 "undestroy";
    MOV_PROP %r0 %r1 %r2;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_undestroy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f932;
    MOV %r3 @x;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
}
func @@f474(.r) {
    VAR n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    VAR b;
    CLS @g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC @i @@f933;
    FUNC @p @@f934;
    FUNC @d @@f935;
    CLS @r;
    MOV @r .r;
    MOV %r0 "./end-of-stream";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 "lastResolve";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @s $RET;
    MOV %r0 "lastReject";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @a $RET;
    MOV %r0 "error";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @u $RET;
    MOV %r0 "ended";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @c $RET;
    MOV %r0 "lastPromise";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @l $RET;
    MOV %r0 "handlePromise";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @f $RET;
    MOV %r0 "stream";
    PUSH %r0;
    CALL_CTX 'Symbol' 1 false;
    MOV @h $RET;
    FUNC %r0 @@f936;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "getPrototypeOf";
    CALL_VAR %r0 %r1 1 false;
    MOV b $RET;
    NEW_OBJ %r2;
    FUNC %r3 @@f937;
    SET_KEY %r2 'stream' %r3;
    FUNC %r3 @@f938;
    SET_KEY %r2 'next' %r3;
    MOV n %r2;
    MOV %r1 %r2;
    PUSH %r1;
    MOV_CTX %r2 "Symbol";
    MOV %r3 "asyncIterator";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    FUNC %r1 @@f939;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 "return";
    PUSH %r1;
    FUNC %r1 @@f940;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r0 n;
    PUSH %r0;
    MOV %r0 b;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "setPrototypeOf";
    CALL_VAR %r0 %r1 2 false;
    MOV @g $RET;
    FUNC %r0 @@f941;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f475(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 .e;
    IN %r1 %r2;
    JF %r1 _l1862_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 .r;
    SET_KEY %r2 'value' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'enumerable' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'configurable' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'writable' %r3;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "defineProperty";
    CALL_VAR %r2 %r3 3 false;
    JMP _l1861_;
LABEL _l1862_:
    MOV %r2 .r;
    MOV %r3 .e;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
LABEL _l1861_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f476() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC e @@f942;
    MOV %r0 e;
    MOV %r1 "prototype";
    MOV_PROP t %r0 %r1;
    FUNC %r1 @@f943;
    MOV %r2 t;
    MOV %r3 "push";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f944;
    MOV %r2 t;
    MOV %r3 "unshift";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f945;
    MOV %r2 t;
    MOV %r3 "shift";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f946;
    MOV %r2 t;
    MOV %r3 "clear";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f947;
    MOV %r2 t;
    MOV %r3 "join";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f948;
    MOV %r2 t;
    MOV %r3 "concat";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f949;
    MOV %r2 t;
    MOV %r3 "consume";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f950;
    MOV %r2 t;
    MOV %r3 "first";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f951;
    MOV %r2 t;
    MOV %r3 "_getString";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f952;
    MOV %r2 t;
    MOV %r3 "_getBuffer";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f953;
    MOV %r2 t;
    MOV %r3 @s;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f477(.e) {
    CLS @r;
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    FUNC @r @@f954;
    FUNC @n @@f955;
    FUNC @i @@f956;
    CLS @e;
    MOV @e .e;
    NEW_OBJ %r0;
    FUNC %r1 @@f957;
    SET_KEY %r0 'destroy' %r1;
    FUNC %r1 @@f958;
    SET_KEY %r0 'undestroy' %r1;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f478() {
}
func @@f479(.t, .r, .o) {
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @t;
    MOV @t .t;
    CLS @o;
    MOV @o .o;
    MOV %r0 "function";
    MOV %r1 .r;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l1864_;
    MOV %r2 @t;
    PUSH %r2;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    CALL_REG @e 3 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1863_;
LABEL _l1864_:
LABEL _l1863_:
    MOV %r0 .r;
    JIF %r0 _l1865_;
    NEW_OBJ %r2;
    MOV .r %r2;
    MOV %r1 %r2;
LABEL _l1865_:
    MOV %r2 @o;
    MOV %r1 %r2;
    JIF %r2 _l1866_;
    MOV %r3 @i;
    LG_OR %r1 %r3;
LABEL _l1866_:
    PUSH %r1;
    FUNC %r1 @@f959;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    MOV @o %r0;
    MOV %r1 .r;
    MOV %r2 "readable";
    MOV_PROP %r0 %r1 %r2;
    MOV @s %r0;
    JIF %r0 _l1867_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "readable";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1868_;
    MOV %r4 @t;
    MOV %r5 "readable";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1868_:
    LG_OR @s %r1;
LABEL _l1867_:
    MOV %r1 .r;
    MOV %r2 "writable";
    MOV_PROP %r0 %r1 %r2;
    MOV @a %r0;
    JIF %r0 _l1869_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "writable";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1870_;
    MOV %r4 @t;
    MOV %r5 "writable";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1870_:
    LG_OR @a %r1;
LABEL _l1869_:
    FUNC @u @@f960;
    MOV %r1 @t;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    MOV @c %r0;
    JF %r0 _l1871_;
    MOV %r4 @t;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "finished";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @c %r1;
LABEL _l1871_:
    FUNC @l @@f961;
    MOV %r1 @t;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    MOV @f %r0;
    JF %r0 _l1872_;
    MOV %r4 @t;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "endEmitted";
    MOV_PROP %r1 %r2 %r3;
    LG_AND @f %r1;
LABEL _l1872_:
    FUNC @h @@f962;
    FUNC @p @@f963;
    FUNC @d @@f964;
    FUNC @b @@f965;
    MOV %r2 @t;
    PUSH %r2;
    FUNC %r2 @@f966;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    JF %r1 _l1874_;
    MOV %r2 "complete";
    PUSH %r2;
    MOV %r2 @l;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "abort";
    PUSH %r2;
    MOV %r2 @d;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    MOV %r3 @t;
    MOV %r4 "req";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l1876_;
    CALL_REG @b 0 false;
    JMP _l1875_;
LABEL _l1876_:
    MOV %r3 "request";
    PUSH %r3;
    MOV %r3 @b;
    PUSH %r3;
    MOV %r3 @t;
    MOV %r4 "on";
    CALL_VAR %r3 %r4 2 false;
LABEL _l1875_:
    JMP _l1873_;
LABEL _l1874_:
    MOV %r3 @a;
    MOV %r2 %r3;
    JF %r3 _l1878_;
    MOV %r5 @t;
    MOV %r6 "_writableState";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l1878_:
    JF %r2 _l1877_;
    MOV %r4 "end";
    PUSH %r4;
    MOV %r4 @u;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "on";
    CALL_VAR %r4 %r5 2 false;
    MOV %r4 "close";
    PUSH %r4;
    MOV %r4 @u;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "on";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
LABEL _l1877_:
LABEL _l1873_:
    MOV %r1 "end";
    PUSH %r1;
    MOV %r1 @h;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "finish";
    PUSH %r1;
    MOV %r1 @l;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV %r3 .r;
    MOV %r4 "error";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l1879_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r3 @p;
    PUSH %r3;
    MOV %r3 @t;
    MOV %r4 "on";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l1879_:
    MOV %r1 "close";
    PUSH %r1;
    MOV %r1 @d;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    FUNC %r0 @@f967;
    MOV $RET %r0;
    RET;
}
func @@f480(.e, .t, .r, .i) {
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .i;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    FUNC %r0 @@f968;
    CALL_REG %r0 3 false;
    MOV o $RET;
    MOV %r0 null;
    MOV %r1 o;
    WNE %r0 %r1;
    JF %r0 _l1881_;
    MOV %r4 o;
    PUSH %r4;
    CALL_CTX 'isFinite' 1 false;
    MOV %r3 $RET;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l1885_;
    MOV %r6 o;
    PUSH %r6;
    MOV_CTX %r6 "Math";
    MOV %r7 "floor";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 o;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l1885_:
    MOV %r1 %r2;
    JIF %r2 _l1884_;
    MOV %r3 o;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l1884_:
    JF %r1 _l1883_;
    MOV %r4 .i;
    JF %r4 _l1887_;
    MOV %r3 .r;
    JMP _l1886_;
LABEL _l1887_:
    MOV %r3 "highWaterMark";
LABEL _l1886_:
    PUSH %r3;
    MOV %r3 o;
    PUSH %r3;
    CALL_REG @n 2 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l1882_;
LABEL _l1883_:
LABEL _l1882_:
    MOV %r2 o;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "floor";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1880_;
LABEL _l1881_:
LABEL _l1880_:
    MOV %r2 .e;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1889_;
    MOV %r0 16;
    JMP _l1888_;
LABEL _l1889_:
    MOV %r0 16384;
LABEL _l1888_:
    MOV $RET %r0;
    RET;
}
func @@f481(.r, .n) {
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    MOV %r2 "readable-stream";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Transform";
    MOV_PROP @i %r0 %r1;
    MOV %r0 "duplexify";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @o $RET;
    MOV %r0 "ws";
    PUSH %r0;
    CALL_REG @e 1 false;
    MOV @s $RET;
    MOV %r2 "safe-buffer";
    PUSH %r2;
    CALL_REG @e 1 false;
    MOV %r0 $RET;
    MOV %r1 "Buffer";
    MOV_PROP @a %r0 %r1;
    FUNC %r0 @@f969;
    MOV %r1 @t;
    MOV %r2 "exports";
    SET_KEY %r1 %r2 %r0;
}
func @@f482(.t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC @n @@f971;
    CLS @t;
    MOV @t .t;
    MOV %r1 @t;
    MOV %r0 %r1;
    JF %r1 _l1892_;
    MOV %r2 .r;
    LG_AND %r0 %r2;
LABEL _l1892_:
    JF %r0 _l1891_;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r3 @t;
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1890_;
LABEL _l1891_:
LABEL _l1890_:
    MOV %r0 "function";
    MOV %r1 @t;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l1894_;
    MOV %r2 "need wrapper function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l1893_;
LABEL _l1894_:
LABEL _l1893_:
    FUNC %r0 @@f970;
    PUSH %r0;
    MOV %r2 @t;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "keys";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 "forEach";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @n;
    MOV $RET %r0;
    RET;
}
func @@f483() {
    VAR e;
    VAR t;
    VAR r;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    NEW_OBJ e;
    MOV t 0;
LABEL _l1895_:
    MOV %r0 t;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l1896_;
LABEL _l1898_:
    MOV_ARGS %r1;
    MOV %r2 t;
    MOV_PROP r %r1 %r2;
    MOV %r1 r;
    FORIN i %r1 _l1899_ _l1900_;
LABEL _l1899_:
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 i;
    PUSH %r3;
    MOV %r3 @n;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    JF %r2 _l1901_;
    MOV %r5 r;
    MOV %r6 i;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 e;
    MOV %r6 i;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l1901_:
    FORIN_END;
LABEL _l1900_:
LABEL _l1897_:
    MOV %r1 t;
    ADD %r1 1;
    MOV t %r1;
    JMP _l1895_;
LABEL _l1896_:
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f484(.t, .r, .n) {
    CLS @i;
    CLS @o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC @i @@f972;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    MOV %r0 "function";
    MOV_CTX %r1 "require";
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV @o %r0;
    JF %r0 _l1905_;
    MOV_CTX %r1 "require";
    LG_AND @o %r1;
LABEL _l1905_:
    MOV s 0;
LABEL _l1902_:
    MOV %r0 s;
    MOV %r2 @n;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l1903_;
LABEL _l1906_:
    MOV %r2 @n;
    MOV %r3 s;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @i 1 false;
LABEL _l1904_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l1902_;
LABEL _l1903_:
    MOV %r0 @i;
    MOV $RET %r0;
    RET;
}
func @@f485(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 1 false;
}
func @@f486(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "packetsend";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r3 .e;
    MOV %r4 "stream";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r3 .e;
    MOV %r4 "options";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "writeToStream";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l1909_;
    MOV %r2 .r;
    LG_AND %r0 %r2;
LABEL _l1909_:
    JF %r0 _l1908_;
    MOV %r1 "drain";
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r3 .e;
    MOV %r4 "stream";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
    JMP _l1907_;
LABEL _l1908_:
    MOV %r1 .r;
    JF %r1 _l1910_;
    CALL_REG .r 0 false;
    MOV %r2 $RET;
LABEL _l1910_:
LABEL _l1907_:
}
func @@f487(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    MOV %r0 @t;
    PUSH %r0;
    FUNC %r0 @@f973;
    PUSH %r0;
    MOV %r2 @e;
    MOV %r3 "outgoingStore";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "put";
    CALL_VAR %r0 %r1 2 false;
}
func @@f488() {
}
func @@f489(.e, .t) {
    VAR r;
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    CLS @t;
    MOV @t .t;
    MOV_THIS @n;
    MOV_THIS %r0;
    MOV %r1 @y;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l1912_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @y 2 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l1911_;
LABEL _l1912_:
LABEL _l1911_:
    MOV %r2 @t;
    MOV %r1 %r2;
    JIF %r2 _l1915_;
    NEW_OBJ %r3;
    LG_OR %r1 %r3;
LABEL _l1915_:
    MOV_THIS %r2;
    MOV %r3 "options";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 @p;
    FORIN r %r0 _l1913_ _l1914_;
LABEL _l1913_:
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 r;
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1917_;
    MOV %r3 @p;
    MOV %r4 r;
    MOV_PROP %r2 %r3 %r4;
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 r;
    SET_KEY %r3 %r4 %r2;
    JMP _l1916_;
LABEL _l1917_:
    MOV %r3 @t;
    MOV %r4 r;
    MOV_PROP %r2 %r3 %r4;
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 r;
    SET_KEY %r3 %r4 %r2;
LABEL _l1916_:
    FORIN_END;
LABEL _l1914_:
    MOV %r1 "string";
    MOV %r3 @t;
    MOV %r4 "clientId";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1919_;
    MOV %r2 @t;
    MOV %r3 "clientId";
    MOV_PROP %r0 %r2 %r3;
    JMP _l1918_;
LABEL _l1919_:
    MOV %r0 "mqttjs_";
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 8;
    PUSH %r3;
    MOV %r5 16;
    PUSH %r5;
    MOV_CTX %r7 "Math";
    MOV %r8 "random";
    CALL_VAR %r7 %r8 0 false;
    MOV %r5 $RET;
    MOV %r6 "toString";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
LABEL _l1918_:
    MOV_THIS %r3;
    MOV %r4 "options";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "clientId";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 5;
    MOV %r4 @t;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l1922_;
    MOV %r4 @t;
    MOV %r5 "customHandleAcks";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1922_:
    JF %r1 _l1921_;
    MOV %r2 @t;
    MOV %r3 "customHandleAcks";
    MOV_PROP %r0 %r2 %r3;
    JMP _l1920_;
LABEL _l1921_:
    FUNC %r0 @@f974;
LABEL _l1920_:
    MOV_THIS %r3;
    MOV %r4 "options";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "customHandleAcks";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    MOV_THIS %r1;
    MOV %r2 "streamBuilder";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 @t;
    MOV %r3 "outgoingStore";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l1923_;
    CALL_REG @o 0 true;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1923_:
    MOV_THIS %r1;
    MOV %r2 "outgoingStore";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 @t;
    MOV %r3 "incomingStore";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l1924_;
    CALL_REG @o 0 true;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l1924_:
    MOV_THIS %r1;
    MOV %r2 "incomingStore";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 0;
    VOID %r1;
    MOV %r3 @t;
    MOV %r4 "queueQoSZero";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l1925_;
    MOV %r3 @t;
    MOV %r4 "queueQoSZero";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l1925_:
    MOV_THIS %r1;
    MOV %r2 "queueQoSZero";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV_THIS %r1;
    MOV %r2 "_resubscribeTopics";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV_THIS %r1;
    MOV %r2 "messageIdToTopic";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "pingTimer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "connected";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "disconnecting";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "queue";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "connackTimer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "reconnectTimer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_storeProcessing";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV_THIS %r1;
    MOV %r2 "_packetIdsDuringStoreProcessing";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 1;
    PUSH %r1;
    MOV %r2 65535;
    MOV_CTX %r4 "Math";
    MOV %r5 "random";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MUL %r2 %r3;
    PUSH %r2;
    MOV_CTX %r2 "Math";
    MOV %r3 "floor";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "max";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "nextId";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV_THIS %r1;
    MOV %r2 "outgoing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_firstConnection";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "close";
    PUSH %r0;
    FUNC %r0 @@f975;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "connect";
    PUSH %r0;
    FUNC %r0 @@f976;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "close";
    PUSH %r0;
    FUNC %r0 @@f977;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV_THIS %r1;
    MOV %r2 "_setupReconnect";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r2 @i;
    MOV %r3 "EventEmitter";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV_THIS %r0;
    MOV %r1 "_setupStream";
    CALL_VAR %r0 %r1 0 false;
}
func @@f490() {
    VAR e;
    CLS @t;
    VAR n;
    CLS @i;
    CLS @o;
    CLS @u;
    CLS @c;
    CLS @l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    FUNC @c @@f978;
    FUNC @l @@f979;
    MOV_THIS @t;
    CALL_REG @a 0 true;
    MOV n $RET;
    MOV_THIS %r1;
    MOV %r2 "options";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "parser";
    CALL_VAR %r0 %r1 1 false;
    MOV @i $RET;
    MOV @o null;
    NEW_ARR @u;
    MOV_THIS %r1;
    MOV %r2 "_clearReconnect";
    CALL_VAR %r1 %r2 0 false;
    MOV_THIS %r2;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "streamBuilder";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV_THIS %r2;
    MOV %r3 "stream";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "packet";
    PUSH %r1;
    FUNC %r1 @@f980;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    FUNC %r1 @@f981;
    MOV %r2 n;
    MOV %r3 "_write";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "stream";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "pipe";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 @_;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "stream";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "close";
    PUSH %r1;
    FUNC %r1 @@f982;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "stream";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "connect";
    MOV_THIS %r6;
    MOV %r7 "options";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "create";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV e %r4;
    MOV %r2 %r4;
    MOV %r3 "cmd";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 e;
    PUSH %r1;
    CALL_REG @b 2 false;
    MOV %r1 "error";
    PUSH %r1;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 "error";
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "emit";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV_THIS %r3;
    MOV %r4 "options";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "properties";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1927_;
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "properties";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "authenticationMethod";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l1930_;
    MOV_THIS %r8;
    MOV %r9 "options";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "authenticationData";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1930_:
    JF %r1 _l1929_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Packet has no Authentication Method";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV_THIS %r2;
    MOV $RET %r2;
    RET;
    JMP _l1928_;
LABEL _l1929_:
LABEL _l1928_:
    MOV_THIS %r8;
    MOV %r9 "options";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "authenticationMethod";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l1934_;
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "authPacket";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l1934_:
    MOV %r1 %r2;
    JF %r2 _l1933_;
    MOV %r3 "object";
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "authPacket";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l1933_:
    JF %r1 _l1932_;
    MOV_THIS %r2;
    PUSH %r2;
    NEW_OBJ %r3;
    MOV %r4 "auth";
    SET_KEY %r3 'cmd' %r4;
    MOV %r4 0;
    SET_KEY %r3 'reasonCode' %r4;
    PUSH %r3;
    MOV_THIS %r6;
    MOV %r7 "options";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "authPacket";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @f 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @b 2 false;
    JMP _l1931_;
LABEL _l1932_:
LABEL _l1931_:
    JMP _l1926_;
LABEL _l1927_:
LABEL _l1926_:
    MOV %r0 1000;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "stream";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "setMaxListeners";
    CALL_VAR %r0 %r1 1 false;
    MOV_THIS %r1;
    MOV %r2 "connackTimer";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'clearTimeout' 1 false;
    FUNC %r1 @@f983;
    PUSH %r1;
    MOV_THIS %r4;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "connectTimeout";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'setTimeout' 2 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "connackTimer";
    SET_KEY %r1 %r2 %r0;
}
func @@f491(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    MOV_THIS %r0;
    MOV %r1 "options";
    MOV_PROP r %r0 %r1;
    MOV %r3 5;
    MOV %r5 r;
    MOV %r6 "protocolVersion";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l1939_;
    MOV %r5 r;
    MOV %r6 "properties";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l1939_:
    MOV %r1 %r2;
    JF %r2 _l1938_;
    MOV %r6 r;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "maximumPacketSize";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l1938_:
    MOV %r0 %r1;
    JF %r1 _l1937_;
    MOV %r6 r;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "maximumPacketSize";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1937_:
    JF %r0 _l1936_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "exceeding packets size ";
    MOV %r5 .e;
    MOV %r6 "cmd";
    MOV_PROP %r4 %r5 %r6;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    NEW_OBJ %r2;
    MOV %r3 149;
    SET_KEY %r2 'reasonCode' %r3;
    NEW_OBJ %r3;
    MOV %r4 "Maximum packet size was exceeded";
    SET_KEY %r3 'reasonString' %r4;
    SET_KEY %r2 'properties' %r3;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "end";
    CALL_VAR %r2 %r3 1 false;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1935_;
LABEL _l1936_:
LABEL _l1935_:
    BLOCK 1;
    MOV %r1 "packetreceive";
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 .e;
    MOV %r2 "cmd";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 "publish";
    JE %r0 %r1 _l1941_;
    JMP _l1942_;
LABEL _l1941_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_handlePublish";
    CALL_VAR %r2 %r3 2 false;
    CLR_BLOCK 1;
    JMP _l1940_;
    JMP _l1943_;
LABEL _l1942_:
    MOV %r2 "puback";
    JE %r0 %r2 _l1943_;
    JMP _l1944_;
LABEL _l1944_:
    MOV %r3 "pubrec";
    JE %r0 %r3 _l1943_;
    JMP _l1945_;
LABEL _l1945_:
    MOV %r4 "pubcomp";
    JE %r0 %r4 _l1943_;
    JMP _l1946_;
LABEL _l1946_:
    MOV %r5 "suback";
    JE %r0 %r5 _l1943_;
    JMP _l1947_;
LABEL _l1947_:
    MOV %r6 "unsuback";
    JE %r0 %r6 _l1943_;
    JMP _l1948_;
LABEL _l1943_:
    MOV %r7 .e;
    PUSH %r7;
    MOV_THIS %r7;
    MOV %r8 "_handleAck";
    CALL_VAR %r7 %r8 1 false;
    CALL_REG .t 0 false;
    CLR_BLOCK 1;
    JMP _l1940_;
    JMP _l1949_;
LABEL _l1948_:
    MOV %r7 "pubrel";
    JE %r0 %r7 _l1949_;
    JMP _l1950_;
LABEL _l1949_:
    MOV %r8 .e;
    PUSH %r8;
    MOV %r8 .t;
    PUSH %r8;
    MOV_THIS %r8;
    MOV %r9 "_handlePubrel";
    CALL_VAR %r8 %r9 2 false;
    CLR_BLOCK 1;
    JMP _l1940_;
    JMP _l1951_;
LABEL _l1950_:
    MOV %r8 "connack";
    JE %r0 %r8 _l1951_;
    JMP _l1952_;
LABEL _l1951_:
    MOV %r9 .e;
    PUSH %r9;
    MOV_THIS %r9;
    MOV %r10 "_handleConnack";
    CALL_VAR %r9 %r10 1 false;
    CALL_REG .t 0 false;
    CLR_BLOCK 1;
    JMP _l1940_;
    JMP _l1953_;
LABEL _l1952_:
    MOV %r9 "pingresp";
    JE %r0 %r9 _l1953_;
    JMP _l1954_;
LABEL _l1953_:
    MOV %r10 .e;
    PUSH %r10;
    MOV_THIS %r10;
    MOV %r11 "_handlePingresp";
    CALL_VAR %r10 %r11 1 false;
    CALL_REG .t 0 false;
    CLR_BLOCK 1;
    JMP _l1940_;
    JMP _l1955_;
LABEL _l1954_:
    MOV %r10 "disconnect";
    JE %r0 %r10 _l1955_;
    JMP _l1956_;
LABEL _l1955_:
    MOV %r11 .e;
    PUSH %r11;
    MOV_THIS %r11;
    MOV %r12 "_handleDisconnect";
    CALL_VAR %r11 %r12 1 false;
    CALL_REG .t 0 false;
    JMP _l1957_;
LABEL _l1956_:
LABEL _l1957_:
LABEL _l1940_:
    END_BLOCK 1;
}
func @@f492(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r2;
    MOV %r3 "disconnecting";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l1958_;
    MOV %r3 .e;
    JF %r3 _l1960_;
    MOV %r5 "client disconnecting";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG .e 1 false;
    MOV %r2 $RET;
    JMP _l1959_;
LABEL _l1960_:
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "client disconnecting";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
LABEL _l1959_:
LABEL _l1958_:
    MOV_THIS %r1;
    MOV %r2 "disconnecting";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f493(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    MOV_THIS %r0;
    MOV %r1 "options";
    MOV_PROP o %r0 %r1;
    MOV %r0 "function";
    MOV %r1 .r;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l1961_;
    MOV %r2 .r;
    MOV .n %r2;
    MOV %r2 null;
    MOV .r %r2;
    MOV %r1 %r2;
LABEL _l1961_:
    NEW_OBJ %r2;
    MOV %r3 0;
    SET_KEY %r2 'qos' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'retain' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'dup' %r3;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    CALL_REG @f 2 false;
    MOV %r1 $RET;
    MOV .r %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_checkDisconnecting";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l1963_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1962_;
LABEL _l1963_:
LABEL _l1962_:
    BLOCK 1;
    NEW_OBJ %r1;
    MOV %r2 "publish";
    SET_KEY %r1 'cmd' %r2;
    MOV %r2 .e;
    SET_KEY %r1 'topic' %r2;
    MOV %r2 .t;
    SET_KEY %r1 'payload' %r2;
    MOV %r3 .r;
    MOV %r4 "qos";
    MOV_PROP %r2 %r3 %r4;
    SET_KEY %r1 'qos' %r2;
    MOV %r3 .r;
    MOV %r4 "retain";
    MOV_PROP %r2 %r3 %r4;
    SET_KEY %r1 'retain' %r2;
    MOV_THIS %r3;
    MOV %r4 "_nextId";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    SET_KEY %r1 'messageId' %r2;
    MOV %r3 .r;
    MOV %r4 "dup";
    MOV_PROP %r2 %r3 %r4;
    SET_KEY %r1 'dup' %r2;
    MOV i %r1;
    MOV %r1 5;
    MOV %r3 o;
    MOV %r4 "protocolVersion";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l1964_;
    MOV %r4 .r;
    MOV %r5 "properties";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 i;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r7 o;
    MOV %r8 "properties";
    MOV_PROP %r6 %r7 %r8;
    NEG %r6;
    MOV %r5 %r6;
    JF %r6 _l1968_;
    MOV %r8 i;
    MOV %r9 "properties";
    MOV_PROP %r7 %r8 %r9;
    LG_AND %r5 %r7;
LABEL _l1968_:
    MOV %r4 %r5;
    JF %r5 _l1967_;
    MOV %r9 i;
    MOV %r10 "properties";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "topicAlias";
    MOV_PROP %r6 %r7 %r8;
    LG_AND %r4 %r6;
LABEL _l1967_:
    MOV %r3 %r4;
    JIF %r4 _l1966_;
    MOV %r8 .r;
    MOV %r9 "properties";
    MOV_PROP %r7 %r8 %r9;
    MOV %r6 %r7;
    JF %r7 _l1970_;
    MOV %r9 o;
    MOV %r10 "properties";
    MOV_PROP %r8 %r9 %r10;
    LG_AND %r6 %r8;
LABEL _l1970_:
    MOV %r5 %r6;
    JF %r6 _l1969_;
    MOV %r13 .r;
    MOV %r14 "properties";
    MOV_PROP %r11 %r13 %r14;
    MOV %r12 "topicAlias";
    MOV_PROP %r10 %r11 %r12;
    MOV %r9 %r10;
    JF %r10 _l1973_;
    MOV %r14 o;
    MOV %r15 "properties";
    MOV_PROP %r12 %r14 %r15;
    MOV %r13 "topicAliasMaximum";
    MOV_PROP %r11 %r12 %r13;
    LG_AND %r9 %r11;
LABEL _l1973_:
    MOV %r8 %r9;
    JF %r9 _l1972_;
    MOV %r14 .r;
    MOV %r15 "properties";
    MOV_PROP %r12 %r14 %r15;
    MOV %r13 "topicAlias";
    MOV_PROP %r10 %r12 %r13;
    MOV %r14 o;
    MOV %r15 "properties";
    MOV_PROP %r12 %r14 %r15;
    MOV %r13 "topicAliasMaximum";
    MOV_PROP %r11 %r12 %r13;
    GT %r10 %r11;
    LG_AND %r8 %r10;
LABEL _l1972_:
    MOV %r7 %r8;
    JIF %r8 _l1971_;
    MOV %r13 o;
    MOV %r14 "properties";
    MOV_PROP %r11 %r13 %r14;
    MOV %r12 "topicAliasMaximum";
    MOV_PROP %r10 %r11 %r12;
    NEG %r10;
    MOV %r9 %r10;
    JF %r10 _l1974_;
    MOV %r14 .r;
    MOV %r15 "properties";
    MOV_PROP %r12 %r14 %r15;
    MOV %r13 "topicAlias";
    MOV_PROP %r11 %r12 %r13;
    LG_AND %r9 %r11;
LABEL _l1974_:
    LG_OR %r7 %r9;
LABEL _l1971_:
    LG_AND %r5 %r7;
LABEL _l1969_:
    LG_OR %r3 %r5;
LABEL _l1966_:
    MOV %r2 %r3;
    JF %r3 _l1965_;
    MOV %r7 i;
    MOV %r8 "properties";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "topicAlias";
    DEL %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l1965_:
LABEL _l1964_:
    MOV %r1 .r;
    MOV %r2 "qos";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 1;
    JE %r0 %r1 _l1976_;
    JMP _l1977_;
LABEL _l1977_:
    MOV %r2 2;
    JE %r0 %r2 _l1976_;
    JMP _l1978_;
LABEL _l1976_:
    MOV %r4 .n;
    MOV %r3 %r4;
    JIF %r4 _l1979_;
    MOV %r5 @_;
    LG_OR %r3 %r5;
LABEL _l1979_:
    MOV_THIS %r6;
    MOV %r7 "outgoing";
    MOV_PROP %r4 %r6 %r7;
    MOV %r7 i;
    MOV %r6 "messageId";
    MOV_PROP %r5 %r7 %r6;
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r4;
    MOV %r5 "_storeProcessing";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l1981_;
    MOV %r4 1;
    NEG %r4;
    MOV_THIS %r7;
    MOV %r8 "_packetIdsDuringStoreProcessing";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 i;
    MOV %r7 "messageId";
    MOV_PROP %r6 %r8 %r7;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 i;
    PUSH %r4;
    MOV %r4 0;
    VOID %r4;
    PUSH %r4;
    MOV %r5 .r;
    MOV %r6 "cbStorePut";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_storePacket";
    CALL_VAR %r4 %r5 3 false;
    JMP _l1980_;
LABEL _l1981_:
    MOV %r4 i;
    PUSH %r4;
    MOV %r4 0;
    VOID %r4;
    PUSH %r4;
    MOV %r5 .r;
    MOV %r6 "cbStorePut";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_sendPacket";
    CALL_VAR %r4 %r5 3 false;
LABEL _l1980_:
    CLR_BLOCK 1;
    JMP _l1975_;
    JMP _l1982_;
LABEL _l1978_:
LABEL _l1982_:
    MOV_THIS %r4;
    MOV %r5 "_storeProcessing";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l1985_;
    MOV %r4 i;
    PUSH %r4;
    MOV %r4 .n;
    PUSH %r4;
    MOV %r5 .r;
    MOV %r6 "cbStorePut";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_storePacket";
    CALL_VAR %r4 %r5 3 false;
    JMP _l1984_;
LABEL _l1985_:
    MOV %r4 i;
    PUSH %r4;
    MOV %r4 .n;
    PUSH %r4;
    MOV %r5 .r;
    MOV %r6 "cbStorePut";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_sendPacket";
    CALL_VAR %r4 %r5 3 false;
LABEL _l1984_:
    JMP _l1986_;
LABEL _l1983_:
LABEL _l1986_:
LABEL _l1975_:
    END_BLOCK 1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f494() {
    VAR e;
    VAR t;
    VAR r;
    VAR n;
    CLS @i;
    CLS @o;
    CLS @s;
    CLS @a;
    CLS @u;
    CLS @c;
    CLS @p;
    VAR d;
    CLS @b;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_ARGS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV t $RET;
    MOV r 0;
LABEL _l1987_:
    MOV %r0 r;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l1988_;
LABEL _l1990_:
    MOV_ARGS %r2;
    MOV %r3 r;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 t;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
LABEL _l1989_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l1987_;
LABEL _l1988_:
    NEW_ARR @i;
    MOV %r0 t;
    MOV %r1 "shift";
    CALL_VAR %r0 %r1 0 false;
    MOV @o $RET;
    MOV %r0 @o;
    MOV %r1 "resubscribe";
    MOV_PROP @s %r0 %r1;
    MOV %r1 t;
    MOV %r2 "pop";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV @a %r0;
    JIF %r0 _l1991_;
    MOV %r1 @_;
    LG_OR @a %r1;
LABEL _l1991_:
    MOV %r0 t;
    MOV %r1 "pop";
    CALL_VAR %r0 %r1 0 false;
    MOV @u $RET;
    MOV_THIS @c;
    MOV_THIS %r2;
    MOV %r3 "options";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "protocolVersion";
    MOV_PROP @p %r0 %r1;
    MOV %r1 @o;
    MOV %r2 "resubscribe";
    DEL %r1 %r2;
    MOV %r1 "string";
    MOV %r2 @o;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l1994_;
    NEW_ARR %r3;
    MOV %r4 @o;
    SET_KEY %r3 0 %r4;
    MOV @o %r3;
    MOV %r2 %r3;
LABEL _l1994_:
    MOV %r1 "function";
    MOV %r2 @a;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l1995_;
    MOV %r3 @a;
    MOV @u %r3;
    MOV %r3 @_;
    MOV @a %r3;
    MOV %r2 %r3;
LABEL _l1995_:
    MOV %r0 null;
    MOV %r3 @o;
    PUSH %r3;
    MOV %r3 @l;
    MOV %r4 "validateTopics";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV n %r2;
    MOV %r1 %r2;
    NE %r0 %r1;
    JF %r0 _l1993_;
    MOV %r2 @a;
    PUSH %r2;
    MOV %r3 "Invalid topic ";
    MOV %r4 n;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @h 2 false;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1992_;
LABEL _l1993_:
LABEL _l1992_:
    MOV %r1 @a;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_checkDisconnecting";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l1997_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1996_;
LABEL _l1997_:
LABEL _l1996_:
    NEW_OBJ d;
    MOV %r0 0;
    SET_KEY d 'qos' %r0;
    MOV %r1 5;
    MOV %r2 @p;
    EQ %r1 %r2;
    JF %r1 _l2000_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 d;
    MOV %r5 "nl";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 d;
    MOV %r5 "rap";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    MOV %r4 d;
    MOV %r5 "rh";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2000_:
    MOV %r2 d;
    PUSH %r2;
    MOV %r2 @u;
    PUSH %r2;
    CALL_REG @f 2 false;
    MOV %r1 $RET;
    MOV @u %r1;
    MOV %r2 @o;
    PUSH %r2;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l2002_;
    FUNC %r2 @@f984;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "forEach";
    CALL_VAR %r2 %r3 1 false;
    JMP _l2001_;
LABEL _l2002_:
    FUNC %r2 @@f985;
    PUSH %r2;
    MOV %r4 @o;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "keys";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 "forEach";
    CALL_VAR %r2 %r3 1 false;
LABEL _l2001_:
    NEW_OBJ %r1;
    MOV %r2 "subscribe";
    SET_KEY %r1 'cmd' %r2;
    MOV %r2 @i;
    SET_KEY %r1 'subscriptions' %r2;
    MOV %r2 1;
    SET_KEY %r1 'qos' %r2;
    MOV %r2 1;
    NEG %r2;
    SET_KEY %r1 'retain' %r2;
    MOV %r2 1;
    NEG %r2;
    SET_KEY %r1 'dup' %r2;
    MOV_THIS %r3;
    MOV %r4 "_nextId";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    SET_KEY %r1 'messageId' %r2;
    MOV e %r1;
    MOV %r2 @u;
    MOV %r3 "properties";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2003_;
    MOV %r4 @u;
    MOV %r5 "properties";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 e;
    MOV %r5 "properties";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2003_:
    MOV %r1 @i;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l1999_;
    MOV_THIS %r4;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "resubscribe";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2005_;
    NEW_ARR @b;
    FUNC %r2 @@f986;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "forEach";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 @b;
    MOV %r5 @c;
    MOV %r6 "messageIdToTopic";
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 e;
    MOV %r5 "messageId";
    MOV_PROP %r4 %r6 %r5;
    SET_KEY %r3 %r4 %r2;
    JMP _l2004_;
LABEL _l2005_:
LABEL _l2004_:
    FUNC %r2 @@f987;
    MOV_THIS %r5;
    MOV %r6 "outgoing";
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 e;
    MOV %r5 "messageId";
    MOV_PROP %r4 %r6 %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_sendPacket";
    CALL_VAR %r2 %r3 1 false;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l1998_;
LABEL _l1999_:
LABEL _l1998_:
    MOV %r0 null;
    PUSH %r0;
    NEW_ARR %r0;
    PUSH %r0;
    CALL_REG @a 2 false;
}
func @@f495() {
    VAR e;
    CLS @t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    NEW_OBJ e;
    MOV %r0 "unsubscribe";
    SET_KEY e 'cmd' %r0;
    MOV %r0 1;
    SET_KEY e 'qos' %r0;
    MOV_THIS %r1;
    MOV %r2 "_nextId";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    SET_KEY e 'messageId' %r0;
    MOV_THIS @t;
    MOV_ARGS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV r $RET;
    MOV n 0;
LABEL _l2006_:
    MOV %r0 n;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l2007_;
LABEL _l2009_:
    MOV_ARGS %r2;
    MOV %r3 n;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 n;
    SET_KEY %r2 %r3 %r1;
LABEL _l2008_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l2006_;
LABEL _l2007_:
    MOV %r0 r;
    MOV %r1 "shift";
    CALL_VAR %r0 %r1 0 false;
    MOV i $RET;
    MOV %r1 r;
    MOV %r2 "pop";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV o %r0;
    JIF %r0 _l2010_;
    MOV %r1 @_;
    LG_OR o %r1;
LABEL _l2010_:
    MOV %r0 r;
    MOV %r1 "pop";
    CALL_VAR %r0 %r1 0 false;
    MOV s $RET;
    MOV %r1 "string";
    MOV %r2 i;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2011_;
    NEW_ARR %r3;
    MOV %r4 i;
    SET_KEY %r3 0 %r4;
    MOV i %r3;
    MOV %r2 %r3;
LABEL _l2011_:
    MOV %r1 "function";
    MOV %r2 o;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l2012_;
    MOV %r3 o;
    MOV s %r3;
    MOV %r3 @_;
    MOV o %r3;
    MOV %r2 %r3;
LABEL _l2012_:
    MOV %r2 o;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_checkDisconnecting";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l2014_;
    MOV_THIS %r0;
    JMP _l2013_;
LABEL _l2014_:
    MOV %r2 "string";
    MOV %r3 i;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l2016_;
    NEW_ARR %r3;
    MOV %r4 i;
    SET_KEY %r3 0 %r4;
    MOV %r4 e;
    MOV %r5 "unsubscriptions";
    SET_KEY %r4 %r5 %r3;
    JMP _l2015_;
LABEL _l2016_:
    MOV %r4 "object";
    MOV %r5 i;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l2018_;
    MOV %r6 i;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l2018_:
    JF %r3 _l2017_;
    MOV %r5 i;
    MOV %r6 e;
    MOV %r7 "unsubscriptions";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l2017_:
LABEL _l2015_:
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "resubscribe";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l2019_;
    FUNC %r4 @@f988;
    PUSH %r4;
    MOV %r6 e;
    MOV %r7 "unsubscriptions";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "forEach";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
LABEL _l2019_:
    MOV %r3 "object";
    MOV %r4 s;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2021_;
    MOV %r5 s;
    MOV %r6 "properties";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l2021_:
    JF %r2 _l2020_;
    MOV %r5 s;
    MOV %r6 "properties";
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 e;
    MOV %r6 "properties";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l2020_:
    MOV %r2 o;
    MOV_THIS %r5;
    MOV %r6 "outgoing";
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 e;
    MOV %r5 "messageId";
    MOV_PROP %r4 %r6 %r5;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_sendPacket";
    CALL_VAR %r2 %r3 1 false;
    MOV_THIS %r0;
LABEL _l2013_:
    MOV $RET %r0;
    RET;
}
func @@f496() {
    CLS @e;
    CLS @t;
    CLS @r;
    CLS @n;
    CLS @i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    FUNC @i @@f989;
    FUNC o @@f990;
    MOV_THIS @e;
    MOV_ARGS %r0;
    MOV %r1 0;
    MOV_PROP @t %r0 %r1;
    MOV_ARGS %r0;
    MOV %r1 1;
    MOV_PROP @r %r0 %r1;
    MOV_ARGS %r0;
    MOV %r1 2;
    MOV_PROP @n %r0 %r1;
    MOV %r2 null;
    MOV %r3 @t;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2023_;
    MOV %r3 "boolean";
    MOV %r4 @t;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2023_:
    JIF %r1 _l2022_;
    MOV %r4 @r;
    MOV %r3 %r4;
    JIF %r4 _l2024_;
    MOV %r5 @_;
    LG_OR %r3 %r5;
LABEL _l2024_:
    MOV @n %r3;
    MOV %r3 @t;
    MOV @r %r3;
    MOV %r3 1;
    NEG %r3;
    MOV @t %r3;
    MOV %r3 "object";
    MOV %r4 @r;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2025_;
    MOV %r5 @r;
    MOV @n %r5;
    MOV %r5 null;
    MOV @r %r5;
    MOV %r5 "function";
    MOV %r6 @n;
    TYPE_OF %r6;
    WNE %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l2026_;
    MOV %r7 @_;
    MOV @n %r7;
    MOV %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l2026_:
    LG_AND %r2 %r4;
LABEL _l2025_:
LABEL _l2022_:
    MOV %r1 "object";
    MOV %r2 @r;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l2027_;
    MOV %r3 @r;
    MOV @n %r3;
    MOV %r3 null;
    MOV @r %r3;
    MOV %r2 %r3;
LABEL _l2027_:
    MOV %r2 @n;
    MOV %r1 %r2;
    JIF %r2 _l2028_;
    MOV %r3 @_;
    LG_OR %r1 %r3;
LABEL _l2028_:
    MOV @n %r1;
    MOV_THIS %r2;
    MOV %r3 "disconnecting";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2030_;
    MOV_THIS %r0;
    JMP _l2029_;
LABEL _l2030_:
    MOV_THIS %r2;
    MOV %r3 "_clearReconnect";
    CALL_VAR %r2 %r3 0 false;
    MOV %r2 0;
    NEG %r2;
    MOV_THIS %r3;
    MOV %r4 "disconnecting";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 @t;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l2033_;
    MOV_THIS %r9;
    MOV %r10 "outgoing";
    MOV_PROP %r8 %r9 %r10;
    PUSH %r8;
    MOV_CTX %r8 "Object";
    MOV %r9 "keys";
    CALL_VAR %r8 %r9 1 false;
    MOV %r6 $RET;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 0;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2033_:
    JF %r2 _l2032_;
    MOV %r3 "outgoingEmpty";
    PUSH %r3;
    MOV %r4 null;
    PUSH %r4;
    MOV %r4 o;
    PUSH %r4;
    MOV %r4 10;
    PUSH %r4;
    MOV_CTX %r4 "setTimeout";
    MOV %r5 "bind";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "once";
    CALL_VAR %r3 %r4 2 false;
    JMP _l2031_;
LABEL _l2032_:
    CALL_REG o 0 false;
LABEL _l2031_:
    MOV_THIS %r0;
LABEL _l2029_:
    MOV $RET %r0;
    RET;
}
func @@f497(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r2;
    MOV %r3 "outgoing";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .e;
    MOV_PROP @t %r0 %r1;
    MOV_THIS %r3;
    MOV %r4 "outgoing";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 .e;
    DEL %r1 %r2;
    NEW_OBJ %r1;
    MOV %r2 .e;
    SET_KEY %r1 'messageId' %r2;
    PUSH %r1;
    FUNC %r1 @@f991;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "outgoingStore";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "del";
    CALL_VAR %r1 %r2 2 false;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f498(.e) {
    CLS @t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    FUNC r @@f992;
    MOV_THIS %r3;
    MOV %r4 "disconnecting";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l2036_;
    MOV_THIS %r4;
    MOV %r5 "disconnected";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l2036_:
    JF %r1 _l2035_;
    MOV %r2 r;
    MOV_THIS %r3;
    MOV %r4 "_deferredReconnect";
    SET_KEY %r3 %r4 %r2;
    JMP _l2034_;
LABEL _l2035_:
    CALL_REG r 0 false;
LABEL _l2034_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f499() {
    REG %r0;
    REG %r1;
    MOV %r0 "reconnect";
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV_THIS %r0;
    MOV %r1 "_setupStream";
    CALL_VAR %r0 %r1 0 false;
}
func @@f500() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS @e;
    MOV %r3 @e;
    MOV %r4 "disconnecting";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l2039_;
    MOV %r4 @e;
    MOV %r5 "reconnectTimer";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l2039_:
    MOV %r0 %r1;
    JF %r1 _l2038_;
    MOV %r6 @e;
    MOV %r7 "options";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "reconnectPeriod";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2038_:
    JF %r0 _l2037_;
    MOV_THIS %r3;
    MOV %r4 "reconnecting";
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l2040_;
    MOV %r4 "offline";
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 1 false;
    MOV %r4 0;
    NEG %r4;
    MOV_THIS %r5;
    MOV %r6 "reconnecting";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l2040_:
    FUNC %r3 @@f993;
    PUSH %r3;
    MOV %r6 @e;
    MOV %r7 "options";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "reconnectPeriod";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_CTX 'setInterval' 2 false;
    MOV %r2 $RET;
    MOV %r3 @e;
    MOV %r4 "reconnectTimer";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2037_:
}
func @@f501() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r1;
    MOV %r2 "reconnectTimer";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2041_;
    MOV_THIS %r3;
    MOV %r4 "reconnectTimer";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_CTX 'clearInterval' 1 false;
    MOV %r2 null;
    MOV_THIS %r3;
    MOV %r4 "reconnectTimer";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2041_:
}
func @@f502(.e, .t) {
    CLS @r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_ARGS %r0;
    MOV %r1 2;
    MOV_PROP n %r0 %r1;
    MOV %r1 .t;
    JF %r1 _l2044_;
    MOV %r3 "close";
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "stream";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "on";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l2044_:
    MOV %r0 .e;
    JF %r0 _l2043_;
    MOV %r3 0;
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "reconnectPeriod";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2047_;
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "clean";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l2047_:
    MOV %r1 %r2;
    JF %r2 _l2046_;
    MOV_THIS %r5;
    MOV %r6 "outgoing";
    MOV_PROP %r4 %r5 %r6;
    MOV @r %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2046_:
    JF %r1 _l2045_;
    FUNC %r3 @@f994;
    PUSH %r3;
    MOV %r5 @r;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "keys";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "forEach";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l2045_:
    MOV_THIS %r3;
    MOV %r4 "stream";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroy";
    CALL_VAR %r1 %r2 0 false;
    JMP _l2042_;
LABEL _l2043_:
    NEW_OBJ %r1;
    MOV %r2 "disconnect";
    SET_KEY %r1 'cmd' %r2;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    CALL_REG @f 2 false;
    MOV i $RET;
    MOV %r1 i;
    PUSH %r1;
    MOV %r2 null;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "stream";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r7;
    MOV %r8 "stream";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "end";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "bind";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @h;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_sendPacket";
    CALL_VAR %r1 %r2 2 false;
LABEL _l2042_:
    MOV_THIS %r1;
    MOV %r2 "disconnecting";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l2048_;
    MOV_THIS %r2;
    MOV %r3 "_clearReconnect";
    CALL_VAR %r2 %r3 0 false;
    MOV_THIS %r2;
    MOV %r3 "_setupReconnect";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l2048_:
    MOV %r0 null;
    MOV_THIS %r2;
    MOV %r3 "pingTimer";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l2049_;
    MOV_THIS %r4;
    MOV %r5 "pingTimer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "clear";
    CALL_VAR %r2 %r3 0 false;
    MOV %r2 null;
    MOV_THIS %r3;
    MOV %r4 "pingTimer";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2049_:
    MOV %r1 .t;
    MOV %r0 %r1;
    JF %r1 _l2051_;
    MOV_THIS %r3;
    MOV %r4 "connected";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2051_:
    JF %r0 _l2050_;
    MOV %r2 "close";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "stream";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    CALL_REG .t 0 false;
    MOV %r1 $RET;
LABEL _l2050_:
}
func @@f503(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .r;
    MOV %r1 %r2;
    JIF %r2 _l2054_;
    MOV %r3 @_;
    LG_OR %r1 %r3;
LABEL _l2054_:
    MOV .r %r1;
    MOV_THIS %r1;
    MOV %r2 "connected";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2053_;
    BLOCK 2;
    MOV_THIS %r2;
    MOV %r3 "_shiftPingInterval";
    CALL_VAR %r2 %r3 0 false;
    MOV %r2 .e;
    MOV %r3 "cmd";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 "publish";
    JE %r1 %r2 _l2056_;
    JMP _l2057_;
LABEL _l2056_:
    CLR_BLOCK 2;
    JMP _l2055_;
    JMP _l2058_;
LABEL _l2057_:
    MOV %r3 "pubrel";
    JE %r1 %r3 _l2058_;
    JMP _l2059_;
LABEL _l2058_:
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 .r;
    PUSH %r5;
    CALL_REG @g 4 false;
    MOV %r4 $RET;
    VOID %r4;
    MOV $RET %r4;
    RET;
    JMP _l2060_;
LABEL _l2059_:
LABEL _l2060_:
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    CALL_REG @b 3 false;
    MOV %r4 $RET;
    VOID %r4;
    MOV $RET %r4;
    RET;
    JMP _l2062_;
LABEL _l2061_:
LABEL _l2062_:
LABEL _l2055_:
    END_BLOCK 2;
    BLOCK 3;
    MOV %r2 .e;
    MOV %r3 "qos";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 2;
    JE %r1 %r2 _l2064_;
    JMP _l2065_;
LABEL _l2065_:
    MOV %r3 1;
    JE %r1 %r3 _l2064_;
    JMP _l2066_;
LABEL _l2064_:
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    CALL_REG @g 4 false;
    CLR_BLOCK 3;
    JMP _l2063_;
    JMP _l2067_;
LABEL _l2066_:
    MOV %r4 0;
    JE %r1 %r4 _l2067_;
    JMP _l2068_;
LABEL _l2068_:
LABEL _l2067_:
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    CALL_REG @b 3 false;
    JMP _l2070_;
LABEL _l2069_:
LABEL _l2070_:
LABEL _l2063_:
    END_BLOCK 3;
    JMP _l2052_;
LABEL _l2053_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_storePacket";
    CALL_VAR %r1 %r2 3 false;
LABEL _l2052_:
}
func @@f504(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    MOV %r1 @r;
    MOV %r0 %r1;
    JIF %r1 _l2071_;
    MOV %r2 @_;
    LG_OR %r0 %r2;
LABEL _l2071_:
    MOV @r %r0;
    MOV %r2 0;
    MOV %r5 .e;
    MOV %r6 "qos";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l2076_;
    MOV %r5 0;
    LG_OR %r3 %r5;
LABEL _l2076_:
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2075_;
    MOV_THIS %r4;
    MOV %r5 "queueQoSZero";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2075_:
    MOV %r0 %r1;
    JIF %r1 _l2074_;
    MOV %r2 "publish";
    MOV %r4 .e;
    MOV %r5 "cmd";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2074_:
    JF %r0 _l2073_;
    NEW_OBJ %r1;
    MOV %r2 .e;
    SET_KEY %r1 'packet' %r2;
    MOV %r2 @t;
    SET_KEY %r1 'cb' %r2;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "queue";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2072_;
LABEL _l2073_:
    MOV %r3 .e;
    MOV %r4 "qos";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    GT %r1 %r2;
    JF %r1 _l2077_;
    MOV_THIS %r5;
    MOV %r6 "outgoing";
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 .e;
    MOV %r5 "messageId";
    MOV_PROP %r4 %r6 %r5;
    MOV_PROP %r2 %r3 %r4;
    MOV @t %r2;
    MOV %r2 .e;
    PUSH %r2;
    FUNC %r2 @@f995;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "outgoingStore";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "put";
    CALL_VAR %r2 %r3 2 false;
    JMP _l2072_;
LABEL _l2077_:
    MOV %r2 @t;
    JF %r2 _l2078_;
    MOV %r5 "No connection to broker";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @t 1 false;
    MOV %r3 $RET;
LABEL _l2078_:
LABEL _l2072_:
}
func @@f505() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS @e;
    MOV_THIS %r2;
    MOV %r3 "pingTimer";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l2080_;
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "keepalive";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l2080_:
    JF %r0 _l2079_;
    MOV %r2 0;
    NEG %r2;
    MOV_THIS %r3;
    MOV %r4 "pingResp";
    SET_KEY %r3 %r4 %r2;
    FUNC %r3 @@f996;
    PUSH %r3;
    MOV %r3 1000;
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "keepalive";
    MOV_PROP %r4 %r5 %r6;
    MUL %r3 %r4;
    PUSH %r3;
    CALL_REG @c 2 false;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "pingTimer";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2079_:
}
func @@f506() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r3;
    MOV %r4 "pingTimer";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l2083_;
    MOV_THIS %r6;
    MOV %r7 "options";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "keepalive";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2083_:
    MOV %r0 %r1;
    JF %r1 _l2082_;
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "reschedulePings";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l2082_:
    JF %r0 _l2081_;
    MOV %r2 1000;
    MOV_THIS %r6;
    MOV %r7 "options";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "keepalive";
    MOV_PROP %r3 %r4 %r5;
    MUL %r2 %r3;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "pingTimer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "reschedule";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2081_:
}
func @@f507() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r1;
    MOV %r2 "pingResp";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2085_;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "pingResp";
    SET_KEY %r2 %r3 %r1;
    NEW_OBJ %r1;
    MOV %r2 "pingreq";
    SET_KEY %r1 'cmd' %r2;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_sendPacket";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2084_;
LABEL _l2085_:
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_cleanUp";
    CALL_VAR %r1 %r2 1 false;
LABEL _l2084_:
}
func @@f508() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "pingResp";
    SET_KEY %r1 %r2 %r0;
}
func @@f509(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r0;
    MOV %r1 "options";
    MOV_PROP t %r0 %r1;
    MOV %r0 5;
    MOV %r2 t;
    MOV %r3 "protocolVersion";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l2087_;
    MOV %r1 .e;
    MOV %r2 "reasonCode";
    MOV_PROP r %r1 %r2;
    JMP _l2086_;
LABEL _l2087_:
    MOV %r1 .e;
    MOV %r2 "returnCode";
    MOV_PROP r %r1 %r2;
LABEL _l2086_:
    MOV_THIS %r2;
    MOV %r3 "connackTimer";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'clearTimeout' 1 false;
    MOV %r2 .e;
    MOV %r3 "properties";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2090_;
    MOV %r6 .e;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "topicAliasMaximum";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l2091_;
    MOV %r6 t;
    MOV %r7 "properties";
    MOV_PROP %r5 %r6 %r7;
    JIF %r5 _l2092_;
    NEW_OBJ %r7;
    MOV %r8 t;
    MOV %r9 "properties";
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
LABEL _l2092_:
    MOV %r8 .e;
    MOV %r9 "properties";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "topicAliasMaximum";
    MOV_PROP %r5 %r6 %r7;
    MOV %r8 t;
    MOV %r9 "properties";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "topicAliasMaximum";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l2091_:
    MOV %r7 .e;
    MOV %r8 "properties";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "serverKeepAlive";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l2094_;
    MOV %r6 t;
    MOV %r7 "keepalive";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l2094_:
    JF %r3 _l2093_;
    MOV %r8 .e;
    MOV %r9 "properties";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "serverKeepAlive";
    MOV_PROP %r5 %r6 %r7;
    MOV %r6 t;
    MOV %r7 "keepalive";
    SET_KEY %r6 %r7 %r5;
    MOV_THIS %r5;
    MOV %r6 "_shiftPingInterval";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
LABEL _l2093_:
    MOV %r6 .e;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "maximumPacketSize";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l2095_;
    MOV %r6 t;
    MOV %r7 "properties";
    MOV_PROP %r5 %r6 %r7;
    JIF %r5 _l2096_;
    NEW_OBJ %r7;
    MOV %r8 t;
    MOV %r9 "properties";
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
LABEL _l2096_:
    MOV %r8 .e;
    MOV %r9 "properties";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "maximumPacketSize";
    MOV_PROP %r5 %r6 %r7;
    MOV %r8 t;
    MOV %r9 "properties";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "maximumPacketSize";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2095_:
LABEL _l2090_:
    MOV %r0 0;
    MOV %r1 r;
    EQ %r0 %r1;
    JF %r0 _l2089_;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "reconnecting";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_onConnect";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2088_;
LABEL _l2089_:
    MOV %r1 r;
    MOV %r2 0;
    GT %r1 %r2;
    JF %r1 _l2097_;
    MOV %r2 "Connection refused: ";
    MOV %r4 @d;
    MOV %r5 r;
    MOV_PROP %r3 %r4 %r5;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV n $RET;
    MOV %r2 r;
    MOV %r3 n;
    MOV %r4 "code";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    JMP _l2088_;
LABEL _l2097_:
LABEL _l2088_:
}
func @@f510(.e, .t) {
    CLS @r;
    CLS @n;
    VAR i;
    CLS @o;
    CLS @s;
    VAR a;
    CLS @u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 @t;
    NE %r1 %r2;
    JF %r1 _l2099_;
    MOV %r0 @t;
    JMP _l2098_;
LABEL _l2099_:
    MOV %r0 @_;
LABEL _l2098_:
    MOV @t %r0;
    MOV %r2 @e;
    MOV %r3 "topic";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "toString";
    CALL_VAR %r0 %r1 0 false;
    MOV @r $RET;
    MOV %r0 @e;
    MOV %r1 "payload";
    MOV_PROP @n %r0 %r1;
    MOV %r0 @e;
    MOV %r1 "qos";
    MOV_PROP i %r0 %r1;
    MOV %r0 @e;
    MOV %r1 "messageId";
    MOV_PROP @o %r0 %r1;
    MOV_THIS @s;
    MOV_THIS %r0;
    MOV %r1 "options";
    MOV_PROP a %r0 %r1;
    NEW_ARR @u;
    MOV %r0 0;
    SET_KEY @u 0 %r0;
    MOV %r0 16;
    SET_KEY @u 1 %r0;
    MOV %r0 128;
    SET_KEY @u 2 %r0;
    MOV %r0 131;
    SET_KEY @u 3 %r0;
    MOV %r0 135;
    SET_KEY @u 4 %r0;
    MOV %r0 144;
    SET_KEY @u 5 %r0;
    MOV %r0 145;
    SET_KEY @u 6 %r0;
    MOV %r0 151;
    SET_KEY @u 7 %r0;
    MOV %r0 153;
    SET_KEY @u 8 %r0;
    BLOCK 1;
    MOV %r0 i;
    MOV %r1 2;
    JE %r0 %r1 _l2101_;
    JMP _l2102_;
LABEL _l2101_:
    MOV %r2 @r;
    PUSH %r2;
    MOV %r2 @n;
    PUSH %r2;
    MOV %r2 @e;
    PUSH %r2;
    FUNC %r2 @@f997;
    PUSH %r2;
    MOV %r2 a;
    MOV %r3 "customHandleAcks";
    CALL_VAR %r2 %r3 4 false;
    CLR_BLOCK 1;
    JMP _l2100_;
    JMP _l2103_;
LABEL _l2102_:
    MOV %r2 1;
    JE %r0 %r2 _l2103_;
    JMP _l2104_;
LABEL _l2103_:
    MOV %r3 @r;
    PUSH %r3;
    MOV %r3 @n;
    PUSH %r3;
    MOV %r3 @e;
    PUSH %r3;
    FUNC %r3 @@f998;
    PUSH %r3;
    MOV %r3 a;
    MOV %r4 "customHandleAcks";
    CALL_VAR %r3 %r4 4 false;
    CLR_BLOCK 1;
    JMP _l2100_;
    JMP _l2105_;
LABEL _l2104_:
    MOV %r3 0;
    JE %r0 %r3 _l2105_;
    JMP _l2106_;
LABEL _l2105_:
    MOV %r4 "message";
    PUSH %r4;
    MOV %r4 @r;
    PUSH %r4;
    MOV %r4 @n;
    PUSH %r4;
    MOV %r4 @e;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 4 false;
    MOV %r4 @e;
    PUSH %r4;
    MOV %r4 @t;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "handleMessage";
    CALL_VAR %r4 %r5 2 false;
    JMP _l2107_;
LABEL _l2106_:
LABEL _l2107_:
LABEL _l2100_:
    END_BLOCK 1;
}
func @@f511(.e, .t) {
    CALL_REG .t 0 false;
}
func @@f512(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    CLS @s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    MOV %r0 .e;
    MOV %r1 "messageId";
    MOV_PROP r %r0 %r1;
    MOV %r0 .e;
    MOV %r1 "cmd";
    MOV_PROP n %r0 %r1;
    MOV i null;
    MOV_THIS %r2;
    MOV %r3 "outgoing";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 r;
    MOV_PROP o %r0 %r1;
    MOV_THIS @s;
    MOV %r0 o;
    JF %r0 _l2109_;
    BLOCK 2;
    MOV %r1 n;
    MOV %r2 "pubcomp";
    JE %r1 %r2 _l2111_;
    JMP _l2112_;
LABEL _l2112_:
    MOV %r3 "puback";
    JE %r1 %r3 _l2111_;
    JMP _l2113_;
LABEL _l2111_:
    MOV %r4 .e;
    MOV %r5 "reasonCode";
    MOV_PROP a %r4 %r5;
    MOV %r6 a;
    MOV %r5 %r6;
    JF %r6 _l2116_;
    MOV %r7 a;
    MOV %r8 0;
    GT %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l2116_:
    MOV %r4 %r5;
    JF %r5 _l2115_;
    MOV %r6 16;
    MOV %r7 a;
    NE %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l2115_:
    JF %r4 _l2114_;
    MOV %r6 a;
    MOV %r10 "Publish error: ";
    MOV %r12 @d;
    MOV %r13 a;
    MOV_PROP %r11 %r12 %r13;
    ADD %r10 %r11;
    PUSH %r10;
    CALL_CTX 'Error' 1 true;
    MOV %r9 $RET;
    MOV t %r9;
    MOV %r7 %r9;
    MOV %r8 "code";
    SET_KEY %r7 %r8 %r6;
    MOV %r6 t;
    PUSH %r6;
    MOV %r6 .e;
    PUSH %r6;
    CALL_REG o 2 false;
    MOV %r5 $RET;
LABEL _l2114_:
    MOV_THIS %r6;
    MOV %r7 "outgoing";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 r;
    DEL %r4 %r5;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 o;
    PUSH %r4;
    MOV_THIS %r6;
    MOV %r7 "outgoingStore";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "del";
    CALL_VAR %r4 %r5 2 false;
    CLR_BLOCK 2;
    JMP _l2110_;
    JMP _l2117_;
LABEL _l2113_:
    MOV %r4 "pubrec";
    JE %r1 %r4 _l2117_;
    JMP _l2118_;
LABEL _l2117_:
    NEW_OBJ %r5;
    MOV %r6 "pubrel";
    SET_KEY %r5 'cmd' %r6;
    MOV %r6 2;
    SET_KEY %r5 'qos' %r6;
    MOV %r6 r;
    SET_KEY %r5 'messageId' %r6;
    MOV i %r5;
    MOV %r5 .e;
    MOV %r6 "reasonCode";
    MOV_PROP u %r5 %r6;
    MOV %r7 u;
    MOV %r6 %r7;
    JF %r7 _l2122_;
    MOV %r8 u;
    MOV %r9 0;
    GT %r8 %r9;
    LG_AND %r6 %r8;
LABEL _l2122_:
    MOV %r5 %r6;
    JF %r6 _l2121_;
    MOV %r7 16;
    MOV %r8 u;
    NE %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l2121_:
    JF %r5 _l2120_;
    MOV %r6 u;
    MOV %r10 "Publish error: ";
    MOV %r12 @d;
    MOV %r13 u;
    MOV_PROP %r11 %r12 %r13;
    ADD %r10 %r11;
    PUSH %r10;
    CALL_CTX 'Error' 1 true;
    MOV %r9 $RET;
    MOV t %r9;
    MOV %r7 %r9;
    MOV %r8 "code";
    SET_KEY %r7 %r8 %r6;
    MOV %r6 t;
    PUSH %r6;
    MOV %r6 .e;
    PUSH %r6;
    CALL_REG o 2 false;
    JMP _l2119_;
LABEL _l2120_:
    MOV %r6 i;
    PUSH %r6;
    MOV_THIS %r6;
    MOV %r7 "_sendPacket";
    CALL_VAR %r6 %r7 1 false;
LABEL _l2119_:
    CLR_BLOCK 2;
    JMP _l2110_;
    JMP _l2123_;
LABEL _l2118_:
    MOV %r5 "suback";
    JE %r1 %r5 _l2123_;
    JMP _l2124_;
LABEL _l2123_:
    MOV_THIS %r8;
    MOV %r9 "outgoing";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 r;
    DEL %r6 %r7;
    MOV c 0;
LABEL _l2125_:
    MOV %r6 c;
    MOV %r10 .e;
    MOV %r11 "granted";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    LT %r6 %r7;
    JF %r6 _l2126_;
LABEL _l2128_:
    MOV %r7 0;
    MOV %r8 128;
    MOV %r12 .e;
    MOV %r13 "granted";
    MOV_PROP %r10 %r12 %r13;
    MOV %r11 c;
    MOV_PROP %r9 %r10 %r11;
    AND %r8 %r9;
    WNE %r7 %r8;
    JF %r7 _l2130_;
    MOV_THIS %r10;
    MOV %r11 "messageIdToTopic";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 r;
    MOV_PROP l %r8 %r9;
    MOV %r8 l;
    JF %r8 _l2131_;
    FUNC %r10 @@f999;
    PUSH %r10;
    MOV %r10 l;
    MOV %r11 "forEach";
    CALL_VAR %r10 %r11 1 false;
    MOV %r9 $RET;
LABEL _l2131_:
    JMP _l2129_;
LABEL _l2130_:
LABEL _l2129_:
LABEL _l2127_:
    MOV %r7 c;
    ADD %r7 1;
    MOV c %r7;
    JMP _l2125_;
LABEL _l2126_:
    MOV %r6 null;
    PUSH %r6;
    MOV %r6 .e;
    PUSH %r6;
    CALL_REG o 2 false;
    CLR_BLOCK 2;
    JMP _l2110_;
    JMP _l2132_;
LABEL _l2124_:
    MOV %r6 "unsuback";
    JE %r1 %r6 _l2132_;
    JMP _l2133_;
LABEL _l2132_:
    MOV_THIS %r9;
    MOV %r10 "outgoing";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 r;
    DEL %r7 %r8;
    MOV %r7 null;
    PUSH %r7;
    CALL_REG o 1 false;
    CLR_BLOCK 2;
    JMP _l2110_;
    JMP _l2134_;
LABEL _l2133_:
LABEL _l2134_:
    MOV %r7 "error";
    PUSH %r7;
    MOV %r8 "unrecognized packet type";
    PUSH %r8;
    CALL_CTX 'Error' 1 true;
    MOV %r7 $RET;
    PUSH %r7;
    MOV %r7 @s;
    MOV %r8 "emit";
    CALL_VAR %r7 %r8 2 false;
    JMP _l2136_;
LABEL _l2135_:
LABEL _l2136_:
LABEL _l2110_:
    END_BLOCK 2;
    MOV_THIS %r3;
    MOV %r4 "disconnecting";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l2138_;
    MOV %r3 0;
    MOV_THIS %r8;
    MOV %r9 "outgoing";
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV_CTX %r7 "Object";
    MOV %r8 "keys";
    CALL_VAR %r7 %r8 1 false;
    MOV %r5 $RET;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2138_:
    JF %r1 _l2137_;
    MOV %r3 "outgoingEmpty";
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l2137_:
    JMP _l2108_;
LABEL _l2109_:
LABEL _l2108_:
}
func @@f513(.e, .t) {
    VAR r;
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @t;
    MOV @t .t;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 @t;
    NE %r1 %r2;
    JF %r1 _l2140_;
    MOV %r0 @t;
    JMP _l2139_;
LABEL _l2140_:
    MOV %r0 @_;
LABEL _l2139_:
    MOV @t %r0;
    MOV %r0 .e;
    MOV %r1 "messageId";
    MOV_PROP r %r0 %r1;
    MOV_THIS @n;
    NEW_OBJ @i;
    MOV %r0 "pubcomp";
    SET_KEY @i 'cmd' %r0;
    MOV %r0 r;
    SET_KEY @i 'messageId' %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f1000;
    PUSH %r0;
    MOV %r2 @n;
    MOV %r3 "incomingStore";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "get";
    CALL_VAR %r0 %r1 2 false;
}
func @@f514(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 0;
    NEG %r0;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 1 false;
}
func @@f515() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r1;
    MOV %r2 "nextId";
    MOV_PROP %r0 %r1 %r2;
    MOV e %r0;
    ADD %r0 1;
    MOV_THIS %r1;
    MOV %r2 "nextId";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 65536;
    MOV_THIS %r3;
    MOV %r4 "nextId";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l2141_;
    MOV %r3 1;
    MOV_THIS %r4;
    MOV %r5 "nextId";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2141_:
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f516() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 1;
    MOV_THIS %r3;
    MOV %r4 "nextId";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l2143_;
    MOV %r0 65535;
    JMP _l2142_;
LABEL _l2143_:
    MOV_THIS %r3;
    MOV %r4 "nextId";
    MOV_PROP %r0 %r3 %r4;
    MOV %r2 1;
    SUB %r0 %r2;
LABEL _l2142_:
    MOV $RET %r0;
    RET;
}
func @@f517(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV_THIS %r3;
    MOV %r4 "_firstConnection";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l2146_;
    MOV_THIS %r7;
    MOV %r8 "options";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "clean";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l2147_;
    MOV %r6 5;
    MOV_THIS %r10;
    MOV %r11 "options";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "protocolVersion";
    MOV_PROP %r7 %r8 %r9;
    EQ %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l2148_;
    MOV %r8 .e;
    MOV %r9 "sessionPresent";
    MOV_PROP %r7 %r8 %r9;
    NEG %r7;
    LG_AND %r5 %r7;
LABEL _l2148_:
    LG_OR %r3 %r5;
LABEL _l2147_:
    LG_AND %r1 %r3;
LABEL _l2146_:
    MOV %r0 %r1;
    JF %r1 _l2145_;
    MOV_THIS %r7;
    MOV %r8 "_resubscribeTopics";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV_CTX %r6 "Object";
    MOV %r7 "keys";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2145_:
    JF %r0 _l2144_;
    MOV_THIS %r5;
    MOV %r6 "options";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "resubscribe";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l2150_;
    MOV %r3 0;
    NEG %r3;
    MOV_THIS %r6;
    MOV %r7 "_resubscribeTopics";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "resubscribe";
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r4;
    MOV %r5 "_resubscribeTopics";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "subscribe";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l2149_;
LABEL _l2150_:
    NEW_OBJ %r3;
    MOV_THIS %r4;
    MOV %r5 "_resubscribeTopics";
    SET_KEY %r4 %r5 %r3;
    MOV %r1 %r3;
LABEL _l2149_:
LABEL _l2144_:
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_firstConnection";
    SET_KEY %r1 %r2 %r0;
}
func @@f518(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    MOV_THIS %r1;
    MOV %r2 "disconnected";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2152_;
    MOV %r1 "connect";
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    JMP _l2151_;
LABEL _l2152_:
    MOV_THIS @t;
    MOV_THIS %r1;
    MOV %r2 "_setupPingTimer";
    CALL_VAR %r1 %r2 0 false;
    MOV %r1 @e;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "_resubscribe";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 0;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "connected";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f1001;
    CALL_REG %r1 0 false;
LABEL _l2151_:
}
func @@f519(.e, .t) {
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r3 .t;
    MOV %r4 "hostname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l2155_;
    MOV %r4 .t;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l2155_:
    MOV %r2 .t;
    MOV %r3 "hostname";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 "hostname";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l2154_;
    MOV %r2 "Could not determine host. Specify host manually.";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2153_;
LABEL _l2154_:
LABEL _l2153_:
    MOV %r1 "MQIsdp";
    MOV %r3 .t;
    MOV %r4 "protocolId";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2158_;
    MOV %r2 3;
    MOV %r4 .t;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2158_:
    JF %r0 _l2157_;
    MOV l "mqttv3.1";
    JMP _l2156_;
LABEL _l2157_:
    MOV l "mqtt";
LABEL _l2156_:
    MOV %r1 .t;
    PUSH %r1;
    FUNC %r1 @@f1002;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    NEG %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f1003;
    CALL_REG %r0 2 false;
    MOV f $RET;
    NEW_OBJ %r1;
    MOV %r2 f;
    SET_KEY %r1 'url' %r2;
    MOV %r2 l;
    SET_KEY %r1 'protocols' %r2;
    PUSH %r1;
    MOV %r4 .t;
    MOV %r5 "my";
    MOV_PROP %r3 %r4 %r5;
    MOV @n %r3;
    MOV %r1 %r3;
    MOV %r2 "connectSocket";
    CALL_VAR %r1 %r2 1 false;
    FUNC %r2 @@f1004;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    MOV @i %r1;
    MOV %r2 @a;
    MOV %r3 "obj";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV @o %r1;
    MOV %r1 @c;
    JIF %r1 _l2159_;
    MOV %r3 0;
    NEG %r3;
    MOV @c %r3;
    FUNC %r3 @@f1005;
    PUSH %r3;
    MOV %r3 @n;
    MOV %r4 "onSocketOpen";
    CALL_VAR %r3 %r4 1 false;
    FUNC %r3 @@f1006;
    PUSH %r3;
    MOV %r3 @n;
    MOV %r4 "onSocketMessage";
    CALL_VAR %r3 %r4 1 false;
    FUNC %r3 @@f1007;
    PUSH %r3;
    MOV %r3 @n;
    MOV %r4 "onSocketClose";
    CALL_VAR %r3 %r4 1 false;
    FUNC %r3 @@f1008;
    PUSH %r3;
    MOV %r3 @n;
    MOV %r4 "onSocketError";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l2159_:
    MOV %r0 @o;
    MOV $RET %r0;
    RET;
}
func @@f520(.n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 @t;
    MOV %r2 "rejectUnauthorized";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2160_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l2160_:
    MOV %r0 @r;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
}
func @@f521() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @t;
    MOV %r3 "rejectUnauthorized";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l2163_;
    MOV %r3 @r;
    MOV %r4 "authorized";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2163_:
    JF %r0 _l2162_;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r2 "TLS not authorized";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    JMP _l2161_;
LABEL _l2162_:
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 @i;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "removeListener";
    CALL_VAR %r1 %r2 2 false;
LABEL _l2161_:
}
func @@f522(.e, .t) {
    VAR r;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "MQIsdp";
    MOV %r3 .t;
    MOV %r4 "protocolId";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2166_;
    MOV %r2 3;
    MOV %r4 .t;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2166_:
    JF %r0 _l2165_;
    MOV r "mqttv3.1";
    JMP _l2164_;
LABEL _l2165_:
    MOV r "mqtt";
LABEL _l2164_:
    MOV %r1 .t;
    PUSH %r1;
    FUNC %r1 @@f1009;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    NEG %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f1010;
    CALL_REG %r0 2 false;
    MOV i $RET;
    MOV %r1 i;
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r2 r;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r2 .t;
    MOV %r3 "wsOptions";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @n 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f523(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .t;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l2169_;
    MOV %r4 .t;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .t;
    MOV %r5 "hostname";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2169_:
    MOV %r1 .t;
    MOV %r2 "hostname";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l2168_;
    MOV %r1 "undefined";
    MOV_CTX %r2 "document";
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2171_;
    MOV %r3 "Could not determine host. Specify host manually.";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2170_;
LABEL _l2171_:
LABEL _l2170_:
    MOV_CTX %r2 "document";
    MOV %r3 "URL";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "parse";
    CALL_VAR %r1 %r2 1 false;
    MOV r $RET;
    MOV %r2 r;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .t;
    MOV %r3 "hostname";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .t;
    MOV %r3 "port";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l2172_;
    MOV %r4 r;
    MOV %r5 "port";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .t;
    MOV %r5 "port";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2172_:
    JMP _l2167_;
LABEL _l2168_:
LABEL _l2167_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f524(.e, .t) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @a 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f525(.e, .t) {
    VAR s;
    VAR a;
    CLS @u;
    VAR c;
    CLS @l;
    CLS @f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r3 .t;
    MOV %r4 "hostname";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l2175_;
    MOV %r4 .t;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l2175_:
    MOV %r2 .t;
    MOV %r3 "hostname";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 "hostname";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l2174_;
    MOV %r2 "Could not determine host. Specify host manually.";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2173_;
LABEL _l2174_:
LABEL _l2173_:
    MOV %r1 "MQIsdp";
    MOV %r3 .t;
    MOV %r4 "protocolId";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2178_;
    MOV %r2 3;
    MOV %r4 .t;
    MOV %r5 "protocolVersion";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2178_:
    JF %r0 _l2177_;
    MOV s "mqttv3.1";
    JMP _l2176_;
LABEL _l2177_:
    MOV s "mqtt";
LABEL _l2176_:
    MOV %r1 .t;
    PUSH %r1;
    FUNC %r1 @@f1011;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    NEG %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f1012;
    CALL_REG %r0 2 false;
    MOV a $RET;
    NEW_OBJ %r0;
    MOV %r1 a;
    SET_KEY %r0 'url' %r1;
    MOV %r1 s;
    SET_KEY %r0 'protocols' %r1;
    PUSH %r0;
    MOV_CTX %r0 "wx";
    MOV %r1 "connectSocket";
    CALL_VAR %r0 %r1 1 false;
    MOV @u $RET;
    MOV %r0 @u;
    PUSH %r0;
    FUNC %r0 @@f1013;
    CALL_REG %r0 1 false;
    MOV c $RET;
    MOV %r0 @o;
    MOV %r1 "obj";
    CALL_VAR %r0 %r1 0 false;
    MOV @l $RET;
    FUNC %r0 @@f1014;
    MOV %r1 @l;
    MOV %r2 "_destroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @l;
    MOV %r1 "destroy";
    MOV_PROP @f %r0 %r1;
    MOV %r2 @l;
    PUSH %r2;
    FUNC %r2 @@f1015;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 @l;
    MOV %r3 "destroy";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @u;
    PUSH %r1;
    MOV %r1 c;
    PUSH %r1;
    MOV %r1 @l;
    PUSH %r1;
    FUNC %r1 @@f1016;
    CALL_REG %r1 3 false;
    MOV %r0 @l;
    MOV $RET %r0;
    RET;
}
func @@f526(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 @u;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l2180_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @u 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2179_;
LABEL _l2180_:
LABEL _l2179_:
    MOV %r1 .e;
    MOV %r0 %r1;
    JIF %r1 _l2181_;
    NEW_OBJ %r2;
    LG_OR %r0 %r2;
LABEL _l2181_:
    MOV_THIS %r1;
    MOV %r2 "options";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 @s;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @n 2 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "options";
    SET_KEY %r1 %r2 %r0;
    CALL_REG @a 0 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_inflights";
    SET_KEY %r1 %r2 %r0;
}
func @@f527(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 .e;
    MOV %r3 "messageId";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "_inflights";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "set";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 .t;
    JF %r1 _l2182_;
    CALL_REG .t 0 false;
    MOV %r2 $RET;
LABEL _l2182_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f528() {
    VAR e;
    CLS @t;
    CLS @n;
    CLS @s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 @o;
    PUSH %r0;
    CALL_REG @i 1 true;
    MOV e $RET;
    MOV @t 1;
    NEG @t;
    NEW_ARR @n;
    MOV @s 0;
    FUNC %r1 @@f1017;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "_inflights";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
    FUNC %r1 @@f1018;
    MOV %r2 e;
    MOV %r3 "_read";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f1019;
    MOV %r2 e;
    MOV %r3 "destroy";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f529(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r4 .e;
    MOV %r5 "messageId";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_inflights";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "get";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV .e %r2;
    MOV %r1 %r2;
    JF %r1 _l2184_;
    MOV %r3 .e;
    MOV %r4 "messageId";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "_inflights";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "delete";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG .t 2 false;
    JMP _l2183_;
LABEL _l2184_:
    MOV %r2 .t;
    JF %r2 _l2185_;
    MOV %r5 "missing packet";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG .t 1 false;
    MOV %r3 $RET;
LABEL _l2185_:
LABEL _l2183_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f530(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r4 .e;
    MOV %r5 "messageId";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_THIS %r5;
    MOV %r6 "_inflights";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "get";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV .e %r2;
    MOV %r1 %r2;
    JF %r1 _l2187_;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG .t 2 false;
    JMP _l2186_;
LABEL _l2187_:
    MOV %r2 .t;
    JF %r2 _l2188_;
    MOV %r5 "missing packet";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG .t 1 false;
    MOV %r3 $RET;
LABEL _l2188_:
LABEL _l2186_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f531(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "options";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "clean";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2189_;
    MOV %r2 null;
    MOV_THIS %r3;
    MOV %r4 "_inflights";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2189_:
    MOV %r0 .e;
    JF %r0 _l2190_;
    CALL_REG .e 0 false;
    MOV %r1 $RET;
LABEL _l2190_:
}
func @@f532(.e, .t) {
    VAR r;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    CLS @t;
    MOV @t .t;
    MOV %r2 "object";
    MOV %r3 .e;
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2194_;
    MOV %r3 @t;
    LG_OR %r1 %r3;
LABEL _l2194_:
    JIF %r1 _l2193_;
    MOV %r3 .e;
    MOV @t %r3;
    MOV %r3 null;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2193_:
    MOV %r2 @t;
    MOV %r1 %r2;
    JIF %r2 _l2195_;
    NEW_OBJ %r3;
    LG_OR %r1 %r3;
LABEL _l2195_:
    MOV @t %r1;
    MOV %r0 .e;
    JF %r0 _l2192_;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "parse";
    CALL_VAR %r1 %r2 2 false;
    MOV r $RET;
    MOV %r2 null;
    MOV %r4 r;
    MOV %r5 "port";
    MOV_PROP %r3 %r4 %r5;
    WNE %r2 %r3;
    JF %r2 _l2198_;
    MOV %r6 r;
    MOV %r7 "port";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_CTX 'Number' 1 false;
    MOV %r4 $RET;
    MOV %r5 r;
    MOV %r6 "port";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l2198_:
    MOV %r1 null;
    MOV %r6 r;
    PUSH %r6;
    MOV %r6 @t;
    PUSH %r6;
    CALL_REG @s 2 false;
    MOV %r5 $RET;
    MOV @t %r5;
    MOV %r3 %r5;
    MOV %r4 "protocol";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l2197_;
    MOV %r3 "Missing protocol";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2196_;
LABEL _l2197_:
LABEL _l2196_:
    NEW_REG %r2 ":$" "";
    PUSH %r2;
    MOV %r2 "";
    PUSH %r2;
    MOV %r4 @t;
    MOV %r5 "protocol";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r2 @t;
    MOV %r3 "protocol";
    SET_KEY %r2 %r3 %r1;
    JMP _l2191_;
LABEL _l2192_:
LABEL _l2191_:
    MOV %r1 @t;
    PUSH %r1;
    FUNC %r1 @@f1020;
    CALL_REG %r1 1 false;
    MOV %r3 @t;
    MOV %r4 "query";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l2202_;
    MOV %r3 "string";
    MOV %r7 @t;
    MOV %r8 "query";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "clientId";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2202_:
    JF %r1 _l2201_;
    MOV %r6 @t;
    MOV %r7 "query";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "clientId";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 @t;
    MOV %r5 "clientId";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2201_:
    MOV %r2 @t;
    MOV %r3 "cert";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l2203_;
    MOV %r3 @t;
    MOV %r4 "key";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l2203_:
    JF %r0 _l2200_;
    MOV %r2 @t;
    MOV %r3 "protocol";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    JF %r1 _l2205_;
    MOV %r3 "Missing secure protocol key";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2204_;
LABEL _l2205_:
LABEL _l2204_:
    MOV %r1 1;
    MINUS %r1;
    MOV %r4 @t;
    MOV %r5 "protocol";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    NEW_ARR %r3;
    MOV %r5 "mqtts";
    SET_KEY %r3 0 %r5;
    MOV %r5 "wss";
    SET_KEY %r3 1 %r5;
    MOV %r5 "wxs";
    SET_KEY %r3 2 %r5;
    MOV %r5 "alis";
    SET_KEY %r3 3 %r5;
    MOV %r4 "indexOf";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    EQ %r1 %r2;
    JF %r1 _l2207_;
    BLOCK 3;
    MOV %r3 @t;
    MOV %r4 "protocol";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 "mqtt";
    JE %r2 %r3 _l2209_;
    JMP _l2210_;
LABEL _l2209_:
    MOV %r4 "mqtts";
    MOV %r5 @t;
    MOV %r6 "protocol";
    SET_KEY %r5 %r6 %r4;
    CLR_BLOCK 3;
    JMP _l2208_;
    JMP _l2211_;
LABEL _l2210_:
    MOV %r4 "ws";
    JE %r2 %r4 _l2211_;
    JMP _l2212_;
LABEL _l2211_:
    MOV %r5 "wss";
    MOV %r6 @t;
    MOV %r7 "protocol";
    SET_KEY %r6 %r7 %r5;
    CLR_BLOCK 3;
    JMP _l2208_;
    JMP _l2213_;
LABEL _l2212_:
    MOV %r5 "wx";
    JE %r2 %r5 _l2213_;
    JMP _l2214_;
LABEL _l2213_:
    MOV %r6 "wxs";
    MOV %r7 @t;
    MOV %r8 "protocol";
    SET_KEY %r7 %r8 %r6;
    CLR_BLOCK 3;
    JMP _l2208_;
    JMP _l2215_;
LABEL _l2214_:
    MOV %r6 "ali";
    JE %r2 %r6 _l2215_;
    JMP _l2216_;
LABEL _l2215_:
    MOV %r7 "alis";
    MOV %r8 @t;
    MOV %r9 "protocol";
    SET_KEY %r8 %r9 %r7;
    CLR_BLOCK 3;
    JMP _l2208_;
    JMP _l2217_;
LABEL _l2216_:
LABEL _l2217_:
    MOV %r8 "Unknown protocol for secure connection: \"";
    MOV %r11 @t;
    MOV %r12 "protocol";
    MOV_PROP %r10 %r11 %r12;
    ADD %r8 %r10;
    MOV %r9 "\"!";
    ADD %r8 %r9;
    PUSH %r8;
    CALL_CTX 'Error' 1 true;
    MOV %r7 $RET;
    THROW %r7;
    JMP _l2219_;
LABEL _l2218_:
LABEL _l2219_:
LABEL _l2208_:
    END_BLOCK 3;
    JMP _l2206_;
LABEL _l2207_:
LABEL _l2206_:
    JMP _l2199_;
LABEL _l2200_:
LABEL _l2199_:
    MOV %r1 @a;
    MOV %r4 @t;
    MOV %r3 "protocol";
    MOV_PROP %r2 %r4 %r3;
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l2221_;
    MOV @i 1;
    MINUS @i;
    MOV %r3 @t;
    MOV %r4 "protocol";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r4 "mqtts";
    SET_KEY %r2 0 %r4;
    MOV %r4 "wss";
    SET_KEY %r2 1 %r4;
    MOV %r3 "indexOf";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    NE @i %r1;
    FUNC %r4 @@f1021;
    PUSH %r4;
    NEW_ARR %r4;
    MOV %r6 "mqtt";
    SET_KEY %r4 0 %r6;
    MOV %r6 "mqtts";
    SET_KEY %r4 1 %r6;
    MOV %r6 "ws";
    SET_KEY %r4 2 %r6;
    MOV %r6 "wss";
    SET_KEY %r4 3 %r6;
    MOV %r6 "wx";
    SET_KEY %r4 4 %r6;
    MOV %r6 "wxs";
    SET_KEY %r4 5 %r6;
    MOV %r6 "ali";
    SET_KEY %r4 6 %r6;
    MOV %r6 "alis";
    SET_KEY %r4 7 %r6;
    MOV %r5 "filter";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @t;
    MOV %r3 "protocol";
    SET_KEY %r2 %r3 %r1;
    JMP _l2220_;
LABEL _l2221_:
LABEL _l2220_:
    MOV %r1 1;
    NEG %r1;
    MOV %r3 @t;
    MOV %r4 "clean";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2224_;
    MOV %r3 @t;
    MOV %r4 "clientId";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2224_:
    JF %r0 _l2223_;
    MOV %r2 "Missing clientId for unclean clients";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2222_;
LABEL _l2223_:
LABEL _l2222_:
    MOV %r2 @t;
    MOV %r3 "protocol";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2225_;
    MOV %r4 @t;
    MOV %r5 "protocol";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 @t;
    MOV %r5 "defaultProtocol";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l2225_:
    FUNC %r1 @@f1022;
    PUSH %r1;
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @n 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f533(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 3;
    MOV %r3 .t;
    MOV %r4 .r;
    ADD %r3 %r4;
    MUL %r0 %r3;
    MOV %r2 4;
    DIV %r0 %r2;
    MOV %r1 .r;
    SUB %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f534(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r1;
    MOV %r2 "_callback";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2226_;
    MOV %r2 .e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_callback";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 null;
    MOV_THIS %r3;
    MOV %r4 "_callback";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2226_:
}
func @@f535(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
}
func @@f536(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
}
func @@f537(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1023;
    MOV %r3 @s;
    MOV %r4 "prototype";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 @t;
    SET_KEY %r1 %r2 %r0;
}
func @@f538(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    PLUS %r0;
    MOV %r1 .e;
    WNE %r0 %r1;
    JF %r0 _l2227_;
    MOV %r2 0;
    MOV .e %r2;
    MOV %r1 %r2;
LABEL _l2227_:
    MOV %r1 .e;
    PLUS %r1;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "alloc";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f539(.e) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 @o;
    GT %r0 %r1;
    JF %r0 _l2229_;
    MOV %r2 "The value \"";
    MOV %r4 .e;
    ADD %r2 %r4;
    MOV %r3 "\" is invalid for option \"size\"";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2228_;
LABEL _l2229_:
LABEL _l2228_:
    MOV %r0 .e;
    PUSH %r0;
    CALL_CTX 'Uint8Array' 1 true;
    MOV r $RET;
    MOV %r2 @t;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 r;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f540(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l2231_;
    MOV %r1 "string";
    MOV %r2 .t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2233_;
    MOV %r3 "The \"string\" argument must be of type string. Received type number";
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2232_;
LABEL _l2233_:
LABEL _l2232_:
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @c 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2230_;
LABEL _l2231_:
LABEL _l2230_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @a 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f541(.e, .r, .n) {
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "string";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l2235_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    FUNC %r2 @@f1024;
    CALL_REG %r2 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2234_;
LABEL _l2235_:
LABEL _l2234_:
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r1 "ArrayBuffer";
    MOV %r2 "isView";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2237_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @l 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2236_;
LABEL _l2237_:
LABEL _l2236_:
    MOV %r0 null;
    MOV %r1 .e;
    WEQ %r0 %r1;
    JF %r0 _l2239_;
    MOV %r2 "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ";
    MOV %r3 .e;
    TYPE_OF %r3;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 false;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2238_;
LABEL _l2239_:
LABEL _l2238_:
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "ArrayBuffer";
    PUSH %r2;
    CALL_REG @D 2 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l2242_;
    MOV %r3 .e;
    MOV %r2 %r3;
    JF %r3 _l2243_;
    MOV %r6 .e;
    MOV %r7 "buffer";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_CTX %r5 "ArrayBuffer";
    PUSH %r5;
    CALL_REG @D 2 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l2243_:
    LG_OR %r0 %r2;
LABEL _l2242_:
    JF %r0 _l2241_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    FUNC %r2 @@f1025;
    CALL_REG %r2 3 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2240_;
LABEL _l2241_:
LABEL _l2240_:
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l2245_;
    MOV %r2 "The \"value\" argument must not be of type number. Received type number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2244_;
LABEL _l2245_:
LABEL _l2244_:
    MOV %r1 .e;
    MOV %r2 "valueOf";
    MOV_PROP %r0 %r1 %r2;
    MOV i %r0;
    JF %r0 _l2246_;
    MOV %r2 .e;
    MOV %r3 "valueOf";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    LG_AND i %r1;
LABEL _l2246_:
    MOV %r1 null;
    MOV %r2 i;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2249_;
    MOV %r2 i;
    MOV %r3 .e;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2249_:
    JF %r0 _l2248_;
    MOV %r2 i;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2247_;
LABEL _l2248_:
LABEL _l2247_:
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f1026;
    CALL_REG %r0 1 false;
    MOV o $RET;
    MOV %r0 o;
    JF %r0 _l2251_;
    MOV %r1 o;
    MOV $RET %r1;
    RET;
    JMP _l2250_;
LABEL _l2251_:
LABEL _l2250_:
    MOV %r2 "undefined";
    MOV_CTX %r3 "Symbol";
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2255_;
    MOV %r3 null;
    MOV_CTX %r5 "Symbol";
    MOV %r6 "toPrimitive";
    MOV_PROP %r4 %r5 %r6;
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2255_:
    MOV %r0 %r1;
    JF %r1 _l2254_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV_CTX %r7 "Symbol";
    MOV %r6 "toPrimitive";
    MOV_PROP %r5 %r7 %r6;
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2254_:
    JF %r0 _l2253_;
    MOV %r3 "string";
    PUSH %r3;
    MOV %r3 .e;
    MOV_CTX %r6 "Symbol";
    MOV %r5 "toPrimitive";
    MOV_PROP %r4 %r6 %r5;
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2252_;
LABEL _l2253_:
LABEL _l2252_:
    MOV %r1 "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ";
    MOV %r2 .e;
    TYPE_OF %r2;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_CTX 'TypeError' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f542(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l2257_;
    MOV %r2 "\"size\" argument must be of type number";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2256_;
LABEL _l2257_:
LABEL _l2256_:
    MOV %r0 .e;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2259_;
    MOV %r2 "The value \"";
    MOV %r4 .e;
    ADD %r2 %r4;
    MOV %r3 "\" is invalid for option \"size\"";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2258_;
LABEL _l2259_:
LABEL _l2258_:
}
func @@f543(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV %r2 .e;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l2261_;
    MOV %r1 0;
    JMP _l2260_;
LABEL _l2261_:
    MOV %r1 0;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @f 1 false;
    MOV %r3 $RET;
    OR %r1 %r3;
LABEL _l2260_:
    PUSH %r1;
    CALL_REG @s 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f544(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2266_;
    MOV t 0;
    JMP _l2265_;
LABEL _l2266_:
    MOV t 0;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @f 1 false;
    MOV %r1 $RET;
    OR t %r1;
LABEL _l2265_:
    MOV %r0 t;
    PUSH %r0;
    CALL_REG @s 1 false;
    MOV r $RET;
    MOV n 0;
LABEL _l2262_:
    MOV %r0 n;
    MOV %r1 t;
    LT %r0 %r1;
    JF %r0 _l2263_;
LABEL _l2267_:
    MOV %r1 255;
    MOV %r3 .e;
    MOV %r4 n;
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    MOV %r2 r;
    MOV %r3 n;
    SET_KEY %r2 %r3 %r1;
LABEL _l2264_:
    MOV %r1 1;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
    JMP _l2262_;
LABEL _l2263_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f545(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .e;
    MOV %r1 @o;
    GE %r0 %r1;
    JF %r0 _l2269_;
    MOV %r2 "Attempt to allocate Buffer larger than maximum size: 0x";
    MOV %r5 16;
    PUSH %r5;
    MOV %r5 @o;
    MOV %r6 "toString";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    ADD %r2 %r4;
    MOV %r3 " bytes";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2268_;
LABEL _l2269_:
LABEL _l2268_:
    MOV %r0 0;
    MOV %r1 .e;
    OR %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f546(.e, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    REG %r16;
    REG %r17;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2271_;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l2270_;
LABEL _l2271_:
LABEL _l2270_:
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "ArrayBuffer";
    MOV %r3 "isView";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l2274_;
    MOV %r3 .e;
    PUSH %r3;
    MOV_CTX %r3 "ArrayBuffer";
    PUSH %r3;
    CALL_REG @D 2 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l2274_:
    JF %r0 _l2273_;
    MOV %r2 .e;
    MOV %r3 "byteLength";
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l2272_;
LABEL _l2273_:
LABEL _l2272_:
    MOV %r0 "string";
    MOV %r1 .e;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l2276_;
    MOV %r2 "The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ";
    MOV %r3 .e;
    TYPE_OF %r3;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2275_;
LABEL _l2276_:
LABEL _l2275_:
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 2;
    GT %r0 %r1;
    MOV i %r0;
    JF %r0 _l2277_;
    MOV %r1 0;
    NEG %r1;
    MOV_ARGS %r3;
    MOV %r4 2;
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    LG_AND i %r1;
LABEL _l2277_:
    MOV %r1 i;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l2280_;
    MOV %r2 0;
    MOV %r3 n;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2280_:
    JF %r0 _l2279_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l2278_;
LABEL _l2279_:
LABEL _l2278_:
    MOV o 1;
    NEG o;
LABEL _l2281_:
LABEL _l2284_:
    MOV %r0 .r;
    MOV %r1 "ascii";
    JE %r0 %r1 _l2286_;
    JMP _l2287_;
LABEL _l2287_:
    MOV %r2 "latin1";
    JE %r0 %r2 _l2286_;
    JMP _l2288_;
LABEL _l2288_:
    MOV %r3 "binary";
    JE %r0 %r3 _l2286_;
    JMP _l2289_;
LABEL _l2286_:
    MOV %r4 n;
    MOV $RET %r4;
    RET;
    JMP _l2290_;
LABEL _l2289_:
    MOV %r4 "utf8";
    JE %r0 %r4 _l2290_;
    JMP _l2291_;
LABEL _l2291_:
    MOV %r5 "utf-8";
    JE %r0 %r5 _l2290_;
    JMP _l2292_;
LABEL _l2290_:
    MOV %r9 .e;
    PUSH %r9;
    CALL_REG @B 1 false;
    MOV %r7 $RET;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    MOV $RET %r6;
    RET;
    JMP _l2293_;
LABEL _l2292_:
    MOV %r6 "ucs2";
    JE %r0 %r6 _l2293_;
    JMP _l2294_;
LABEL _l2294_:
    MOV %r7 "ucs-2";
    JE %r0 %r7 _l2293_;
    JMP _l2295_;
LABEL _l2295_:
    MOV %r8 "utf16le";
    JE %r0 %r8 _l2293_;
    JMP _l2296_;
LABEL _l2296_:
    MOV %r9 "utf-16le";
    JE %r0 %r9 _l2293_;
    JMP _l2297_;
LABEL _l2293_:
    MOV %r10 2;
    MOV %r11 n;
    MUL %r10 %r11;
    MOV $RET %r10;
    RET;
    JMP _l2298_;
LABEL _l2297_:
    MOV %r10 "hex";
    JE %r0 %r10 _l2298_;
    JMP _l2299_;
LABEL _l2298_:
    MOV %r11 n;
    MOV %r12 1;
    ZSHR %r11 %r12;
    MOV $RET %r11;
    RET;
    JMP _l2300_;
LABEL _l2299_:
    MOV %r11 "base64";
    JE %r0 %r11 _l2300_;
    JMP _l2301_;
LABEL _l2300_:
    MOV %r15 .e;
    PUSH %r15;
    CALL_REG @N 1 false;
    MOV %r13 $RET;
    MOV %r14 "length";
    MOV_PROP %r12 %r13 %r14;
    MOV $RET %r12;
    RET;
    JMP _l2302_;
LABEL _l2301_:
LABEL _l2302_:
    MOV %r12 o;
    JF %r12 _l2305_;
    MOV %r14 i;
    JF %r14 _l2307_;
    MOV %r13 1;
    MINUS %r13;
    JMP _l2306_;
LABEL _l2307_:
    MOV %r17 .e;
    PUSH %r17;
    CALL_REG @B 1 false;
    MOV %r15 $RET;
    MOV %r16 "length";
    MOV_PROP %r13 %r15 %r16;
LABEL _l2306_:
    MOV $RET %r13;
    RET;
    JMP _l2304_;
LABEL _l2305_:
LABEL _l2304_:
    MOV %r13 "";
    MOV %r15 .r;
    ADD %r13 %r15;
    MOV %r14 "toLowerCase";
    CALL_VAR %r13 %r14 0 false;
    MOV %r12 $RET;
    MOV .r %r12;
    MOV %r12 0;
    NEG %r12;
    MOV o %r12;
    JMP _l2308_;
LABEL _l2303_:
LABEL _l2308_:
LABEL _l2285_:
    JMP _l2281_;
LABEL _l2282_:
}
func @@f547(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    MOV %r1 .t;
    MOV_PROP n %r0 %r1;
    MOV %r1 .e;
    MOV %r2 .r;
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 .e;
    MOV %r2 .t;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 n;
    MOV %r1 .e;
    MOV %r2 .r;
    SET_KEY %r1 %r2 %r0;
}
func @@f548(.e, .r, .n, .i, .o) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 0;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l2310_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l2309_;
LABEL _l2310_:
LABEL _l2309_:
    MOV %r1 "string";
    MOV %r2 .n;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2314_;
    MOV %r2 .n;
    MOV .i %r2;
    MOV %r2 0;
    MOV .n %r2;
    JMP _l2313_;
LABEL _l2314_:
    MOV %r2 .n;
    MOV %r3 2147483647;
    GT %r2 %r3;
    JF %r2 _l2315_;
    MOV %r3 2147483647;
    MOV .n %r3;
    JMP _l2313_;
LABEL _l2315_:
    MOV %r3 .n;
    MOV %r4 2147483648;
    MINUS %r4;
    LT %r3 %r4;
    JF %r3 _l2316_;
    MOV %r5 2147483648;
    MINUS %r5;
    MOV .n %r5;
    MOV %r4 %r5;
LABEL _l2316_:
LABEL _l2313_:
    MOV %r3 .n;
    PLUS %r3;
    MOV .n %r3;
    MOV %r2 %r3;
    PUSH %r2;
    CALL_REG @q 1 false;
    MOV %r1 $RET;
    JF %r1 _l2317_;
    MOV %r4 .o;
    JF %r4 _l2319_;
    MOV %r3 0;
    JMP _l2318_;
LABEL _l2319_:
    MOV %r6 .e;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
    MOV %r5 1;
    SUB %r3 %r5;
LABEL _l2318_:
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l2317_:
    MOV %r1 .n;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2320_;
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .n;
    ADD %r3 %r4;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l2320_:
    MOV %r0 .n;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GE %r0 %r1;
    JF %r0 _l2312_;
    MOV %r1 .o;
    JF %r1 _l2322_;
    MOV %r2 1;
    MINUS %r2;
    MOV $RET %r2;
    RET;
    JMP _l2321_;
LABEL _l2322_:
LABEL _l2321_:
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 1;
    SUB %r1 %r2;
    MOV .n %r1;
    JMP _l2311_;
LABEL _l2312_:
    MOV %r1 .n;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2323_;
    MOV %r2 .o;
    NEG %r2;
    JF %r2 _l2325_;
    MOV %r3 1;
    MINUS %r3;
    MOV $RET %r3;
    RET;
    JMP _l2324_;
LABEL _l2325_:
LABEL _l2324_:
    MOV %r2 0;
    MOV .n %r2;
    JMP _l2311_;
LABEL _l2323_:
LABEL _l2311_:
    MOV %r1 "string";
    MOV %r2 .r;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2328_;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r4 .i;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "from";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2328_:
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2327_;
    MOV %r2 0;
    MOV %r4 .r;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l2330_;
    MOV %r1 1;
    MINUS %r1;
    JMP _l2329_;
LABEL _l2330_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 .i;
    PUSH %r3;
    MOV %r3 .o;
    PUSH %r3;
    CALL_REG @b 5 false;
    MOV %r1 $RET;
LABEL _l2329_:
    MOV $RET %r1;
    RET;
    JMP _l2326_;
LABEL _l2327_:
LABEL _l2326_:
    MOV %r0 "number";
    MOV %r1 .r;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l2332_;
    MOV %r2 255;
    MOV %r3 .r;
    AND %r3 %r2;
    MOV .r %r3;
    MOV %r2 "function";
    MOV_CTX %r6 "Uint8Array";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "indexOf";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l2334_;
    MOV %r3 .o;
    JF %r3 _l2336_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r4 .n;
    PUSH %r4;
    MOV_CTX %r8 "Uint8Array";
    MOV %r9 "prototype";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "indexOf";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 3 false;
    MOV %r1 $RET;
    JMP _l2335_;
LABEL _l2336_:
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r4 .n;
    PUSH %r4;
    MOV_CTX %r8 "Uint8Array";
    MOV %r9 "prototype";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "lastIndexOf";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 3 false;
    MOV %r1 $RET;
LABEL _l2335_:
    JMP _l2333_;
LABEL _l2334_:
    MOV %r3 .e;
    PUSH %r3;
    NEW_ARR %r3;
    MOV %r4 .r;
    SET_KEY %r3 0 %r4;
    PUSH %r3;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 .i;
    PUSH %r3;
    MOV %r3 .o;
    PUSH %r3;
    CALL_REG @b 5 false;
    MOV %r1 $RET;
LABEL _l2333_:
    MOV $RET %r1;
    RET;
    JMP _l2331_;
LABEL _l2332_:
LABEL _l2331_:
    MOV %r1 "val must be string, number or Buffer";
    PUSH %r1;
    CALL_CTX 'TypeError' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f549(.e, .t, .r, .n, .i) {
    VAR o;
    CLS @s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    FUNC c @@f1027;
    MOV @s 1;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP a %r0 %r1;
    MOV %r0 .t;
    MOV %r1 "length";
    MOV_PROP u %r0 %r1;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .n;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2339_;
    MOV %r5 "ucs2";
    MOV %r10 .n;
    PUSH %r10;
    CALL_CTX 'String' 1 false;
    MOV %r8 $RET;
    MOV %r9 "toLowerCase";
    CALL_VAR %r8 %r9 0 false;
    MOV %r7 $RET;
    MOV .n %r7;
    MOV %r6 %r7;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l2342_;
    MOV %r6 "ucs-2";
    MOV %r7 .n;
    EQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l2342_:
    MOV %r3 %r4;
    JIF %r4 _l2341_;
    MOV %r5 "utf16le";
    MOV %r6 .n;
    EQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l2341_:
    MOV %r2 %r3;
    JIF %r3 _l2340_;
    MOV %r4 "utf-16le";
    MOV %r5 .n;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2340_:
    LG_AND %r0 %r2;
LABEL _l2339_:
    JF %r0 _l2338_;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 2;
    LT %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2345_;
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 2;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2345_:
    JF %r1 _l2344_;
    MOV %r2 1;
    MINUS %r2;
    MOV $RET %r2;
    RET;
    JMP _l2343_;
LABEL _l2344_:
LABEL _l2343_:
    MOV %r1 2;
    MOV @s %r1;
    MOV %r1 2;
    MOV %r2 a;
    DIV %r2 %r1;
    MOV a %r2;
    MOV %r1 2;
    MOV %r2 u;
    DIV %r2 %r1;
    MOV u %r2;
    MOV %r1 2;
    MOV %r2 .r;
    DIV %r2 %r1;
    MOV .r %r2;
    JMP _l2337_;
LABEL _l2338_:
LABEL _l2337_:
    MOV %r0 .i;
    JF %r0 _l2347_;
    MOV l 1;
    MINUS l;
    MOV %r1 .r;
    MOV o %r1;
LABEL _l2348_:
    MOV %r1 o;
    MOV %r2 a;
    LT %r1 %r2;
    JF %r1 _l2349_;
LABEL _l2351_:
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 o;
    PUSH %r4;
    CALL_REG c 2 false;
    MOV %r2 $RET;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r5 1;
    MINUS %r5;
    MOV %r6 l;
    EQ %r5 %r6;
    JF %r5 _l2355_;
    MOV %r4 0;
    JMP _l2354_;
LABEL _l2355_:
    MOV %r4 o;
    MOV %r6 l;
    SUB %r4 %r6;
LABEL _l2354_:
    PUSH %r4;
    CALL_REG c 2 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    JF %r2 _l2353_;
    MOV %r4 1;
    MINUS %r4;
    MOV %r5 l;
    EQ %r4 %r5;
    JF %r4 _l2358_;
    MOV %r6 o;
    MOV l %r6;
    MOV %r5 %r6;
LABEL _l2358_:
    MOV %r3 o;
    MOV %r6 l;
    SUB %r3 %r6;
    MOV %r5 1;
    ADD %r3 %r5;
    MOV %r4 u;
    EQ %r3 %r4;
    JF %r3 _l2357_;
    MOV %r4 l;
    MOV %r5 @s;
    MUL %r4 %r5;
    MOV $RET %r4;
    RET;
    JMP _l2356_;
LABEL _l2357_:
LABEL _l2356_:
    JMP _l2352_;
LABEL _l2353_:
    MOV %r3 1;
    MINUS %r3;
    MOV %r4 l;
    NE %r3 %r4;
    JF %r3 _l2359_;
    MOV %r5 o;
    MOV %r6 l;
    SUB %r5 %r6;
    MOV %r6 o;
    SUB %r6 %r5;
    MOV o %r6;
    MOV %r4 %r6;
LABEL _l2359_:
    MOV %r3 1;
    MINUS %r3;
    MOV l %r3;
LABEL _l2352_:
LABEL _l2350_:
    MOV %r2 o;
    ADD %r2 1;
    MOV o %r2;
    JMP _l2348_;
LABEL _l2349_:
    JMP _l2346_;
LABEL _l2347_:
    MOV %r1 .r;
    MOV %r3 u;
    ADD %r1 %r3;
    MOV %r2 a;
    GT %r1 %r2;
    JF %r1 _l2363_;
    MOV %r3 a;
    MOV %r4 u;
    SUB %r3 %r4;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2363_:
    MOV %r1 .r;
    MOV o %r1;
LABEL _l2360_:
    MOV %r1 o;
    MOV %r2 0;
    GE %r1 %r2;
    JF %r1 _l2361_;
LABEL _l2364_:
    BLOCK 9;
    MOV f 0;
    NEG f;
    MOV h 0;
LABEL _l2365_:
    MOV %r2 h;
    MOV %r3 u;
    LT %r2 %r3;
    JF %r2 _l2366_;
LABEL _l2368_:
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 o;
    MOV %r6 h;
    ADD %r5 %r6;
    PUSH %r5;
    CALL_REG c 2 false;
    MOV %r3 $RET;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 h;
    PUSH %r5;
    CALL_REG c 2 false;
    MOV %r4 $RET;
    NE %r3 %r4;
    JF %r3 _l2370_;
    MOV %r4 1;
    NEG %r4;
    MOV f %r4;
    CLR_BLOCK 9;
    JMP _l2366_;
    JMP _l2369_;
LABEL _l2370_:
LABEL _l2369_:
LABEL _l2367_:
    MOV %r3 h;
    ADD %r3 1;
    MOV h %r3;
    JMP _l2365_;
LABEL _l2366_:
    END_BLOCK 9;
    MOV %r2 f;
    JF %r2 _l2372_;
    MOV %r3 o;
    MOV $RET %r3;
    RET;
    JMP _l2371_;
LABEL _l2372_:
LABEL _l2371_:
LABEL _l2362_:
    MOV %r2 o;
    SUB %r2 1;
    MOV o %r2;
    JMP _l2360_;
LABEL _l2361_:
LABEL _l2346_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f550(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 .r;
    PUSH %r2;
    CALL_CTX 'Number' 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l2373_;
    MOV %r2 0;
    LG_OR %r0 %r2;
LABEL _l2373_:
    MOV .r %r0;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP i %r1 %r2;
    MOV %r0 .r;
    SUB i %r0;
    MOV %r0 .n;
    JF %r0 _l2375_;
    MOV %r4 .n;
    PUSH %r4;
    CALL_CTX 'Number' 1 false;
    MOV %r3 $RET;
    MOV .n %r3;
    MOV %r1 %r3;
    MOV %r2 i;
    GT %r1 %r2;
    JF %r1 _l2376_;
    MOV %r3 i;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l2376_:
    JMP _l2374_;
LABEL _l2375_:
    MOV %r1 i;
    MOV .n %r1;
LABEL _l2374_:
    MOV %r0 .t;
    MOV %r1 "length";
    MOV_PROP o %r0 %r1;
    MOV %r0 .n;
    MOV %r1 o;
    MOV %r2 2;
    DIV %r1 %r2;
    GT %r0 %r1;
    JF %r0 _l2377_;
    MOV %r2 o;
    MOV %r3 2;
    DIV %r2 %r3;
    MOV .n %r2;
    MOV %r1 %r2;
LABEL _l2377_:
    MOV s 0;
LABEL _l2378_:
    MOV %r0 s;
    MOV %r1 .n;
    LT %r0 %r1;
    JF %r0 _l2379_;
LABEL _l2381_:
    MOV %r2 2;
    MOV %r3 s;
    MUL %r2 %r3;
    PUSH %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "substr";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 16;
    PUSH %r1;
    CALL_CTX 'parseInt' 2 false;
    MOV a $RET;
    MOV %r2 a;
    PUSH %r2;
    CALL_REG @q 1 false;
    MOV %r1 $RET;
    JF %r1 _l2383_;
    MOV %r2 s;
    MOV $RET %r2;
    RET;
    JMP _l2382_;
LABEL _l2383_:
LABEL _l2382_:
    MOV %r1 a;
    MOV %r2 .e;
    MOV %r3 .r;
    MOV %r4 s;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
LABEL _l2380_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l2378_;
LABEL _l2379_:
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f551(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .r;
    SUB %r2 %r3;
    PUSH %r2;
    CALL_REG @B 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG @U 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f552(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r2 .t;
    PUSH %r2;
    FUNC %r2 @@f1028;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG @U 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f553(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG @y 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f554(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @N 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG @U 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f555(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .r;
    SUB %r2 %r3;
    PUSH %r2;
    FUNC %r2 @@f1029;
    CALL_REG %r2 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG @U 4 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f556(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 0;
    MOV %r3 .t;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2386_;
    MOV %r3 .r;
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2386_:
    JF %r1 _l2385_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "fromByteArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l2384_;
LABEL _l2385_:
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "fromByteArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l2384_:
    MOV $RET %r0;
    RET;
}
func @@f557(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    REG %r16;
    REG %r17;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "min";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV .r %r0;
    NEW_ARR n;
    MOV i .t;
LABEL _l2387_:
    MOV %r0 i;
    MOV %r1 .r;
    LT %r0 %r1;
    JF %r0 _l2388_;
LABEL _l2390_:
    MOV %r1 .e;
    MOV %r2 i;
    MOV_PROP c %r1 %r2;
    MOV l null;
    MOV %r1 c;
    MOV %r2 239;
    GT %r1 %r2;
    JF %r1 _l2392_;
    MOV f 4;
    JMP _l2391_;
LABEL _l2392_:
    MOV %r2 c;
    MOV %r3 223;
    GT %r2 %r3;
    JF %r2 _l2393_;
    MOV f 3;
    JMP _l2391_;
LABEL _l2393_:
    MOV %r3 c;
    MOV %r4 191;
    GT %r3 %r4;
    JF %r3 _l2394_;
    MOV f 2;
    JMP _l2391_;
LABEL _l2394_:
    MOV f 1;
LABEL _l2391_:
    MOV %r1 i;
    MOV %r3 f;
    ADD %r1 %r3;
    MOV %r2 .r;
    LE %r1 %r2;
    JF %r1 _l2396_;
    BLOCK 4;
    MOV %r2 f;
    MOV %r3 1;
    JE %r2 %r3 _l2398_;
    JMP _l2399_;
LABEL _l2398_:
    MOV %r4 c;
    MOV %r5 128;
    LT %r4 %r5;
    JF %r4 _l2400_;
    MOV %r6 c;
    MOV l %r6;
    MOV %r5 %r6;
LABEL _l2400_:
    CLR_BLOCK 4;
    JMP _l2397_;
    JMP _l2401_;
LABEL _l2399_:
    MOV %r4 2;
    JE %r2 %r4 _l2401_;
    JMP _l2402_;
LABEL _l2401_:
    MOV %r6 128;
    MOV %r7 192;
    MOV %r10 .e;
    MOV %r11 i;
    MOV %r12 1;
    ADD %r11 %r12;
    MOV_PROP %r9 %r10 %r11;
    MOV o %r9;
    MOV %r8 %r9;
    AND %r7 %r8;
    WEQ %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l2404_;
    MOV %r9 31;
    MOV %r12 c;
    AND %r9 %r12;
    MOV %r11 6;
    SHL %r9 %r11;
    MOV %r10 63;
    MOV %r11 o;
    AND %r10 %r11;
    OR %r9 %r10;
    MOV u %r9;
    MOV %r7 %r9;
    MOV %r8 127;
    GT %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l2404_:
    JF %r5 _l2403_;
    MOV %r7 u;
    MOV l %r7;
    MOV %r6 %r7;
LABEL _l2403_:
    CLR_BLOCK 4;
    JMP _l2397_;
    JMP _l2405_;
LABEL _l2402_:
    MOV %r5 3;
    JE %r2 %r5 _l2405_;
    JMP _l2406_;
LABEL _l2405_:
    MOV %r7 .e;
    MOV %r8 i;
    MOV %r9 1;
    ADD %r8 %r9;
    MOV_PROP %r6 %r7 %r8;
    MOV o %r6;
    MOV %r7 .e;
    MOV %r8 i;
    MOV %r9 2;
    ADD %r8 %r9;
    MOV_PROP %r6 %r7 %r8;
    MOV s %r6;
    MOV %r9 128;
    MOV %r10 192;
    MOV %r11 o;
    AND %r10 %r11;
    WEQ %r9 %r10;
    MOV %r8 %r9;
    JF %r9 _l2410_;
    MOV %r10 128;
    MOV %r11 192;
    MOV %r12 s;
    AND %r11 %r12;
    WEQ %r10 %r11;
    LG_AND %r8 %r10;
LABEL _l2410_:
    MOV %r7 %r8;
    JF %r8 _l2409_;
    MOV %r11 15;
    MOV %r15 c;
    AND %r11 %r15;
    MOV %r14 12;
    SHL %r11 %r14;
    MOV %r13 63;
    MOV %r15 o;
    AND %r13 %r15;
    MOV %r14 6;
    SHL %r13 %r14;
    OR %r11 %r13;
    MOV %r12 63;
    MOV %r13 s;
    AND %r12 %r13;
    OR %r11 %r12;
    MOV u %r11;
    MOV %r9 %r11;
    MOV %r10 2047;
    GT %r9 %r10;
    LG_AND %r7 %r9;
LABEL _l2409_:
    MOV %r6 %r7;
    JF %r7 _l2408_;
    MOV %r9 u;
    MOV %r10 55296;
    LT %r9 %r10;
    MOV %r8 %r9;
    JIF %r9 _l2411_;
    MOV %r10 u;
    MOV %r11 57343;
    GT %r10 %r11;
    LG_OR %r8 %r10;
LABEL _l2411_:
    LG_AND %r6 %r8;
LABEL _l2408_:
    JF %r6 _l2407_;
    MOV %r8 u;
    MOV l %r8;
    MOV %r7 %r8;
LABEL _l2407_:
    CLR_BLOCK 4;
    JMP _l2397_;
    JMP _l2412_;
LABEL _l2406_:
    MOV %r6 4;
    JE %r2 %r6 _l2412_;
    JMP _l2413_;
LABEL _l2412_:
    MOV %r8 .e;
    MOV %r9 i;
    MOV %r10 1;
    ADD %r9 %r10;
    MOV_PROP %r7 %r8 %r9;
    MOV o %r7;
    MOV %r8 .e;
    MOV %r9 i;
    MOV %r10 2;
    ADD %r9 %r10;
    MOV_PROP %r7 %r8 %r9;
    MOV s %r7;
    MOV %r8 .e;
    MOV %r9 i;
    MOV %r10 3;
    ADD %r9 %r10;
    MOV_PROP %r7 %r8 %r9;
    MOV a %r7;
    MOV %r11 128;
    MOV %r12 192;
    MOV %r13 o;
    AND %r12 %r13;
    WEQ %r11 %r12;
    MOV %r10 %r11;
    JF %r11 _l2418_;
    MOV %r12 128;
    MOV %r13 192;
    MOV %r14 s;
    AND %r13 %r14;
    WEQ %r12 %r13;
    LG_AND %r10 %r12;
LABEL _l2418_:
    MOV %r9 %r10;
    JF %r10 _l2417_;
    MOV %r11 128;
    MOV %r12 192;
    MOV %r13 a;
    AND %r12 %r13;
    WEQ %r11 %r12;
    LG_AND %r9 %r11;
LABEL _l2417_:
    MOV %r8 %r9;
    JF %r9 _l2416_;
    MOV %r12 15;
    MOV %r17 c;
    AND %r12 %r17;
    MOV %r16 18;
    SHL %r12 %r16;
    MOV %r15 63;
    MOV %r17 o;
    AND %r15 %r17;
    MOV %r16 12;
    SHL %r15 %r16;
    OR %r12 %r15;
    MOV %r14 63;
    MOV %r16 s;
    AND %r14 %r16;
    MOV %r15 6;
    SHL %r14 %r15;
    OR %r12 %r14;
    MOV %r13 63;
    MOV %r14 a;
    AND %r13 %r14;
    OR %r12 %r13;
    MOV u %r12;
    MOV %r10 %r12;
    MOV %r11 65535;
    GT %r10 %r11;
    LG_AND %r8 %r10;
LABEL _l2416_:
    MOV %r7 %r8;
    JF %r8 _l2415_;
    MOV %r9 u;
    MOV %r10 1114112;
    LT %r9 %r10;
    LG_AND %r7 %r9;
LABEL _l2415_:
    JF %r7 _l2414_;
    MOV %r9 u;
    MOV l %r9;
    MOV %r8 %r9;
LABEL _l2414_:
    JMP _l2419_;
LABEL _l2413_:
LABEL _l2419_:
LABEL _l2397_:
    END_BLOCK 4;
    JMP _l2395_;
LABEL _l2396_:
LABEL _l2395_:
    MOV %r1 null;
    MOV %r2 l;
    EQ %r1 %r2;
    JF %r1 _l2421_;
    MOV %r2 65533;
    MOV l %r2;
    MOV %r2 1;
    MOV f %r2;
    JMP _l2420_;
LABEL _l2421_:
    MOV %r2 l;
    MOV %r3 65535;
    GT %r2 %r3;
    JF %r2 _l2422_;
    MOV %r4 65536;
    MOV %r5 l;
    SUB %r5 %r4;
    MOV l %r5;
    MOV %r4 l;
    MOV %r7 10;
    ZSHR %r4 %r7;
    MOV %r6 1023;
    AND %r4 %r6;
    MOV %r5 55296;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 n;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 1 false;
    MOV %r4 56320;
    MOV %r5 1023;
    MOV %r6 l;
    AND %r5 %r6;
    OR %r4 %r5;
    MOV l %r4;
    MOV %r3 %r4;
LABEL _l2422_:
LABEL _l2420_:
    MOV %r1 l;
    PUSH %r1;
    MOV %r1 n;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 f;
    MOV %r2 i;
    ADD %r2 %r1;
    MOV i %r2;
    JMP _l2387_;
LABEL _l2388_:
    MOV %r1 n;
    PUSH %r1;
    FUNC %r1 @@f1030;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f558() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    TRY _l2423_ _l2424_;
    MOV %r0 1;
    PUSH %r0;
    CALL_CTX 'Uint8Array' 1 true;
    MOV e $RET;
    NEW_OBJ %r1;
    MOV_CTX %r3 "Uint8Array";
    MOV %r4 "prototype";
    MOV_PROP %r2 %r3 %r4;
    SET_KEY %r1 '__proto__' %r2;
    FUNC %r2 @@f1031;
    SET_KEY %r1 'foo' %r2;
    MOV %r2 e;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 42;
    MOV %r2 e;
    MOV %r3 "foo";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l2423_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 1;
    NEG %r0;
    MOV $RET %r0;
    RET;
    END_BLOCK 2;
LABEL _l2424_:
}
func @@f559() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2426_;
    MOV_THIS %r2;
    MOV %r3 "buffer";
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l2425_;
LABEL _l2426_:
LABEL _l2425_:
}
func @@f560() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l2428_;
    MOV_THIS %r2;
    MOV %r3 "byteOffset";
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l2427_;
LABEL _l2428_:
LABEL _l2427_:
}
func @@f561(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @a 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f562(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    FUNC %r1 @@f1032;
    CALL_REG %r1 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f563(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f564(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f565(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 null;
    MOV %r3 .e;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2430_;
    MOV %r3 0;
    NEG %r3;
    MOV %r5 .e;
    MOV %r6 "_isBuffer";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2430_:
    MOV %r0 %r1;
    JF %r1 _l2429_;
    MOV %r2 .e;
    MOV %r4 @t;
    MOV %r5 "prototype";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2429_:
    MOV $RET %r0;
    RET;
}
func @@f566(.e, .r) {
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "Uint8Array";
    PUSH %r2;
    CALL_REG @D 2 false;
    MOV %r1 $RET;
    JF %r1 _l2433_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r5 .e;
    MOV %r6 "offset";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 .e;
    MOV %r6 "byteLength";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "from";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2433_:
    MOV %r2 .r;
    PUSH %r2;
    MOV_CTX %r2 "Uint8Array";
    PUSH %r2;
    CALL_REG @D 2 false;
    MOV %r1 $RET;
    JF %r1 _l2434_;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r5 .r;
    MOV %r6 "offset";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 .r;
    MOV %r6 "byteLength";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "from";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2434_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "isBuffer";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2435_;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 @t;
    MOV %r4 "isBuffer";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l2435_:
    JF %r0 _l2432_;
    MOV %r2 "The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2431_;
LABEL _l2432_:
LABEL _l2431_:
    MOV %r0 .e;
    MOV %r1 .r;
    EQ %r0 %r1;
    JF %r0 _l2437_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l2436_;
LABEL _l2437_:
LABEL _l2436_:
    BLOCK 1;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
    MOV %r0 .r;
    MOV %r1 "length";
    MOV_PROP i %r0 %r1;
    MOV o 0;
    MOV %r0 n;
    PUSH %r0;
    MOV %r0 i;
    PUSH %r0;
    MOV_CTX %r0 "Math";
    MOV %r1 "min";
    CALL_VAR %r0 %r1 2 false;
    MOV s $RET;
LABEL _l2438_:
    MOV %r0 o;
    MOV %r1 s;
    LT %r0 %r1;
    JF %r0 _l2439_;
LABEL _l2441_:
    MOV %r3 .e;
    MOV %r4 o;
    MOV_PROP %r1 %r3 %r4;
    MOV %r3 .r;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l2443_;
    MOV %r3 .e;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    MOV n %r2;
    MOV %r3 .r;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    MOV i %r2;
    CLR_BLOCK 1;
    JMP _l2439_;
    JMP _l2442_;
LABEL _l2443_:
LABEL _l2442_:
LABEL _l2440_:
    MOV %r1 o;
    ADD %r1 1;
    MOV o %r1;
    JMP _l2438_;
LABEL _l2439_:
    END_BLOCK 1;
    MOV %r1 n;
    MOV %r2 i;
    LT %r1 %r2;
    JF %r1 _l2445_;
    MOV %r0 1;
    MINUS %r0;
    JMP _l2444_;
LABEL _l2445_:
    MOV %r2 i;
    MOV %r3 n;
    LT %r2 %r3;
    JF %r2 _l2446_;
    MOV %r0 1;
    JMP _l2444_;
LABEL _l2446_:
    MOV %r0 0;
LABEL _l2444_:
    MOV $RET %r0;
    RET;
}
func @@f567(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    MOV %r3 .e;
    PUSH %r3;
    CALL_CTX 'String' 1 false;
    MOV %r1 $RET;
    MOV %r2 "toLowerCase";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV %r1 "hex";
    JE %r0 %r1 _l2448_;
    JMP _l2449_;
LABEL _l2449_:
    MOV %r2 "utf8";
    JE %r0 %r2 _l2448_;
    JMP _l2450_;
LABEL _l2450_:
    MOV %r3 "utf-8";
    JE %r0 %r3 _l2448_;
    JMP _l2451_;
LABEL _l2451_:
    MOV %r4 "ascii";
    JE %r0 %r4 _l2448_;
    JMP _l2452_;
LABEL _l2452_:
    MOV %r5 "latin1";
    JE %r0 %r5 _l2448_;
    JMP _l2453_;
LABEL _l2453_:
    MOV %r6 "binary";
    JE %r0 %r6 _l2448_;
    JMP _l2454_;
LABEL _l2454_:
    MOV %r7 "base64";
    JE %r0 %r7 _l2448_;
    JMP _l2455_;
LABEL _l2455_:
    MOV %r8 "ucs2";
    JE %r0 %r8 _l2448_;
    JMP _l2456_;
LABEL _l2456_:
    MOV %r9 "ucs-2";
    JE %r0 %r9 _l2448_;
    JMP _l2457_;
LABEL _l2457_:
    MOV %r10 "utf16le";
    JE %r0 %r10 _l2448_;
    JMP _l2458_;
LABEL _l2458_:
    MOV %r11 "utf-16le";
    JE %r0 %r11 _l2448_;
    JMP _l2459_;
LABEL _l2448_:
    MOV %r12 0;
    NEG %r12;
    MOV $RET %r12;
    RET;
    JMP _l2460_;
LABEL _l2459_:
LABEL _l2460_:
    MOV %r12 1;
    NEG %r12;
    MOV $RET %r12;
    RET;
    JMP _l2462_;
LABEL _l2461_:
LABEL _l2462_:
LABEL _l2447_:
}
func @@f568(.e, .r) {
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r1 "Array";
    MOV %r2 "isArray";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2464_;
    MOV %r2 "\"list\" argument must be an Array of Buffers";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2463_;
LABEL _l2464_:
LABEL _l2463_:
    MOV %r0 0;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l2466_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "alloc";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2465_;
LABEL _l2466_:
LABEL _l2465_:
    MOV %r0 0;
    VOID %r0;
    MOV %r1 .r;
    EQ %r0 %r1;
    JF %r0 _l2468_;
    MOV %r1 0;
    MOV .r %r1;
    MOV %r1 0;
    MOV n %r1;
LABEL _l2469_:
    MOV %r1 n;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l2470_;
LABEL _l2472_:
    MOV %r5 .e;
    MOV %r6 n;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .r;
    ADD %r3 %r2;
    MOV .r %r3;
LABEL _l2471_:
    MOV %r2 n;
    ADD %r2 1;
    MOV n %r2;
    JMP _l2469_;
LABEL _l2470_:
    JMP _l2467_;
LABEL _l2468_:
LABEL _l2467_:
    MOV %r0 .r;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV i $RET;
    MOV o 0;
    MOV %r0 0;
    MOV n %r0;
LABEL _l2473_:
    MOV %r0 n;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l2474_;
LABEL _l2476_:
    MOV %r1 .e;
    MOV %r2 n;
    MOV_PROP s %r1 %r2;
    MOV %r3 s;
    PUSH %r3;
    MOV_CTX %r3 "Uint8Array";
    PUSH %r3;
    CALL_REG @D 2 false;
    MOV %r2 $RET;
    JF %r2 _l2479_;
    MOV %r5 s;
    PUSH %r5;
    MOV %r5 @t;
    MOV %r6 "from";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV s %r4;
    MOV %r3 %r4;
LABEL _l2479_:
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "isBuffer";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l2478_;
    MOV %r3 "\"list\" argument must be an Array of Buffers";
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2477_;
LABEL _l2478_:
LABEL _l2477_:
    MOV %r1 i;
    PUSH %r1;
    MOV %r1 o;
    PUSH %r1;
    MOV %r1 s;
    MOV %r2 "copy";
    CALL_VAR %r1 %r2 2 false;
    MOV %r2 s;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 o;
    ADD %r2 %r1;
    MOV o %r2;
LABEL _l2475_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l2473_;
LABEL _l2474_:
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f569() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 "length";
    MOV_PROP e %r0 %r1;
    MOV %r0 e;
    MOV %r2 2;
    MOD %r0 %r2;
    MOV %r1 0;
    WNE %r0 %r1;
    JF %r0 _l2481_;
    MOV %r2 "Buffer size must be a multiple of 16-bits";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2480_;
LABEL _l2481_:
LABEL _l2480_:
    MOV t 0;
LABEL _l2482_:
    MOV %r0 t;
    MOV %r1 e;
    LT %r0 %r1;
    JF %r0 _l2483_;
LABEL _l2485_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 1;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
LABEL _l2484_:
    MOV %r1 2;
    MOV %r2 t;
    ADD %r2 %r1;
    MOV t %r2;
    JMP _l2482_;
LABEL _l2483_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f570() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 "length";
    MOV_PROP e %r0 %r1;
    MOV %r0 e;
    MOV %r2 4;
    MOD %r0 %r2;
    MOV %r1 0;
    WNE %r0 %r1;
    JF %r0 _l2487_;
    MOV %r2 "Buffer size must be a multiple of 32-bits";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2486_;
LABEL _l2487_:
LABEL _l2486_:
    MOV t 0;
LABEL _l2488_:
    MOV %r0 t;
    MOV %r1 e;
    LT %r0 %r1;
    JF %r0 _l2489_;
LABEL _l2491_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 3;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 1;
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 2;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
LABEL _l2490_:
    MOV %r1 4;
    MOV %r2 t;
    ADD %r2 %r1;
    MOV t %r2;
    JMP _l2488_;
LABEL _l2489_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f571() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r0;
    MOV %r1 "length";
    MOV_PROP e %r0 %r1;
    MOV %r0 e;
    MOV %r2 8;
    MOD %r0 %r2;
    MOV %r1 0;
    WNE %r0 %r1;
    JF %r0 _l2493_;
    MOV %r2 "Buffer size must be a multiple of 64-bits";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2492_;
LABEL _l2493_:
LABEL _l2492_:
    MOV t 0;
LABEL _l2494_:
    MOV %r0 t;
    MOV %r1 e;
    LT %r0 %r1;
    JF %r0 _l2495_;
LABEL _l2497_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 7;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 1;
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 6;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 2;
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 5;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 3;
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 4;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @p 3 false;
LABEL _l2496_:
    MOV %r1 8;
    MOV %r2 t;
    ADD %r2 %r1;
    MOV t %r2;
    JMP _l2494_;
LABEL _l2495_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f572() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "length";
    MOV_PROP e %r0 %r1;
    MOV %r1 0;
    MOV %r2 e;
    EQ %r1 %r2;
    JF %r1 _l2499_;
    MOV %r0 "";
    JMP _l2498_;
LABEL _l2499_:
    MOV %r2 0;
    MOV_ARGS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l2500_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 e;
    PUSH %r3;
    CALL_REG @E 3 false;
    MOV %r0 $RET;
    JMP _l2498_;
LABEL _l2500_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV_ARGS %r3;
    PUSH %r3;
    FUNC %r3 @@f1033;
    MOV %r4 "apply";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
LABEL _l2498_:
    MOV $RET %r0;
    RET;
}
func @@f573(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2502_;
    MOV %r2 "Argument must be a Buffer";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2501_;
LABEL _l2502_:
LABEL _l2501_:
    MOV_THIS %r1;
    MOV %r2 .e;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2503_;
    MOV %r2 0;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "compare";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2503_:
    MOV $RET %r0;
    RET;
}
func @@f574() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV e "";
    MOV %r0 @r;
    MOV %r1 "INSPECT_MAX_BYTES";
    MOV_PROP t %r0 %r1;
    NEW_REG %r4 "(.{2})" "g";
    PUSH %r4;
    MOV %r4 "$1 ";
    PUSH %r4;
    MOV %r6 "hex";
    PUSH %r6;
    MOV %r6 0;
    PUSH %r6;
    MOV %r6 t;
    PUSH %r6;
    MOV_THIS %r6;
    MOV %r7 "toString";
    CALL_VAR %r6 %r7 3 false;
    MOV %r4 $RET;
    MOV %r5 "replace";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    MOV %r3 "trim";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV e %r1;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 t;
    GT %r1 %r2;
    JF %r1 _l2504_;
    MOV %r3 " ... ";
    MOV %r4 e;
    ADD %r4 %r3;
    MOV e %r4;
    MOV %r2 %r4;
LABEL _l2504_:
    MOV %r0 "<Buffer ";
    MOV %r2 e;
    ADD %r0 %r2;
    MOV %r1 ">";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f575(.e, .r, .n, .i, .o) {
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "Uint8Array";
    PUSH %r2;
    CALL_REG @D 2 false;
    MOV %r1 $RET;
    JF %r1 _l2507_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r5 .e;
    MOV %r6 "offset";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 .e;
    MOV %r6 "byteLength";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "from";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2507_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2506_;
    MOV %r2 "The \"target\" argument must be one of type Buffer or Uint8Array. Received type ";
    MOV %r3 .e;
    TYPE_OF %r3;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2505_;
LABEL _l2506_:
LABEL _l2505_:
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .r;
    EQ %r1 %r2;
    JF %r1 _l2510_;
    MOV %r3 0;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2510_:
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .n;
    EQ %r1 %r2;
    JF %r1 _l2511_;
    MOV %r4 .e;
    JF %r4 _l2513_;
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    JMP _l2512_;
LABEL _l2513_:
    MOV %r3 0;
LABEL _l2512_:
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l2511_:
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .i;
    EQ %r1 %r2;
    JF %r1 _l2514_;
    MOV %r3 0;
    MOV .i %r3;
    MOV %r2 %r3;
LABEL _l2514_:
    MOV %r1 0;
    VOID %r1;
    MOV %r2 .o;
    EQ %r1 %r2;
    JF %r1 _l2515_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .o %r3;
    MOV %r2 %r3;
LABEL _l2515_:
    MOV %r3 .r;
    MOV %r4 0;
    LT %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2518_;
    MOV %r4 .n;
    MOV %r6 .e;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    GT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2518_:
    MOV %r1 %r2;
    JIF %r2 _l2517_;
    MOV %r3 .i;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2517_:
    MOV %r0 %r1;
    JIF %r1 _l2516_;
    MOV %r2 .o;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    GT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2516_:
    JF %r0 _l2509_;
    MOV %r2 "out of range index";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2508_;
LABEL _l2509_:
LABEL _l2508_:
    MOV %r1 .i;
    MOV %r2 .o;
    GE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2521_;
    MOV %r2 .r;
    MOV %r3 .n;
    GE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2521_:
    JF %r0 _l2520_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l2519_;
LABEL _l2520_:
LABEL _l2519_:
    MOV %r0 .i;
    MOV %r1 .o;
    GE %r0 %r1;
    JF %r0 _l2523_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l2522_;
LABEL _l2523_:
LABEL _l2522_:
    MOV %r0 .r;
    MOV %r1 .n;
    GE %r0 %r1;
    JF %r0 _l2525_;
    MOV %r1 1;
    MOV $RET %r1;
    RET;
    JMP _l2524_;
LABEL _l2525_:
LABEL _l2524_:
    MOV_THIS %r0;
    MOV %r1 .e;
    EQ %r0 %r1;
    JF %r0 _l2527_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l2526_;
LABEL _l2527_:
LABEL _l2526_:
    BLOCK 1;
    MOV %r1 0;
    MOV %r2 .o;
    ZSHR %r2 %r1;
    MOV .o %r2;
    MOV s %r2;
    MOV %r1 0;
    MOV %r2 .i;
    ZSHR %r2 %r1;
    MOV .i %r2;
    MOV %r0 %r2;
    SUB s %r0;
    MOV %r1 0;
    MOV %r2 .n;
    ZSHR %r2 %r1;
    MOV .n %r2;
    MOV a %r2;
    MOV %r1 0;
    MOV %r2 .r;
    ZSHR %r2 %r1;
    MOV .r %r2;
    MOV %r0 %r2;
    SUB a %r0;
    MOV %r0 s;
    PUSH %r0;
    MOV %r0 a;
    PUSH %r0;
    MOV_CTX %r0 "Math";
    MOV %r1 "min";
    CALL_VAR %r0 %r1 2 false;
    MOV u $RET;
    MOV %r0 .i;
    PUSH %r0;
    MOV %r0 .o;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "slice";
    CALL_VAR %r0 %r1 2 false;
    MOV c $RET;
    MOV %r0 .r;
    PUSH %r0;
    MOV %r0 .n;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "slice";
    CALL_VAR %r0 %r1 2 false;
    MOV l $RET;
    MOV f 0;
LABEL _l2528_:
    MOV %r0 f;
    MOV %r1 u;
    LT %r0 %r1;
    JF %r0 _l2529_;
LABEL _l2531_:
    MOV %r3 c;
    MOV %r4 f;
    MOV_PROP %r1 %r3 %r4;
    MOV %r3 l;
    MOV %r4 f;
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l2533_;
    MOV %r3 c;
    MOV %r4 f;
    MOV_PROP %r2 %r3 %r4;
    MOV s %r2;
    MOV %r3 l;
    MOV %r4 f;
    MOV_PROP %r2 %r3 %r4;
    MOV a %r2;
    CLR_BLOCK 1;
    JMP _l2529_;
    JMP _l2532_;
LABEL _l2533_:
LABEL _l2532_:
LABEL _l2530_:
    MOV %r1 f;
    ADD %r1 1;
    MOV f %r1;
    JMP _l2528_;
LABEL _l2529_:
    END_BLOCK 1;
    MOV %r1 s;
    MOV %r2 a;
    LT %r1 %r2;
    JF %r1 _l2535_;
    MOV %r0 1;
    MINUS %r0;
    JMP _l2534_;
LABEL _l2535_:
    MOV %r2 a;
    MOV %r3 s;
    LT %r2 %r3;
    JF %r2 _l2536_;
    MOV %r0 1;
    JMP _l2534_;
LABEL _l2536_:
    MOV %r0 0;
LABEL _l2534_:
    MOV $RET %r0;
    RET;
}
func @@f576(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    MINUS %r0;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "indexOf";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    NE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f577(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    CALL_REG @d 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f578(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    CALL_REG @d 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f579(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    MOV %r0 0;
    VOID %r0;
    MOV %r1 .t;
    EQ %r0 %r1;
    JF %r0 _l2538_;
    MOV %r1 "utf8";
    MOV .n %r1;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV .r %r1;
    MOV %r1 0;
    MOV .t %r1;
    JMP _l2537_;
LABEL _l2538_:
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .r;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2540_;
    MOV %r3 "string";
    MOV %r4 .t;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2540_:
    JF %r1 _l2539_;
    MOV %r2 .t;
    MOV .n %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV .r %r2;
    MOV %r2 0;
    MOV .t %r2;
    JMP _l2537_;
LABEL _l2539_:
    MOV %r3 .t;
    PUSH %r3;
    CALL_CTX 'isFinite' 1 false;
    MOV %r2 $RET;
    NEG %r2;
    JF %r2 _l2542_;
    MOV %r4 "Buffer.write(string, encoding, offset[, length]) is no longer supported";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    THROW %r3;
    JMP _l2541_;
LABEL _l2542_:
LABEL _l2541_:
    MOV %r2 0;
    MOV %r3 .t;
    ZSHR %r3 %r2;
    MOV .t %r3;
    MOV %r3 .r;
    PUSH %r3;
    CALL_CTX 'isFinite' 1 false;
    MOV %r2 $RET;
    JF %r2 _l2544_;
    MOV %r3 0;
    MOV %r4 .r;
    ZSHR %r4 %r3;
    MOV .r %r4;
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .n;
    EQ %r3 %r4;
    JF %r3 _l2545_;
    MOV %r5 "utf8";
    MOV .n %r5;
    MOV %r4 %r5;
LABEL _l2545_:
    JMP _l2543_;
LABEL _l2544_:
    MOV %r3 .r;
    MOV .n %r3;
    MOV %r3 0;
    VOID %r3;
    MOV .r %r3;
LABEL _l2543_:
LABEL _l2537_:
    MOV_THIS %r1;
    MOV %r2 "length";
    MOV_PROP i %r1 %r2;
    MOV %r0 .t;
    SUB i %r0;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .r;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2549_;
    MOV %r3 .r;
    MOV %r4 i;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2549_:
    JF %r1 _l2548_;
    MOV %r3 i;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2548_:
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    GT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2551_;
    MOV %r4 .r;
    MOV %r5 0;
    LT %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l2552_;
    MOV %r5 .t;
    MOV %r6 0;
    LT %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l2552_:
    LG_AND %r1 %r3;
LABEL _l2551_:
    MOV %r0 %r1;
    JIF %r1 _l2550_;
    MOV %r2 .t;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    GT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2550_:
    JF %r0 _l2547_;
    MOV %r2 "Attempt to write outside buffer bounds";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2546_;
LABEL _l2547_:
LABEL _l2546_:
    MOV %r0 .n;
    JIF %r0 _l2553_;
    MOV %r2 "utf8";
    MOV .n %r2;
    MOV %r1 %r2;
LABEL _l2553_:
    MOV o 1;
    NEG o;
LABEL _l2554_:
LABEL _l2557_:
    MOV %r0 .n;
    MOV %r1 "hex";
    JE %r0 %r1 _l2559_;
    JMP _l2560_;
LABEL _l2559_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    CALL_REG @g 4 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l2561_;
LABEL _l2560_:
    MOV %r2 "utf8";
    JE %r0 %r2 _l2561_;
    JMP _l2562_;
LABEL _l2562_:
    MOV %r3 "utf-8";
    JE %r0 %r3 _l2561_;
    JMP _l2563_;
LABEL _l2561_:
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 .r;
    PUSH %r5;
    CALL_REG @_ 4 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    JMP _l2564_;
LABEL _l2563_:
    MOV %r4 "ascii";
    JE %r0 %r4 _l2564_;
    JMP _l2565_;
LABEL _l2564_:
    MOV_THIS %r6;
    PUSH %r6;
    MOV %r6 .e;
    PUSH %r6;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 .r;
    PUSH %r6;
    CALL_REG @y 4 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
    JMP _l2566_;
LABEL _l2565_:
    MOV %r5 "latin1";
    JE %r0 %r5 _l2566_;
    JMP _l2567_;
LABEL _l2567_:
    MOV %r6 "binary";
    JE %r0 %r6 _l2566_;
    JMP _l2568_;
LABEL _l2566_:
    MOV_THIS %r8;
    PUSH %r8;
    MOV %r8 .e;
    PUSH %r8;
    MOV %r8 .t;
    PUSH %r8;
    MOV %r8 .r;
    PUSH %r8;
    CALL_REG @m 4 false;
    MOV %r7 $RET;
    MOV $RET %r7;
    RET;
    JMP _l2569_;
LABEL _l2568_:
    MOV %r7 "base64";
    JE %r0 %r7 _l2569_;
    JMP _l2570_;
LABEL _l2569_:
    MOV_THIS %r9;
    PUSH %r9;
    MOV %r9 .e;
    PUSH %r9;
    MOV %r9 .t;
    PUSH %r9;
    MOV %r9 .r;
    PUSH %r9;
    CALL_REG @v 4 false;
    MOV %r8 $RET;
    MOV $RET %r8;
    RET;
    JMP _l2571_;
LABEL _l2570_:
    MOV %r8 "ucs2";
    JE %r0 %r8 _l2571_;
    JMP _l2572_;
LABEL _l2572_:
    MOV %r9 "ucs-2";
    JE %r0 %r9 _l2571_;
    JMP _l2573_;
LABEL _l2573_:
    MOV %r10 "utf16le";
    JE %r0 %r10 _l2571_;
    JMP _l2574_;
LABEL _l2574_:
    MOV %r11 "utf-16le";
    JE %r0 %r11 _l2571_;
    JMP _l2575_;
LABEL _l2571_:
    MOV_THIS %r13;
    PUSH %r13;
    MOV %r13 .e;
    PUSH %r13;
    MOV %r13 .t;
    PUSH %r13;
    MOV %r13 .r;
    PUSH %r13;
    CALL_REG @w 4 false;
    MOV %r12 $RET;
    MOV $RET %r12;
    RET;
    JMP _l2576_;
LABEL _l2575_:
LABEL _l2576_:
    MOV %r12 o;
    JF %r12 _l2579_;
    MOV %r14 "Unknown encoding: ";
    MOV %r15 .n;
    ADD %r14 %r15;
    PUSH %r14;
    CALL_CTX 'TypeError' 1 true;
    MOV %r13 $RET;
    THROW %r13;
    JMP _l2578_;
LABEL _l2579_:
LABEL _l2578_:
    MOV %r13 "";
    MOV %r15 .n;
    ADD %r13 %r15;
    MOV %r14 "toLowerCase";
    CALL_VAR %r13 %r14 0 false;
    MOV %r12 $RET;
    MOV .n %r12;
    MOV %r12 0;
    NEG %r12;
    MOV o %r12;
    JMP _l2580_;
LABEL _l2577_:
LABEL _l2580_:
LABEL _l2558_:
    JMP _l2554_;
LABEL _l2555_:
}
func @@f580() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    NEW_OBJ %r0;
    MOV %r1 "Buffer";
    SET_KEY %r0 'type' %r1;
    MOV_THIS %r4;
    MOV %r5 "_arr";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l2581_;
    MOV_THIS %r4;
    LG_OR %r2 %r4;
LABEL _l2581_:
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV_CTX %r6 "Array";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "slice";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    SET_KEY %r0 'data' %r1;
    MOV $RET %r0;
    RET;
}
func @@f581(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV n "";
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "min";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV .r %r0;
    MOV i .t;
LABEL _l2582_:
    MOV %r0 i;
    MOV %r1 .r;
    LT %r0 %r1;
    JF %r0 _l2583_;
LABEL _l2585_:
    MOV %r2 127;
    MOV %r4 .e;
    MOV %r5 i;
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    PUSH %r2;
    MOV_CTX %r2 "String";
    MOV %r3 "fromCharCode";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
LABEL _l2584_:
    MOV %r1 i;
    ADD %r1 1;
    MOV i %r1;
    JMP _l2582_;
LABEL _l2583_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f582(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV n "";
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "min";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV .r %r0;
    MOV i .t;
LABEL _l2586_:
    MOV %r0 i;
    MOV %r1 .r;
    LT %r0 %r1;
    JF %r0 _l2587_;
LABEL _l2589_:
    MOV %r3 .e;
    MOV %r4 i;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_CTX %r2 "String";
    MOV %r3 "fromCharCode";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
LABEL _l2588_:
    MOV %r1 i;
    ADD %r1 1;
    MOV i %r1;
    JMP _l2586_;
LABEL _l2587_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f583(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
    MOV %r1 .t;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2591_;
    MOV %r2 .t;
    MOV %r3 0;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2591_:
    JF %r0 _l2590_;
    MOV %r2 0;
    MOV .t %r2;
    MOV %r1 %r2;
LABEL _l2590_:
    MOV %r2 .r;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l2594_;
    MOV %r3 .r;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2594_:
    MOV %r0 %r1;
    JIF %r1 _l2593_;
    MOV %r2 .r;
    MOV %r3 n;
    GT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2593_:
    JF %r0 _l2592_;
    MOV %r2 n;
    MOV .r %r2;
    MOV %r1 %r2;
LABEL _l2592_:
    MOV i "";
    MOV o .t;
LABEL _l2595_:
    MOV %r0 o;
    MOV %r1 .r;
    LT %r0 %r1;
    JF %r0 _l2596_;
LABEL _l2598_:
    MOV %r3 .e;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @L 1 false;
    MOV %r1 $RET;
    MOV %r2 i;
    ADD %r2 %r1;
    MOV i %r2;
LABEL _l2597_:
    MOV %r1 o;
    ADD %r1 1;
    MOV o %r1;
    JMP _l2595_;
LABEL _l2596_:
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f584(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "slice";
    CALL_VAR %r0 %r1 2 false;
    MOV n $RET;
    MOV i "";
    MOV o 0;
LABEL _l2599_:
    MOV %r0 o;
    MOV %r2 n;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l2600_;
LABEL _l2602_:
    MOV %r4 n;
    MOV %r5 o;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 256;
    MOV %r5 n;
    MOV %r6 o;
    MOV %r7 1;
    ADD %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    MUL %r3 %r4;
    ADD %r2 %r3;
    PUSH %r2;
    MOV_CTX %r2 "String";
    MOV %r3 "fromCharCode";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 i;
    ADD %r2 %r1;
    MOV i %r2;
LABEL _l2601_:
    MOV %r1 2;
    MOV %r2 o;
    ADD %r2 %r1;
    MOV o %r2;
    JMP _l2599_;
LABEL _l2600_:
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f585(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    MOV %r3 1;
    MOD %r1 %r3;
    MOV %r2 0;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2605_;
    MOV %r2 .e;
    MOV %r3 0;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2605_:
    JF %r0 _l2604_;
    MOV %r2 "offset is not uint";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2603_;
LABEL _l2604_:
LABEL _l2603_:
    MOV %r0 .e;
    MOV %r2 .t;
    ADD %r0 %r2;
    MOV %r1 .r;
    GT %r0 %r1;
    JF %r0 _l2607_;
    MOV %r2 "Trying to access beyond buffer length";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2606_;
LABEL _l2607_:
LABEL _l2606_:
}
func @@f586(.e, .r, .n, .i, .o, .s) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2609_;
    MOV %r2 "\"buffer\" argument must be a Buffer instance";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2608_;
LABEL _l2609_:
LABEL _l2608_:
    MOV %r1 .r;
    MOV %r2 .o;
    GT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2612_;
    MOV %r2 .r;
    MOV %r3 .s;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2612_:
    JF %r0 _l2611_;
    MOV %r2 "\"value\" argument is out of bounds";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2610_;
LABEL _l2611_:
LABEL _l2610_:
    MOV %r0 .n;
    MOV %r2 .i;
    ADD %r0 %r2;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GT %r0 %r1;
    JF %r0 _l2614_;
    MOV %r2 "Index out of range";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2613_;
LABEL _l2614_:
LABEL _l2613_:
}
func @@f587(.e, .t, .r, .n, .i, .o) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .r;
    MOV %r2 .n;
    ADD %r0 %r2;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GT %r0 %r1;
    JF %r0 _l2616_;
    MOV %r2 "Index out of range";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2615_;
LABEL _l2616_:
LABEL _l2615_:
    MOV %r0 .r;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2618_;
    MOV %r2 "Index out of range";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2617_;
LABEL _l2618_:
LABEL _l2617_:
}
func @@f588(.e, .t, .r, .n, .o) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .t;
    PLUS %r1;
    MOV .t %r1;
    MOV %r1 0;
    MOV %r2 .r;
    ZSHR %r2 %r1;
    MOV .r %r2;
    MOV %r1 .o;
    JIF %r1 _l2619_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    CALL_REG @R 4 false;
    MOV %r2 $RET;
LABEL _l2619_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 23;
    PUSH %r1;
    MOV %r1 4;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 6 false;
    MOV %r0 .r;
    MOV %r1 4;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f589(.e, .t, .r, .n, .o) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .t;
    PLUS %r1;
    MOV .t %r1;
    MOV %r1 0;
    MOV %r2 .r;
    ZSHR %r2 %r1;
    MOV .r %r2;
    MOV %r1 .o;
    JIF %r1 _l2620_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 8;
    PUSH %r3;
    CALL_REG @R 4 false;
    MOV %r2 $RET;
LABEL _l2620_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 52;
    PUSH %r1;
    MOV %r1 8;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 6 false;
    MOV %r0 .r;
    MOV %r1 8;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f590(.e, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
    MOV %r2 .e;
    NOT %r2;
    NOT %r2;
    MOV .e %r2;
    MOV %r0 %r2;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2622_;
    MOV %r3 n;
    MOV %r4 .e;
    ADD %r4 %r3;
    MOV .e %r4;
    MOV %r1 %r4;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2623_;
    MOV %r3 0;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2623_:
    JMP _l2621_;
LABEL _l2622_:
    MOV %r1 .e;
    MOV %r2 n;
    GT %r1 %r2;
    JF %r1 _l2624_;
    MOV %r3 n;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2624_:
LABEL _l2621_:
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .r;
    EQ %r3 %r4;
    JF %r3 _l2628_;
    MOV %r2 n;
    JMP _l2627_;
LABEL _l2628_:
    MOV %r2 .r;
    NOT %r2;
    NOT %r2;
LABEL _l2627_:
    MOV .r %r2;
    MOV %r0 %r2;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2626_;
    MOV %r3 n;
    MOV %r4 .r;
    ADD %r4 %r3;
    MOV .r %r4;
    MOV %r1 %r4;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2629_;
    MOV %r3 0;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2629_:
    JMP _l2625_;
LABEL _l2626_:
    MOV %r1 .r;
    MOV %r2 n;
    GT %r1 %r2;
    JF %r1 _l2630_;
    MOV %r3 n;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2630_:
LABEL _l2625_:
    MOV %r0 .r;
    MOV %r1 .e;
    LT %r0 %r1;
    JF %r0 _l2631_;
    MOV %r2 .e;
    MOV .r %r2;
    MOV %r1 %r2;
LABEL _l2631_:
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "subarray";
    CALL_VAR %r0 %r1 2 false;
    MOV i $RET;
    MOV %r2 @t;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 i;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f591(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 0;
    MOV %r1 .e;
    ZSHR %r1 %r0;
    MOV .e %r1;
    MOV %r0 0;
    MOV %r1 .t;
    ZSHR %r1 %r0;
    MOV .t %r1;
    MOV %r0 .r;
    JIF %r0 _l2632_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @j 3 false;
    MOV %r1 $RET;
LABEL _l2632_:
    MOV_THIS %r0;
    MOV %r1 .e;
    MOV_PROP n %r0 %r1;
    MOV i 1;
    MOV o 0;
LABEL _l2633_:
    MOV %r3 o;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV o %r3;
    MOV %r2 .t;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2637_;
    MOV %r3 256;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2637_:
    JF %r0 _l2634_;
LABEL _l2636_:
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r5 o;
    ADD %r4 %r5;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 i;
    MUL %r1 %r2;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
    JMP _l2633_;
LABEL _l2634_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f592(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 0;
    MOV %r1 .e;
    ZSHR %r1 %r0;
    MOV .e %r1;
    MOV %r0 0;
    MOV %r1 .t;
    ZSHR %r1 %r0;
    MOV .t %r1;
    MOV %r0 .r;
    JIF %r0 _l2638_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @j 3 false;
    MOV %r1 $RET;
LABEL _l2638_:
    MOV_THIS %r0;
    MOV %r1 .e;
    MOV %r3 .t;
    SUB %r3 1;
    MOV %r2 %r3;
    MOV .t %r3;
    ADD %r1 %r2;
    MOV_PROP n %r0 %r1;
    MOV i 1;
LABEL _l2639_:
    MOV %r1 .t;
    MOV %r2 0;
    GT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2643_;
    MOV %r3 256;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2643_:
    JF %r0 _l2640_;
LABEL _l2642_:
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r6 .t;
    SUB %r6 1;
    MOV %r5 %r6;
    MOV .t %r6;
    ADD %r4 %r5;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 i;
    MUL %r1 %r2;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
    JMP _l2639_;
LABEL _l2640_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f593(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2644_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2644_:
    MOV_THIS %r1;
    MOV %r2 .e;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f594(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2645_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 2;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2645_:
    MOV_THIS %r2;
    MOV %r3 .e;
    MOV_PROP %r0 %r2 %r3;
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r5 1;
    ADD %r4 %r5;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 8;
    SHL %r1 %r2;
    OR %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f595(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2646_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 2;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2646_:
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV_PROP %r0 %r3 %r4;
    MOV %r2 8;
    SHL %r0 %r2;
    MOV_THIS %r2;
    MOV %r3 .e;
    MOV %r4 1;
    ADD %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    OR %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f596(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2647_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2647_:
    MOV_THIS %r4;
    MOV %r5 .e;
    MOV_PROP %r0 %r4 %r5;
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV %r7 1;
    ADD %r6 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 8;
    SHL %r3 %r4;
    OR %r0 %r3;
    MOV_THIS %r4;
    MOV %r5 .e;
    MOV %r6 2;
    ADD %r5 %r6;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 16;
    SHL %r2 %r3;
    OR %r0 %r2;
    MOV %r1 16777216;
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r5 3;
    ADD %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    MUL %r1 %r2;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f597(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2648_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2648_:
    MOV %r0 16777216;
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV_PROP %r2 %r3 %r4;
    MUL %r0 %r2;
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV %r7 1;
    ADD %r6 %r7;
    MOV_PROP %r1 %r5 %r6;
    MOV %r4 16;
    SHL %r1 %r4;
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV %r7 2;
    ADD %r6 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 8;
    SHL %r3 %r4;
    OR %r1 %r3;
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r5 3;
    ADD %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    OR %r1 %r2;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f598(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 0;
    MOV %r1 .e;
    ZSHR %r1 %r0;
    MOV .e %r1;
    MOV %r0 0;
    MOV %r1 .t;
    ZSHR %r1 %r0;
    MOV .t %r1;
    MOV %r0 .r;
    JIF %r0 _l2649_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @j 3 false;
    MOV %r1 $RET;
LABEL _l2649_:
    MOV_THIS %r0;
    MOV %r1 .e;
    MOV_PROP n %r0 %r1;
    MOV i 1;
    MOV o 0;
LABEL _l2650_:
    MOV %r3 o;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV o %r3;
    MOV %r2 .t;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2654_;
    MOV %r3 256;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2654_:
    JF %r0 _l2651_;
LABEL _l2653_:
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r5 o;
    ADD %r4 %r5;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 i;
    MUL %r1 %r2;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
    JMP _l2650_;
LABEL _l2651_:
    MOV %r1 n;
    MOV %r3 128;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    GE %r1 %r2;
    JF %r1 _l2655_;
    MOV %r4 2;
    PUSH %r4;
    MOV %r4 8;
    MOV %r5 .t;
    MUL %r4 %r5;
    PUSH %r4;
    MOV_CTX %r4 "Math";
    MOV %r5 "pow";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV %r4 n;
    SUB %r4 %r3;
    MOV n %r4;
    MOV %r2 %r4;
LABEL _l2655_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f599(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 0;
    MOV %r1 .e;
    ZSHR %r1 %r0;
    MOV .e %r1;
    MOV %r0 0;
    MOV %r1 .t;
    ZSHR %r1 %r0;
    MOV .t %r1;
    MOV %r0 .r;
    JIF %r0 _l2656_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @j 3 false;
    MOV %r1 $RET;
LABEL _l2656_:
    MOV n .t;
    MOV i 1;
    MOV_THIS %r0;
    MOV %r1 .e;
    MOV %r3 n;
    SUB %r3 1;
    MOV %r2 %r3;
    MOV n %r3;
    ADD %r1 %r2;
    MOV_PROP o %r0 %r1;
LABEL _l2657_:
    MOV %r1 n;
    MOV %r2 0;
    GT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2661_;
    MOV %r3 256;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2661_:
    JF %r0 _l2658_;
LABEL _l2660_:
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r6 n;
    SUB %r6 1;
    MOV %r5 %r6;
    MOV n %r6;
    ADD %r4 %r5;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 i;
    MUL %r1 %r2;
    MOV %r2 o;
    ADD %r2 %r1;
    MOV o %r2;
    JMP _l2657_;
LABEL _l2658_:
    MOV %r1 o;
    MOV %r3 128;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    GE %r1 %r2;
    JF %r1 _l2662_;
    MOV %r4 2;
    PUSH %r4;
    MOV %r4 8;
    MOV %r5 .t;
    MUL %r4 %r5;
    PUSH %r4;
    MOV_CTX %r4 "Math";
    MOV %r5 "pow";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV %r4 o;
    SUB %r4 %r3;
    MOV o %r4;
    MOV %r2 %r4;
LABEL _l2662_:
    MOV %r0 o;
    MOV $RET %r0;
    RET;
}
func @@f600(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2663_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2663_:
    MOV %r1 128;
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    JF %r1 _l2665_;
    MOV %r0 1;
    MINUS %r0;
    MOV %r2 255;
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV_PROP %r4 %r5 %r6;
    SUB %r2 %r4;
    MOV %r3 1;
    ADD %r2 %r3;
    MUL %r0 %r2;
    JMP _l2664_;
LABEL _l2665_:
    MOV_THIS %r2;
    MOV %r3 .e;
    MOV_PROP %r0 %r2 %r3;
LABEL _l2664_:
    MOV $RET %r0;
    RET;
}
func @@f601(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    MOV %r1 .e;
    ZSHR %r1 %r0;
    MOV .e %r1;
    MOV %r0 .t;
    JIF %r0 _l2666_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @j 3 false;
    MOV %r1 $RET;
LABEL _l2666_:
    MOV_THIS %r1;
    MOV %r2 .e;
    MOV_PROP r %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .e;
    MOV %r4 1;
    ADD %r3 %r4;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 8;
    SHL %r0 %r1;
    OR r %r0;
    MOV %r1 32768;
    MOV %r2 r;
    AND %r1 %r2;
    JF %r1 _l2668_;
    MOV %r0 4294901760;
    MOV %r2 r;
    OR %r0 %r2;
    JMP _l2667_;
LABEL _l2668_:
    MOV %r0 r;
LABEL _l2667_:
    MOV $RET %r0;
    RET;
}
func @@f602(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    MOV %r1 .e;
    ZSHR %r1 %r0;
    MOV .e %r1;
    MOV %r0 .t;
    JIF %r0 _l2669_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 2;
    PUSH %r2;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @j 3 false;
    MOV %r1 $RET;
LABEL _l2669_:
    MOV_THIS %r1;
    MOV %r2 .e;
    MOV %r3 1;
    ADD %r2 %r3;
    MOV_PROP r %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .e;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 8;
    SHL %r0 %r1;
    OR r %r0;
    MOV %r1 32768;
    MOV %r2 r;
    AND %r1 %r2;
    JF %r1 _l2671_;
    MOV %r0 4294901760;
    MOV %r2 r;
    OR %r0 %r2;
    JMP _l2670_;
LABEL _l2671_:
    MOV %r0 r;
LABEL _l2670_:
    MOV $RET %r0;
    RET;
}
func @@f603(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2672_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2672_:
    MOV_THIS %r4;
    MOV %r5 .e;
    MOV_PROP %r0 %r4 %r5;
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV %r7 1;
    ADD %r6 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 8;
    SHL %r3 %r4;
    OR %r0 %r3;
    MOV_THIS %r4;
    MOV %r5 .e;
    MOV %r6 2;
    ADD %r5 %r6;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 16;
    SHL %r2 %r3;
    OR %r0 %r2;
    MOV_THIS %r3;
    MOV %r4 .e;
    MOV %r5 3;
    ADD %r4 %r5;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 24;
    SHL %r1 %r2;
    OR %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f604(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2673_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2673_:
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV_PROP %r0 %r5 %r6;
    MOV %r4 24;
    SHL %r0 %r4;
    MOV_THIS %r5;
    MOV %r6 .e;
    MOV %r7 1;
    ADD %r6 %r7;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 16;
    SHL %r3 %r4;
    OR %r0 %r3;
    MOV_THIS %r4;
    MOV %r5 .e;
    MOV %r6 2;
    ADD %r5 %r6;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 8;
    SHL %r2 %r3;
    OR %r0 %r2;
    MOV_THIS %r2;
    MOV %r3 .e;
    MOV %r4 3;
    ADD %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    OR %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f605(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2674_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2674_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 23;
    PUSH %r1;
    MOV %r1 4;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f606(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2675_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2675_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 23;
    PUSH %r1;
    MOV %r1 4;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f607(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2676_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 8;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2676_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 52;
    PUSH %r1;
    MOV %r1 8;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f608(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 0;
    MOV %r2 .e;
    ZSHR %r2 %r1;
    MOV .e %r2;
    MOV %r1 .t;
    JIF %r1 _l2677_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 8;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @j 3 false;
    MOV %r2 $RET;
LABEL _l2677_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 52;
    PUSH %r1;
    MOV %r1 8;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f609(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 0;
    MOV %r2 .r;
    ZSHR %r2 %r1;
    MOV .r %r2;
    MOV %r0 .n;
    JIF %r0 _l2678_;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 2;
    PUSH %r4;
    MOV %r4 8;
    MOV %r5 .r;
    MUL %r4 %r5;
    PUSH %r4;
    MOV_CTX %r4 "Math";
    MOV %r5 "pow";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    MOV %r3 1;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    CALL_REG @A 6 false;
    MOV %r1 $RET;
LABEL _l2678_:
    MOV i 1;
    MOV o 0;
    MOV %r0 255;
    MOV %r1 .e;
    AND %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 .t;
    SET_KEY %r1 %r2 %r0;
LABEL _l2679_:
    MOV %r3 o;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV o %r3;
    MOV %r2 .r;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2683_;
    MOV %r3 256;
    MOV %r4 i;
    MUL %r4 %r3;
    MOV i %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2683_:
    JF %r0 _l2680_;
LABEL _l2682_:
    MOV %r1 .e;
    MOV %r3 i;
    DIV %r1 %r3;
    MOV %r2 255;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 o;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l2679_;
LABEL _l2680_:
    MOV %r0 .t;
    MOV %r1 .r;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f610(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 0;
    MOV %r2 .r;
    ZSHR %r2 %r1;
    MOV .r %r2;
    MOV %r0 .n;
    JIF %r0 _l2684_;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 2;
    PUSH %r4;
    MOV %r4 8;
    MOV %r5 .r;
    MUL %r4 %r5;
    PUSH %r4;
    MOV_CTX %r4 "Math";
    MOV %r5 "pow";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    MOV %r3 1;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    CALL_REG @A 6 false;
    MOV %r1 $RET;
LABEL _l2684_:
    MOV i .r;
    MOV %r0 1;
    SUB i %r0;
    MOV o 1;
    MOV %r0 255;
    MOV %r1 .e;
    AND %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 .t;
    MOV %r3 i;
    ADD %r2 %r3;
    SET_KEY %r1 %r2 %r0;
LABEL _l2685_:
    MOV %r3 i;
    SUB %r3 1;
    MOV %r1 %r3;
    MOV i %r3;
    MOV %r2 0;
    GE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2689_;
    MOV %r3 256;
    MOV %r4 o;
    MUL %r4 %r3;
    MOV o %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2689_:
    JF %r0 _l2686_;
LABEL _l2688_:
    MOV %r1 .e;
    MOV %r3 o;
    DIV %r1 %r3;
    MOV %r2 255;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 i;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l2685_;
LABEL _l2686_:
    MOV %r0 .t;
    MOV %r1 .r;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f611(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2690_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 255;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2690_:
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 1;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f612(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2691_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 65535;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2691_:
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 2;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f613(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2692_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 65535;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2692_:
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 2;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f614(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2693_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV %r3 4294967295;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2693_:
    MOV %r1 .e;
    MOV %r2 24;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 3;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 16;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 2;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 4;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f615(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2694_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV %r3 4294967295;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2694_:
    MOV %r1 .e;
    MOV %r2 24;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 16;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 2;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 3;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 4;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f616(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r0 .n;
    NEG %r0;
    JF %r0 _l2696_;
    MOV %r1 2;
    PUSH %r1;
    MOV %r1 8;
    MOV %r3 .r;
    MUL %r1 %r3;
    MOV %r2 1;
    SUB %r1 %r2;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "pow";
    CALL_VAR %r1 %r2 2 false;
    MOV i $RET;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 i;
    MOV %r2 1;
    SUB %r1 %r2;
    PUSH %r1;
    MOV %r1 i;
    MINUS %r1;
    PUSH %r1;
    CALL_REG @A 6 false;
    JMP _l2695_;
LABEL _l2696_:
LABEL _l2695_:
    MOV o 0;
    MOV s 1;
    MOV a 0;
    MOV %r0 255;
    MOV %r1 .e;
    AND %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 .t;
    SET_KEY %r1 %r2 %r0;
LABEL _l2697_:
    MOV %r3 o;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV o %r3;
    MOV %r2 .r;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2701_;
    MOV %r3 256;
    MOV %r4 s;
    MUL %r4 %r3;
    MOV s %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2701_:
    JF %r0 _l2698_;
LABEL _l2700_:
    MOV %r3 .e;
    MOV %r4 0;
    LT %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2704_;
    MOV %r4 0;
    MOV %r5 a;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2704_:
    MOV %r1 %r2;
    JF %r2 _l2703_;
    MOV %r3 0;
    MOV_THIS %r5;
    MOV %r6 .t;
    MOV %r8 o;
    ADD %r6 %r8;
    MOV %r7 1;
    SUB %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2703_:
    JF %r1 _l2702_;
    MOV %r3 1;
    MOV a %r3;
    MOV %r2 %r3;
LABEL _l2702_:
    MOV %r1 .e;
    MOV %r5 s;
    DIV %r1 %r5;
    MOV %r4 0;
    SHR %r1 %r4;
    MOV %r3 a;
    SUB %r1 %r3;
    MOV %r2 255;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 o;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l2697_;
LABEL _l2698_:
    MOV %r0 .t;
    MOV %r1 .r;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f617(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r0 .n;
    NEG %r0;
    JF %r0 _l2706_;
    MOV %r1 2;
    PUSH %r1;
    MOV %r1 8;
    MOV %r3 .r;
    MUL %r1 %r3;
    MOV %r2 1;
    SUB %r1 %r2;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "pow";
    CALL_VAR %r1 %r2 2 false;
    MOV i $RET;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 i;
    MOV %r2 1;
    SUB %r1 %r2;
    PUSH %r1;
    MOV %r1 i;
    MINUS %r1;
    PUSH %r1;
    CALL_REG @A 6 false;
    JMP _l2705_;
LABEL _l2706_:
LABEL _l2705_:
    MOV o .r;
    MOV %r0 1;
    SUB o %r0;
    MOV s 1;
    MOV a 0;
    MOV %r0 255;
    MOV %r1 .e;
    AND %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 .t;
    MOV %r3 o;
    ADD %r2 %r3;
    SET_KEY %r1 %r2 %r0;
LABEL _l2707_:
    MOV %r3 o;
    SUB %r3 1;
    MOV %r1 %r3;
    MOV o %r3;
    MOV %r2 0;
    GE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2711_;
    MOV %r3 256;
    MOV %r4 s;
    MUL %r4 %r3;
    MOV s %r4;
    MOV %r2 %r4;
    LG_AND %r0 %r2;
LABEL _l2711_:
    JF %r0 _l2708_;
LABEL _l2710_:
    MOV %r3 .e;
    MOV %r4 0;
    LT %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2714_;
    MOV %r4 0;
    MOV %r5 a;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2714_:
    MOV %r1 %r2;
    JF %r2 _l2713_;
    MOV %r3 0;
    MOV_THIS %r5;
    MOV %r6 .t;
    MOV %r8 o;
    ADD %r6 %r8;
    MOV %r7 1;
    ADD %r6 %r7;
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2713_:
    JF %r1 _l2712_;
    MOV %r3 1;
    MOV a %r3;
    MOV %r2 %r3;
LABEL _l2712_:
    MOV %r1 .e;
    MOV %r5 s;
    DIV %r1 %r5;
    MOV %r4 0;
    SHR %r1 %r4;
    MOV %r3 a;
    SUB %r1 %r3;
    MOV %r2 255;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 o;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l2707_;
LABEL _l2708_:
    MOV %r0 .t;
    MOV %r1 .r;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f618(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2715_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 1;
    PUSH %r3;
    MOV %r3 127;
    PUSH %r3;
    MOV %r3 128;
    MINUS %r3;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2715_:
    MOV %r1 .e;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2716_;
    MOV %r3 255;
    MOV %r5 .e;
    ADD %r3 %r5;
    MOV %r4 1;
    ADD %r3 %r4;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2716_:
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 1;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f619(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2717_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 32767;
    PUSH %r3;
    MOV %r3 32768;
    MINUS %r3;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2717_:
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 2;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f620(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2718_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 2;
    PUSH %r3;
    MOV %r3 32767;
    PUSH %r3;
    MOV %r3 32768;
    MINUS %r3;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2718_:
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 2;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f621(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2719_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV %r3 2147483647;
    PUSH %r3;
    MOV %r3 2147483648;
    MINUS %r3;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2719_:
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 16;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 2;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 24;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 3;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 4;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f622(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .e;
    PLUS %r1;
    MOV .e %r1;
    MOV %r1 0;
    MOV %r2 .t;
    ZSHR %r2 %r1;
    MOV .t %r2;
    MOV %r1 .r;
    JIF %r1 _l2720_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 4;
    PUSH %r3;
    MOV %r3 2147483647;
    PUSH %r3;
    MOV %r3 2147483648;
    MINUS %r3;
    PUSH %r3;
    CALL_REG @A 6 false;
    MOV %r2 $RET;
LABEL _l2720_:
    MOV %r1 .e;
    MOV %r2 0;
    LT %r1 %r2;
    JF %r1 _l2721_;
    MOV %r3 4294967295;
    MOV %r5 .e;
    ADD %r3 %r5;
    MOV %r4 1;
    ADD %r3 %r4;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2721_:
    MOV %r1 .e;
    MOV %r2 24;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 16;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 1;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV %r2 8;
    ZSHR %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 2;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 255;
    MOV %r2 .e;
    AND %r1 %r2;
    MOV_THIS %r2;
    MOV %r3 .t;
    MOV %r4 3;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 .t;
    MOV %r1 4;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f623(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @M 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f624(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @M 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f625(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @P 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f626(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @P 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f627(.e, .r, .n, .i) {
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l2723_;
    MOV %r2 "argument should be a Buffer";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2722_;
LABEL _l2723_:
LABEL _l2722_:
    MOV %r1 .n;
    JIF %r1 _l2726_;
    MOV %r3 0;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l2726_:
    MOV %r2 .i;
    MOV %r1 %r2;
    JIF %r2 _l2728_;
    MOV %r3 0;
    MOV %r4 .i;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2728_:
    JIF %r1 _l2727_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .i %r3;
    MOV %r2 %r3;
LABEL _l2727_:
    MOV %r1 .r;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GE %r1 %r2;
    JF %r1 _l2729_;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2729_:
    MOV %r1 .r;
    JIF %r1 _l2730_;
    MOV %r3 0;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2730_:
    MOV %r2 .i;
    MOV %r3 0;
    GT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2732_;
    MOV %r3 .i;
    MOV %r4 .n;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2732_:
    JF %r1 _l2731_;
    MOV %r3 .n;
    MOV .i %r3;
    MOV %r2 %r3;
LABEL _l2731_:
    MOV %r0 .i;
    MOV %r1 .n;
    EQ %r0 %r1;
    JF %r0 _l2725_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l2724_;
LABEL _l2725_:
LABEL _l2724_:
    MOV %r1 0;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2735_;
    MOV %r2 0;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2735_:
    JF %r0 _l2734_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l2733_;
LABEL _l2734_:
LABEL _l2733_:
    MOV %r0 .r;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2737_;
    MOV %r2 "targetStart out of bounds";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2736_;
LABEL _l2737_:
LABEL _l2736_:
    MOV %r1 .n;
    MOV %r2 0;
    LT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2740_;
    MOV %r2 .n;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    GE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2740_:
    JF %r0 _l2739_;
    MOV %r2 "Index out of range";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2738_;
LABEL _l2739_:
LABEL _l2738_:
    MOV %r0 .i;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l2742_;
    MOV %r2 "sourceEnd out of bounds";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2741_;
LABEL _l2742_:
LABEL _l2741_:
    MOV %r0 .i;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GT %r0 %r1;
    JF %r0 _l2743_;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV .i %r2;
    MOV %r1 %r2;
LABEL _l2743_:
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r0 %r3 %r4;
    MOV %r2 .r;
    SUB %r0 %r2;
    MOV %r1 .i;
    MOV %r2 .n;
    SUB %r1 %r2;
    LT %r0 %r1;
    JF %r0 _l2744_;
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r2 %r5 %r6;
    MOV %r4 .r;
    SUB %r2 %r4;
    MOV %r3 .n;
    ADD %r2 %r3;
    MOV .i %r2;
    MOV %r1 %r2;
LABEL _l2744_:
    MOV o .i;
    MOV %r0 .n;
    SUB o %r0;
    MOV_THIS %r1;
    MOV %r2 .e;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2747_;
    MOV %r2 "function";
    MOV_CTX %r6 "Uint8Array";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "copyWithin";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2747_:
    JF %r0 _l2746_;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "copyWithin";
    CALL_VAR %r1 %r2 3 false;
    JMP _l2745_;
LABEL _l2746_:
    MOV_THIS %r3;
    MOV %r4 .e;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2750_;
    MOV %r4 .n;
    MOV %r5 .r;
    LT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2750_:
    MOV %r1 %r2;
    JF %r2 _l2749_;
    MOV %r3 .r;
    MOV %r4 .i;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2749_:
    JF %r1 _l2748_;
    MOV s o;
    MOV %r2 1;
    SUB s %r2;
LABEL _l2751_:
    MOV %r2 s;
    MOV %r3 0;
    GE %r2 %r3;
    JF %r2 _l2752_;
LABEL _l2754_:
    MOV_THIS %r4;
    MOV %r5 s;
    MOV %r6 .n;
    ADD %r5 %r6;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .e;
    MOV %r5 s;
    MOV %r6 .r;
    ADD %r5 %r6;
    SET_KEY %r4 %r5 %r3;
LABEL _l2753_:
    MOV %r3 s;
    SUB %r3 1;
    MOV s %r3;
    JMP _l2751_;
LABEL _l2752_:
    JMP _l2745_;
LABEL _l2748_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 .i;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "subarray";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV_CTX %r6 "Uint8Array";
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "set";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 3 false;
LABEL _l2745_:
    MOV %r0 o;
    MOV $RET %r0;
    RET;
}
func @@f628(.e, .r, .n, .i) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "string";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l2756_;
    MOV %r2 "string";
    MOV %r3 .r;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l2760_;
    MOV %r3 .r;
    MOV .i %r3;
    MOV %r3 0;
    MOV .r %r3;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .n %r3;
    JMP _l2759_;
LABEL _l2760_:
    MOV %r3 "string";
    MOV %r4 .n;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    JF %r3 _l2761_;
    MOV %r5 .n;
    MOV .i %r5;
    MOV_THIS %r6;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    MOV .n %r5;
    MOV %r4 %r5;
LABEL _l2761_:
LABEL _l2759_:
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .i;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2762_;
    MOV %r3 "string";
    MOV %r4 .i;
    TYPE_OF %r4;
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2762_:
    JF %r1 _l2758_;
    MOV %r3 "encoding must be a string";
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2757_;
LABEL _l2758_:
LABEL _l2757_:
    MOV %r2 "string";
    MOV %r3 .i;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2765_;
    MOV %r4 .i;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "isEncoding";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l2765_:
    JF %r1 _l2764_;
    MOV %r3 "Unknown encoding: ";
    MOV %r4 .i;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2763_;
LABEL _l2764_:
LABEL _l2763_:
    MOV %r1 1;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l2767_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "charCodeAt";
    CALL_VAR %r2 %r3 1 false;
    MOV o $RET;
    MOV %r4 "utf8";
    MOV %r5 .i;
    EQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l2770_;
    MOV %r5 o;
    MOV %r6 128;
    LT %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l2770_:
    MOV %r2 %r3;
    JIF %r3 _l2769_;
    MOV %r4 "latin1";
    MOV %r5 .i;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2769_:
    JF %r2 _l2768_;
    MOV %r4 o;
    MOV .e %r4;
    MOV %r3 %r4;
LABEL _l2768_:
    JMP _l2766_;
LABEL _l2767_:
LABEL _l2766_:
    JMP _l2755_;
LABEL _l2756_:
    MOV %r1 "number";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2771_;
    MOV %r3 255;
    MOV %r4 .e;
    AND %r4 %r3;
    MOV .e %r4;
    MOV %r2 %r4;
LABEL _l2771_:
LABEL _l2755_:
    MOV %r2 .r;
    MOV %r3 0;
    LT %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2775_;
    MOV_THIS %r5;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .r;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2775_:
    MOV %r0 %r1;
    JIF %r1 _l2774_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .n;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2774_:
    JF %r0 _l2773_;
    MOV %r2 "Out of range index";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l2772_;
LABEL _l2773_:
LABEL _l2772_:
    MOV %r0 .n;
    MOV %r1 .r;
    LE %r0 %r1;
    JF %r0 _l2777_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l2776_;
LABEL _l2777_:
LABEL _l2776_:
    MOV %r1 0;
    MOV %r2 .r;
    ZSHR %r2 %r1;
    MOV .r %r2;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .n;
    EQ %r2 %r3;
    JF %r2 _l2781_;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    JMP _l2780_;
LABEL _l2781_:
    MOV %r1 .n;
    MOV %r3 0;
    ZSHR %r1 %r3;
LABEL _l2780_:
    MOV .n %r1;
    MOV %r1 .e;
    JIF %r1 _l2782_;
    MOV %r3 0;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l2782_:
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l2779_;
    MOV %r1 .r;
    MOV s %r1;
LABEL _l2783_:
    MOV %r1 s;
    MOV %r2 .n;
    LT %r1 %r2;
    JF %r1 _l2784_;
LABEL _l2786_:
    MOV %r2 .e;
    MOV_THIS %r3;
    MOV %r4 s;
    SET_KEY %r3 %r4 %r2;
LABEL _l2785_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l2783_;
LABEL _l2784_:
    JMP _l2778_;
LABEL _l2779_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "isBuffer";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l2788_;
    MOV a .e;
    JMP _l2787_;
LABEL _l2788_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .i;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 2 false;
    MOV a $RET;
LABEL _l2787_:
    MOV %r1 a;
    MOV %r2 "length";
    MOV_PROP u %r1 %r2;
    MOV %r1 0;
    MOV %r2 u;
    EQ %r1 %r2;
    JF %r1 _l2790_;
    MOV %r3 "The value \"";
    MOV %r5 .e;
    ADD %r3 %r5;
    MOV %r4 "\" is invalid for argument \"value\"";
    ADD %r3 %r4;
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l2789_;
LABEL _l2790_:
LABEL _l2789_:
    MOV %r1 0;
    MOV s %r1;
LABEL _l2791_:
    MOV %r1 s;
    MOV %r2 .n;
    MOV %r3 .r;
    SUB %r2 %r3;
    LT %r1 %r2;
    JF %r1 _l2792_;
LABEL _l2794_:
    MOV %r3 a;
    MOV %r4 s;
    MOV %r5 u;
    MOD %r4 %r5;
    MOV_PROP %r2 %r3 %r4;
    MOV_THIS %r3;
    MOV %r4 s;
    MOV %r5 .r;
    ADD %r4 %r5;
    SET_KEY %r3 %r4 %r2;
LABEL _l2793_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l2791_;
LABEL _l2792_:
LABEL _l2778_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f629(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    MOV %r2 16;
    LT %r1 %r2;
    JF %r1 _l2796_;
    MOV %r0 "0";
    MOV %r3 16;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "toString";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    JMP _l2795_;
LABEL _l2796_:
    MOV %r2 16;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l2795_:
    MOV $RET %r0;
    RET;
}
func @@f630(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l2797_;
    MOV %r2 1;
    MOV %r3 0;
    DIV %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2797_:
    MOV .t %r0;
    BLOCK 1;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
    MOV i null;
    NEW_ARR o;
    MOV s 0;
LABEL _l2798_:
    MOV %r0 s;
    MOV %r1 n;
    LT %r0 %r1;
    JF %r0 _l2799_;
LABEL _l2801_:
    BLOCK 2;
    MOV %r5 s;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "charCodeAt";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV r %r4;
    MOV %r2 %r4;
    MOV %r3 55295;
    GT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2804_;
    MOV %r3 r;
    MOV %r4 57344;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2804_:
    JF %r1 _l2803_;
    MOV %r2 i;
    NEG %r2;
    JF %r2 _l2806_;
    MOV %r3 r;
    MOV %r4 56319;
    GT %r3 %r4;
    JF %r3 _l2808_;
    MOV %r6 3;
    MOV %r7 .t;
    SUB %r7 %r6;
    MOV .t %r7;
    MOV %r4 %r7;
    MOV %r5 1;
    MINUS %r5;
    GT %r4 %r5;
    JF %r4 _l2809_;
    MOV %r6 239;
    PUSH %r6;
    MOV %r6 191;
    PUSH %r6;
    MOV %r6 189;
    PUSH %r6;
    MOV %r6 o;
    MOV %r7 "push";
    CALL_VAR %r6 %r7 3 false;
    MOV %r5 $RET;
LABEL _l2809_:
    CLR_BLOCK 2;
    JMP _l2800_;
    JMP _l2807_;
LABEL _l2808_:
LABEL _l2807_:
    MOV %r3 s;
    MOV %r5 1;
    ADD %r3 %r5;
    MOV %r4 n;
    EQ %r3 %r4;
    JF %r3 _l2811_;
    MOV %r6 3;
    MOV %r7 .t;
    SUB %r7 %r6;
    MOV .t %r7;
    MOV %r4 %r7;
    MOV %r5 1;
    MINUS %r5;
    GT %r4 %r5;
    JF %r4 _l2812_;
    MOV %r6 239;
    PUSH %r6;
    MOV %r6 191;
    PUSH %r6;
    MOV %r6 189;
    PUSH %r6;
    MOV %r6 o;
    MOV %r7 "push";
    CALL_VAR %r6 %r7 3 false;
    MOV %r5 $RET;
LABEL _l2812_:
    CLR_BLOCK 2;
    JMP _l2800_;
    JMP _l2810_;
LABEL _l2811_:
LABEL _l2810_:
    MOV %r3 r;
    MOV i %r3;
    CLR_BLOCK 2;
    JMP _l2800_;
    JMP _l2805_;
LABEL _l2806_:
LABEL _l2805_:
    MOV %r2 r;
    MOV %r3 56320;
    LT %r2 %r3;
    JF %r2 _l2814_;
    MOV %r5 3;
    MOV %r6 .t;
    SUB %r6 %r5;
    MOV .t %r6;
    MOV %r3 %r6;
    MOV %r4 1;
    MINUS %r4;
    GT %r3 %r4;
    JF %r3 _l2815_;
    MOV %r5 239;
    PUSH %r5;
    MOV %r5 191;
    PUSH %r5;
    MOV %r5 189;
    PUSH %r5;
    MOV %r5 o;
    MOV %r6 "push";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
LABEL _l2815_:
    MOV %r3 r;
    MOV i %r3;
    CLR_BLOCK 2;
    JMP _l2800_;
    JMP _l2813_;
LABEL _l2814_:
LABEL _l2813_:
    MOV %r2 65536;
    MOV %r3 i;
    MOV %r6 55296;
    SUB %r3 %r6;
    MOV %r5 10;
    SHL %r3 %r5;
    MOV %r4 r;
    MOV %r5 56320;
    SUB %r4 %r5;
    OR %r3 %r4;
    ADD %r2 %r3;
    MOV r %r2;
    JMP _l2802_;
LABEL _l2803_:
    MOV %r3 i;
    MOV %r2 %r3;
    JF %r3 _l2817_;
    MOV %r6 3;
    MOV %r7 .t;
    SUB %r7 %r6;
    MOV .t %r7;
    MOV %r4 %r7;
    MOV %r5 1;
    MINUS %r5;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2817_:
    JF %r2 _l2816_;
    MOV %r4 239;
    PUSH %r4;
    MOV %r4 191;
    PUSH %r4;
    MOV %r4 189;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
LABEL _l2816_:
LABEL _l2802_:
    MOV %r2 null;
    MOV i %r2;
    MOV %r1 r;
    MOV %r2 128;
    LT %r1 %r2;
    JF %r1 _l2819_;
    MOV %r4 1;
    MOV %r5 .t;
    SUB %r5 %r4;
    MOV .t %r5;
    MOV %r2 %r5;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l2821_;
    CLR_BLOCK 1;
    JMP _l2799_;
    JMP _l2820_;
LABEL _l2821_:
LABEL _l2820_:
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 o;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l2818_;
LABEL _l2819_:
    MOV %r2 r;
    MOV %r3 2048;
    LT %r2 %r3;
    JF %r2 _l2822_;
    MOV %r5 2;
    MOV %r6 .t;
    SUB %r6 %r5;
    MOV .t %r6;
    MOV %r3 %r6;
    MOV %r4 0;
    LT %r3 %r4;
    JF %r3 _l2824_;
    CLR_BLOCK 1;
    JMP _l2799_;
    JMP _l2823_;
LABEL _l2824_:
LABEL _l2823_:
    MOV %r3 r;
    MOV %r5 6;
    SHR %r3 %r5;
    MOV %r4 192;
    OR %r3 %r4;
    PUSH %r3;
    MOV %r3 63;
    MOV %r5 r;
    AND %r3 %r5;
    MOV %r4 128;
    OR %r3 %r4;
    PUSH %r3;
    MOV %r3 o;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 2 false;
    JMP _l2818_;
LABEL _l2822_:
    MOV %r3 r;
    MOV %r4 65536;
    LT %r3 %r4;
    JF %r3 _l2825_;
    MOV %r6 3;
    MOV %r7 .t;
    SUB %r7 %r6;
    MOV .t %r7;
    MOV %r4 %r7;
    MOV %r5 0;
    LT %r4 %r5;
    JF %r4 _l2827_;
    CLR_BLOCK 1;
    JMP _l2799_;
    JMP _l2826_;
LABEL _l2827_:
LABEL _l2826_:
    MOV %r4 r;
    MOV %r6 12;
    SHR %r4 %r6;
    MOV %r5 224;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 r;
    MOV %r7 6;
    SHR %r4 %r7;
    MOV %r6 63;
    AND %r4 %r6;
    MOV %r5 128;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 63;
    MOV %r6 r;
    AND %r4 %r6;
    MOV %r5 128;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 3 false;
    JMP _l2818_;
LABEL _l2825_:
    MOV %r4 r;
    MOV %r5 1114112;
    LT %r4 %r5;
    NEG %r4;
    JF %r4 _l2829_;
    MOV %r6 "Invalid code point";
    PUSH %r6;
    CALL_CTX 'Error' 1 true;
    MOV %r5 $RET;
    THROW %r5;
    JMP _l2828_;
LABEL _l2829_:
LABEL _l2828_:
    MOV %r6 4;
    MOV %r7 .t;
    SUB %r7 %r6;
    MOV .t %r7;
    MOV %r4 %r7;
    MOV %r5 0;
    LT %r4 %r5;
    JF %r4 _l2831_;
    CLR_BLOCK 1;
    JMP _l2799_;
    JMP _l2830_;
LABEL _l2831_:
LABEL _l2830_:
    MOV %r4 r;
    MOV %r6 18;
    SHR %r4 %r6;
    MOV %r5 240;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 r;
    MOV %r7 12;
    SHR %r4 %r7;
    MOV %r6 63;
    AND %r4 %r6;
    MOV %r5 128;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 r;
    MOV %r7 6;
    SHR %r4 %r7;
    MOV %r6 63;
    AND %r4 %r6;
    MOV %r5 128;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 63;
    MOV %r6 r;
    AND %r4 %r6;
    MOV %r5 128;
    OR %r4 %r5;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 4 false;
LABEL _l2818_:
    END_BLOCK 2;
LABEL _l2800_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l2798_;
LABEL _l2799_:
    END_BLOCK 1;
    MOV %r0 o;
    MOV $RET %r0;
    RET;
}
func @@f631(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r2 .e;
    PUSH %r2;
    FUNC %r2 @@f1034;
    CALL_REG %r2 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "toByteArray";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f632(.e, .t, .r, .n) {
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV i 0;
LABEL _l2832_:
    MOV %r1 i;
    MOV %r2 .n;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2836_;
    MOV %r3 i;
    MOV %r5 .r;
    ADD %r3 %r5;
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    GE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l2837_;
    MOV %r4 i;
    MOV %r6 .e;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    GE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2837_:
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l2836_:
    JF %r0 _l2833_;
LABEL _l2835_:
    MOV %r2 .e;
    MOV %r3 i;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .t;
    MOV %r3 i;
    MOV %r4 .r;
    ADD %r3 %r4;
    SET_KEY %r2 %r3 %r1;
LABEL _l2834_:
    MOV %r1 i;
    ADD %r1 1;
    MOV i %r1;
    JMP _l2832_;
LABEL _l2833_:
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f633(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r1 .e;
    MOV %r2 .t;
    INST_OF %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2838_;
    MOV %r5 null;
    MOV %r6 .e;
    WNE %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l2841_;
    MOV %r6 null;
    MOV %r8 .e;
    MOV %r9 "constructor";
    MOV_PROP %r7 %r8 %r9;
    WNE %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l2841_:
    MOV %r3 %r4;
    JF %r4 _l2840_;
    MOV %r5 null;
    MOV %r9 .e;
    MOV %r10 "constructor";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "name";
    MOV_PROP %r6 %r7 %r8;
    WNE %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l2840_:
    MOV %r2 %r3;
    JF %r3 _l2839_;
    MOV %r8 .e;
    MOV %r9 "constructor";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "name";
    MOV_PROP %r4 %r6 %r7;
    MOV %r6 .t;
    MOV %r7 "name";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2839_:
    LG_OR %r0 %r2;
LABEL _l2838_:
    MOV $RET %r0;
    RET;
}
func @@f634(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV %r1 .e;
    WNE %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f635(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r5 "Object";
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toString";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f636(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2843_;
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l2842_;
LABEL _l2843_:
    MOV %r0 "[object Array]";
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @t 1 false;
    MOV %r2 $RET;
    EQ %r0 %r2;
LABEL _l2842_:
    MOV $RET %r0;
    RET;
}
func @@f637(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "boolean";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f638(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    MOV %r1 .e;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f639(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    MOV %r1 .e;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f640(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f641(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "string";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f642(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "symbol";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f643(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 0;
    VOID %r0;
    MOV %r1 .e;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f644(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "[object RegExp]";
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @t 1 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f645(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 "object";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l2844_;
    MOV %r2 null;
    MOV %r3 .e;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2844_:
    MOV $RET %r0;
    RET;
}
func @@f646(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 "[object Date]";
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @t 1 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f647(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 "[object Error]";
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @t 1 false;
    MOV %r2 $RET;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l2845_;
    MOV %r2 .e;
    MOV_CTX %r3 "Error";
    INST_OF %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2845_:
    MOV $RET %r0;
    RET;
}
func @@f648(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "function";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f649(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r5 null;
    MOV %r6 .e;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l2850_;
    MOV %r6 "boolean";
    MOV %r7 .e;
    TYPE_OF %r7;
    WEQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l2850_:
    MOV %r3 %r4;
    JIF %r4 _l2849_;
    MOV %r5 "number";
    MOV %r6 .e;
    TYPE_OF %r6;
    WEQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l2849_:
    MOV %r2 %r3;
    JIF %r3 _l2848_;
    MOV %r4 "string";
    MOV %r5 .e;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l2848_:
    MOV %r1 %r2;
    JIF %r2 _l2847_;
    MOV %r3 "symbol";
    MOV %r4 .e;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2847_:
    MOV %r0 %r1;
    JIF %r1 _l2846_;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .e;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2846_:
    MOV $RET %r0;
    RET;
}
func @@f650() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 @r;
    MOV %r4 "overwriteDefinition";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l2853_;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 @e;
    PUSH %r4;
    MOV %r4 @h;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2853_:
    JF %r1 _l2852_;
    MOV %r0 @o;
    JMP _l2851_;
LABEL _l2852_:
    MOV %r3 @o;
    PUSH %r3;
    MOV %r5 @r;
    MOV %r6 "resolveContext";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l2855_;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 @r;
    MOV %r6 "resolveContext";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    JMP _l2854_;
LABEL _l2855_:
    MOV_THIS %r3;
LABEL _l2854_:
    PUSH %r3;
    MOV %r3 @l;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r3 @t;
    MOV %r4 "value";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @f 3 false;
    MOV_THIS %r2;
    MOV %r3 @e;
    MOV_PROP %r0 %r2 %r3;
LABEL _l2851_:
    MOV $RET %r0;
    RET;
}
func @@f651(.e, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @n 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f652(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    MOV %r2 "_corked";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2857_;
    MOV %r1 "uncork";
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
    JMP _l2856_;
LABEL _l2857_:
    CALL_REG .t 0 false;
LABEL _l2856_:
}
func @@f653(.e, .t) {
    REG %r0;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1035;
    MOV $RET %r0;
    RET;
}
func @@f654(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 @f;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l2859_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    CALL_REG @f 3 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l2858_;
LABEL _l2859_:
LABEL _l2858_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    MOV %r2 @i;
    MOV %r3 "Duplex";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "_writable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "_readable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "_readable2";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .r;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2860_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "autoDestroy";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2860_:
    MOV_THIS %r1;
    MOV %r2 "_autoDestroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .r;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2861_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2861_:
    MOV_THIS %r1;
    MOV %r2 "_forwardDestroy";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .r;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l2862_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "end";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2862_:
    MOV_THIS %r1;
    MOV %r2 "_forwardEnd";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    MOV_THIS %r1;
    MOV %r2 "_corked";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "_ondrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_drained";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_forwarding";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "_unwrite";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "_unread";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    JF %r0 _l2863_;
    MOV %r2 .e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "setWritable";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2863_:
    MOV %r0 .t;
    JF %r0 _l2864_;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "setReadable";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2864_:
}
func @@f655(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .r;
    JIF %r1 _l2865_;
    NEW_OBJ %r3;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l2865_:
    MOV %r1 0;
    NEG %r1;
    MOV %r2 .r;
    MOV %r3 "objectMode";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 16;
    MOV %r2 .r;
    MOV %r3 "highWaterMark";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @f 3 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f656() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 1;
    MOV_THIS %r3;
    MOV %r4 "_corked";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 1;
    MOV %r1 %r2;
    MOV_THIS %r3;
    MOV %r4 "_corked";
    SET_KEY %r3 %r4 %r2;
    WEQ %r0 %r1;
    JF %r0 _l2866_;
    MOV %r2 "cork";
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2866_:
}
func @@f657() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r2;
    MOV %r3 "_corked";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l2868_;
    MOV %r2 0;
    MOV_THIS %r5;
    MOV %r6 "_corked";
    MOV_PROP %r4 %r5 %r6;
    SUB %r4 1;
    MOV %r3 %r4;
    MOV_THIS %r5;
    MOV %r6 "_corked";
    SET_KEY %r5 %r6 %r4;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2868_:
    JF %r0 _l2867_;
    MOV %r2 "uncork";
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2867_:
}
func @@f658(.e) {
    CLS @t;
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r2;
    MOV %r3 "_unwrite";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2871_;
    MOV_THIS %r3;
    MOV %r4 "_unwrite";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l2871_:
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2870_;
    MOV %r2 .e;
    MOV %r1 %r2;
    JF %r2 _l2873_;
    MOV %r4 .e;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2873_:
    JF %r1 _l2872_;
    MOV %r3 .e;
    MOV %r4 "destroy";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l2872_:
    JMP _l2869_;
LABEL _l2870_:
    MOV %r2 null;
    MOV %r3 .e;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2875_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 .e;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2875_:
    JF %r1 _l2874_;
    MOV_THIS @t;
    MOV %r2 .e;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'writable' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'readable' %r3;
    PUSH %r2;
    MOV_THIS %r3;
    PUSH %r3;
    MOV_THIS %r4;
    MOV %r5 "_forwardEnd";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @l 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @o 3 false;
    MOV @n $RET;
    FUNC @i @@f1036;
    MOV_THIS %r3;
    MOV %r4 "_unwrite";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l2876_;
    MOV %r4 @i;
    PUSH %r4;
    MOV %r4 @r;
    MOV %r5 "nextTick";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
LABEL _l2876_:
    MOV %r2 .e;
    MOV_THIS %r3;
    MOV %r4 "_writable";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "drain";
    PUSH %r2;
    MOV %r2 @i;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "_writable";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "on";
    CALL_VAR %r2 %r3 2 false;
    FUNC %r2 @@f1037;
    MOV_THIS %r3;
    MOV %r4 "_unwrite";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r2;
    MOV %r3 "uncork";
    CALL_VAR %r2 %r3 0 false;
    JMP _l2869_;
LABEL _l2874_:
    MOV_THIS %r2;
    MOV %r3 "end";
    CALL_VAR %r2 %r3 0 false;
LABEL _l2869_:
}
func @@f659(.e) {
    VAR t;
    CLS @r;
    CLS @n;
    CLS @s;
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r2;
    MOV %r3 "_unread";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2879_;
    MOV_THIS %r3;
    MOV %r4 "_unread";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l2879_:
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2878_;
    MOV %r2 .e;
    MOV %r1 %r2;
    JF %r2 _l2881_;
    MOV %r4 .e;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2881_:
    JF %r1 _l2880_;
    MOV %r3 .e;
    MOV %r4 "destroy";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l2880_:
    JMP _l2877_;
LABEL _l2878_:
    MOV %r2 null;
    MOV %r3 .e;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l2884_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 .e;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l2884_:
    JF %r1 _l2883_;
    MOV %r3 null;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV_THIS %r3;
    MOV %r4 "resume";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    VOID %r2;
    MOV $RET %r2;
    RET;
    JMP _l2882_;
LABEL _l2883_:
LABEL _l2882_:
    MOV_THIS @r;
    MOV %r1 .e;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r2 1;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'readable' %r2;
    PUSH %r1;
    MOV_THIS %r2;
    PUSH %r2;
    CALL_REG @l 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @o 3 false;
    MOV @n $RET;
    FUNC @s @@f1038;
    FUNC @a @@f1039;
    MOV %r1 0;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "_drained";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    MOV_THIS %r2;
    MOV %r3 "_readable";
    SET_KEY %r2 %r3 %r1;
    MOV %r3 .e;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l2886_;
    MOV %r1 .e;
    JMP _l2885_;
LABEL _l2886_:
    MOV %r3 .e;
    MOV t %r3;
    MOV %r3 t;
    PUSH %r3;
    NEW_OBJ %r5;
    MOV %r6 0;
    NEG %r6;
    SET_KEY %r5 'objectMode' %r6;
    MOV %r6 16;
    SET_KEY %r5 'highWaterMark' %r6;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "Readable";
    CALL_VAR %r5 %r6 1 true;
    MOV %r3 $RET;
    MOV %r4 "wrap";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
LABEL _l2885_:
    MOV_THIS %r2;
    MOV %r3 "_readable2";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "readable";
    PUSH %r1;
    MOV %r1 @s;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "_readable2";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "end";
    PUSH %r1;
    MOV %r1 @a;
    PUSH %r1;
    MOV_THIS %r3;
    MOV %r4 "_readable2";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    FUNC %r1 @@f1040;
    MOV_THIS %r2;
    MOV %r3 "_unread";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r1;
    MOV %r2 "_forward";
    CALL_VAR %r1 %r2 0 false;
LABEL _l2877_:
}
func @@f660() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "_drained";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r0;
    MOV %r1 "_forward";
    CALL_VAR %r0 %r1 0 false;
}
func @@f661() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r3;
    MOV %r4 "_forwarding";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l2890_;
    MOV_THIS %r4;
    MOV %r5 "_readable2";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l2890_:
    MOV %r0 %r1;
    JF %r1 _l2889_;
    MOV_THIS %r3;
    MOV %r4 "_drained";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l2889_:
    JF %r0 _l2888_;
    MOV %r1 0;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "_forwarding";
    SET_KEY %r2 %r3 %r1;
LABEL _l2891_:
    MOV_THIS %r3;
    MOV %r4 "_drained";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l2895_;
    MOV %r3 null;
    MOV_THIS %r7;
    MOV %r8 "_readable2";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    CALL_REG @a 1 false;
    MOV %r5 $RET;
    MOV e %r5;
    MOV %r4 %r5;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2895_:
    JF %r1 _l2892_;
LABEL _l2894_:
    MOV_THIS %r3;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l2896_;
    MOV %r5 e;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 "push";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV_THIS %r5;
    MOV %r6 "_drained";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l2896_:
    JMP _l2891_;
LABEL _l2892_:
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "_forwarding";
    SET_KEY %r2 %r3 %r1;
    JMP _l2887_;
LABEL _l2888_:
LABEL _l2887_:
}
func @@f662(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l2898_;
    MOV %r1 0;
    NEG %r1;
    MOV_THIS %r2;
    MOV %r3 "destroyed";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS @t;
    FUNC %r1 @@f1041;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2897_;
LABEL _l2898_:
LABEL _l2897_:
}
func @@f663(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 .e;
    JF %r0 _l2900_;
    MOV_THIS %r1;
    MOV %r2 "_ondrain";
    MOV_PROP t %r1 %r2;
    MOV %r1 null;
    MOV_THIS %r2;
    MOV %r3 "_ondrain";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 t;
    JF %r1 _l2902_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG t 1 false;
    JMP _l2901_;
LABEL _l2902_:
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
LABEL _l2901_:
    JMP _l2899_;
LABEL _l2900_:
LABEL _l2899_:
    MOV_THIS %r1;
    MOV %r2 "_forwardDestroy";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2903_;
    MOV_THIS %r4;
    MOV %r5 "_readable";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l2905_;
    MOV_THIS %r7;
    MOV %r8 "_readable";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l2905_:
    JF %r2 _l2904_;
    MOV_THIS %r6;
    MOV %r7 "_readable";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "destroy";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
LABEL _l2904_:
    MOV_THIS %r4;
    MOV %r5 "_writable";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l2907_;
    MOV_THIS %r7;
    MOV %r8 "_writable";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l2907_:
    MOV %r1 %r2;
    JF %r2 _l2906_;
    MOV_THIS %r6;
    MOV %r7 "_writable";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "destroy";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2906_:
LABEL _l2903_:
    MOV %r0 "close";
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f664(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r2;
    MOV %r3 "destroyed";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l2909_;
    CALL_REG .r 0 false;
    MOV %r0 $RET;
    JMP _l2908_;
LABEL _l2909_:
    MOV_THIS %r3;
    MOV %r4 "_corked";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l2910_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    MOV_THIS %r6;
    MOV %r7 "_write";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "bind";
    CALL_VAR %r4 %r5 4 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @c 2 false;
    MOV %r0 $RET;
    JMP _l2908_;
LABEL _l2910_:
    MOV %r3 .e;
    MOV %r4 @u;
    EQ %r3 %r4;
    JF %r3 _l2911_;
    MOV %r4 .r;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_finish";
    CALL_VAR %r4 %r5 1 false;
    MOV %r0 $RET;
    JMP _l2908_;
LABEL _l2911_:
    MOV_THIS %r5;
    MOV %r6 "_writable";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l2912_;
    MOV %r5 1;
    NEG %r5;
    MOV %r7 .e;
    PUSH %r7;
    MOV_THIS %r9;
    MOV %r10 "_writable";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "write";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    EQ %r5 %r6;
    JF %r5 _l2914_;
    MOV %r6 .r;
    MOV_THIS %r7;
    MOV %r8 "_ondrain";
    SET_KEY %r7 %r8 %r6;
    MOV %r0 %r6;
    JMP _l2913_;
LABEL _l2914_:
    CALL_REG .r 0 false;
    MOV %r0 $RET;
LABEL _l2913_:
    VOID %r0;
    JMP _l2908_;
LABEL _l2912_:
    CALL_REG .r 0 false;
    MOV %r0 $RET;
LABEL _l2908_:
    MOV $RET %r0;
    RET;
}
func @@f665(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    MOV %r0 "preend";
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV_THIS %r0;
    PUSH %r0;
    FUNC %r0 @@f1042;
    PUSH %r0;
    CALL_REG @c 2 false;
}
func @@f666(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r1 "function";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l2916_;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "end";
    CALL_VAR %r2 %r3 3 false;
    MOV %r0 $RET;
    JMP _l2915_;
LABEL _l2916_:
    MOV %r2 "function";
    MOV %r3 .t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l2917_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 null;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "end";
    CALL_VAR %r3 %r4 3 false;
    MOV %r0 $RET;
    JMP _l2915_;
LABEL _l2917_:
    MOV %r3 0;
    NEG %r3;
    MOV_THIS %r4;
    MOV %r5 "_ended";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 .e;
    JF %r3 _l2918_;
    MOV %r5 .e;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 "write";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
LABEL _l2918_:
    MOV_THIS %r6;
    MOV %r7 "_writableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "ending";
    MOV_PROP %r3 %r4 %r5;
    JIF %r3 _l2919_;
    MOV %r5 @u;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 "write";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
LABEL _l2919_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r9 @i;
    MOV %r10 "Writable";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "prototype";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "end";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
LABEL _l2915_:
    MOV $RET %r0;
    RET;
}
func @@f667() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @e;
    MOV %r2 "writable";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l2920_;
    CALL_REG @f 0 false;
    MOV %r1 $RET;
LABEL _l2920_:
}
func @@f668() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    NEG %r0;
    MOV @c %r0;
    MOV %r0 @u;
    JIF %r0 _l2921_;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2921_:
}
func @@f669() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    NEG %r0;
    MOV @u %r0;
    MOV %r0 @c;
    JIF %r0 _l2922_;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2922_:
}
func @@f670(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r1 .t;
    JF %r1 _l2924_;
    MOV %r2 "exited with error code: ";
    MOV %r3 .t;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    JMP _l2923_;
LABEL _l2924_:
    MOV %r0 null;
LABEL _l2923_:
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f671(.t) {
    REG %r0;
    REG %r1;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f672() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r3 @u;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l2928_;
    MOV %r5 @a;
    MOV %r4 %r5;
    JF %r5 _l2929_;
    MOV %r7 @a;
    MOV %r8 "ended";
    MOV_PROP %r6 %r7 %r8;
    LG_AND %r4 %r6;
LABEL _l2929_:
    LG_OR %r2 %r4;
LABEL _l2928_:
    MOV %r1 %r2;
    JF %r2 _l2927_;
    MOV %r4 @c;
    NEG %r4;
    MOV %r3 %r4;
    JIF %r4 _l2930_;
    MOV %r6 @s;
    MOV %r5 %r6;
    JF %r6 _l2931_;
    MOV %r8 @s;
    MOV %r9 "ended";
    MOV_PROP %r7 %r8 %r9;
    LG_AND %r5 %r7;
LABEL _l2931_:
    LG_OR %r3 %r5;
LABEL _l2930_:
    LG_AND %r1 %r3;
LABEL _l2927_:
    JF %r1 _l2926_;
    MOV %r0 0;
    VOID %r0;
    JMP _l2925_;
LABEL _l2926_:
    MOV %r2 @e;
    PUSH %r2;
    MOV %r3 "premature close";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l2925_:
    MOV $RET %r0;
    RET;
}
func @@f673() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "finish";
    PUSH %r0;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r2 @e;
    MOV %r3 "req";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
}
func @@f674(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .e;
    MOV %r3 "setHeader";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l2932_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "abort";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2932_:
    MOV $RET %r0;
    RET;
}
func @@f675(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r3 .e;
    MOV %r4 "stdio";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l2934_;
    MOV %r5 .e;
    MOV %r6 "stdio";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_CTX %r4 "Array";
    MOV %r5 "isArray";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l2934_:
    MOV %r0 %r1;
    JF %r1 _l2933_;
    MOV %r2 3;
    MOV %r6 .e;
    MOV %r7 "stdio";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l2933_:
    MOV $RET %r0;
    RET;
}
func @@f676() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "complete";
    PUSH %r0;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "abort";
    PUSH %r0;
    MOV %r0 @b;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "request";
    PUSH %r0;
    MOV %r0 @g;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 @e;
    MOV %r2 "req";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l2935_;
    MOV %r2 "finish";
    PUSH %r2;
    MOV %r2 @f;
    PUSH %r2;
    MOV %r4 @e;
    MOV %r5 "req";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l2935_:
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "finish";
    PUSH %r0;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "exit";
    PUSH %r0;
    MOV %r0 @p;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @h;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @b;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
}
func @@f677(.r, .c) {
    VAR l;
    CLS @f;
    VAR h;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @r;
    MOV @r .r;
    CLS @c;
    MOV @c .c;
    MOV_ARGS %r0;
    MOV %r1 2;
    MOV_PROP @f %r0 %r1;
    MOV_ARGS %r0;
    MOV %r1 3;
    MOV_PROP h %r0 %r1;
    MOV %r3 @r;
    PUSH %r3;
    CALL_REG @i 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_CTX 'Object' 1 false;
    MOV %r1 $RET;
    MOV @r %r1;
    MOV %r1 @c;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r2 @r;
    PUSH %r2;
    CALL_REG @a 1 false;
    MOV %r1 $RET;
    MOV l %r1;
    MOV %r1 h;
    JF %r1 _l2936_;
    MOV %r4 "function";
    MOV %r5 h;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    JF %r4 _l2938_;
    MOV %r5 h;
    PUSH %r5;
    MOV %r5 @r;
    PUSH %r5;
    MOV %r5 @o;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    JMP _l2937_;
LABEL _l2938_:
    MOV %r3 0;
    VOID %r3;
LABEL _l2937_:
    PUSH %r3;
    MOV %r3 l;
    MOV %r4 "sort";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l2936_:
    MOV %r1 "function";
    MOV %r2 @e;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l2939_;
    MOV %r4 l;
    MOV %r5 @e;
    MOV_PROP %r3 %r4 %r5;
    MOV @e %r3;
    MOV %r2 %r3;
LABEL _l2939_:
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 l;
    PUSH %r1;
    FUNC %r1 @@f1043;
    PUSH %r1;
    MOV %r1 @s;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f678(.n) {
    REG %r0;
    REG %r1;
    REG %r2;
    TRY _l2940_ _l2941_;
    MOV %r1 @t;
    MOV %r2 .n;
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 @e;
    MOV %r2 .n;
    SET_KEY %r1 %r2 %r0;
    TRY_END;
LABEL _l2940_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 @r;
    JIF %r0 _l2942_;
    MOV %r2 e;
    MOV @r %r2;
    MOV %r1 %r2;
LABEL _l2942_:
    END_BLOCK 2;
LABEL _l2941_:
}
func @@f679(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @s;
    MOV %r3 "ensure";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l2944_;
    MOV %r2 .t;
    MOV %r3 @e;
    IN %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l2944_:
    JF %r0 _l2943_;
    MOV %r3 @e;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 @a;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2943_:
}
func @@f680(.e, .n, .i, .a) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @s;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .a;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 6 false;
    MOV %r0 $RET;
    MOV %r1 @r;
    MOV %r2 .n;
    SET_KEY %r1 %r2 %r0;
}
func @@f681(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @n 1 false;
    MOV %r0 $RET;
    JF %r0 _l2945_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_CTX 'Object' 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @t;
    PUSH %r2;
    FUNC %r2 @@f1044;
    CALL_REG %r2 2 false;
    MOV %r1 $RET;
LABEL _l2945_:
}
func @@f682(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 .e;
    SET_KEY %r1 %r2 %r0;
}
func @@f683() {
    REG %r0;
    MOV %r0 0;
    NEG %r0;
    MOV @h %r0;
}
func @@f684(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @_;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @f;
    PUSH %r1;
    MOV %r1 @u;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 4 false;
    MOV %r0 @h;
    MOV $RET %r0;
    RET;
}
func @@f685(.t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .t;
    MOV %r1 @e;
    GE %r0 %r1;
    JF %r0 _l2946_;
    MOV %r3 .t;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV .t %r3;
    MOV_THIS %r5;
    MOV %r6 "__redo__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .r;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2946_:
}
func @@f686(.t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .t;
    MOV %r1 @e;
    GT %r0 %r1;
    JF %r0 _l2947_;
    MOV %r3 .t;
    SUB %r3 1;
    MOV %r2 %r3;
    MOV .t %r3;
    MOV_THIS %r5;
    MOV %r6 "__redo__";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .r;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l2947_:
}
func @@f687(.r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 .r;
    PUSH %r2;
    CALL_REG @u 1 false;
    MOV %r0 $RET;
    MOV %r1 0;
    MOV_PROP n %r0 %r1;
    MOV %r1 .r;
    MOV %r2 1;
    MOV_PROP %r0 %r1 %r2;
    MOV .r %r0;
    MOV %r0 1;
    MINUS %r0;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    JF %r0 _l2948_;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 @t;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l2948_:
}
func @@f688(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @r;
    JIF %r0 _l2949_;
    MOV %r2 0;
    NEG %r2;
    MOV @r %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @t;
    PUSH %r2;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @a 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @f 3 false;
    MOV %r2 1;
    NEG %r2;
    MOV @r %r2;
    MOV %r1 %r2;
LABEL _l2949_:
}
func @@f689() {
    REG %r0;
    REG %r1;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
    MOV %r0 @t;
    PUSH %r0;
    MOV_THIS %r0;
    PUSH %r0;
    MOV_ARGS %r0;
    PUSH %r0;
    MOV %r0 @h;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f690() {
}
func @@f691() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @e;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f692(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV t $RET;
    MOV r 0;
LABEL _l2950_:
    MOV %r0 r;
    MOV %r2 t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l2951_;
LABEL _l2953_:
    MOV %r5 .e;
    MOV %r6 r;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "listener";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l2954_;
    MOV %r4 .e;
    MOV %r5 r;
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l2954_:
    MOV %r2 t;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
LABEL _l2952_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l2950_;
LABEL _l2951_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f693(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .t;
    JF %r0 _l2956_;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 1 false;
    JMP _l2955_;
LABEL _l2956_:
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP n %r1 %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    CALL_REG @g 2 false;
    MOV i $RET;
    MOV o 0;
LABEL _l2957_:
    MOV %r1 o;
    MOV %r2 n;
    LT %r1 %r2;
    JF %r1 _l2958_;
LABEL _l2960_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 i;
    MOV %r5 o;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
LABEL _l2959_:
    MOV %r2 o;
    ADD %r2 1;
    MOV o %r2;
    JMP _l2957_;
LABEL _l2958_:
LABEL _l2955_:
}
func @@f694(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .t;
    JF %r0 _l2962_;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    JMP _l2961_;
LABEL _l2962_:
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP i %r1 %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    CALL_REG @g 2 false;
    MOV o $RET;
    MOV s 0;
LABEL _l2963_:
    MOV %r1 s;
    MOV %r2 i;
    LT %r1 %r2;
    JF %r1 _l2964_;
LABEL _l2966_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r4 o;
    MOV %r5 s;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
LABEL _l2965_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l2963_;
LABEL _l2964_:
LABEL _l2961_:
}
func @@f695(.e, .t, .r, .n, .i) {
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .t;
    JF %r0 _l2968_;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    JMP _l2967_;
LABEL _l2968_:
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP o %r1 %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 o;
    PUSH %r1;
    CALL_REG @g 2 false;
    MOV s $RET;
    MOV a 0;
LABEL _l2969_:
    MOV %r1 a;
    MOV %r2 o;
    LT %r1 %r2;
    JF %r1 _l2970_;
LABEL _l2972_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 .i;
    PUSH %r2;
    MOV %r4 s;
    MOV %r5 a;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 3 false;
LABEL _l2971_:
    MOV %r2 a;
    ADD %r2 1;
    MOV a %r2;
    JMP _l2969_;
LABEL _l2970_:
LABEL _l2967_:
}
func @@f696(.e, .t, .r, .n, .i, .o) {
    VAR s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .t;
    JF %r0 _l2974_;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .o;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 4 false;
    JMP _l2973_;
LABEL _l2974_:
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP s %r1 %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 s;
    PUSH %r1;
    CALL_REG @g 2 false;
    MOV a $RET;
    MOV u 0;
LABEL _l2975_:
    MOV %r1 u;
    MOV %r2 s;
    LT %r1 %r2;
    JF %r1 _l2976_;
LABEL _l2978_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 .i;
    PUSH %r2;
    MOV %r2 .o;
    PUSH %r2;
    MOV %r4 a;
    MOV %r5 u;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 4 false;
LABEL _l2977_:
    MOV %r2 u;
    ADD %r2 1;
    MOV u %r2;
    JMP _l2975_;
LABEL _l2976_:
LABEL _l2973_:
}
func @@f697(.e, .t, .r, .n) {
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .t;
    JF %r0 _l2980_;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    JMP _l2979_;
LABEL _l2980_:
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP i %r1 %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    CALL_REG @g 2 false;
    MOV o $RET;
    MOV s 0;
LABEL _l2981_:
    MOV %r1 s;
    MOV %r2 i;
    LT %r1 %r2;
    JF %r1 _l2982_;
LABEL _l2984_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r4 o;
    MOV %r5 s;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
LABEL _l2983_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l2981_;
LABEL _l2982_:
LABEL _l2979_:
}
func @@f698(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV r .t;
    MOV n r;
    MOV %r0 1;
    ADD n %r0;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP i %r0 %r1;
LABEL _l2985_:
    MOV %r0 n;
    MOV %r1 i;
    LT %r0 %r1;
    JF %r0 _l2986_;
LABEL _l2988_:
    MOV %r2 .e;
    MOV %r3 n;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .e;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
LABEL _l2987_:
    MOV %r1 1;
    MOV %r2 r;
    ADD %r2 %r1;
    MOV r %r2;
    MOV %r1 1;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
    JMP _l2985_;
LABEL _l2986_:
    MOV %r0 .e;
    MOV %r1 "pop";
    CALL_VAR %r0 %r1 0 false;
}
func @@f699() {
}
func @@f700(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "readFloatLE";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2990_;
    MOV %r3 "function";
    MOV %r5 .e;
    MOV %r6 "slice";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2990_:
    MOV %r0 %r1;
    JF %r1 _l2989_;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l2989_:
    MOV $RET %r0;
    RET;
}
func @@f701(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @t;
    MOV @t .t;
    FUNC %r1 @@f1045;
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r3 0;
    SET_KEY %r1 0 %r3;
    MOV %r3 1;
    SET_KEY %r1 1 %r3;
    MOV %r2 "map";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f702(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r2 .e;
    MOV %r3 0;
    GE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2993_;
    MOV %r3 .e;
    MOV %r4 128;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l2993_:
    JF %r1 _l2992_;
    MOV %r0 1;
    JMP _l2991_;
LABEL _l2992_:
    MOV %r3 .e;
    MOV %r4 128;
    GE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l2995_;
    MOV %r4 .e;
    MOV %r5 16384;
    LT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l2995_:
    JF %r2 _l2994_;
    MOV %r0 2;
    JMP _l2991_;
LABEL _l2994_:
    MOV %r4 .e;
    MOV %r5 16384;
    GE %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l2997_;
    MOV %r5 .e;
    MOV %r6 2097152;
    LT %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l2997_:
    JF %r3 _l2996_;
    MOV %r0 3;
    JMP _l2991_;
LABEL _l2996_:
    MOV %r5 .e;
    MOV %r6 2097152;
    GE %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l2999_;
    MOV %r6 .e;
    MOV %r7 268435456;
    LT %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l2999_:
    JF %r4 _l2998_;
    MOV %r0 4;
    JMP _l2991_;
LABEL _l2998_:
    MOV %r0 0;
LABEL _l2991_:
    MOV $RET %r0;
    RET;
}
func @@f703(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR b;
    VAR g;
    VAR _;
    VAR y;
    VAR w;
    VAR S;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .e;
    MOV o %r0;
    JIF %r0 _l3000_;
    NEW_OBJ %r1;
    LG_OR o %r1;
LABEL _l3000_:
    MOV %r1 o;
    MOV %r2 "protocolId";
    MOV_PROP %r0 %r1 %r2;
    MOV s %r0;
    JIF %r0 _l3001_;
    MOV %r1 "MQTT";
    LG_OR s %r1;
LABEL _l3001_:
    MOV %r1 o;
    MOV %r2 "protocolVersion";
    MOV_PROP %r0 %r1 %r2;
    MOV a %r0;
    JIF %r0 _l3002_;
    MOV %r1 4;
    LG_OR a %r1;
LABEL _l3002_:
    MOV %r0 o;
    MOV %r1 "will";
    MOV_PROP u %r0 %r1;
    MOV %r0 o;
    MOV %r1 "clean";
    MOV_PROP c %r0 %r1;
    MOV %r1 o;
    MOV %r2 "keepalive";
    MOV_PROP %r0 %r1 %r2;
    MOV l %r0;
    JIF %r0 _l3003_;
    MOV %r1 0;
    LG_OR l %r1;
LABEL _l3003_:
    MOV %r1 o;
    MOV %r2 "clientId";
    MOV_PROP %r0 %r1 %r2;
    MOV f %r0;
    JIF %r0 _l3004_;
    MOV %r1 "";
    LG_OR f %r1;
LABEL _l3004_:
    MOV %r0 o;
    MOV %r1 "username";
    MOV_PROP h %r0 %r1;
    MOV %r0 o;
    MOV %r1 "password";
    MOV_PROP p %r0 %r1;
    MOV %r0 o;
    MOV %r1 "properties";
    MOV_PROP b %r0 %r1;
    MOV %r0 0;
    VOID %r0;
    MOV %r1 c;
    EQ %r0 %r1;
    JF %r0 _l3005_;
    MOV %r2 0;
    NEG %r2;
    MOV c %r2;
    MOV %r1 %r2;
LABEL _l3005_:
    MOV g 0;
    MOV %r1 s;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l3008_;
    MOV %r3 "string";
    MOV %r4 s;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3009_;
    MOV %r5 s;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "isBuffer";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l3009_:
    LG_OR %r0 %r2;
LABEL _l3008_:
    JF %r0 _l3007_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid protocolId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3006_;
LABEL _l3007_:
LABEL _l3006_:
    MOV %r2 s;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 2;
    ADD %r0 %r1;
    MOV %r1 g;
    ADD %r1 %r0;
    MOV g %r1;
    MOV %r2 3;
    MOV %r3 a;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3013_;
    MOV %r3 4;
    MOV %r4 a;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3013_:
    MOV %r0 %r1;
    JF %r1 _l3012_;
    MOV %r2 5;
    MOV %r3 a;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3012_:
    JF %r0 _l3011_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid protocol version";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3010_;
LABEL _l3011_:
LABEL _l3010_:
    MOV %r0 1;
    MOV %r1 g;
    ADD %r1 %r0;
    MOV g %r1;
    MOV %r3 "string";
    MOV %r4 f;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3018_;
    MOV %r5 f;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "isBuffer";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l3018_:
    MOV %r1 %r2;
    JIF %r2 _l3017_;
    MOV %r4 f;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l3019_;
    MOV %r5 4;
    MOV %r6 a;
    NE %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l3019_:
    LG_OR %r1 %r3;
LABEL _l3017_:
    MOV %r0 %r1;
    JIF %r1 _l3016_;
    MOV %r3 f;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l3020_;
    MOV %r4 c;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l3020_:
    LG_OR %r0 %r2;
LABEL _l3016_:
    JF %r0 _l3015_;
    MOV %r1 a;
    MOV %r2 4;
    LT %r1 %r2;
    JF %r1 _l3022_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "clientId must be supplied before 3.1.1";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3021_;
LABEL _l3022_:
LABEL _l3021_:
    MOV %r1 1;
    MOV %r3 c;
    MUL %r1 %r3;
    MOV %r2 0;
    WEQ %r1 %r2;
    JF %r1 _l3024_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "clientId must be given if cleanSession set to 0";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3023_;
LABEL _l3024_:
LABEL _l3023_:
    JMP _l3014_;
LABEL _l3015_:
    MOV %r3 f;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 2;
    ADD %r1 %r2;
    MOV %r2 g;
    ADD %r2 %r1;
    MOV g %r2;
LABEL _l3014_:
    MOV %r3 "number";
    MOV %r4 l;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3029_;
    MOV %r4 l;
    MOV %r5 0;
    LT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3029_:
    MOV %r1 %r2;
    JIF %r2 _l3028_;
    MOV %r3 l;
    MOV %r4 65535;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3028_:
    MOV %r0 %r1;
    JIF %r1 _l3027_;
    MOV %r2 l;
    MOV %r4 1;
    MOD %r2 %r4;
    MOV %r3 0;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3027_:
    JF %r0 _l3026_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid keepalive";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3025_;
LABEL _l3026_:
LABEL _l3025_:
    MOV %r0 2;
    MOV %r1 g;
    ADD %r1 %r0;
    MOV g %r1;
    MOV %r1 1;
    MOV %r2 g;
    ADD %r2 %r1;
    MOV g %r2;
    MOV %r0 5;
    MOV %r1 a;
    EQ %r0 %r1;
    JF %r0 _l3031_;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 b;
    PUSH %r1;
    CALL_REG @I 2 false;
    MOV _ $RET;
    MOV %r2 _;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 g;
    ADD %r2 %r1;
    MOV g %r2;
    JMP _l3030_;
LABEL _l3031_:
LABEL _l3030_:
    MOV %r0 u;
    JF %r0 _l3033_;
    MOV %r1 "object";
    MOV %r2 u;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3035_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid will";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3034_;
LABEL _l3035_:
LABEL _l3034_:
    MOV %r3 u;
    MOV %r4 "topic";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l3038_;
    MOV %r3 "string";
    MOV %r5 u;
    MOV %r6 "topic";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WNE %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3038_:
    JF %r1 _l3037_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid will topic";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3036_;
LABEL _l3037_:
LABEL _l3036_:
    MOV %r5 u;
    MOV %r6 "topic";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "byteLength";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 2;
    ADD %r2 %r3;
    MOV %r3 g;
    ADD %r3 %r2;
    MOV g %r3;
    MOV %r2 2;
    MOV %r3 g;
    ADD %r3 %r2;
    MOV g %r3;
    MOV %r2 u;
    MOV %r3 "payload";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3040_;
    MOV %r6 u;
    MOV %r7 "payload";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 0;
    GE %r2 %r3;
    NEG %r2;
    JF %r2 _l3042_;
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "Invalid will payload";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 .t;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l3041_;
LABEL _l3042_:
LABEL _l3041_:
    MOV %r2 "string";
    MOV %r4 u;
    MOV %r5 "payload";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3044_;
    MOV %r5 u;
    MOV %r6 "payload";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "byteLength";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV %r4 g;
    ADD %r4 %r3;
    MOV g %r4;
    JMP _l3043_;
LABEL _l3044_:
    MOV %r6 u;
    MOV %r7 "payload";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 g;
    ADD %r4 %r3;
    MOV g %r4;
LABEL _l3043_:
    JMP _l3039_;
LABEL _l3040_:
LABEL _l3039_:
    NEW_OBJ y;
    MOV %r1 5;
    MOV %r2 a;
    EQ %r1 %r2;
    JF %r1 _l3045_;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r5 u;
    MOV %r6 "properties";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @I 2 false;
    MOV %r3 $RET;
    MOV y %r3;
    MOV %r4 y;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 g;
    ADD %r4 %r3;
    MOV g %r4;
    MOV %r2 %r4;
LABEL _l3045_:
    JMP _l3032_;
LABEL _l3033_:
LABEL _l3032_:
    MOV w 1;
    NEG w;
    MOV %r0 null;
    MOV %r1 h;
    WNE %r0 %r1;
    JF %r0 _l3047_;
    MOV %r2 h;
    PUSH %r2;
    CALL_REG @A 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l3049_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid username";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3048_;
LABEL _l3049_:
LABEL _l3048_:
    MOV %r1 0;
    NEG %r1;
    MOV w %r1;
    MOV %r3 h;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "byteLength";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 2;
    ADD %r1 %r2;
    MOV %r2 g;
    ADD %r2 %r1;
    MOV g %r2;
    JMP _l3046_;
LABEL _l3047_:
LABEL _l3046_:
    MOV %r0 null;
    MOV %r1 p;
    WNE %r0 %r1;
    JF %r0 _l3051_;
    MOV %r1 w;
    NEG %r1;
    JF %r1 _l3053_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Username is required to use password";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3052_;
LABEL _l3053_:
LABEL _l3052_:
    MOV %r2 p;
    PUSH %r2;
    CALL_REG @A 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l3055_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid password";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3054_;
LABEL _l3055_:
LABEL _l3054_:
    MOV %r3 p;
    PUSH %r3;
    CALL_REG @j 1 false;
    MOV %r1 $RET;
    MOV %r2 2;
    ADD %r1 %r2;
    MOV %r2 g;
    ADD %r2 %r1;
    MOV g %r2;
    JMP _l3050_;
LABEL _l3051_:
LABEL _l3050_:
    MOV %r1 @n;
    MOV %r2 "CONNECT_HEADER";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 g;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 s;
    PUSH %r0;
    CALL_REG @k 2 false;
    MOV %r1 4;
    MOV %r2 a;
    EQ %r1 %r2;
    JF %r1 _l3057_;
    MOV %r2 @n;
    MOV %r3 "VERSION4";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3056_;
LABEL _l3057_:
    MOV %r2 5;
    MOV %r3 a;
    EQ %r2 %r3;
    JF %r2 _l3058_;
    MOV %r3 @n;
    MOV %r4 "VERSION5";
    MOV_PROP %r0 %r3 %r4;
    JMP _l3056_;
LABEL _l3058_:
    MOV %r3 @n;
    MOV %r4 "VERSION3";
    MOV_PROP %r0 %r3 %r4;
LABEL _l3056_:
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV S 0;
    MOV %r1 null;
    MOV %r2 h;
    WNE %r1 %r2;
    JF %r1 _l3060_;
    MOV %r2 @n;
    MOV %r3 "USERNAME_MASK";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3059_;
LABEL _l3060_:
    MOV %r0 0;
LABEL _l3059_:
    MOV %r1 S;
    OR %r1 %r0;
    MOV S %r1;
    MOV %r1 null;
    MOV %r2 p;
    WNE %r1 %r2;
    JF %r1 _l3062_;
    MOV %r2 @n;
    MOV %r3 "PASSWORD_MASK";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3061_;
LABEL _l3062_:
    MOV %r0 0;
LABEL _l3061_:
    MOV %r1 S;
    OR %r1 %r0;
    MOV S %r1;
    MOV %r2 u;
    MOV %r1 %r2;
    JF %r2 _l3065_;
    MOV %r4 u;
    MOV %r5 "retain";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l3065_:
    JF %r1 _l3064_;
    MOV %r2 @n;
    MOV %r3 "WILL_RETAIN_MASK";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3063_;
LABEL _l3064_:
    MOV %r0 0;
LABEL _l3063_:
    MOV %r1 S;
    OR %r1 %r0;
    MOV S %r1;
    MOV %r2 u;
    MOV %r1 %r2;
    JF %r2 _l3068_;
    MOV %r4 u;
    MOV %r5 "qos";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l3068_:
    JF %r1 _l3067_;
    MOV %r3 u;
    MOV %r4 "qos";
    MOV_PROP %r0 %r3 %r4;
    MOV %r3 @n;
    MOV %r4 "WILL_QOS_SHIFT";
    MOV_PROP %r2 %r3 %r4;
    SHL %r0 %r2;
    JMP _l3066_;
LABEL _l3067_:
    MOV %r0 0;
LABEL _l3066_:
    MOV %r1 S;
    OR %r1 %r0;
    MOV S %r1;
    MOV %r1 u;
    JF %r1 _l3070_;
    MOV %r2 @n;
    MOV %r3 "WILL_FLAG_MASK";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3069_;
LABEL _l3070_:
    MOV %r0 0;
LABEL _l3069_:
    MOV %r1 S;
    OR %r1 %r0;
    MOV S %r1;
    MOV %r1 c;
    JF %r1 _l3072_;
    MOV %r2 @n;
    MOV %r3 "CLEAN_SESSION_MASK";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3071_;
LABEL _l3072_:
    MOV %r0 0;
LABEL _l3071_:
    MOV %r1 S;
    OR %r1 %r0;
    MOV S %r1;
    NEW_ARR %r1;
    MOV %r2 S;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 l;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 5;
    MOV %r1 a;
    EQ %r0 %r1;
    JF %r0 _l3073_;
    MOV %r2 _;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3073_:
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 f;
    PUSH %r0;
    CALL_REG @k 2 false;
    MOV %r0 u;
    JF %r0 _l3074_;
    MOV %r2 5;
    MOV %r3 a;
    EQ %r2 %r3;
    JF %r2 _l3075_;
    MOV %r4 y;
    MOV %r5 "write";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
LABEL _l3075_:
    MOV %r2 .t;
    PUSH %r2;
    MOV %r3 u;
    MOV %r4 "topic";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @v 2 false;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r3 u;
    MOV %r4 "payload";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @k 2 false;
    MOV %r1 $RET;
LABEL _l3074_:
    MOV %r0 null;
    MOV %r1 h;
    WNE %r0 %r1;
    JF %r0 _l3076_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 h;
    PUSH %r2;
    CALL_REG @k 2 false;
    MOV %r1 $RET;
LABEL _l3076_:
    MOV %r0 null;
    MOV %r1 p;
    WNE %r0 %r1;
    JF %r0 _l3077_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 p;
    PUSH %r2;
    CALL_REG @k 2 false;
    MOV %r1 $RET;
LABEL _l3077_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f704(.e, .t, .r) {
    VAR o;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .r;
    JF %r0 _l3079_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3078_;
LABEL _l3079_:
    MOV o 4;
LABEL _l3078_:
    MOV %r0 .e;
    MOV a %r0;
    JIF %r0 _l3080_;
    NEW_OBJ %r1;
    LG_OR a %r1;
LABEL _l3080_:
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3082_;
    MOV %r1 a;
    MOV %r2 "reasonCode";
    MOV_PROP u %r1 %r2;
    JMP _l3081_;
LABEL _l3082_:
    MOV %r1 a;
    MOV %r2 "returnCode";
    MOV_PROP u %r1 %r2;
LABEL _l3081_:
    MOV %r0 a;
    MOV %r1 "properties";
    MOV_PROP c %r0 %r1;
    MOV l 2;
    MOV %r0 "number";
    MOV %r1 u;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3084_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid return code";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3083_;
LABEL _l3084_:
LABEL _l3083_:
    MOV f null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3085_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 c;
    PUSH %r3;
    CALL_REG @I 2 false;
    MOV %r2 $RET;
    MOV f %r2;
    MOV %r3 f;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 l;
    ADD %r3 %r2;
    MOV l %r3;
    MOV %r1 %r3;
LABEL _l3085_:
    MOV %r1 @n;
    MOV %r2 "CONNACK_HEADER";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 l;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r2 a;
    MOV %r3 "sessionPresent";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3087_;
    MOV %r2 @n;
    MOV %r3 "SESSIONPRESENT_HEADER";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3086_;
LABEL _l3087_:
    MOV %r0 @s;
LABEL _l3086_:
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    NEW_ARR %r1;
    MOV %r2 u;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 null;
    MOV %r1 f;
    WNE %r0 %r1;
    JF %r0 _l3088_;
    MOV %r2 f;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3088_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f705(.e, .t, .r) {
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR b;
    VAR g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 .r;
    JF %r0 _l3090_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP s %r1 %r2;
    JMP _l3089_;
LABEL _l3090_:
    MOV s 4;
LABEL _l3089_:
    MOV %r0 .e;
    MOV a %r0;
    JIF %r0 _l3091_;
    NEW_OBJ %r1;
    LG_OR a %r1;
LABEL _l3091_:
    MOV %r1 a;
    MOV %r2 "qos";
    MOV_PROP %r0 %r1 %r2;
    MOV u %r0;
    JIF %r0 _l3092_;
    MOV %r1 0;
    LG_OR u %r1;
LABEL _l3092_:
    MOV %r1 a;
    MOV %r2 "retain";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3094_;
    MOV %r1 @n;
    MOV %r2 "RETAIN_MASK";
    MOV_PROP c %r1 %r2;
    JMP _l3093_;
LABEL _l3094_:
    MOV c 0;
LABEL _l3093_:
    MOV %r0 a;
    MOV %r1 "topic";
    MOV_PROP l %r0 %r1;
    MOV %r1 a;
    MOV %r2 "payload";
    MOV_PROP %r0 %r1 %r2;
    MOV f %r0;
    JIF %r0 _l3095_;
    MOV %r1 @o;
    LG_OR f %r1;
LABEL _l3095_:
    MOV %r0 a;
    MOV %r1 "messageId";
    MOV_PROP h %r0 %r1;
    MOV %r0 a;
    MOV %r1 "properties";
    MOV_PROP p %r0 %r1;
    MOV b 0;
    MOV %r0 "string";
    MOV %r1 l;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l3097_;
    MOV %r3 l;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "byteLength";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 2;
    ADD %r1 %r2;
    MOV %r2 b;
    ADD %r2 %r1;
    MOV b %r2;
    JMP _l3096_;
LABEL _l3097_:
    MOV %r2 l;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "isBuffer";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    NEG %r1;
    JF %r1 _l3099_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid topic";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3098_;
LABEL _l3099_:
LABEL _l3098_:
    MOV %r3 l;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 2;
    ADD %r1 %r2;
    MOV %r2 b;
    ADD %r2 %r1;
    MOV b %r2;
LABEL _l3096_:
    MOV %r1 f;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l3101_;
    MOV %r2 f;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 b;
    ADD %r2 %r1;
    MOV b %r2;
    JMP _l3100_;
LABEL _l3101_:
    MOV %r2 f;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "byteLength";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r2 b;
    ADD %r2 %r1;
    MOV b %r2;
LABEL _l3100_:
    MOV %r1 u;
    MOV %r0 %r1;
    JF %r1 _l3104_;
    MOV %r2 "number";
    MOV %r3 h;
    TYPE_OF %r3;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3104_:
    JF %r0 _l3103_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3102_;
LABEL _l3103_:
LABEL _l3102_:
    MOV %r0 u;
    JF %r0 _l3105_;
    MOV %r2 2;
    MOV %r3 b;
    ADD %r3 %r2;
    MOV b %r3;
    MOV %r1 %r3;
LABEL _l3105_:
    MOV g null;
    MOV %r0 5;
    MOV %r1 s;
    EQ %r0 %r1;
    JF %r0 _l3106_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 p;
    PUSH %r3;
    CALL_REG @I 2 false;
    MOV %r2 $RET;
    MOV g %r2;
    MOV %r3 g;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 b;
    ADD %r3 %r2;
    MOV b %r3;
    MOV %r1 %r3;
LABEL _l3106_:
    MOV %r7 @n;
    MOV %r8 "PUBLISH_HEADER";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 u;
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 a;
    MOV %r7 "dup";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3108_;
    MOV %r4 1;
    JMP _l3107_;
LABEL _l3108_:
    MOV %r4 0;
LABEL _l3107_:
    MOV_PROP %r1 %r3 %r4;
    MOV %r3 c;
    JF %r3 _l3110_;
    MOV %r2 1;
    JMP _l3109_;
LABEL _l3110_:
    MOV %r2 0;
LABEL _l3109_:
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 b;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r1 l;
    PUSH %r1;
    CALL_REG @j 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 l;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 u;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l3111_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 h;
    PUSH %r2;
    CALL_REG @d 2 false;
    MOV %r1 $RET;
LABEL _l3111_:
    MOV %r0 null;
    MOV %r1 g;
    WNE %r0 %r1;
    JF %r0 _l3112_;
    MOV %r2 g;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3112_:
    MOV %r1 f;
    PUSH %r1;
    MOV %r1 .t;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f706(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR b;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r0 .r;
    JF %r0 _l3114_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3113_;
LABEL _l3114_:
    MOV o 4;
LABEL _l3113_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3115_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3115_:
    MOV %r1 s;
    MOV %r2 "cmd";
    MOV_PROP %r0 %r1 %r2;
    MOV a %r0;
    JIF %r0 _l3116_;
    MOV %r1 "puback";
    LG_OR a %r1;
LABEL _l3116_:
    MOV %r0 s;
    MOV %r1 "messageId";
    MOV_PROP u %r0 %r1;
    MOV %r2 s;
    MOV %r3 "dup";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3119_;
    MOV %r2 "pubrel";
    MOV %r3 a;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3119_:
    JF %r0 _l3118_;
    MOV %r1 @n;
    MOV %r2 "DUP_MASK";
    MOV_PROP c %r1 %r2;
    JMP _l3117_;
LABEL _l3118_:
    MOV c 0;
LABEL _l3117_:
    MOV l 0;
    MOV %r0 s;
    MOV %r1 "reasonCode";
    MOV_PROP f %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP h %r0 %r1;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3121_;
    MOV p 3;
    JMP _l3120_;
LABEL _l3121_:
    MOV p 2;
LABEL _l3120_:
    MOV %r0 "pubrel";
    MOV %r1 a;
    EQ %r0 %r1;
    JF %r0 _l3122_;
    MOV %r2 1;
    MOV l %r2;
    MOV %r1 %r2;
LABEL _l3122_:
    MOV %r0 "number";
    MOV %r1 u;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3124_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3123_;
LABEL _l3124_:
LABEL _l3123_:
    MOV b null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3126_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 h;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 p;
    PUSH %r3;
    CALL_REG @O 4 false;
    MOV %r2 $RET;
    MOV b %r2;
    MOV %r1 %r2;
    NEG %r1;
    JF %r1 _l3128_;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3127_;
LABEL _l3128_:
LABEL _l3127_:
    MOV %r2 b;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 p;
    ADD %r2 %r1;
    MOV p %r2;
    JMP _l3125_;
LABEL _l3126_:
LABEL _l3125_:
    MOV %r9 @n;
    MOV %r10 "ACKS";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 a;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 l;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 c;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 p;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 u;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3129_;
    NEW_ARR %r3;
    MOV %r4 f;
    SET_KEY %r3 0 %r4;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3129_:
    MOV %r0 null;
    MOV %r1 b;
    NE %r0 %r1;
    JF %r0 _l3130_;
    MOV %r2 b;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3130_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f707(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR b;
    VAR g;
    VAR _;
    VAR y;
    VAR w;
    VAR S;
    VAR E;
    VAR x;
    VAR k;
    VAR O;
    VAR T;
    VAR j;
    VAR A;
    VAR R;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 .r;
    JF %r0 _l3132_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3131_;
LABEL _l3132_:
    MOV o 4;
LABEL _l3131_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3133_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3133_:
    MOV %r1 s;
    MOV %r2 "dup";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3135_;
    MOV %r1 @n;
    MOV %r2 "DUP_MASK";
    MOV_PROP a %r1 %r2;
    JMP _l3134_;
LABEL _l3135_:
    MOV a 0;
LABEL _l3134_:
    MOV %r0 s;
    MOV %r1 "messageId";
    MOV_PROP u %r0 %r1;
    MOV %r0 s;
    MOV %r1 "subscriptions";
    MOV_PROP c %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP l %r0 %r1;
    MOV f 0;
    MOV %r0 "number";
    MOV %r1 u;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3137_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3136_;
LABEL _l3137_:
LABEL _l3136_:
    MOV %r0 2;
    MOV %r1 f;
    ADD %r1 %r0;
    MOV f %r1;
    MOV h null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3138_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 l;
    PUSH %r3;
    CALL_REG @I 2 false;
    MOV %r2 $RET;
    MOV h %r2;
    MOV %r3 h;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 f;
    ADD %r3 %r2;
    MOV f %r3;
    MOV %r1 %r3;
LABEL _l3138_:
    MOV %r1 "object";
    MOV %r2 c;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l3141_;
    MOV %r3 c;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l3141_:
    JF %r0 _l3140_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid subscriptions";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3139_;
LABEL _l3140_:
LABEL _l3139_:
    MOV p 0;
LABEL _l3142_:
    MOV %r0 p;
    MOV %r2 c;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l3143_;
LABEL _l3145_:
    MOV %r3 c;
    MOV %r4 p;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "topic";
    MOV_PROP b %r1 %r2;
    MOV %r3 c;
    MOV %r4 p;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "qos";
    MOV_PROP g %r1 %r2;
    MOV %r1 "string";
    MOV %r2 b;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3147_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid subscriptions - invalid topic";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3146_;
LABEL _l3147_:
LABEL _l3146_:
    MOV %r1 "number";
    MOV %r2 g;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3149_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid subscriptions - invalid qos";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3148_;
LABEL _l3149_:
LABEL _l3148_:
    MOV %r1 5;
    MOV %r2 o;
    EQ %r1 %r2;
    JF %r1 _l3151_;
    MOV %r5 c;
    MOV %r6 p;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "nl";
    MOV_PROP %r2 %r3 %r4;
    MOV _ %r2;
    JIF %r2 _l3152_;
    MOV %r3 1;
    NEG %r3;
    LG_OR _ %r3;
LABEL _l3152_:
    MOV %r2 "boolean";
    MOV %r3 _;
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l3154_;
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "Invalid subscriptions - invalid No Local";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 .t;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l3153_;
LABEL _l3154_:
LABEL _l3153_:
    MOV %r5 c;
    MOV %r6 p;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "rap";
    MOV_PROP %r2 %r3 %r4;
    MOV y %r2;
    JIF %r2 _l3155_;
    MOV %r3 1;
    NEG %r3;
    LG_OR y %r3;
LABEL _l3155_:
    MOV %r2 "boolean";
    MOV %r3 y;
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l3157_;
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "Invalid subscriptions - invalid Retain as Published";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 .t;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l3156_;
LABEL _l3157_:
LABEL _l3156_:
    MOV %r5 c;
    MOV %r6 p;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "rh";
    MOV_PROP %r2 %r3 %r4;
    MOV w %r2;
    JIF %r2 _l3158_;
    MOV %r3 0;
    LG_OR w %r3;
LABEL _l3158_:
    MOV %r3 "number";
    MOV %r4 w;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3161_;
    MOV %r4 w;
    MOV %r5 2;
    GT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3161_:
    JF %r2 _l3160_;
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "Invalid subscriptions - invalid Retain Handling";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 .t;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l3159_;
LABEL _l3160_:
LABEL _l3159_:
    JMP _l3150_;
LABEL _l3151_:
LABEL _l3150_:
    MOV %r4 b;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "byteLength";
    CALL_VAR %r4 %r5 1 false;
    MOV %r1 $RET;
    MOV %r3 2;
    ADD %r1 %r3;
    MOV %r2 1;
    ADD %r1 %r2;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
LABEL _l3144_:
    MOV %r1 1;
    MOV %r2 p;
    ADD %r2 %r1;
    MOV p %r2;
    JMP _l3142_;
LABEL _l3143_:
    MOV %r7 @n;
    MOV %r8 "SUBSCRIBE_HEADER";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 a;
    JF %r5 _l3163_;
    MOV %r4 1;
    JMP _l3162_;
LABEL _l3163_:
    MOV %r4 0;
LABEL _l3162_:
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 f;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 u;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 null;
    MOV %r1 h;
    NE %r0 %r1;
    JF %r0 _l3164_;
    MOV %r2 h;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3164_:
    MOV S 0;
    NEG S;
    MOV E 0;
LABEL _l3165_:
    MOV %r0 E;
    MOV %r2 c;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l3166_;
LABEL _l3168_:
    MOV %r1 c;
    MOV %r2 E;
    MOV_PROP k %r1 %r2;
    MOV %r1 k;
    MOV %r2 "topic";
    MOV_PROP O %r1 %r2;
    MOV %r1 k;
    MOV %r2 "qos";
    MOV_PROP T %r1 %r2;
    MOV %r1 k;
    MOV %r2 "nl";
    MOV_PROP j %r1 %r2;
    PLUS j;
    MOV %r1 k;
    MOV %r2 "rap";
    MOV_PROP A %r1 %r2;
    PLUS A;
    MOV %r1 k;
    MOV %r2 "rh";
    MOV_PROP R %r1 %r2;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 O;
    PUSH %r1;
    CALL_REG @v 2 false;
    MOV %r4 @n;
    MOV %r5 "SUBSCRIBE_OPTIONS_QOS";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 T;
    MOV_PROP %r1 %r2 %r3;
    MOV x %r1;
    MOV %r1 5;
    MOV %r2 o;
    EQ %r1 %r2;
    JF %r1 _l3169_;
    MOV %r4 j;
    JF %r4 _l3171_;
    MOV %r5 @n;
    MOV %r6 "SUBSCRIBE_OPTIONS_NL";
    MOV_PROP %r3 %r5 %r6;
    JMP _l3170_;
LABEL _l3171_:
    MOV %r3 0;
LABEL _l3170_:
    MOV %r4 x;
    OR %r4 %r3;
    MOV x %r4;
    MOV %r4 A;
    JF %r4 _l3173_;
    MOV %r5 @n;
    MOV %r6 "SUBSCRIBE_OPTIONS_RAP";
    MOV_PROP %r3 %r5 %r6;
    JMP _l3172_;
LABEL _l3173_:
    MOV %r3 0;
LABEL _l3172_:
    MOV %r4 x;
    OR %r4 %r3;
    MOV x %r4;
    MOV %r4 R;
    JF %r4 _l3175_;
    MOV %r7 @n;
    MOV %r8 "SUBSCRIBE_OPTIONS_RH";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 R;
    MOV_PROP %r3 %r5 %r6;
    JMP _l3174_;
LABEL _l3175_:
    MOV %r3 0;
LABEL _l3174_:
    MOV %r4 x;
    OR %r4 %r3;
    MOV x %r4;
    MOV %r2 %r4;
LABEL _l3169_:
    NEW_ARR %r3;
    MOV %r4 x;
    SET_KEY %r3 0 %r4;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV S %r1;
LABEL _l3167_:
    MOV %r1 E;
    ADD %r1 1;
    MOV E %r1;
    JMP _l3165_;
LABEL _l3166_:
    MOV %r0 S;
    MOV $RET %r0;
    RET;
}
func @@f708(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .r;
    JF %r0 _l3177_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3176_;
LABEL _l3177_:
    MOV o 4;
LABEL _l3176_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3178_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3178_:
    MOV %r0 s;
    MOV %r1 "messageId";
    MOV_PROP a %r0 %r1;
    MOV %r0 s;
    MOV %r1 "granted";
    MOV_PROP u %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP c %r0 %r1;
    MOV l 0;
    MOV %r0 "number";
    MOV %r1 a;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3180_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3179_;
LABEL _l3180_:
LABEL _l3179_:
    MOV %r0 2;
    MOV %r1 l;
    ADD %r1 %r0;
    MOV l %r1;
    MOV %r1 "object";
    MOV %r2 u;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l3183_;
    MOV %r3 u;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l3183_:
    JF %r0 _l3182_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid qos vector";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3181_;
LABEL _l3182_:
LABEL _l3181_:
    MOV f 0;
LABEL _l3184_:
    MOV %r0 f;
    MOV %r2 u;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l3185_;
LABEL _l3187_:
    MOV %r1 "number";
    MOV %r3 u;
    MOV %r4 f;
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3189_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid qos vector";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3188_;
LABEL _l3189_:
LABEL _l3188_:
    MOV %r1 1;
    MOV %r2 l;
    ADD %r2 %r1;
    MOV l %r2;
LABEL _l3186_:
    MOV %r1 1;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
    JMP _l3184_;
LABEL _l3185_:
    MOV h null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3191_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 c;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 l;
    PUSH %r3;
    CALL_REG @O 4 false;
    MOV %r2 $RET;
    MOV h %r2;
    MOV %r1 %r2;
    NEG %r1;
    JF %r1 _l3193_;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3192_;
LABEL _l3193_:
LABEL _l3192_:
    MOV %r2 h;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 l;
    ADD %r2 %r1;
    MOV l %r2;
    JMP _l3190_;
LABEL _l3191_:
LABEL _l3190_:
    MOV %r1 @n;
    MOV %r2 "SUBACK_HEADER";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 l;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 a;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 null;
    MOV %r1 h;
    NE %r0 %r1;
    JF %r0 _l3194_;
    MOV %r2 h;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3194_:
    MOV %r2 u;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .t;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f709(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR b;
    VAR g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 .r;
    JF %r0 _l3196_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3195_;
LABEL _l3196_:
    MOV o 4;
LABEL _l3195_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3197_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3197_:
    MOV %r0 s;
    MOV %r1 "messageId";
    MOV_PROP a %r0 %r1;
    MOV %r1 s;
    MOV %r2 "dup";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3199_;
    MOV %r1 @n;
    MOV %r2 "DUP_MASK";
    MOV_PROP u %r1 %r2;
    JMP _l3198_;
LABEL _l3199_:
    MOV u 0;
LABEL _l3198_:
    MOV %r0 s;
    MOV %r1 "unsubscriptions";
    MOV_PROP c %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP l %r0 %r1;
    MOV f 0;
    MOV %r0 "number";
    MOV %r1 a;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3201_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3200_;
LABEL _l3201_:
LABEL _l3200_:
    MOV %r0 2;
    MOV %r1 f;
    ADD %r1 %r0;
    MOV f %r1;
    MOV %r1 "object";
    MOV %r2 c;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l3204_;
    MOV %r3 c;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l3204_:
    JF %r0 _l3203_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid unsubscriptions";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3202_;
LABEL _l3203_:
LABEL _l3202_:
    MOV h 0;
LABEL _l3205_:
    MOV %r0 h;
    MOV %r2 c;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l3206_;
LABEL _l3208_:
    MOV %r1 "string";
    MOV %r3 c;
    MOV %r4 h;
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3210_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid unsubscriptions";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3209_;
LABEL _l3210_:
LABEL _l3209_:
    MOV %r4 c;
    MOV %r5 h;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "byteLength";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 2;
    ADD %r1 %r2;
    MOV %r2 f;
    ADD %r2 %r1;
    MOV f %r2;
LABEL _l3207_:
    MOV %r1 1;
    MOV %r2 h;
    ADD %r2 %r1;
    MOV h %r2;
    JMP _l3205_;
LABEL _l3206_:
    MOV p null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3211_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 l;
    PUSH %r3;
    CALL_REG @I 2 false;
    MOV %r2 $RET;
    MOV p %r2;
    MOV %r3 p;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 f;
    ADD %r3 %r2;
    MOV f %r3;
    MOV %r1 %r3;
LABEL _l3211_:
    MOV %r7 @n;
    MOV %r8 "UNSUBSCRIBE_HEADER";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 u;
    JF %r5 _l3213_;
    MOV %r4 1;
    JMP _l3212_;
LABEL _l3213_:
    MOV %r4 0;
LABEL _l3212_:
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 f;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 a;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 null;
    MOV %r1 p;
    NE %r0 %r1;
    JF %r0 _l3214_;
    MOV %r2 p;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3214_:
    MOV b 0;
    NEG b;
    MOV g 0;
LABEL _l3215_:
    MOV %r0 g;
    MOV %r2 c;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l3216_;
LABEL _l3218_:
    MOV %r2 .t;
    PUSH %r2;
    MOV %r3 c;
    MOV %r4 g;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @v 2 false;
    MOV %r1 $RET;
    MOV b %r1;
LABEL _l3217_:
    MOV %r1 g;
    ADD %r1 1;
    MOV g %r1;
    JMP _l3215_;
LABEL _l3216_:
    MOV %r0 b;
    MOV $RET %r0;
    RET;
}
func @@f710(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    VAR h;
    VAR p;
    VAR b;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r0 .r;
    JF %r0 _l3220_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3219_;
LABEL _l3220_:
    MOV o 4;
LABEL _l3219_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3221_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3221_:
    MOV %r0 s;
    MOV %r1 "messageId";
    MOV_PROP a %r0 %r1;
    MOV %r1 s;
    MOV %r2 "dup";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3223_;
    MOV %r1 @n;
    MOV %r2 "DUP_MASK";
    MOV_PROP u %r1 %r2;
    JMP _l3222_;
LABEL _l3223_:
    MOV u 0;
LABEL _l3222_:
    MOV %r0 s;
    MOV %r1 "granted";
    MOV_PROP c %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP l %r0 %r1;
    MOV %r0 s;
    MOV %r1 "cmd";
    MOV_PROP f %r0 %r1;
    MOV h 2;
    MOV %r0 "number";
    MOV %r1 a;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3225_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid messageId";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3224_;
LABEL _l3225_:
LABEL _l3224_:
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3227_;
    MOV %r2 "object";
    MOV %r3 c;
    TYPE_OF %r3;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3230_;
    MOV %r4 c;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l3230_:
    JF %r1 _l3229_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Invalid qos vector";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3228_;
LABEL _l3229_:
LABEL _l3228_:
    MOV p 0;
LABEL _l3231_:
    MOV %r1 p;
    MOV %r3 c;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l3232_;
LABEL _l3234_:
    MOV %r2 "number";
    MOV %r4 c;
    MOV %r5 p;
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l3236_;
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "Invalid qos vector";
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 .t;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l3235_;
LABEL _l3236_:
LABEL _l3235_:
    MOV %r2 1;
    MOV %r3 h;
    ADD %r3 %r2;
    MOV h %r3;
LABEL _l3233_:
    MOV %r2 1;
    MOV %r3 p;
    ADD %r3 %r2;
    MOV p %r3;
    JMP _l3231_;
LABEL _l3232_:
    JMP _l3226_;
LABEL _l3227_:
LABEL _l3226_:
    MOV b null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3238_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 l;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 h;
    PUSH %r3;
    CALL_REG @O 4 false;
    MOV %r2 $RET;
    MOV b %r2;
    MOV %r1 %r2;
    NEG %r1;
    JF %r1 _l3240_;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3239_;
LABEL _l3240_:
LABEL _l3239_:
    MOV %r2 b;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 h;
    ADD %r2 %r1;
    MOV h %r2;
    JMP _l3237_;
LABEL _l3238_:
LABEL _l3237_:
    MOV %r9 @n;
    MOV %r10 "ACKS";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 f;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 u;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 0;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 h;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 a;
    PUSH %r0;
    CALL_REG @d 2 false;
    MOV %r0 null;
    MOV %r1 b;
    NE %r0 %r1;
    JF %r0 _l3241_;
    MOV %r2 b;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3241_:
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3242_;
    MOV %r3 c;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3242_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f711(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r4 @n;
    MOV %r5 "EMPTY";
    MOV_PROP %r2 %r4 %r5;
    MOV %r5 .e;
    MOV %r4 "cmd";
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .t;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f712(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .r;
    JF %r0 _l3244_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3243_;
LABEL _l3244_:
    MOV o 4;
LABEL _l3243_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3245_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3245_:
    MOV %r0 s;
    MOV %r1 "reasonCode";
    MOV_PROP a %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP u %r0 %r1;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3247_;
    MOV c 1;
    JMP _l3246_;
LABEL _l3247_:
    MOV c 0;
LABEL _l3246_:
    MOV l null;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3249_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 u;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 c;
    PUSH %r3;
    CALL_REG @O 4 false;
    MOV %r2 $RET;
    MOV l %r2;
    MOV %r1 %r2;
    NEG %r1;
    JF %r1 _l3251_;
    MOV %r2 1;
    NEG %r2;
    MOV $RET %r2;
    RET;
    JMP _l3250_;
LABEL _l3251_:
LABEL _l3250_:
    MOV %r2 l;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 c;
    ADD %r2 %r1;
    MOV c %r2;
    JMP _l3248_;
LABEL _l3249_:
LABEL _l3248_:
    NEW_ARR %r1;
    MOV %r6 @n;
    MOV %r7 "codes";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "disconnect";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 4;
    SHL %r2 %r3;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 c;
    PUSH %r0;
    CALL_REG @m 2 false;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3252_;
    NEW_ARR %r3;
    MOV %r4 a;
    SET_KEY %r3 0 %r4;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3252_:
    MOV %r0 null;
    MOV %r1 l;
    NE %r0 %r1;
    JF %r0 _l3253_;
    MOV %r2 l;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3253_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f713(.e, .t, .r) {
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .r;
    JF %r0 _l3255_;
    MOV %r1 .r;
    MOV %r2 "protocolVersion";
    MOV_PROP o %r1 %r2;
    JMP _l3254_;
LABEL _l3255_:
    MOV o 4;
LABEL _l3254_:
    MOV %r0 .e;
    MOV s %r0;
    JIF %r0 _l3256_;
    NEW_OBJ %r1;
    LG_OR s %r1;
LABEL _l3256_:
    MOV %r0 s;
    MOV %r1 "reasonCode";
    MOV_PROP a %r0 %r1;
    MOV %r0 s;
    MOV %r1 "properties";
    MOV_PROP u %r0 %r1;
    MOV %r0 5;
    MOV %r1 o;
    EQ %r0 %r1;
    JF %r0 _l3258_;
    MOV c 1;
    JMP _l3257_;
LABEL _l3258_:
    MOV c 0;
LABEL _l3257_:
    MOV %r0 5;
    MOV %r1 o;
    NE %r0 %r1;
    JF %r0 _l3259_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "Invalid mqtt version for auth packet";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l3259_:
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 u;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    MOV %r0 c;
    PUSH %r0;
    CALL_REG @O 4 false;
    MOV l $RET;
    MOV %r0 l;
    NEG %r0;
    JF %r0 _l3261_;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3260_;
LABEL _l3261_:
LABEL _l3260_:
    MOV %r1 l;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 c;
    ADD %r1 %r0;
    MOV c %r1;
    NEW_ARR %r1;
    MOV %r6 @n;
    MOV %r7 "codes";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "auth";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 4;
    SHL %r2 %r3;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 c;
    PUSH %r0;
    CALL_REG @m 2 false;
    NEW_ARR %r1;
    MOV %r2 a;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 .t;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 null;
    MOV %r1 l;
    NE %r0 %r1;
    JF %r0 _l3262_;
    MOV %r2 l;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3262_:
    MOV %r0 0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f714() {
    REG %r0;
    MOV %r0 @e;
    PUSH %r0;
    NEW_OBJ %r0;
    PUSH %r0;
    MOV %r0 0;
    PUSH %r0;
    CALL_REG @T 3 false;
}
func @@f715(.r) {
    VAR o;
    CLS @s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    MOV %r2 @n;
    MOV %r3 "propertiesTypes";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .r;
    MOV_PROP o %r0 %r1;
    MOV %r0 @t;
    MOV %r1 .r;
    MOV_PROP @s %r0 %r1;
    MOV a 0;
    BLOCK 1;
    MOV %r0 o;
    MOV %r1 "byte";
    JE %r0 %r1 _l3264_;
    JMP _l3265_;
LABEL _l3264_:
    MOV %r2 "boolean";
    MOV %r3 @s;
    TYPE_OF %r3;
    WNE %r2 %r3;
    JF %r2 _l3267_;
    MOV %r4 "error";
    PUSH %r4;
    MOV %r5 "Invalid ";
    MOV %r6 .r;
    ADD %r5 %r6;
    PUSH %r5;
    CALL_CTX 'Error' 1 true;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "emit";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV $RET %r3;
    RET;
    JMP _l3266_;
LABEL _l3267_:
LABEL _l3266_:
    MOV %r2 2;
    MOV %r3 a;
    ADD %r3 %r2;
    MOV a %r3;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3268_;
LABEL _l3265_:
    MOV %r2 "int8";
    JE %r0 %r2 _l3268_;
    JMP _l3269_;
LABEL _l3268_:
    MOV %r3 "number";
    MOV %r4 @s;
    TYPE_OF %r4;
    WNE %r3 %r4;
    JF %r3 _l3271_;
    MOV %r5 "error";
    PUSH %r5;
    MOV %r6 "Invalid ";
    MOV %r7 .r;
    ADD %r6 %r7;
    PUSH %r6;
    CALL_CTX 'Error' 1 true;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 1;
    NEG %r4;
    MOV $RET %r4;
    RET;
    JMP _l3270_;
LABEL _l3271_:
LABEL _l3270_:
    MOV %r3 2;
    MOV %r4 a;
    ADD %r4 %r3;
    MOV a %r4;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3272_;
LABEL _l3269_:
    MOV %r3 "binary";
    JE %r0 %r3 _l3272_;
    JMP _l3273_;
LABEL _l3272_:
    MOV %r5 @s;
    MOV %r4 %r5;
    JF %r5 _l3276_;
    MOV %r6 null;
    MOV %r7 @s;
    EQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l3276_:
    JF %r4 _l3275_;
    MOV %r6 "error";
    PUSH %r6;
    MOV %r7 "Invalid ";
    MOV %r8 .r;
    ADD %r7 %r8;
    PUSH %r7;
    CALL_CTX 'Error' 1 true;
    MOV %r6 $RET;
    PUSH %r6;
    MOV %r6 @e;
    MOV %r7 "emit";
    CALL_VAR %r6 %r7 2 false;
    MOV %r5 1;
    NEG %r5;
    MOV $RET %r5;
    RET;
    JMP _l3274_;
LABEL _l3275_:
LABEL _l3274_:
    MOV %r4 1;
    MOV %r7 @s;
    PUSH %r7;
    MOV %r7 @i;
    MOV %r8 "byteLength";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    ADD %r4 %r6;
    MOV %r5 2;
    ADD %r4 %r5;
    MOV %r5 a;
    ADD %r5 %r4;
    MOV a %r5;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3277_;
LABEL _l3273_:
    MOV %r4 "int16";
    JE %r0 %r4 _l3277_;
    JMP _l3278_;
LABEL _l3277_:
    MOV %r5 "number";
    MOV %r6 @s;
    TYPE_OF %r6;
    WNE %r5 %r6;
    JF %r5 _l3280_;
    MOV %r7 "error";
    PUSH %r7;
    MOV %r8 "Invalid ";
    MOV %r9 .r;
    ADD %r8 %r9;
    PUSH %r8;
    CALL_CTX 'Error' 1 true;
    MOV %r7 $RET;
    PUSH %r7;
    MOV %r7 @e;
    MOV %r8 "emit";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 1;
    NEG %r6;
    MOV $RET %r6;
    RET;
    JMP _l3279_;
LABEL _l3280_:
LABEL _l3279_:
    MOV %r5 3;
    MOV %r6 a;
    ADD %r6 %r5;
    MOV a %r6;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3281_;
LABEL _l3278_:
    MOV %r5 "int32";
    JE %r0 %r5 _l3281_;
    JMP _l3282_;
LABEL _l3281_:
    MOV %r6 "number";
    MOV %r7 @s;
    TYPE_OF %r7;
    WNE %r6 %r7;
    JF %r6 _l3284_;
    MOV %r8 "error";
    PUSH %r8;
    MOV %r9 "Invalid ";
    MOV %r10 .r;
    ADD %r9 %r10;
    PUSH %r9;
    CALL_CTX 'Error' 1 true;
    MOV %r8 $RET;
    PUSH %r8;
    MOV %r8 @e;
    MOV %r9 "emit";
    CALL_VAR %r8 %r9 2 false;
    MOV %r7 1;
    NEG %r7;
    MOV $RET %r7;
    RET;
    JMP _l3283_;
LABEL _l3284_:
LABEL _l3283_:
    MOV %r6 5;
    MOV %r7 a;
    ADD %r7 %r6;
    MOV a %r7;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3285_;
LABEL _l3282_:
    MOV %r6 "var";
    JE %r0 %r6 _l3285_;
    JMP _l3286_;
LABEL _l3285_:
    MOV %r7 "number";
    MOV %r8 @s;
    TYPE_OF %r8;
    WNE %r7 %r8;
    JF %r7 _l3288_;
    MOV %r9 "error";
    PUSH %r9;
    MOV %r10 "Invalid ";
    MOV %r11 .r;
    ADD %r10 %r11;
    PUSH %r10;
    CALL_CTX 'Error' 1 true;
    MOV %r9 $RET;
    PUSH %r9;
    MOV %r9 @e;
    MOV %r10 "emit";
    CALL_VAR %r9 %r10 2 false;
    MOV %r8 1;
    NEG %r8;
    MOV $RET %r8;
    RET;
    JMP _l3287_;
LABEL _l3288_:
LABEL _l3287_:
    MOV %r7 1;
    MOV %r11 @s;
    PUSH %r11;
    CALL_REG @h 1 false;
    MOV %r9 $RET;
    MOV %r10 "length";
    MOV_PROP %r8 %r9 %r10;
    ADD %r7 %r8;
    MOV %r8 a;
    ADD %r8 %r7;
    MOV a %r8;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3289_;
LABEL _l3286_:
    MOV %r7 "string";
    JE %r0 %r7 _l3289_;
    JMP _l3290_;
LABEL _l3289_:
    MOV %r8 "string";
    MOV %r9 @s;
    TYPE_OF %r9;
    WNE %r8 %r9;
    JF %r8 _l3292_;
    MOV %r10 "error";
    PUSH %r10;
    MOV %r11 "Invalid ";
    MOV %r12 .r;
    ADD %r11 %r12;
    PUSH %r11;
    CALL_CTX 'Error' 1 true;
    MOV %r10 $RET;
    PUSH %r10;
    MOV %r10 @e;
    MOV %r11 "emit";
    CALL_VAR %r10 %r11 2 false;
    MOV %r9 1;
    NEG %r9;
    MOV $RET %r9;
    RET;
    JMP _l3291_;
LABEL _l3292_:
LABEL _l3291_:
    MOV %r8 3;
    MOV %r11 @s;
    MOV %r12 "toString";
    CALL_VAR %r11 %r12 0 false;
    MOV %r10 $RET;
    PUSH %r10;
    MOV %r10 @i;
    MOV %r11 "byteLength";
    CALL_VAR %r10 %r11 1 false;
    MOV %r9 $RET;
    ADD %r8 %r9;
    MOV %r9 a;
    ADD %r9 %r8;
    MOV a %r9;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3293_;
LABEL _l3290_:
    MOV %r8 "pair";
    JE %r0 %r8 _l3293_;
    JMP _l3294_;
LABEL _l3293_:
    MOV %r9 "object";
    MOV %r10 @s;
    TYPE_OF %r10;
    WNE %r9 %r10;
    JF %r9 _l3296_;
    MOV %r11 "error";
    PUSH %r11;
    MOV %r12 "Invalid ";
    MOV %r13 .r;
    ADD %r12 %r13;
    PUSH %r12;
    CALL_CTX 'Error' 1 true;
    MOV %r11 $RET;
    PUSH %r11;
    MOV %r11 @e;
    MOV %r12 "emit";
    CALL_VAR %r11 %r12 2 false;
    MOV %r10 1;
    NEG %r10;
    MOV $RET %r10;
    RET;
    JMP _l3295_;
LABEL _l3296_:
LABEL _l3295_:
    FUNC %r10 @@f1046;
    PUSH %r10;
    MOV %r10 0;
    PUSH %r10;
    MOV %r12 @s;
    PUSH %r12;
    MOV_CTX %r12 "Object";
    MOV %r13 "getOwnPropertyNames";
    CALL_VAR %r12 %r13 1 false;
    MOV %r10 $RET;
    MOV %r11 "reduce";
    CALL_VAR %r10 %r11 2 false;
    MOV %r9 $RET;
    MOV %r10 a;
    ADD %r10 %r9;
    MOV a %r10;
    CLR_BLOCK 1;
    JMP _l3263_;
    JMP _l3297_;
LABEL _l3294_:
LABEL _l3297_:
    MOV %r10 "error";
    PUSH %r10;
    MOV %r11 "Invalid property ";
    MOV %r12 .r;
    ADD %r11 %r12;
    PUSH %r11;
    CALL_CTX 'Error' 1 true;
    MOV %r10 $RET;
    PUSH %r10;
    MOV %r10 @e;
    MOV %r11 "emit";
    CALL_VAR %r10 %r11 2 false;
    MOV %r9 1;
    NEG %r9;
    MOV $RET %r9;
    RET;
    JMP _l3299_;
LABEL _l3298_:
LABEL _l3299_:
LABEL _l3263_:
    END_BLOCK 1;
    MOV %r0 a;
    MOV $RET %r0;
    RET;
}
func @@f716() {
    REG %r0;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    CALL_REG @T 3 false;
}
func @@f717(.t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    CLS @t;
    MOV @t .t;
    MOV %r0 @s;
    MOV %r1 @t;
    MOV_PROP r %r0 %r1;
    MOV %r1 r;
    PUSH %r1;
    MOV_CTX %r1 "Array";
    MOV %r2 "isArray";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l3301_;
    FUNC %r1 @@f1047;
    PUSH %r1;
    MOV %r1 r;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
    JMP _l3300_;
LABEL _l3301_:
    NEW_ARR %r2;
    MOV %r6 @n;
    MOV %r7 "properties";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 @o;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "write";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r2 @t;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r2 r;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @w 3 false;
LABEL _l3300_:
}
func @@f718() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @t;
    MOV %r3 "called";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3303_;
    MOV %r2 @t;
    MOV %r3 "value";
    MOV_PROP %r0 %r2 %r3;
    JMP _l3302_;
LABEL _l3303_:
    MOV %r2 0;
    NEG %r2;
    MOV %r3 @t;
    MOV %r4 "called";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r3;
    PUSH %r3;
    MOV_ARGS %r3;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "apply";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r3 @t;
    MOV %r4 "value";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 %r2;
LABEL _l3302_:
    MOV $RET %r0;
    RET;
}
func @@f719() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 @t;
    MOV %r2 "called";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3305_;
    MOV %r3 @t;
    MOV %r4 "onceError";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l3304_;
LABEL _l3305_:
LABEL _l3304_:
    MOV %r1 0;
    NEG %r1;
    MOV %r2 @t;
    MOV %r3 "called";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r2;
    PUSH %r2;
    MOV_ARGS %r2;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r2 @t;
    MOV %r3 "value";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f720() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f721() {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @o 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f722(.t, .r, .n, .i) {
    CLS @o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    CLS @i;
    MOV @i .i;
    MOV %r0 "function";
    MOV %r1 @t;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3307_;
    MOV %r2 "\"callback\" argument must be a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l3306_;
LABEL _l3307_:
LABEL _l3306_:
    MOV_ARGS %r0;
    MOV %r1 "length";
    MOV_PROP a %r0 %r1;
    MOV %r0 a;
    MOV %r1 0;
    JE %r0 %r1 _l3309_;
    JMP _l3310_;
LABEL _l3310_:
    MOV %r2 1;
    JE %r0 %r2 _l3309_;
    JMP _l3311_;
LABEL _l3309_:
    MOV %r4 @t;
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "nextTick";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l3312_;
LABEL _l3311_:
    MOV %r3 2;
    JE %r0 %r3 _l3312_;
    JMP _l3313_;
LABEL _l3312_:
    FUNC %r5 @@f1048;
    PUSH %r5;
    MOV %r5 @e;
    MOV %r6 "nextTick";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    JMP _l3314_;
LABEL _l3313_:
    MOV %r4 3;
    JE %r0 %r4 _l3314_;
    JMP _l3315_;
LABEL _l3314_:
    FUNC %r6 @@f1049;
    PUSH %r6;
    MOV %r6 @e;
    MOV %r7 "nextTick";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
    JMP _l3316_;
LABEL _l3315_:
    MOV %r5 4;
    JE %r0 %r5 _l3316_;
    JMP _l3317_;
LABEL _l3316_:
    FUNC %r7 @@f1050;
    PUSH %r7;
    MOV %r7 @e;
    MOV %r8 "nextTick";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV $RET %r6;
    RET;
    JMP _l3318_;
LABEL _l3317_:
LABEL _l3318_:
    MOV %r7 a;
    MOV %r8 1;
    SUB %r7 %r8;
    PUSH %r7;
    CALL_CTX 'Array' 1 true;
    MOV %r6 $RET;
    MOV @o %r6;
    MOV %r6 0;
    MOV s %r6;
LABEL _l3320_:
    MOV %r6 s;
    MOV %r8 @o;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    LT %r6 %r7;
    JF %r6 _l3321_;
LABEL _l3323_:
    MOV_ARGS %r8;
    MOV %r9 s;
    MOV_PROP %r7 %r8 %r9;
    MOV %r8 @o;
    MOV %r10 s;
    MOV %r9 %r10;
    ADD %r10 1;
    MOV s %r10;
    SET_KEY %r8 %r9 %r7;
    JMP _l3320_;
LABEL _l3321_:
    FUNC %r7 @@f1051;
    PUSH %r7;
    MOV %r7 @e;
    MOV %r8 "nextTick";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV $RET %r6;
    RET;
    JMP _l3324_;
LABEL _l3319_:
LABEL _l3324_:
LABEL _l3308_:
}
func @@f723(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @i;
    MOV_CTX %r1 "clearTimeout";
    EQ %r0 %r1;
    JF %r0 _l3326_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'clearTimeout' 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3325_;
LABEL _l3326_:
LABEL _l3325_:
    MOV %r2 @i;
    MOV %r3 @a;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3330_;
    MOV %r3 @i;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l3330_:
    MOV %r0 %r1;
    JF %r1 _l3329_;
    MOV_CTX %r2 "clearTimeout";
    LG_AND %r0 %r2;
LABEL _l3329_:
    JF %r0 _l3328_;
    MOV_CTX %r2 "clearTimeout";
    MOV @i %r2;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'clearTimeout' 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3327_;
LABEL _l3328_:
LABEL _l3327_:
    TRY _l3331_ _l3332_;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @i 1 false;
    TRY_END;
LABEL _l3331_:
    BLOCK 2;
    VAR t;
    GET_ERR t;
    TRY _l3333_ _l3334_;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    TRY_END;
LABEL _l3333_:
    BLOCK 5;
    VAR t;
    GET_ERR t;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    END_BLOCK 5;
LABEL _l3334_:
    END_BLOCK 2;
LABEL _l3332_:
}
func @@f724(.n) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    CLS @v;
    CLS @w;
    CLS @S;
    CLS @E;
    CLS @x;
    CLS @k;
    CLS @I;
    CLS @O;
    CLS @T;
    CLS @j;
    CLS @A;
    CLS @R;
    CLS @M;
    CLS @P;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @k @@f1052;
    FUNC @I @@f1053;
    FUNC @O @@f1054;
    FUNC @T @@f1055;
    FUNC @j @@f1056;
    FUNC @A @@f1057;
    FUNC @R @@f1058;
    FUNC @M @@f1059;
    FUNC @P @@f1060;
    MOV %r2 "object";
    MOV %r3 @r;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3337_;
    MOV %r3 @r;
    LG_AND %r1 %r3;
LABEL _l3337_:
    MOV %r0 %r1;
    JF %r1 _l3336_;
    MOV %r3 @r;
    MOV %r4 "nodeType";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3336_:
    MOV i %r0;
    JF %r0 _l3335_;
    MOV %r1 @r;
    LG_AND i %r1;
LABEL _l3335_:
    MOV %r2 "object";
    MOV %r3 @t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3340_;
    MOV %r3 @t;
    LG_AND %r1 %r3;
LABEL _l3340_:
    MOV %r0 %r1;
    JF %r1 _l3339_;
    MOV %r3 @t;
    MOV %r4 "nodeType";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3339_:
    MOV o %r0;
    JF %r0 _l3338_;
    MOV %r1 @t;
    LG_AND o %r1;
LABEL _l3338_:
    MOV %r0 "object";
    MOV %r1 @e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV s %r0;
    JF %r0 _l3341_;
    MOV %r1 @e;
    LG_AND s %r1;
LABEL _l3341_:
    MOV %r4 s;
    MOV %r5 "global";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 s;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3344_;
    MOV %r5 s;
    MOV %r6 "window";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 s;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3344_:
    MOV %r0 %r1;
    JF %r1 _l3343_;
    MOV %r4 s;
    MOV %r5 "self";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 s;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3343_:
    JIF %r0 _l3342_;
    MOV %r2 s;
    MOV .n %r2;
    MOV %r1 %r2;
LABEL _l3342_:
    MOV @c 2147483647;
    MOV @l 36;
    MOV @f 1;
    MOV @h 26;
    MOV @p 38;
    MOV @d 700;
    MOV @b 72;
    MOV @g 128;
    MOV @_ "-";
    NEW_REG @y "^xn--" "";
    NEW_REG @m "[^\\x20-\\x7E]" "";
    NEW_REG @v "[\\x2E\\u3002\\uFF0E\\uFF61]" "g";
    NEW_OBJ @w;
    MOV %r0 "Overflow: input needs wider integers to process";
    SET_KEY @w 'overflow' %r0;
    MOV %r1 "not-basic";
    MOV %r0 "Illegal input >= 0x80 (not a basic code point)";
    SET_KEY @w %r1 %r0;
    MOV %r1 "invalid-input";
    MOV %r0 "Invalid input";
    SET_KEY @w %r1 %r0;
    MOV @S @l;
    MOV %r0 @f;
    SUB @S %r0;
    MOV_CTX %r0 "Math";
    MOV %r1 "floor";
    MOV_PROP @E %r0 %r1;
    MOV_CTX %r0 "String";
    MOV %r1 "fromCharCode";
    MOV_PROP @x %r0 %r1;
    NEW_OBJ %r1;
    MOV %r2 "1.4.1";
    SET_KEY %r1 'version' %r2;
    NEW_OBJ %r2;
    MOV %r3 @T;
    SET_KEY %r2 'decode' %r3;
    MOV %r3 @j;
    SET_KEY %r2 'encode' %r3;
    SET_KEY %r1 'ucs2' %r2;
    MOV %r2 @M;
    SET_KEY %r1 'decode' %r2;
    MOV %r2 @P;
    SET_KEY %r1 'encode' %r2;
    FUNC %r2 @@f1061;
    SET_KEY %r1 'toASCII' %r2;
    FUNC %r2 @@f1062;
    SET_KEY %r1 'toUnicode' %r2;
    MOV a %r1;
    MOV %r1 i;
    MOV %r0 %r1;
    JF %r1 _l3347_;
    MOV %r2 o;
    LG_AND %r0 %r2;
LABEL _l3347_:
    JF %r0 _l3346_;
    MOV %r3 @t;
    MOV %r4 "exports";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 i;
    WEQ %r1 %r2;
    JF %r1 _l3349_;
    MOV %r2 a;
    MOV %r3 o;
    MOV %r4 "exports";
    SET_KEY %r3 %r4 %r2;
    JMP _l3348_;
LABEL _l3349_:
    MOV %r2 a;
    FORIN u %r2 _l3350_ _l3351_;
LABEL _l3350_:
    MOV %r4 u;
    PUSH %r4;
    MOV %r4 a;
    MOV %r5 "hasOwnProperty";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    JF %r3 _l3352_;
    MOV %r6 a;
    MOV %r7 u;
    MOV_PROP %r5 %r6 %r7;
    MOV %r6 i;
    MOV %r7 u;
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l3352_:
    FORIN_END;
LABEL _l3351_:
LABEL _l3348_:
    JMP _l3345_;
LABEL _l3346_:
    MOV %r1 a;
    MOV %r2 .n;
    MOV %r3 "punycode";
    SET_KEY %r2 %r3 %r1;
LABEL _l3345_:
}
func @@f725(.s) {
    CLS @a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 .s;
    PUSH %r2;
    CALL_REG @n 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV @a $RET;
    MOV %r0 @r;
    ADD @a %r0;
    MOV %r3 @e;
    MOV %r4 .s;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @i 1 false;
    MOV %r1 $RET;
    JF %r1 _l3354_;
    MOV %r2 @t;
    PUSH %r2;
    MOV %r5 @e;
    MOV %r6 .s;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    FUNC %r4 @@f1063;
    PUSH %r4;
    CALL_REG @o 2 false;
    MOV %r2 $RET;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l3353_;
LABEL _l3354_:
    MOV %r0 @a;
    MOV %r5 @e;
    MOV %r6 .s;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @n 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
LABEL _l3353_:
    MOV $RET %r0;
    RET;
}
func @@f726(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "listeners";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f727() {
}
func @@f728() {
}
func @@f729(.t, .r) {
    VAR n;
    VAR i;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l3355_;
    NEW_OBJ %r2;
    LG_OR %r0 %r2;
LABEL _l3355_:
    MOV .t %r0;
    MOV n .r;
    MOV %r2 @o;
    MOV %r1 %r2;
    JIF %r2 _l3356_;
    MOV %r4 "./_stream_duplex";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l3356_:
    MOV @o %r1;
    MOV %r0 %r1;
    INST_OF n %r0;
    MOV %r1 .t;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "objectMode";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 n;
    JF %r0 _l3357_;
    MOV_THIS %r4;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l3358_;
    MOV %r5 .t;
    MOV %r6 "readableObjectMode";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l3358_:
    MOV_THIS %r3;
    MOV %r4 "objectMode";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3357_:
    MOV %r0 .t;
    MOV %r1 "highWaterMark";
    MOV_PROP i %r0 %r1;
    MOV %r0 .t;
    MOV %r1 "readableHighWaterMark";
    MOV_PROP s %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3360_;
    MOV a 16;
    JMP _l3359_;
LABEL _l3360_:
    MOV a 16384;
LABEL _l3359_:
    MOV %r2 i;
    MOV %r1 %r2;
    JIF %r2 _l3363_;
    MOV %r3 0;
    MOV %r4 i;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3363_:
    JF %r1 _l3362_;
    MOV %r0 i;
    JMP _l3361_;
LABEL _l3362_:
    MOV %r3 n;
    MOV %r2 %r3;
    JF %r3 _l3365_;
    MOV %r5 s;
    MOV %r4 %r5;
    JIF %r5 _l3366_;
    MOV %r6 0;
    MOV %r7 s;
    EQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l3366_:
    LG_AND %r2 %r4;
LABEL _l3365_:
    JF %r2 _l3364_;
    MOV %r0 s;
    JMP _l3361_;
LABEL _l3364_:
    MOV %r0 a;
LABEL _l3361_:
    MOV_THIS %r1;
    MOV %r2 "highWaterMark";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r2;
    MOV %r3 "highWaterMark";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "floor";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "highWaterMark";
    SET_KEY %r1 %r2 %r0;
    CALL_REG @b 0 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "buffer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "pipes";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "pipesCount";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "flowing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "endEmitted";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "reading";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "emittedReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "readableListening";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "resumeScheduled";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 .t;
    MOV %r3 "defaultEncoding";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3367_;
    MOV %r2 "utf8";
    LG_OR %r0 %r2;
LABEL _l3367_:
    MOV_THIS %r1;
    MOV %r2 "defaultEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "awaitDrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "readingMore";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "decoder";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "encoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .t;
    MOV %r2 "encoding";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3368_;
    MOV %r2 @d;
    JIF %r2 _l3369_;
    MOV %r7 "string_decoder/";
    PUSH %r7;
    CALL_REG @e 1 false;
    MOV %r5 $RET;
    MOV %r6 "StringDecoder";
    MOV_PROP %r4 %r5 %r6;
    MOV @d %r4;
    MOV %r3 %r4;
LABEL _l3369_:
    MOV %r4 .t;
    MOV %r5 "encoding";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @d 1 true;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "decoder";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .t;
    MOV %r4 "encoding";
    MOV_PROP %r2 %r3 %r4;
    MOV_THIS %r3;
    MOV %r4 "encoding";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3368_:
}
func @@f730(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 @o;
    MOV %r1 %r2;
    JIF %r2 _l3372_;
    MOV %r4 "./_stream_duplex";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l3372_:
    MOV @o %r1;
    MOV_THIS %r0;
    MOV %r1 @m;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l3371_;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @m 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3370_;
LABEL _l3371_:
LABEL _l3370_:
    MOV %r1 .t;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @y 2 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "readable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    JF %r0 _l3373_;
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "read";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3374_;
    MOV %r5 .t;
    MOV %r6 "read";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_read";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3374_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3375_;
    MOV %r5 .t;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_destroy";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3375_:
LABEL _l3373_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @u;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
}
func @@f731(.e, .t, .r, .n, .i) {
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP s %r0 %r1;
    MOV %r0 null;
    MOV %r1 .t;
    EQ %r0 %r1;
    JF %r0 _l3377_;
    MOV %r1 1;
    NEG %r1;
    MOV %r2 s;
    MOV %r3 "reading";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 s;
    PUSH %r1;
    FUNC %r1 @@f1064;
    CALL_REG %r1 2 false;
    JMP _l3376_;
LABEL _l3377_:
    MOV %r1 .i;
    JIF %r1 _l3378_;
    MOV %r4 s;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    FUNC %r4 @@f1065;
    CALL_REG %r4 2 false;
    MOV %r3 $RET;
    MOV o %r3;
    MOV %r2 %r3;
LABEL _l3378_:
    MOV %r1 o;
    JF %r1 _l3380_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 o;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    JMP _l3379_;
LABEL _l3380_:
    MOV %r4 s;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l3382_;
    MOV %r5 .t;
    MOV %r4 %r5;
    JF %r5 _l3383_;
    MOV %r8 .t;
    MOV %r9 "length";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 0;
    GT %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l3383_:
    LG_OR %r2 %r4;
LABEL _l3382_:
    JF %r2 _l3381_;
    MOV %r5 "string";
    MOV %r6 .t;
    TYPE_OF %r6;
    WEQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l3386_;
    MOV %r7 s;
    MOV %r8 "objectMode";
    MOV_PROP %r6 %r7 %r8;
    LG_OR %r4 %r6;
LABEL _l3386_:
    MOV %r3 %r4;
    JIF %r4 _l3385_;
    MOV %r7 .t;
    PUSH %r7;
    MOV_CTX %r7 "Object";
    MOV %r8 "getPrototypeOf";
    CALL_VAR %r7 %r8 1 false;
    MOV %r5 $RET;
    MOV %r7 @c;
    MOV %r8 "prototype";
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l3385_:
    JIF %r3 _l3384_;
    MOV %r6 .t;
    PUSH %r6;
    FUNC %r6 @@f1066;
    CALL_REG %r6 1 false;
    MOV %r5 $RET;
    MOV .t %r5;
    MOV %r4 %r5;
LABEL _l3384_:
    MOV %r3 .n;
    JF %r3 _l3388_;
    MOV %r5 s;
    MOV %r6 "endEmitted";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l3390_;
    MOV %r5 "error";
    PUSH %r5;
    MOV %r6 "stream.unshift() after end event";
    PUSH %r6;
    CALL_CTX 'Error' 1 true;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 2 false;
    JMP _l3389_;
LABEL _l3390_:
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 s;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 0;
    NEG %r5;
    PUSH %r5;
    CALL_REG @w 4 false;
LABEL _l3389_:
    JMP _l3387_;
LABEL _l3388_:
    MOV %r5 s;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l3391_;
    MOV %r5 "error";
    PUSH %r5;
    MOV %r6 "stream.push() after EOF";
    PUSH %r6;
    CALL_CTX 'Error' 1 true;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 2 false;
    JMP _l3387_;
LABEL _l3391_:
    MOV %r5 1;
    NEG %r5;
    MOV %r6 s;
    MOV %r7 "reading";
    SET_KEY %r6 %r7 %r5;
    MOV %r7 s;
    MOV %r8 "decoder";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    JF %r6 _l3394_;
    MOV %r7 .r;
    NEG %r7;
    LG_AND %r5 %r7;
LABEL _l3394_:
    JF %r5 _l3393_;
    MOV %r7 .t;
    PUSH %r7;
    MOV %r9 s;
    MOV %r10 "decoder";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "write";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV .t %r6;
    MOV %r8 s;
    MOV %r9 "objectMode";
    MOV_PROP %r7 %r8 %r9;
    MOV %r6 %r7;
    JIF %r7 _l3397_;
    MOV %r8 0;
    MOV %r10 .t;
    MOV %r11 "length";
    MOV_PROP %r9 %r10 %r11;
    NE %r8 %r9;
    LG_OR %r6 %r8;
LABEL _l3397_:
    JF %r6 _l3396_;
    MOV %r7 .e;
    PUSH %r7;
    MOV %r7 s;
    PUSH %r7;
    MOV %r7 .t;
    PUSH %r7;
    MOV %r7 1;
    NEG %r7;
    PUSH %r7;
    CALL_REG @w 4 false;
    JMP _l3395_;
LABEL _l3396_:
    MOV %r7 .e;
    PUSH %r7;
    MOV %r7 s;
    PUSH %r7;
    CALL_REG @I 2 false;
LABEL _l3395_:
    JMP _l3392_;
LABEL _l3393_:
    MOV %r6 .e;
    PUSH %r6;
    MOV %r6 s;
    PUSH %r6;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 1;
    NEG %r6;
    PUSH %r6;
    CALL_REG @w 4 false;
LABEL _l3392_:
LABEL _l3387_:
    JMP _l3379_;
LABEL _l3381_:
    MOV %r3 .n;
    JIF %r3 _l3398_;
    MOV %r5 1;
    NEG %r5;
    MOV %r6 s;
    MOV %r7 "reading";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l3398_:
LABEL _l3379_:
LABEL _l3376_:
    MOV %r1 s;
    PUSH %r1;
    FUNC %r1 @@f1067;
    CALL_REG %r1 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f732(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 .t;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l3402_;
    MOV %r3 0;
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3402_:
    MOV %r0 %r1;
    JF %r1 _l3401_;
    MOV %r3 .t;
    MOV %r4 "sync";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3401_:
    JF %r0 _l3400_;
    MOV %r1 "data";
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 1 false;
    JMP _l3399_;
LABEL _l3400_:
    MOV %r3 .t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3404_;
    MOV %r1 1;
    JMP _l3403_;
LABEL _l3404_:
    MOV %r3 .r;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
LABEL _l3403_:
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV %r3 .t;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 .n;
    JF %r1 _l3406_;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 .t;
    MOV %r5 "buffer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "unshift";
    CALL_VAR %r2 %r3 1 false;
    JMP _l3405_;
LABEL _l3406_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 .t;
    MOV %r5 "buffer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
LABEL _l3405_:
    MOV %r2 .t;
    MOV %r3 "needReadable";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3407_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @x 1 false;
    MOV %r2 $RET;
LABEL _l3407_:
LABEL _l3399_:
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @I 2 false;
}
func @@f733() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3408_;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l3408_:
    MOV $RET %r0;
    RET;
}
func @@f734(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3409_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3409_:
}
func @@f735(.e, .t) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG .t 1 false;
}
func @@f736(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP n %r0 %r1;
    MOV %r2 n;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3411_;
    MOV %r2 0;
    NEG %r2;
    MOV r %r2;
    JMP _l3410_;
LABEL _l3411_:
    MOV %r2 "string";
    MOV %r3 .e;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3412_;
    MOV %r7 .t;
    MOV %r6 %r7;
    JIF %r7 _l3414_;
    MOV %r9 n;
    MOV %r10 "defaultEncoding";
    MOV_PROP %r8 %r9 %r10;
    LG_OR %r6 %r8;
LABEL _l3414_:
    MOV .t %r6;
    MOV %r4 %r6;
    MOV %r6 n;
    MOV %r7 "encoding";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    JF %r4 _l3413_;
    MOV %r7 .e;
    PUSH %r7;
    MOV %r7 .t;
    PUSH %r7;
    MOV %r7 @c;
    MOV %r8 "from";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    MOV .e %r6;
    MOV %r6 "";
    MOV .t %r6;
    MOV %r5 %r6;
LABEL _l3413_:
    MOV %r4 0;
    NEG %r4;
    MOV r %r4;
    MOV %r3 %r4;
LABEL _l3412_:
LABEL _l3410_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @v 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f737(.e) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    CALL_REG @v 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f738() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f739(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 @d;
    JIF %r1 _l3415_;
    MOV %r6 "string_decoder/";
    PUSH %r6;
    CALL_REG @e 1 false;
    MOV %r4 $RET;
    MOV %r5 "StringDecoder";
    MOV_PROP %r3 %r4 %r5;
    MOV @d %r3;
    MOV %r2 %r3;
LABEL _l3415_:
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @d 1 true;
    MOV %r1 $RET;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "decoder";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "encoding";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f740(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    MOV %r2 .e;
    MOV %r3 0;
    LE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3418_;
    MOV %r4 0;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l3419_;
    MOV %r6 .t;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l3419_:
    LG_OR %r1 %r3;
LABEL _l3418_:
    JF %r1 _l3417_;
    MOV %r0 0;
    JMP _l3416_;
LABEL _l3417_:
    MOV %r3 .t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3420_;
    MOV %r0 1;
    JMP _l3416_;
LABEL _l3420_:
    MOV %r3 .e;
    MOV %r4 .e;
    WNE %r3 %r4;
    JF %r3 _l3421_;
    MOV %r6 .t;
    MOV %r7 "flowing";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JF %r5 _l3424_;
    MOV %r7 .t;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    LG_AND %r4 %r6;
LABEL _l3424_:
    JF %r4 _l3423_;
    MOV %r11 .t;
    MOV %r12 "buffer";
    MOV_PROP %r9 %r11 %r12;
    MOV %r10 "head";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "data";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r0 %r5 %r6;
    JMP _l3422_;
LABEL _l3423_:
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r0 %r5 %r6;
LABEL _l3422_:
    JMP _l3416_;
LABEL _l3421_:
    MOV %r4 .e;
    MOV %r6 .t;
    MOV %r7 "highWaterMark";
    MOV_PROP %r5 %r6 %r7;
    GT %r4 %r5;
    JF %r4 _l3425_;
    MOV %r7 .e;
    PUSH %r7;
    FUNC %r7 @@f1068;
    CALL_REG %r7 1 false;
    MOV %r6 $RET;
    MOV %r7 .t;
    MOV %r8 "highWaterMark";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l3425_:
    MOV %r4 .e;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    LE %r4 %r5;
    JF %r4 _l3427_;
    MOV %r0 .e;
    JMP _l3426_;
LABEL _l3427_:
    MOV %r6 .t;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3428_;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r0 %r6 %r7;
    JMP _l3426_;
LABEL _l3428_:
    MOV %r6 0;
    NEG %r6;
    MOV %r7 .t;
    MOV %r8 "needReadable";
    SET_KEY %r7 %r8 %r6;
    MOV %r0 0;
LABEL _l3426_:
LABEL _l3416_:
    MOV $RET %r0;
    RET;
}
func @@f741(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 t;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 t;
    MOV %r2 "emittedReadable";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3429_;
    MOV %r2 "emitReadable";
    PUSH %r2;
    MOV %r3 t;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @p 2 false;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "emittedReadable";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 t;
    MOV %r4 "sync";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3431_;
    MOV %r3 @k;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    JMP _l3430_;
LABEL _l3431_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @k 1 false;
    MOV %r1 $RET;
LABEL _l3430_:
LABEL _l3429_:
}
func @@f742(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "emit readable";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r0 "readable";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @A 1 false;
}
func @@f743(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 "readingMore";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3432_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "readingMore";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @O;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l3432_:
}
func @@f744(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .t;
    MOV %r1 "length";
    MOV_PROP r %r0 %r1;
LABEL _l3433_:
    MOV %r5 .t;
    MOV %r6 "reading";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l3440_;
    MOV %r6 .t;
    MOV %r7 "flowing";
    MOV_PROP %r5 %r6 %r7;
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l3440_:
    MOV %r2 %r3;
    JF %r3 _l3439_;
    MOV %r5 .t;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l3439_:
    MOV %r1 %r2;
    JF %r2 _l3438_;
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 .t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3438_:
    MOV %r0 %r1;
    JF %r1 _l3437_;
    MOV %r3 "maybeReadMore read 0";
    PUSH %r3;
    CALL_REG @p 1 false;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "read";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 r;
    MOV %r4 .t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3437_:
    JF %r0 _l3434_;
LABEL _l3436_:
    MOV %r2 .t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    JMP _l3433_;
LABEL _l3434_:
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "readingMore";
    SET_KEY %r1 %r2 %r0;
}
func @@f745(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "readable nexttick read 0";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r0 0;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "read";
    CALL_VAR %r0 %r1 1 false;
}
func @@f746(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 "reading";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3441_;
    MOV %r2 "resume read 0";
    PUSH %r2;
    CALL_REG @p 1 false;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3441_:
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "resumeScheduled";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV %r1 .t;
    MOV %r2 "awaitDrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "resume";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @A 1 false;
    MOV %r2 .t;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3443_;
    MOV %r3 .t;
    MOV %r4 "reading";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3443_:
    JF %r0 _l3442_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3442_:
}
func @@f747(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 "flow";
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "flowing";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @p 2 false;
LABEL _l3444_:
    MOV %r2 t;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3448_;
    MOV %r2 null;
    MOV %r4 .e;
    MOV %r5 "read";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3448_:
    JF %r0 _l3445_;
LABEL _l3447_:
    JMP _l3444_;
LABEL _l3445_:
}
func @@f748(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    MOV %r1 0;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l3450_;
    MOV %r0 null;
    JMP _l3449_;
LABEL _l3450_:
    MOV %r3 .t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3452_;
    MOV %r6 .t;
    MOV %r7 "buffer";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "shift";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV r %r3;
    JMP _l3451_;
LABEL _l3452_:
    MOV %r4 .e;
    NEG %r4;
    MOV %r3 %r4;
    JIF %r4 _l3454_;
    MOV %r5 .e;
    MOV %r7 .t;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    GE %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l3454_:
    JF %r3 _l3453_;
    MOV %r6 .t;
    MOV %r7 "decoder";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3456_;
    MOV %r6 "";
    PUSH %r6;
    MOV %r8 .t;
    MOV %r9 "buffer";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "join";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    JMP _l3455_;
LABEL _l3456_:
    MOV %r6 1;
    MOV %r10 .t;
    MOV %r11 "buffer";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    EQ %r6 %r7;
    JF %r6 _l3457_;
    MOV %r11 .t;
    MOV %r12 "buffer";
    MOV_PROP %r9 %r11 %r12;
    MOV %r10 "head";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "data";
    MOV_PROP %r4 %r7 %r8;
    JMP _l3455_;
LABEL _l3457_:
    MOV %r8 .t;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r9 .t;
    MOV %r10 "buffer";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "concat";
    CALL_VAR %r7 %r8 1 false;
    MOV %r4 $RET;
LABEL _l3455_:
    MOV r %r4;
    MOV %r6 .t;
    MOV %r7 "buffer";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "clear";
    CALL_VAR %r4 %r5 0 false;
    JMP _l3451_;
LABEL _l3453_:
    MOV %r5 .e;
    PUSH %r5;
    MOV %r6 .t;
    MOV %r7 "buffer";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r6 .t;
    MOV %r7 "decoder";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    FUNC %r5 @@f1069;
    CALL_REG %r5 3 false;
    MOV %r4 $RET;
    MOV r %r4;
LABEL _l3451_:
    MOV %r0 r;
LABEL _l3449_:
    MOV $RET %r0;
    RET;
}
func @@f749(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r2 t;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l3459_;
    MOV %r2 "\"endReadable()\" called on non-empty stream";
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l3458_;
LABEL _l3459_:
LABEL _l3458_:
    MOV %r1 t;
    MOV %r2 "endEmitted";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3460_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "ended";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @P;
    PUSH %r2;
    MOV %r2 t;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l3460_:
}
func @@f750(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .e;
    MOV %r3 "endEmitted";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3462_;
    MOV %r2 0;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3462_:
    JIF %r0 _l3461_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .e;
    MOV %r4 "endEmitted";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "readable";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "end";
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3461_:
}
func @@f751(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV r 0;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
LABEL _l3463_:
    MOV %r0 r;
    MOV %r1 n;
    LT %r0 %r1;
    JF %r0 _l3464_;
LABEL _l3466_:
    MOV %r3 .e;
    MOV %r4 r;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 .t;
    EQ %r1 %r2;
    JF %r1 _l3468_;
    MOV %r2 r;
    MOV $RET %r2;
    RET;
    JMP _l3467_;
LABEL _l3468_:
LABEL _l3467_:
LABEL _l3465_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l3463_;
LABEL _l3464_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f752(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 "read";
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @p 2 false;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 10;
    PUSH %r1;
    CALL_CTX 'parseInt' 2 false;
    MOV %r0 $RET;
    MOV .e %r0;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV r .e;
    MOV %r1 0;
    MOV %r2 .e;
    NE %r1 %r2;
    JF %r1 _l3471_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 t;
    MOV %r5 "emittedReadable";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3471_:
    MOV %r2 0;
    MOV %r3 .e;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3473_;
    MOV %r4 t;
    MOV %r5 "needReadable";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l3473_:
    MOV %r0 %r1;
    JF %r1 _l3472_;
    MOV %r5 t;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    GE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3474_;
    MOV %r5 t;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l3474_:
    LG_AND %r0 %r2;
LABEL _l3472_:
    JF %r0 _l3470_;
    MOV %r2 "read: emitReadable";
    PUSH %r2;
    MOV %r3 t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r3 t;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @p 3 false;
    MOV %r3 0;
    MOV %r5 t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3477_;
    MOV %r5 t;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l3477_:
    JF %r2 _l3476_;
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @M 1 false;
    JMP _l3475_;
LABEL _l3476_:
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @x 1 false;
LABEL _l3475_:
    MOV %r1 null;
    MOV $RET %r1;
    RET;
    JMP _l3469_;
LABEL _l3470_:
LABEL _l3469_:
    MOV %r1 0;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 t;
    PUSH %r4;
    CALL_REG @E 2 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3480_;
    MOV %r3 t;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l3480_:
    JF %r0 _l3479_;
    MOV %r2 0;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l3481_;
    MOV_THIS %r4;
    PUSH %r4;
    CALL_REG @M 1 false;
    MOV %r3 $RET;
LABEL _l3481_:
    MOV %r1 null;
    MOV $RET %r1;
    RET;
    JMP _l3478_;
LABEL _l3479_:
LABEL _l3478_:
    MOV %r0 t;
    MOV %r1 "needReadable";
    MOV_PROP i %r0 %r1;
    MOV %r1 "need readable";
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    CALL_REG @p 2 false;
    MOV %r2 0;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3483_;
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
    MOV %r5 .e;
    SUB %r3 %r5;
    MOV %r5 t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3483_:
    JF %r1 _l3482_;
    MOV %r3 "length less than watermark";
    PUSH %r3;
    MOV %r4 0;
    NEG %r4;
    MOV i %r4;
    MOV %r3 %r4;
    PUSH %r3;
    CALL_REG @p 2 false;
    MOV %r2 $RET;
LABEL _l3482_:
    MOV %r3 t;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l3486_;
    MOV %r4 t;
    MOV %r5 "reading";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l3486_:
    JF %r1 _l3485_;
    MOV %r2 "reading or ended";
    PUSH %r2;
    MOV %r3 1;
    NEG %r3;
    MOV i %r3;
    MOV %r2 %r3;
    PUSH %r2;
    CALL_REG @p 2 false;
    JMP _l3484_;
LABEL _l3485_:
    MOV %r2 i;
    JF %r2 _l3487_;
    MOV %r4 "do read";
    PUSH %r4;
    CALL_REG @p 1 false;
    MOV %r4 0;
    NEG %r4;
    MOV %r5 t;
    MOV %r6 "reading";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    NEG %r4;
    MOV %r5 t;
    MOV %r6 "sync";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    JF %r4 _l3488_;
    MOV %r6 0;
    NEG %r6;
    MOV %r7 t;
    MOV %r8 "needReadable";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l3488_:
    MOV %r5 t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_read";
    CALL_VAR %r4 %r5 1 false;
    MOV %r4 1;
    NEG %r4;
    MOV %r5 t;
    MOV %r6 "sync";
    SET_KEY %r5 %r6 %r4;
    MOV %r5 t;
    MOV %r6 "reading";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l3489_;
    MOV %r7 r;
    PUSH %r7;
    MOV %r7 t;
    PUSH %r7;
    CALL_REG @E 2 false;
    MOV %r6 $RET;
    MOV .e %r6;
    MOV %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l3489_:
LABEL _l3487_:
LABEL _l3484_:
    MOV %r1 null;
    MOV %r4 .e;
    MOV %r5 0;
    GT %r4 %r5;
    JF %r4 _l3493_;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 t;
    PUSH %r5;
    CALL_REG @R 2 false;
    MOV %r3 $RET;
    JMP _l3492_;
LABEL _l3493_:
    MOV %r3 null;
LABEL _l3492_:
    MOV n %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l3491_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "needReadable";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 0;
    MOV .e %r2;
    JMP _l3490_;
LABEL _l3491_:
    MOV %r2 .e;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 %r2;
    MOV %r4 t;
    MOV %r5 "length";
    SET_KEY %r4 %r5 %r3;
LABEL _l3490_:
    MOV %r1 0;
    MOV %r3 t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l3494_;
    MOV %r4 t;
    MOV %r5 "ended";
    MOV_PROP %r3 %r4 %r5;
    JIF %r3 _l3495_;
    MOV %r5 0;
    NEG %r5;
    MOV %r6 t;
    MOV %r7 "needReadable";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l3495_:
    MOV %r4 r;
    MOV %r5 .e;
    NE %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l3497_;
    MOV %r6 t;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l3497_:
    MOV %r2 %r3;
    JF %r3 _l3496_;
    MOV_THIS %r5;
    PUSH %r5;
    CALL_REG @M 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l3496_:
LABEL _l3494_:
    MOV %r1 null;
    MOV %r2 n;
    NE %r1 %r2;
    JF %r1 _l3498_;
    MOV %r3 "data";
    PUSH %r3;
    MOV %r3 n;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l3498_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f753(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r1 "_read() is not implemented";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f754(.e, .t) {
    CLS @n;
    CLS @o;
    VAR u;
    CLS @c;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    CLS @y;
    CLS @m;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @c @@f1070;
    FUNC @l @@f1071;
    FUNC @b @@f1073;
    FUNC @g @@f1074;
    FUNC @_ @@f1075;
    FUNC @y @@f1076;
    FUNC @m @@f1077;
    CLS @e;
    MOV @e .e;
    MOV_THIS @n;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP @o %r0 %r1;
    BLOCK 1;
    MOV %r1 @o;
    MOV %r2 "pipesCount";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 0;
    JE %r0 %r1 _l3500_;
    JMP _l3501_;
LABEL _l3500_:
    MOV %r2 @e;
    MOV %r3 @o;
    MOV %r4 "pipes";
    SET_KEY %r3 %r4 %r2;
    CLR_BLOCK 1;
    JMP _l3499_;
    JMP _l3502_;
LABEL _l3501_:
    MOV %r2 1;
    JE %r0 %r2 _l3502_;
    JMP _l3503_;
LABEL _l3502_:
    NEW_ARR %r3;
    MOV %r5 @o;
    MOV %r6 "pipes";
    MOV_PROP %r4 %r5 %r6;
    SET_KEY %r3 0 %r4;
    MOV %r4 @e;
    SET_KEY %r3 1 %r4;
    MOV %r4 @o;
    MOV %r5 "pipes";
    SET_KEY %r4 %r5 %r3;
    CLR_BLOCK 1;
    JMP _l3499_;
    JMP _l3504_;
LABEL _l3503_:
LABEL _l3504_:
    MOV %r3 @e;
    PUSH %r3;
    MOV %r5 @o;
    MOV %r6 "pipes";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l3506_;
LABEL _l3505_:
LABEL _l3506_:
LABEL _l3499_:
    END_BLOCK 1;
    MOV %r0 1;
    MOV %r2 @o;
    MOV %r3 "pipesCount";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV %r2 @o;
    MOV %r3 "pipesCount";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 "pipe count=%d opts=%j";
    PUSH %r0;
    MOV %r1 @o;
    MOV %r2 "pipesCount";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @p 3 false;
    MOV %r3 .t;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l3511_;
    MOV %r4 1;
    NEG %r4;
    MOV %r6 .t;
    MOV %r7 "end";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3511_:
    MOV %r1 %r2;
    JF %r2 _l3510_;
    MOV %r3 @e;
    MOV %r5 @r;
    MOV %r6 "stdout";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3510_:
    MOV %r0 %r1;
    JF %r1 _l3509_;
    MOV %r2 @e;
    MOV %r4 @r;
    MOV %r5 "stderr";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3509_:
    JF %r0 _l3508_;
    MOV u @l;
    JMP _l3507_;
LABEL _l3508_:
    MOV u @m;
LABEL _l3507_:
    MOV %r1 @o;
    MOV %r2 "endEmitted";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3513_;
    MOV %r1 u;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 1 false;
    JMP _l3512_;
LABEL _l3513_:
    MOV %r1 "end";
    PUSH %r1;
    MOV %r1 u;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
LABEL _l3512_:
    MOV %r0 "unpipe";
    PUSH %r0;
    MOV %r0 @c;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 @n;
    PUSH %r0;
    FUNC %r0 @@f1072;
    CALL_REG %r0 1 false;
    MOV @f $RET;
    MOV %r0 "drain";
    PUSH %r0;
    MOV %r0 @f;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV @h 1;
    NEG @h;
    MOV @d 1;
    NEG @d;
    MOV %r1 "data";
    PUSH %r1;
    MOV %r1 @b;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 @g;
    PUSH %r1;
    FUNC %r1 @@f1078;
    CALL_REG %r1 3 false;
    MOV %r1 "close";
    PUSH %r1;
    MOV %r1 @_;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "finish";
    PUSH %r1;
    MOV %r1 @y;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "pipe";
    PUSH %r1;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    MOV %r2 @o;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l3514_;
    MOV %r3 "pipe resume";
    PUSH %r3;
    CALL_REG @p 1 false;
    MOV %r3 @n;
    MOV %r4 "resume";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l3514_:
    MOV %r0 @e;
    MOV $RET %r0;
    RET;
}
func @@f755(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    NEW_OBJ r;
    MOV %r0 1;
    NEG %r0;
    SET_KEY r 'hasUnpiped' %r0;
    MOV %r0 0;
    MOV %r2 t;
    MOV %r3 "pipesCount";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3516_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l3515_;
LABEL _l3516_:
LABEL _l3515_:
    MOV %r0 1;
    MOV %r2 t;
    MOV %r3 "pipesCount";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3518_;
    MOV %r3 .e;
    MOV %r2 %r3;
    JF %r3 _l3521_;
    MOV %r4 .e;
    MOV %r6 t;
    MOV %r7 "pipes";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l3521_:
    JF %r2 _l3520_;
    MOV_THIS %r1;
    JMP _l3519_;
LABEL _l3520_:
    MOV %r3 .e;
    JIF %r3 _l3522_;
    MOV %r6 t;
    MOV %r7 "pipes";
    MOV_PROP %r5 %r6 %r7;
    MOV .e %r5;
    MOV %r4 %r5;
LABEL _l3522_:
    MOV %r3 null;
    MOV %r4 t;
    MOV %r5 "pipes";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 t;
    MOV %r5 "flowing";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 .e;
    JF %r3 _l3523_;
    MOV %r5 "unpipe";
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 r;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
LABEL _l3523_:
    MOV_THIS %r1;
LABEL _l3519_:
    MOV $RET %r1;
    RET;
    JMP _l3517_;
LABEL _l3518_:
LABEL _l3517_:
    MOV %r0 .e;
    NEG %r0;
    JF %r0 _l3525_;
    MOV %r1 t;
    MOV %r2 "pipes";
    MOV_PROP n %r1 %r2;
    MOV %r1 t;
    MOV %r2 "pipesCount";
    MOV_PROP i %r1 %r2;
    MOV %r1 null;
    MOV %r2 t;
    MOV %r3 "pipes";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 0;
    MOV %r2 t;
    MOV %r3 "pipesCount";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "flowing";
    SET_KEY %r2 %r3 %r1;
    MOV o 0;
LABEL _l3526_:
    MOV %r1 o;
    MOV %r2 i;
    LT %r1 %r2;
    JF %r1 _l3527_;
LABEL _l3529_:
    MOV %r2 "unpipe";
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV %r4 n;
    MOV %r5 o;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 3 false;
LABEL _l3528_:
    MOV %r2 o;
    ADD %r2 1;
    MOV o %r2;
    JMP _l3526_;
LABEL _l3527_:
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l3524_;
LABEL _l3525_:
LABEL _l3524_:
    MOV %r1 t;
    MOV %r2 "pipes";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @C 2 false;
    MOV s $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 s;
    EQ %r1 %r2;
    JF %r1 _l3531_;
    MOV_THIS %r0;
    JMP _l3530_;
LABEL _l3531_:
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r4 t;
    MOV %r5 "pipes";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "splice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 1;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 %r2;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 1;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l3532_;
    MOV %r7 t;
    MOV %r8 "pipes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 t;
    MOV %r6 "pipes";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3532_:
    MOV %r2 "unpipe";
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 3 false;
    MOV_THIS %r0;
LABEL _l3530_:
    MOV $RET %r0;
    RET;
}
func @@f756(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r4 @u;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "on";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
    MOV r $RET;
    MOV %r0 "data";
    MOV %r1 .e;
    EQ %r0 %r1;
    JF %r0 _l3534_;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l3535_;
    MOV_THIS %r3;
    MOV %r4 "resume";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l3535_:
    JMP _l3533_;
LABEL _l3534_:
    MOV %r1 "readable";
    MOV %r2 .e;
    EQ %r1 %r2;
    JF %r1 _l3536_;
    MOV_THIS %r2;
    MOV %r3 "_readableState";
    MOV_PROP n %r2 %r3;
    MOV %r4 n;
    MOV %r5 "endEmitted";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l3538_;
    MOV %r5 n;
    MOV %r6 "readableListening";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l3538_:
    JIF %r2 _l3537_;
    MOV %r5 0;
    NEG %r5;
    MOV %r6 n;
    MOV %r7 "needReadable";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 n;
    MOV %r6 "readableListening";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 1;
    NEG %r4;
    MOV %r5 n;
    MOV %r6 "emittedReadable";
    SET_KEY %r5 %r6 %r4;
    MOV %r5 n;
    MOV %r6 "reading";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l3540_;
    MOV %r6 n;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    MOV %r3 %r5;
    JF %r5 _l3541_;
    MOV_THIS %r7;
    PUSH %r7;
    CALL_REG @x 1 false;
    MOV %r6 $RET;
    LG_AND %r3 %r6;
LABEL _l3541_:
    JMP _l3539_;
LABEL _l3540_:
    MOV %r5 @T;
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "nextTick";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
LABEL _l3539_:
LABEL _l3537_:
    JMP _l3533_;
LABEL _l3536_:
LABEL _l3533_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f757() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP e %r0 %r1;
    MOV %r2 e;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l3542_;
    MOV %r3 "resume";
    PUSH %r3;
    CALL_REG @p 1 false;
    MOV %r3 0;
    NEG %r3;
    MOV %r4 e;
    MOV %r5 "flowing";
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 e;
    PUSH %r3;
    FUNC %r3 @@f1079;
    CALL_REG %r3 2 false;
    MOV %r2 $RET;
LABEL _l3542_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f758() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 "call pause flowing=%j";
    PUSH %r1;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @p 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l3543_;
    MOV %r3 "pause";
    PUSH %r3;
    CALL_REG @p 1 false;
    MOV %r3 1;
    NEG %r3;
    MOV_THIS %r6;
    MOV %r7 "_readableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "flowing";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 "pause";
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l3543_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f759(.e) {
    CLS @t;
    CLS @r;
    CLS @n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP @r %r0 %r1;
    MOV @n 1;
    NEG @n;
    MOV %r1 "end";
    PUSH %r1;
    FUNC %r1 @@f1080;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "data";
    PUSH %r1;
    FUNC %r1 @@f1081;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @e;
    FORIN i %r0 _l3544_ _l3545_;
LABEL _l3544_:
    MOV %r2 0;
    VOID %r2;
    MOV_THIS %r4;
    MOV %r5 i;
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3547_;
    MOV %r3 "function";
    MOV %r5 @e;
    MOV %r6 i;
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3547_:
    JF %r1 _l3546_;
    MOV %r4 i;
    PUSH %r4;
    FUNC %r4 @@f1082;
    CALL_REG %r4 1 false;
    MOV %r3 $RET;
    MOV_THIS %r4;
    MOV %r5 i;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3546_:
    FORIN_END;
LABEL _l3545_:
    MOV o 0;
LABEL _l3548_:
    MOV %r0 o;
    MOV %r2 @_;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l3549_;
LABEL _l3551_:
    MOV %r2 @_;
    MOV %r3 o;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r3 @_;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "emit";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
LABEL _l3550_:
    MOV %r1 o;
    ADD %r1 1;
    MOV o %r1;
    JMP _l3548_;
LABEL _l3549_:
    FUNC %r1 @@f1083;
    MOV_THIS %r2;
    MOV %r3 "_read";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f760() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f761(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "_transformState";
    MOV_PROP r %r0 %r1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 r;
    MOV %r2 "transforming";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 r;
    MOV %r1 "writecb";
    MOV_PROP n %r0 %r1;
    MOV %r0 n;
    NEG %r0;
    JF %r0 _l3553_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r3 "write callback called multiple times";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3552_;
LABEL _l3553_:
LABEL _l3552_:
    MOV %r0 null;
    MOV %r1 r;
    MOV %r2 "writechunk";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 r;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 .t;
    WNE %r0 %r1;
    JF %r0 _l3554_;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3554_:
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG n 1 false;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP i %r0 %r1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 i;
    MOV %r2 "reading";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 i;
    MOV %r3 "needReadable";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3556_;
    MOV %r4 i;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 i;
    MOV %r5 "highWaterMark";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3556_:
    JF %r0 _l3555_;
    MOV %r3 i;
    MOV %r4 "highWaterMark";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3555_:
}
func @@f762(.t, .r) {
    REG %r0;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    CALL_REG @a 3 false;
}
func @@f763(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @t 1 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f764(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "next";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "entry";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1084;
    MOV_THIS %r1;
    MOV %r2 "finish";
    SET_KEY %r1 %r2 %r0;
}
func @@f765() {
}
func @@f766() {
}
func @@f767(.t, .r) {
    VAR n;
    VAR i;
    VAR c;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    CLS @r;
    MOV @r .r;
    MOV %r1 @a;
    MOV %r0 %r1;
    JIF %r1 _l3557_;
    MOV %r3 "./_stream_duplex";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l3557_:
    MOV @a %r0;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l3558_;
    NEW_OBJ %r2;
    LG_OR %r0 %r2;
LABEL _l3558_:
    MOV .t %r0;
    MOV n @r;
    MOV %r0 @a;
    INST_OF n %r0;
    MOV %r1 .t;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "objectMode";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 n;
    JF %r0 _l3559_;
    MOV_THIS %r4;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l3560_;
    MOV %r5 .t;
    MOV %r6 "writableObjectMode";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l3560_:
    MOV_THIS %r3;
    MOV %r4 "objectMode";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3559_:
    MOV %r0 .t;
    MOV %r1 "highWaterMark";
    MOV_PROP i %r0 %r1;
    MOV %r0 .t;
    MOV %r1 "writableHighWaterMark";
    MOV_PROP c %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3562_;
    MOV l 16;
    JMP _l3561_;
LABEL _l3562_:
    MOV l 16384;
LABEL _l3561_:
    MOV %r2 i;
    MOV %r1 %r2;
    JIF %r2 _l3565_;
    MOV %r3 0;
    MOV %r4 i;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3565_:
    JF %r1 _l3564_;
    MOV %r0 i;
    JMP _l3563_;
LABEL _l3564_:
    MOV %r3 n;
    MOV %r2 %r3;
    JF %r3 _l3567_;
    MOV %r5 c;
    MOV %r4 %r5;
    JIF %r5 _l3568_;
    MOV %r6 0;
    MOV %r7 c;
    EQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l3568_:
    LG_AND %r2 %r4;
LABEL _l3567_:
    JF %r2 _l3566_;
    MOV %r0 c;
    JMP _l3563_;
LABEL _l3566_:
    MOV %r0 l;
LABEL _l3563_:
    MOV_THIS %r1;
    MOV %r2 "highWaterMark";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r2;
    MOV %r3 "highWaterMark";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_CTX %r1 "Math";
    MOV %r2 "floor";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "highWaterMark";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "finalCalled";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "needDrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "ending";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "finished";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    SET_KEY %r1 %r2 %r0;
    MOV f 1;
    NEG f;
    MOV %r1 .t;
    MOV %r2 "decodeStrings";
    MOV_PROP %r0 %r1 %r2;
    EQ f %r0;
    MOV %r0 f;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "decodeStrings";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 .t;
    MOV %r3 "defaultEncoding";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3569_;
    MOV %r2 "utf8";
    LG_OR %r0 %r2;
LABEL _l3569_:
    MOV_THIS %r1;
    MOV %r2 "defaultEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "writing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "corked";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "bufferProcessing";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1085;
    MOV_THIS %r1;
    MOV %r2 "onwrite";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "writelen";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "bufferedRequest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "lastBufferedRequest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "prefinished";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "errorEmitted";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "bufferedRequestCount";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @s 1 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "corkedRequestsFree";
    SET_KEY %r1 %r2 %r0;
}
func @@f768(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 @a;
    MOV %r1 %r2;
    JIF %r2 _l3572_;
    MOV %r4 "./_stream_duplex";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l3572_:
    MOV @a %r1;
    MOV %r2 @y;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @d;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l3573_;
    MOV_THIS %r2;
    MOV %r3 @a;
    INST_OF %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3573_:
    NEG %r0;
    JF %r0 _l3571_;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @y 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3570_;
LABEL _l3571_:
LABEL _l3570_:
    MOV %r1 .t;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @_ 2 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "writable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    JF %r0 _l3574_;
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "write";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3575_;
    MOV %r5 .t;
    MOV %r6 "write";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_write";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3575_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "writev";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3576_;
    MOV %r5 .t;
    MOV %r6 "writev";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_writev";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3576_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3577_;
    MOV %r5 .t;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_destroy";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3577_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "final";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3578_;
    MOV %r5 .t;
    MOV %r6 "final";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_final";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3578_:
LABEL _l3574_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @f;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
}
func @@f769(.e, .t, .r, .n, .i, .o, .s) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .n;
    MOV %r1 .t;
    MOV %r2 "writelen";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .s;
    MOV %r1 .t;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "writing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .r;
    JF %r0 _l3580_;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r2 .t;
    MOV %r3 "onwrite";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "_writev";
    CALL_VAR %r1 %r2 2 false;
    JMP _l3579_;
LABEL _l3580_:
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .o;
    PUSH %r1;
    MOV %r2 .t;
    MOV %r3 "onwrite";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "_write";
    CALL_VAR %r1 %r2 3 false;
LABEL _l3579_:
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
}
func @@f770(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .r;
    JIF %r0 _l3581_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    FUNC %r2 @@f1086;
    CALL_REG %r2 2 false;
    MOV %r1 $RET;
LABEL _l3581_:
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    CALL_REG .n 0 false;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @x 2 false;
}
func @@f771(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "bufferProcessing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    MOV %r1 "bufferedRequest";
    MOV_PROP r %r0 %r1;
    MOV %r3 .e;
    MOV %r4 "_writev";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l3585_;
    MOV %r3 r;
    LG_AND %r1 %r3;
LABEL _l3585_:
    MOV %r0 %r1;
    JF %r1 _l3584_;
    MOV %r3 r;
    MOV %r4 "next";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l3584_:
    JF %r0 _l3583_;
    MOV %r1 .t;
    MOV %r2 "bufferedRequestCount";
    MOV_PROP n %r1 %r2;
    MOV %r1 n;
    PUSH %r1;
    CALL_CTX 'Array' 1 true;
    MOV i $RET;
    MOV %r1 .t;
    MOV %r2 "corkedRequestsFree";
    MOV_PROP o %r1 %r2;
    MOV %r1 r;
    MOV %r2 o;
    MOV %r3 "entry";
    SET_KEY %r2 %r3 %r1;
    MOV a 0;
    MOV u 0;
    NEG u;
LABEL _l3586_:
    MOV %r1 r;
    JF %r1 _l3587_;
LABEL _l3589_:
    MOV %r2 r;
    MOV %r3 i;
    MOV %r4 a;
    SET_KEY %r3 %r4 %r2;
    MOV %r3 r;
    MOV %r4 "isBuf";
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l3590_;
    MOV %r4 1;
    NEG %r4;
    MOV u %r4;
    MOV %r3 %r4;
LABEL _l3590_:
    MOV %r3 r;
    MOV %r4 "next";
    MOV_PROP %r2 %r3 %r4;
    MOV r %r2;
    MOV %r2 1;
    MOV %r3 a;
    ADD %r3 %r2;
    MOV a %r3;
    JMP _l3586_;
LABEL _l3587_:
    MOV %r1 u;
    MOV %r2 i;
    MOV %r3 "allBuffers";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r2 .t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    MOV %r1 "";
    PUSH %r1;
    MOV %r2 o;
    MOV %r3 "finish";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @m 7 false;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 null;
    MOV %r2 .t;
    MOV %r3 "lastBufferedRequest";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 o;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3592_;
    MOV %r3 o;
    MOV %r4 "next";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .t;
    MOV %r4 "corkedRequestsFree";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 null;
    MOV %r3 o;
    MOV %r4 "next";
    SET_KEY %r3 %r4 %r2;
    JMP _l3591_;
LABEL _l3592_:
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @s 1 true;
    MOV %r2 $RET;
    MOV %r3 .t;
    MOV %r4 "corkedRequestsFree";
    SET_KEY %r3 %r4 %r2;
LABEL _l3591_:
    MOV %r1 0;
    MOV %r2 .t;
    MOV %r3 "bufferedRequestCount";
    SET_KEY %r2 %r3 %r1;
    JMP _l3582_;
LABEL _l3583_:
    BLOCK 5;
LABEL _l3593_:
    MOV %r1 r;
    JF %r1 _l3594_;
LABEL _l3596_:
    MOV %r2 r;
    MOV %r3 "chunk";
    MOV_PROP c %r2 %r3;
    MOV %r2 r;
    MOV %r3 "encoding";
    MOV_PROP l %r2 %r3;
    MOV %r2 r;
    MOV %r3 "callback";
    MOV_PROP f %r2 %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 1;
    NEG %r3;
    PUSH %r3;
    MOV %r5 .t;
    MOV %r6 "objectMode";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l3600_;
    MOV %r3 1;
    JMP _l3599_;
LABEL _l3600_:
    MOV %r5 c;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
LABEL _l3599_:
    PUSH %r3;
    MOV %r3 c;
    PUSH %r3;
    MOV %r3 l;
    PUSH %r3;
    MOV %r3 f;
    PUSH %r3;
    CALL_REG @m 7 false;
    MOV %r4 r;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    MOV r %r3;
    MOV %r4 .t;
    MOV %r5 "bufferedRequestCount";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 1;
    MOV %r4 .t;
    MOV %r5 "bufferedRequestCount";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 .t;
    MOV %r4 "writing";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3598_;
    CLR_BLOCK 5;
    JMP _l3594_;
    JMP _l3597_;
LABEL _l3598_:
LABEL _l3597_:
    JMP _l3593_;
LABEL _l3594_:
    END_BLOCK 5;
    MOV %r1 null;
    MOV %r2 r;
    EQ %r1 %r2;
    JF %r1 _l3601_;
    MOV %r3 null;
    MOV %r4 .t;
    MOV %r5 "lastBufferedRequest";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3601_:
LABEL _l3582_:
    MOV %r0 r;
    MOV %r1 .t;
    MOV %r2 "bufferedRequest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "bufferProcessing";
    SET_KEY %r1 %r2 %r0;
}
func @@f772(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r5 .e;
    MOV %r6 "ending";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l3605_;
    MOV %r5 0;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l3605_:
    MOV %r2 %r3;
    JF %r3 _l3604_;
    MOV %r4 null;
    MOV %r6 .e;
    MOV %r7 "bufferedRequest";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l3604_:
    MOV %r1 %r2;
    JF %r2 _l3603_;
    MOV %r4 .e;
    MOV %r5 "finished";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l3603_:
    MOV %r0 %r1;
    JF %r1 _l3602_;
    MOV %r3 .e;
    MOV %r4 "writing";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3602_:
    MOV $RET %r0;
    RET;
}
func @@f773(.e, .t) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1087;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "_final";
    CALL_VAR %r0 %r1 1 false;
}
func @@f774(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @S 1 false;
    MOV r $RET;
    MOV %r1 r;
    JF %r1 _l3606_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    FUNC %r4 @@f1088;
    CALL_REG %r4 2 false;
    MOV %r3 $RET;
    NEG %r3;
    MOV %r3 0;
    MOV %r5 .t;
    MOV %r6 "pendingcb";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3607_;
    MOV %r5 0;
    NEG %r5;
    MOV %r6 .t;
    MOV %r7 "finished";
    SET_KEY %r6 %r7 %r5;
    MOV %r5 "finish";
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l3607_:
LABEL _l3606_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f775() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r0;
    MOV %r1 "bufferedRequest";
    MOV_PROP e %r0 %r1;
    NEW_ARR t;
LABEL _l3608_:
    MOV %r0 e;
    JF %r0 _l3609_;
LABEL _l3611_:
    MOV %r1 e;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r2 e;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV e %r1;
    JMP _l3608_;
LABEL _l3609_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f776() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    TRY _l3612_ _l3613_;
    MOV %r1 @_;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "buffer";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r2 @@f1089;
    PUSH %r2;
    MOV %r2 "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.";
    PUSH %r2;
    MOV %r2 "DEP0003";
    PUSH %r2;
    MOV %r2 @l;
    MOV %r3 "deprecate";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    TRY_END;
LABEL _l3612_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    END_BLOCK 2;
LABEL _l3613_:
}
func @@f777(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @d;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l3614_;
    MOV_THIS %r3;
    MOV %r4 @y;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3615_;
    MOV %r5 .e;
    MOV %r4 %r5;
    JF %r5 _l3616_;
    MOV %r8 .e;
    MOV %r9 "_writableState";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 @_;
    INST_OF %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l3616_:
    LG_AND %r2 %r4;
LABEL _l3615_:
    LG_OR %r0 %r2;
LABEL _l3614_:
    MOV $RET %r0;
    RET;
}
func @@f778(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV_THIS %r1;
    INST_OF %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f779() {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r1 "Cannot pipe, not readable";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f780(.e, .t, .r) {
    VAR n;
    VAR i;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "_writableState";
    MOV_PROP i %r0 %r1;
    MOV s 1;
    NEG s;
    MOV %r1 i;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    MOV a %r0;
    JF %r0 _l3617_;
    MOV %r2 .e;
    MOV n %r2;
    MOV %r3 n;
    PUSH %r3;
    MOV %r3 @h;
    MOV %r4 "isBuffer";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l3618_;
    MOV %r3 n;
    MOV %r4 @p;
    INST_OF %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3618_:
    LG_AND a %r1;
LABEL _l3617_:
    MOV %r2 a;
    MOV %r1 %r2;
    JF %r2 _l3620_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 @h;
    MOV %r5 "isBuffer";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l3620_:
    JF %r1 _l3619_;
    MOV %r4 .e;
    PUSH %r4;
    FUNC %r4 @@f1090;
    CALL_REG %r4 1 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l3619_:
    MOV %r1 "function";
    MOV %r2 .t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l3621_;
    MOV %r3 .t;
    MOV .r %r3;
    MOV %r3 null;
    MOV .t %r3;
    MOV %r2 %r3;
LABEL _l3621_:
    MOV %r1 a;
    JF %r1 _l3623_;
    MOV %r2 "buffer";
    MOV .t %r2;
    JMP _l3622_;
LABEL _l3623_:
    MOV %r2 .t;
    JIF %r2 _l3624_;
    MOV %r5 i;
    MOV %r6 "defaultEncoding";
    MOV_PROP %r4 %r5 %r6;
    MOV .t %r4;
    MOV %r3 %r4;
LABEL _l3624_:
LABEL _l3622_:
    MOV %r1 "function";
    MOV %r2 .r;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3625_;
    MOV %r3 @g;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l3625_:
    MOV %r2 i;
    MOV %r3 "ended";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3627_;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    FUNC %r2 @@f1091;
    CALL_REG %r2 2 false;
    JMP _l3626_;
LABEL _l3627_:
    MOV %r3 a;
    MOV %r2 %r3;
    JIF %r3 _l3629_;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 i;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .r;
    PUSH %r5;
    FUNC %r5 @@f1092;
    CALL_REG %r5 4 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l3629_:
    JF %r2 _l3628_;
    MOV %r5 i;
    MOV %r6 "pendingcb";
    MOV_PROP %r4 %r5 %r6;
    ADD %r4 1;
    MOV %r5 i;
    MOV %r6 "pendingcb";
    SET_KEY %r5 %r6 %r4;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 i;
    PUSH %r5;
    MOV %r5 a;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 .r;
    PUSH %r5;
    FUNC %r5 @@f1093;
    CALL_REG %r5 6 false;
    MOV %r4 $RET;
    MOV s %r4;
    MOV %r3 %r4;
LABEL _l3628_:
LABEL _l3626_:
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f781() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "corked";
    MOV_PROP %r0 %r1 %r2;
    ADD %r0 1;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "corked";
    SET_KEY %r1 %r2 %r0;
}
func @@f782() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r0;
    MOV %r1 "_writableState";
    MOV_PROP e %r0 %r1;
    MOV %r1 e;
    MOV %r2 "corked";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3630_;
    MOV %r3 e;
    MOV %r4 "corked";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 1;
    MOV %r3 e;
    MOV %r4 "corked";
    SET_KEY %r3 %r4 %r2;
    MOV %r7 e;
    MOV %r8 "writing";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    JIF %r6 _l3635_;
    MOV %r8 e;
    MOV %r9 "corked";
    MOV_PROP %r7 %r8 %r9;
    LG_OR %r5 %r7;
LABEL _l3635_:
    MOV %r4 %r5;
    JIF %r5 _l3634_;
    MOV %r7 e;
    MOV %r8 "finished";
    MOV_PROP %r6 %r7 %r8;
    LG_OR %r4 %r6;
LABEL _l3634_:
    MOV %r3 %r4;
    JIF %r4 _l3633_;
    MOV %r6 e;
    MOV %r7 "bufferProcessing";
    MOV_PROP %r5 %r6 %r7;
    LG_OR %r3 %r5;
LABEL _l3633_:
    MOV %r2 %r3;
    JIF %r3 _l3632_;
    MOV %r5 e;
    MOV %r6 "bufferedRequest";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l3632_:
    MOV %r1 %r2;
    JIF %r2 _l3631_;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 e;
    PUSH %r4;
    CALL_REG @w 2 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l3631_:
LABEL _l3630_:
}
func @@f783(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "string";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l3638_;
    MOV %r4 .e;
    MOV %r5 "toLowerCase";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l3638_:
    MOV %r3 .e;
    MOV %r5 "";
    ADD %r3 %r5;
    MOV %r4 "toLowerCase";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r4 "hex";
    SET_KEY %r2 0 %r4;
    MOV %r4 "utf8";
    SET_KEY %r2 1 %r4;
    MOV %r4 "utf-8";
    SET_KEY %r2 2 %r4;
    MOV %r4 "ascii";
    SET_KEY %r2 3 %r4;
    MOV %r4 "binary";
    SET_KEY %r2 4 %r4;
    MOV %r4 "base64";
    SET_KEY %r2 5 %r4;
    MOV %r4 "ucs2";
    SET_KEY %r2 6 %r4;
    MOV %r4 "ucs-2";
    SET_KEY %r2 7 %r4;
    MOV %r4 "utf16le";
    SET_KEY %r2 8 %r4;
    MOV %r4 "utf-16le";
    SET_KEY %r2 9 %r4;
    MOV %r4 "raw";
    SET_KEY %r2 10 %r4;
    MOV %r3 "indexOf";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 1;
    MINUS %r1;
    GT %r0 %r1;
    NEG %r0;
    JF %r0 _l3637_;
    MOV %r2 "Unknown encoding: ";
    MOV %r3 .e;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l3636_;
LABEL _l3637_:
LABEL _l3636_:
    MOV %r1 .e;
    MOV_THIS %r4;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "defaultEncoding";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f784() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f785(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 "_write() is not implemented";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG .r 1 false;
}
func @@f786(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r0;
    MOV %r1 "_writableState";
    MOV_PROP n %r0 %r1;
    MOV %r0 "function";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l3640_;
    MOV %r1 .e;
    MOV .r %r1;
    MOV %r1 null;
    MOV .e %r1;
    MOV %r1 null;
    MOV .t %r1;
    JMP _l3639_;
LABEL _l3640_:
    MOV %r1 "function";
    MOV %r2 .t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l3641_;
    MOV %r3 .t;
    MOV .r %r3;
    MOV %r3 null;
    MOV .t %r3;
    MOV %r2 %r3;
LABEL _l3641_:
LABEL _l3639_:
    MOV %r0 null;
    MOV %r1 .e;
    WNE %r0 %r1;
    JF %r0 _l3642_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "write";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l3642_:
    MOV %r1 n;
    MOV %r2 "corked";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3643_;
    MOV %r2 1;
    MOV %r3 n;
    MOV %r4 "corked";
    SET_KEY %r3 %r4 %r2;
    MOV_THIS %r2;
    MOV %r3 "uncork";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l3643_:
    MOV %r2 n;
    MOV %r3 "ending";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3645_;
    MOV %r3 n;
    MOV %r4 "finished";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l3645_:
    JIF %r0 _l3644_;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    FUNC %r2 @@f1094;
    CALL_REG %r2 3 false;
    MOV %r1 $RET;
LABEL _l3644_:
}
func @@f787() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3646_;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l3646_:
    MOV $RET %r0;
    RET;
}
func @@f788(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3647_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3647_:
}
func @@f789(.e, .t) {
    REG %r0;
    REG %r1;
    MOV_THIS %r0;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG .t 1 false;
}
func @@f790() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    FUNC %r1 @@f1095;
    CALL_REG %r1 2 false;
    MOV %r0 $RET;
    NEG %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "tail";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f791(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    NEW_OBJ t;
    MOV %r0 .e;
    SET_KEY t 'data' %r0;
    MOV %r0 null;
    SET_KEY t 'next' %r0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l3649_;
    MOV %r1 t;
    MOV_THIS %r4;
    MOV %r5 "tail";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "next";
    SET_KEY %r2 %r3 %r1;
    JMP _l3648_;
LABEL _l3649_:
    MOV %r1 t;
    MOV_THIS %r2;
    MOV %r3 "head";
    SET_KEY %r2 %r3 %r1;
LABEL _l3648_:
    MOV %r0 t;
    MOV_THIS %r1;
    MOV %r2 "tail";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    ADD %r0 1;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f792(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    NEW_OBJ t;
    MOV %r0 .e;
    SET_KEY t 'data' %r0;
    MOV_THIS %r1;
    MOV %r2 "head";
    MOV_PROP %r0 %r1 %r2;
    SET_KEY t 'next' %r0;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3650_;
    MOV %r2 t;
    MOV_THIS %r3;
    MOV %r4 "tail";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3650_:
    MOV %r0 t;
    MOV_THIS %r1;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    ADD %r0 1;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f793() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l3652_;
    MOV_THIS %r3;
    MOV %r4 "head";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "data";
    MOV_PROP e %r1 %r2;
    MOV %r2 1;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l3654_;
    MOV %r4 null;
    MOV_THIS %r5;
    MOV %r6 "tail";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV_THIS %r4;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
    JMP _l3653_;
LABEL _l3654_:
    MOV_THIS %r6;
    MOV %r7 "head";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r4;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
LABEL _l3653_:
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 1;
    MOV_THIS %r3;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 e;
    MOV $RET %r1;
    RET;
    JMP _l3651_;
LABEL _l3652_:
LABEL _l3651_:
}
func @@f794() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 null;
    MOV_THIS %r2;
    MOV %r3 "tail";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f795(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3656_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l3655_;
LABEL _l3656_:
LABEL _l3655_:
    MOV_THIS %r0;
    MOV %r1 "head";
    MOV_PROP t %r0 %r1;
    MOV r "";
    MOV %r1 t;
    MOV %r2 "data";
    MOV_PROP %r0 %r1 %r2;
    ADD r %r0;
LABEL _l3657_:
    MOV %r2 t;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV t %r1;
    MOV %r0 %r1;
    JF %r0 _l3658_;
LABEL _l3660_:
    MOV %r1 .e;
    MOV %r3 t;
    MOV %r4 "data";
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    MOV %r2 r;
    ADD %r2 %r1;
    MOV r %r2;
    JMP _l3657_;
LABEL _l3658_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f796(.e) {
    VAR t;
    VAR r;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3662_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "alloc";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3661_;
LABEL _l3662_:
LABEL _l3661_:
    MOV %r0 1;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3664_;
    MOV_THIS %r4;
    MOV %r5 "head";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "data";
    MOV_PROP %r1 %r2 %r3;
    MOV $RET %r1;
    RET;
    JMP _l3663_;
LABEL _l3664_:
LABEL _l3663_:
    MOV %r0 .e;
    MOV %r1 0;
    ZSHR %r0 %r1;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV o $RET;
    MOV_THIS %r0;
    MOV %r1 "head";
    MOV_PROP s %r0 %r1;
    MOV a 0;
LABEL _l3665_:
    MOV %r0 s;
    JF %r0 _l3666_;
LABEL _l3668_:
    MOV %r2 s;
    MOV %r3 "data";
    MOV_PROP %r1 %r2 %r3;
    MOV t %r1;
    MOV %r1 o;
    MOV r %r1;
    MOV %r1 a;
    MOV i %r1;
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "copy";
    CALL_VAR %r1 %r2 2 false;
    MOV %r4 s;
    MOV %r5 "data";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 a;
    ADD %r2 %r1;
    MOV a %r2;
    MOV %r2 s;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV s %r1;
    JMP _l3665_;
LABEL _l3666_:
    MOV %r0 o;
    MOV $RET %r0;
    RET;
}
func @@f797(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 @t;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l3671_;
    MOV %r2 .e;
    LG_AND %r0 %r2;
LABEL _l3671_:
    JF %r0 _l3670_;
    MOV %r1 @i;
    PUSH %r1;
    MOV %r1 @r;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 3 false;
    MOV %r2 @r;
    MOV %r3 "_writableState";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3672_;
    MOV %r3 0;
    NEG %r3;
    MOV %r6 @r;
    MOV %r7 "_writableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "errorEmitted";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3672_:
    JMP _l3669_;
LABEL _l3670_:
    MOV %r1 @t;
    JF %r1 _l3673_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @t 1 false;
    MOV %r2 $RET;
LABEL _l3673_:
LABEL _l3669_:
}
func @@f798(.e, .t, .r) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS @n;
    MOV %r0 .e;
    MOV_THIS %r1;
    MOV %r2 "_callback";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .r;
    MOV_THIS %r1;
    MOV %r2 "_args";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV_THIS %r2;
    MOV %r3 "_args";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'setInterval' 3 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_interval";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1096;
    MOV_THIS %r1;
    MOV %r2 "reschedule";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1097;
    MOV_THIS %r1;
    MOV %r2 "clear";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1098;
    MOV_THIS %r1;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
}
func @@f799(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .e;
    PUSH %r0;
    FUNC %r0 @@f1099;
    CALL_REG %r0 1 false;
    MOV t $RET;
    MOV %r1 "string";
    MOV %r2 t;
    TYPE_OF %r2;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3676_;
    MOV %r5 @n;
    MOV %r6 "isEncoding";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 @i;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3677_;
    MOV %r5 .e;
    PUSH %r5;
    CALL_REG @i 1 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l3677_:
    LG_AND %r0 %r2;
LABEL _l3676_:
    JF %r0 _l3675_;
    MOV %r2 "Unknown encoding: ";
    MOV %r3 .e;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l3674_;
LABEL _l3675_:
LABEL _l3674_:
    MOV %r1 t;
    MOV %r0 %r1;
    JIF %r1 _l3678_;
    MOV %r2 .e;
    LG_OR %r0 %r2;
LABEL _l3678_:
    MOV $RET %r0;
    RET;
}
func @@f800(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 128;
    MOV %r1 192;
    MOV %r3 .t;
    MOV %r4 0;
    MOV_PROP %r2 %r3 %r4;
    AND %r1 %r2;
    WNE %r0 %r1;
    JF %r0 _l3680_;
    MOV %r2 0;
    MOV %r3 .e;
    MOV %r4 "lastNeed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 "�";
    MOV $RET %r1;
    RET;
    JMP _l3679_;
LABEL _l3680_:
LABEL _l3679_:
    MOV %r3 .e;
    MOV %r4 "lastNeed";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 1;
    GT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3683_;
    MOV %r4 .t;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 1;
    GT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3683_:
    JF %r0 _l3682_;
    MOV %r1 128;
    MOV %r2 192;
    MOV %r4 .t;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    AND %r2 %r3;
    WNE %r1 %r2;
    JF %r1 _l3685_;
    MOV %r3 1;
    MOV %r4 .e;
    MOV %r5 "lastNeed";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 "�";
    MOV $RET %r2;
    RET;
    JMP _l3684_;
LABEL _l3685_:
LABEL _l3684_:
    MOV %r5 .e;
    MOV %r6 "lastNeed";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 2;
    GT %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3689_;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 2;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l3689_:
    MOV %r1 %r2;
    JF %r2 _l3688_;
    MOV %r3 128;
    MOV %r4 192;
    MOV %r6 .t;
    MOV %r7 2;
    MOV_PROP %r5 %r6 %r7;
    AND %r4 %r5;
    WNE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3688_:
    JF %r1 _l3687_;
    MOV %r3 2;
    MOV %r4 .e;
    MOV %r5 "lastNeed";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 "�";
    MOV $RET %r2;
    RET;
    JMP _l3686_;
LABEL _l3687_:
LABEL _l3686_:
    JMP _l3681_;
LABEL _l3682_:
LABEL _l3681_:
}
func @@f801(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .t;
    MOV %r2 "length";
    MOV_PROP n %r1 %r2;
    MOV %r0 1;
    SUB n %r0;
    MOV %r0 n;
    MOV %r1 .r;
    LT %r0 %r1;
    JF %r0 _l3691_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l3690_;
LABEL _l3691_:
LABEL _l3690_:
    MOV %r1 .t;
    MOV %r2 n;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @s 1 false;
    MOV i $RET;
    MOV %r0 i;
    MOV %r1 0;
    GE %r0 %r1;
    JF %r0 _l3693_;
    MOV %r2 i;
    MOV %r3 0;
    GT %r2 %r3;
    JF %r2 _l3694_;
    MOV %r4 i;
    MOV %r5 1;
    SUB %r4 %r5;
    MOV %r5 .e;
    MOV %r6 "lastNeed";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3694_:
    MOV %r1 i;
    MOV $RET %r1;
    RET;
    JMP _l3692_;
LABEL _l3693_:
LABEL _l3692_:
    MOV %r3 n;
    SUB %r3 1;
    MOV %r1 %r3;
    MOV n %r3;
    MOV %r2 .r;
    LT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l3697_;
    MOV %r2 2;
    MINUS %r2;
    MOV %r3 i;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3697_:
    JF %r0 _l3696_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l3695_;
LABEL _l3696_:
LABEL _l3695_:
    MOV %r4 .t;
    MOV %r5 n;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @s 1 false;
    MOV %r2 $RET;
    MOV i %r2;
    MOV %r0 %r2;
    MOV %r1 0;
    GE %r0 %r1;
    JF %r0 _l3699_;
    MOV %r2 i;
    MOV %r3 0;
    GT %r2 %r3;
    JF %r2 _l3700_;
    MOV %r4 i;
    MOV %r5 2;
    SUB %r4 %r5;
    MOV %r5 .e;
    MOV %r6 "lastNeed";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3700_:
    MOV %r1 i;
    MOV $RET %r1;
    RET;
    JMP _l3698_;
LABEL _l3699_:
LABEL _l3698_:
    MOV %r3 n;
    SUB %r3 1;
    MOV %r1 %r3;
    MOV n %r3;
    MOV %r2 .r;
    LT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l3703_;
    MOV %r2 2;
    MINUS %r2;
    MOV %r3 i;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3703_:
    JF %r0 _l3702_;
    MOV %r1 0;
    MOV $RET %r1;
    RET;
    JMP _l3701_;
LABEL _l3702_:
LABEL _l3701_:
    MOV %r4 .t;
    MOV %r5 n;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @s 1 false;
    MOV %r2 $RET;
    MOV i %r2;
    MOV %r0 %r2;
    MOV %r1 0;
    GE %r0 %r1;
    JF %r0 _l3705_;
    MOV %r2 i;
    MOV %r3 0;
    GT %r2 %r3;
    JF %r2 _l3706_;
    MOV %r4 2;
    MOV %r5 i;
    EQ %r4 %r5;
    JF %r4 _l3708_;
    MOV %r5 0;
    MOV i %r5;
    MOV %r3 %r5;
    JMP _l3707_;
LABEL _l3708_:
    MOV %r5 i;
    MOV %r6 3;
    SUB %r5 %r6;
    MOV %r6 .e;
    MOV %r7 "lastNeed";
    SET_KEY %r6 %r7 %r5;
    MOV %r3 %r5;
LABEL _l3707_:
LABEL _l3706_:
    MOV %r1 i;
    MOV $RET %r1;
    RET;
    JMP _l3704_;
LABEL _l3705_:
LABEL _l3704_:
    MOV %r0 0;
    MOV $RET %r0;
    RET;
}
func @@f802(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    MOV_THIS %r1;
    MOV %r2 "_id";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    MOV_THIS %r1;
    MOV %r2 "_clearFn";
    SET_KEY %r1 %r2 %r0;
}
func @@f803() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "setTimeout";
    PUSH %r2;
    MOV_CTX %r2 "window";
    PUSH %r2;
    MOV_ARGS %r2;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_CTX %r1 "clearTimeout";
    PUSH %r1;
    CALL_REG @c 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f804() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r2 "setInterval";
    PUSH %r2;
    MOV_CTX %r2 "window";
    PUSH %r2;
    MOV_ARGS %r2;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV_CTX %r1 "clearInterval";
    PUSH %r1;
    CALL_REG @c 2 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f805(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 0 false;
}
func @@f806() {
}
func @@f807() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_CTX %r0 "window";
    PUSH %r0;
    MOV_THIS %r1;
    MOV %r2 "_id";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV_THIS %r2;
    MOV %r3 "_clearFn";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f808(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    MOV %r2 "_idleTimeoutId";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'clearTimeout' 1 false;
    MOV %r0 .t;
    MOV %r1 .e;
    MOV %r2 "_idleTimeout";
    SET_KEY %r1 %r2 %r0;
}
func @@f809(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    MOV %r2 "_idleTimeoutId";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'clearTimeout' 1 false;
    MOV %r0 1;
    MINUS %r0;
    MOV %r1 .e;
    MOV %r2 "_idleTimeout";
    SET_KEY %r1 %r2 %r0;
}
func @@f810(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    MOV %r1 @e;
    MOV %r2 "_idleTimeoutId";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'clearTimeout' 1 false;
    MOV %r0 @e;
    MOV %r1 "_idleTimeout";
    MOV_PROP t %r0 %r1;
    MOV %r0 t;
    MOV %r1 0;
    GE %r0 %r1;
    JF %r0 _l3709_;
    FUNC %r3 @@f1100;
    PUSH %r3;
    MOV %r3 t;
    PUSH %r3;
    CALL_CTX 'setTimeout' 2 false;
    MOV %r2 $RET;
    MOV %r3 @e;
    MOV %r4 "_idleTimeoutId";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3709_:
}
func @@f811(.e) {
    CLS @t;
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    MOV %r0 @u;
    MOV t %r0;
    ADD %r0 1;
    MOV @u %r0;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 2;
    LT %r0 %r1;
    NEG %r0;
    MOV @n %r0;
    JF %r0 _l3710_;
    MOV_ARGS %r2;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    LG_AND @n %r1;
LABEL _l3710_:
    MOV %r1 0;
    NEG %r1;
    MOV %r2 @a;
    MOV %r3 @t;
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f1101;
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f812(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 @a;
    MOV %r1 .e;
    DEL %r0 %r1;
}
func @@f813(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f814(.t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    TRY _l3711_ _l3712_;
    MOV %r1 @e;
    MOV %r2 "localStorage";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l3714_;
    MOV %r1 1;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l3713_;
LABEL _l3714_:
LABEL _l3713_:
    TRY_END;
LABEL _l3711_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r0 1;
    NEG %r0;
    MOV $RET %r0;
    RET;
    END_BLOCK 2;
LABEL _l3712_:
    MOV %r2 @e;
    MOV %r3 "localStorage";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .t;
    MOV_PROP r %r0 %r1;
    MOV %r1 null;
    MOV %r2 r;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3715_;
    MOV %r2 "true";
    MOV %r6 r;
    PUSH %r6;
    CALL_CTX 'String' 1 false;
    MOV %r4 $RET;
    MOV %r5 "toLowerCase";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3715_:
    MOV $RET %r0;
    RET;
}
func @@f815(.e, .t) {
    CLS @n;
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV %r1 "noDeprecation";
    PUSH %r1;
    CALL_REG @r 1 false;
    MOV %r0 $RET;
    JF %r0 _l3717_;
    MOV %r1 @e;
    MOV $RET %r1;
    RET;
    JMP _l3716_;
LABEL _l3717_:
LABEL _l3716_:
    MOV @n 1;
    NEG @n;
    FUNC %r0 @@f1102;
    MOV $RET %r0;
    RET;
}
func @@f816(.e) {
    VAR t;
    CLS @r;
    CLS @n;
    CLS @o;
    VAR s;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @_ 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l3719_;
    NEW_ARR t;
    MOV @r 0;
LABEL _l3720_:
    MOV %r1 @r;
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l3721_;
LABEL _l3723_:
    MOV_ARGS %r4;
    MOV %r5 @r;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @a 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 t;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
LABEL _l3722_:
    MOV %r2 @r;
    ADD %r2 1;
    MOV @r %r2;
    JMP _l3720_;
LABEL _l3721_:
    MOV %r2 " ";
    PUSH %r2;
    MOV %r2 t;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3718_;
LABEL _l3719_:
LABEL _l3718_:
    MOV %r0 1;
    MOV @r %r0;
    MOV_ARGS @n;
    MOV %r0 @n;
    MOV %r1 "length";
    MOV_PROP @o %r0 %r1;
    MOV %r0 @i;
    PUSH %r0;
    FUNC %r0 @@f1103;
    PUSH %r0;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'String' 1 false;
    MOV %r0 $RET;
    MOV %r1 "replace";
    CALL_VAR %r0 %r1 2 false;
    MOV s $RET;
    MOV %r0 @n;
    MOV %r1 @r;
    MOV_PROP u %r0 %r1;
LABEL _l3724_:
    MOV %r0 @r;
    MOV %r1 @o;
    LT %r0 %r1;
    JF %r0 _l3725_;
LABEL _l3727_:
    MOV %r3 u;
    PUSH %r3;
    CALL_REG @b 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l3730_;
    MOV %r4 u;
    PUSH %r4;
    CALL_REG @v 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l3730_:
    JF %r1 _l3729_;
    MOV %r2 " ";
    MOV %r3 u;
    ADD %r2 %r3;
    MOV %r3 s;
    ADD %r3 %r2;
    MOV s %r3;
    JMP _l3728_;
LABEL _l3729_:
    MOV %r2 " ";
    MOV %r4 u;
    PUSH %r4;
    CALL_REG @a 1 false;
    MOV %r3 $RET;
    ADD %r2 %r3;
    MOV %r3 s;
    ADD %r3 %r2;
    MOV s %r3;
LABEL _l3728_:
LABEL _l3726_:
    MOV %r2 @n;
    MOV %r4 @r;
    ADD %r4 1;
    MOV %r3 %r4;
    MOV @r %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV u %r1;
    JMP _l3724_;
LABEL _l3725_:
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f817(.e, .i) {
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CLS @i;
    MOV @i .i;
    MOV %r2 @n;
    MOV %r3 "process";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @y 1 false;
    MOV %r0 $RET;
    JF %r0 _l3732_;
    FUNC %r1 @@f1104;
    MOV $RET %r1;
    RET;
    JMP _l3731_;
LABEL _l3732_:
LABEL _l3731_:
    MOV %r0 0;
    NEG %r0;
    MOV %r2 @t;
    MOV %r3 "noDeprecation";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3734_;
    MOV %r1 @e;
    MOV $RET %r1;
    RET;
    JMP _l3733_;
LABEL _l3734_:
LABEL _l3733_:
    MOV @o 1;
    NEG @o;
    FUNC %r0 @@f1105;
    MOV $RET %r0;
    RET;
}
func @@f818(.e, .t) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    NEW_OBJ n;
    NEW_ARR %r0;
    SET_KEY n 'seen' %r0;
    MOV %r0 @c;
    SET_KEY n 'stylize' %r0;
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 3;
    GE %r1 %r2;
    JF %r1 _l3735_;
    MOV_ARGS %r4;
    MOV %r5 2;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 n;
    MOV %r5 "depth";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3735_:
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 4;
    GE %r1 %r2;
    JF %r1 _l3736_;
    MOV_ARGS %r4;
    MOV %r5 3;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 n;
    MOV %r5 "colors";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3736_:
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @d 1 false;
    MOV %r1 $RET;
    JF %r1 _l3738_;
    MOV %r2 .t;
    MOV %r3 n;
    MOV %r4 "showHidden";
    SET_KEY %r3 %r4 %r2;
    JMP _l3737_;
LABEL _l3738_:
    MOV %r2 .t;
    JF %r2 _l3739_;
    MOV %r4 n;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 @r;
    MOV %r5 "_extend";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
LABEL _l3739_:
LABEL _l3737_:
    MOV %r3 n;
    MOV %r4 "showHidden";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @y 1 false;
    MOV %r1 $RET;
    JF %r1 _l3740_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 n;
    MOV %r5 "showHidden";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3740_:
    MOV %r3 n;
    MOV %r4 "depth";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @y 1 false;
    MOV %r1 $RET;
    JF %r1 _l3741_;
    MOV %r3 2;
    MOV %r4 n;
    MOV %r5 "depth";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3741_:
    MOV %r3 n;
    MOV %r4 "colors";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @y 1 false;
    MOV %r1 $RET;
    JF %r1 _l3742_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 n;
    MOV %r5 "colors";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3742_:
    MOV %r3 n;
    MOV %r4 "customInspect";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @y 1 false;
    MOV %r1 $RET;
    JF %r1 _l3743_;
    MOV %r3 0;
    NEG %r3;
    MOV %r4 n;
    MOV %r5 "customInspect";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3743_:
    MOV %r2 n;
    MOV %r3 "colors";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3744_;
    MOV %r3 @u;
    MOV %r4 n;
    MOV %r5 "stylize";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3744_:
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r2 n;
    MOV %r3 "depth";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @l 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f819(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    MOV %r2 @a;
    MOV %r3 "styles";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .t;
    MOV_PROP r %r0 %r1;
    MOV %r1 r;
    JF %r1 _l3746_;
    MOV %r0 "[";
    MOV %r12 @a;
    MOV %r13 "colors";
    MOV_PROP %r10 %r12 %r13;
    MOV %r11 r;
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 0;
    MOV_PROP %r7 %r8 %r9;
    ADD %r0 %r7;
    MOV %r6 "m";
    ADD %r0 %r6;
    MOV %r5 .e;
    ADD %r0 %r5;
    MOV %r4 "[";
    ADD %r0 %r4;
    MOV %r8 @a;
    MOV %r9 "colors";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 r;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    ADD %r0 %r3;
    MOV %r2 "m";
    ADD %r0 %r2;
    JMP _l3745_;
LABEL _l3746_:
    MOV %r0 .e;
LABEL _l3745_:
    MOV $RET %r0;
    RET;
}
func @@f820(.e, .t) {
    REG %r0;
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f821(.e, .t, .n) {
    VAR i;
    VAR o;
    VAR s;
    CLS @a;
    VAR u;
    VAR c;
    VAR v;
    CLS @x;
    VAR k;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    CLS @n;
    MOV @n .n;
    MOV %r5 @e;
    MOV %r6 "customInspect";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l3752_;
    MOV %r5 @t;
    LG_AND %r3 %r5;
LABEL _l3752_:
    MOV %r2 %r3;
    JF %r3 _l3751_;
    MOV %r6 @t;
    MOV %r7 "inspect";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG @E 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l3751_:
    MOV %r1 %r2;
    JF %r2 _l3750_;
    MOV %r5 @t;
    MOV %r6 "inspect";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 @r;
    MOV %r6 "inspect";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3750_:
    MOV %r0 %r1;
    JF %r1 _l3749_;
    MOV %r4 @t;
    MOV %r5 "constructor";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l3753_;
    MOV %r8 @t;
    MOV %r9 "constructor";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "prototype";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 @t;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3753_:
    LG_AND %r0 %r2;
LABEL _l3749_:
    JF %r0 _l3748_;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "inspect";
    CALL_VAR %r1 %r2 2 false;
    MOV i $RET;
    MOV %r3 i;
    PUSH %r3;
    CALL_REG @_ 1 false;
    MOV %r2 $RET;
    JIF %r2 _l3754_;
    MOV %r5 @e;
    PUSH %r5;
    MOV %r5 i;
    PUSH %r5;
    MOV %r5 @n;
    PUSH %r5;
    CALL_REG @l 3 false;
    MOV %r4 $RET;
    MOV i %r4;
    MOV %r3 %r4;
LABEL _l3754_:
    MOV %r1 i;
    MOV $RET %r1;
    RET;
    JMP _l3747_;
LABEL _l3748_:
LABEL _l3747_:
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    FUNC %r0 @@f1106;
    CALL_REG %r0 2 false;
    MOV o $RET;
    MOV %r0 o;
    JF %r0 _l3756_;
    MOV %r1 o;
    MOV $RET %r1;
    RET;
    JMP _l3755_;
LABEL _l3756_:
LABEL _l3755_:
    MOV %r0 @t;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "keys";
    CALL_VAR %r0 %r1 1 false;
    MOV s $RET;
    MOV %r0 s;
    PUSH %r0;
    FUNC %r0 @@f1107;
    CALL_REG %r0 1 false;
    MOV @a $RET;
    MOV %r2 @e;
    MOV %r3 "showHidden";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3759_;
    MOV %r4 @t;
    PUSH %r4;
    MOV_CTX %r4 "Object";
    MOV %r5 "getOwnPropertyNames";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV s %r3;
    MOV %r2 %r3;
LABEL _l3759_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @S 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l3760_;
    MOV %r5 "message";
    PUSH %r5;
    MOV %r5 s;
    MOV %r6 "indexOf";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 0;
    GE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3761_;
    MOV %r6 "description";
    PUSH %r6;
    MOV %r6 s;
    MOV %r7 "indexOf";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 0;
    GE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3761_:
    LG_AND %r0 %r2;
LABEL _l3760_:
    JF %r0 _l3758_;
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @f 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3757_;
LABEL _l3758_:
LABEL _l3757_:
    MOV %r0 0;
    MOV %r2 s;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l3763_;
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @E 1 false;
    MOV %r1 $RET;
    JF %r1 _l3765_;
    MOV %r3 @t;
    MOV %r4 "name";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3767_;
    MOV u ": ";
    MOV %r4 @t;
    MOV %r5 "name";
    MOV_PROP %r3 %r4 %r5;
    ADD u %r3;
    JMP _l3766_;
LABEL _l3767_:
    MOV u "";
LABEL _l3766_:
    MOV %r3 "[Function";
    MOV %r5 u;
    ADD %r3 %r5;
    MOV %r4 "]";
    ADD %r3 %r4;
    PUSH %r3;
    MOV %r3 "special";
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "stylize";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l3764_;
LABEL _l3765_:
LABEL _l3764_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @m 1 false;
    MOV %r1 $RET;
    JF %r1 _l3769_;
    MOV %r4 @t;
    PUSH %r4;
    MOV_CTX %r8 "RegExp";
    MOV %r9 "prototype";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "toString";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 "regexp";
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "stylize";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l3768_;
LABEL _l3769_:
LABEL _l3768_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @w 1 false;
    MOV %r1 $RET;
    JF %r1 _l3771_;
    MOV %r4 @t;
    PUSH %r4;
    MOV_CTX %r8 "Date";
    MOV %r9 "prototype";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "toString";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 "date";
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "stylize";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l3770_;
LABEL _l3771_:
LABEL _l3770_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @S 1 false;
    MOV %r1 $RET;
    JF %r1 _l3773_;
    MOV %r3 @t;
    PUSH %r3;
    CALL_REG @f 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l3772_;
LABEL _l3773_:
LABEL _l3772_:
    JMP _l3762_;
LABEL _l3763_:
LABEL _l3762_:
    MOV v "";
    MOV @x 1;
    NEG @x;
    NEW_ARR k;
    MOV %r0 "{";
    SET_KEY k 0 %r0;
    MOV %r0 "}";
    SET_KEY k 1 %r0;
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @p 1 false;
    MOV %r1 $RET;
    JF %r1 _l3775_;
    MOV %r3 0;
    NEG %r3;
    MOV @x %r3;
    NEW_ARR %r3;
    MOV %r4 "[";
    SET_KEY %r3 0 %r4;
    MOV %r4 "]";
    SET_KEY %r3 1 %r4;
    MOV k %r3;
    MOV %r2 %r3;
LABEL _l3775_:
    MOV %r1 @t;
    PUSH %r1;
    CALL_REG @E 1 false;
    MOV %r0 $RET;
    JF %r0 _l3774_;
    MOV %r2 " [Function";
    MOV %r6 @t;
    MOV %r7 "name";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3777_;
    MOV %r4 ": ";
    MOV %r7 @t;
    MOV %r8 "name";
    MOV_PROP %r6 %r7 %r8;
    ADD %r4 %r6;
    JMP _l3776_;
LABEL _l3777_:
    MOV %r4 "";
LABEL _l3776_:
    ADD %r2 %r4;
    MOV %r3 "]";
    ADD %r2 %r3;
    MOV v %r2;
    MOV %r1 %r2;
LABEL _l3774_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @m 1 false;
    MOV %r1 $RET;
    JF %r1 _l3778_;
    MOV %r3 " ";
    MOV %r5 @t;
    PUSH %r5;
    MOV_CTX %r9 "RegExp";
    MOV %r10 "prototype";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "toString";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    ADD %r3 %r4;
    MOV v %r3;
    MOV %r2 %r3;
LABEL _l3778_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @w 1 false;
    MOV %r1 $RET;
    JF %r1 _l3779_;
    MOV %r3 " ";
    MOV %r5 @t;
    PUSH %r5;
    MOV_CTX %r9 "Date";
    MOV %r10 "prototype";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "toUTCString";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    ADD %r3 %r4;
    MOV v %r3;
    MOV %r2 %r3;
LABEL _l3779_:
    MOV %r2 @t;
    PUSH %r2;
    CALL_REG @S 1 false;
    MOV %r1 $RET;
    JF %r1 _l3780_;
    MOV %r3 " ";
    MOV %r5 @t;
    PUSH %r5;
    CALL_REG @f 1 false;
    MOV %r4 $RET;
    ADD %r3 %r4;
    MOV v %r3;
    MOV %r2 %r3;
LABEL _l3780_:
    MOV %r2 0;
    MOV %r4 s;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3783_;
    MOV %r4 @x;
    MOV %r3 %r4;
    JF %r4 _l3784_;
    MOV %r5 0;
    MOV %r7 @t;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    WNE %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l3784_:
    LG_OR %r1 %r3;
LABEL _l3783_:
    JF %r1 _l3782_;
    MOV %r2 @n;
    MOV %r3 0;
    LT %r2 %r3;
    JF %r2 _l3786_;
    MOV %r4 @t;
    PUSH %r4;
    CALL_REG @m 1 false;
    MOV %r3 $RET;
    JF %r3 _l3788_;
    MOV %r5 @t;
    PUSH %r5;
    MOV_CTX %r9 "RegExp";
    MOV %r10 "prototype";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "toString";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 "regexp";
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "stylize";
    CALL_VAR %r4 %r5 2 false;
    MOV %r0 $RET;
    JMP _l3787_;
LABEL _l3788_:
    MOV %r4 "[Object]";
    PUSH %r4;
    MOV %r4 "special";
    PUSH %r4;
    MOV %r4 @e;
    MOV %r5 "stylize";
    CALL_VAR %r4 %r5 2 false;
    MOV %r0 $RET;
LABEL _l3787_:
    JMP _l3785_;
LABEL _l3786_:
    MOV %r3 @t;
    PUSH %r3;
    MOV %r5 @e;
    MOV %r6 "seen";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r4 @x;
    JF %r4 _l3790_;
    MOV %r5 @e;
    PUSH %r5;
    MOV %r5 @t;
    PUSH %r5;
    MOV %r5 @n;
    PUSH %r5;
    MOV %r5 @a;
    PUSH %r5;
    MOV %r5 s;
    PUSH %r5;
    FUNC %r5 @@f1108;
    CALL_REG %r5 5 false;
    MOV %r3 $RET;
    JMP _l3789_;
LABEL _l3790_:
    FUNC %r5 @@f1109;
    PUSH %r5;
    MOV %r5 s;
    MOV %r6 "map";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
LABEL _l3789_:
    MOV c %r3;
    MOV %r5 @e;
    MOV %r6 "seen";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "pop";
    CALL_VAR %r3 %r4 0 false;
    MOV %r3 c;
    PUSH %r3;
    MOV %r3 v;
    PUSH %r3;
    MOV %r3 k;
    PUSH %r3;
    FUNC %r3 @@f1110;
    CALL_REG %r3 3 false;
    MOV %r0 $RET;
LABEL _l3785_:
    JMP _l3781_;
LABEL _l3782_:
    MOV %r4 k;
    MOV %r5 0;
    MOV_PROP %r0 %r4 %r5;
    MOV %r3 v;
    ADD %r0 %r3;
    MOV %r3 k;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    ADD %r0 %r2;
LABEL _l3781_:
    MOV $RET %r0;
    RET;
}
func @@f822(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 "[";
    MOV %r3 .e;
    PUSH %r3;
    MOV_CTX %r7 "Error";
    MOV %r8 "prototype";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "toString";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    MOV %r1 "]";
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f823(.e, .t, .r, .n, .i, .o) {
    VAR s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 .i;
    PUSH %r6;
    MOV_CTX %r6 "Object";
    MOV %r7 "getOwnPropertyDescriptor";
    CALL_VAR %r6 %r7 2 false;
    MOV %r5 $RET;
    MOV %r4 %r5;
    JIF %r5 _l3795_;
    NEW_OBJ %r6;
    MOV %r8 .t;
    MOV %r9 .i;
    MOV_PROP %r7 %r8 %r9;
    SET_KEY %r6 'value' %r7;
    LG_OR %r4 %r6;
LABEL _l3795_:
    MOV u %r4;
    MOV %r2 %r4;
    MOV %r3 "get";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3794_;
    MOV %r4 u;
    MOV %r5 "set";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l3797_;
    MOV %r4 "[Getter/Setter]";
    PUSH %r4;
    MOV %r4 "special";
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "stylize";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
    JMP _l3796_;
LABEL _l3797_:
    MOV %r4 "[Getter]";
    PUSH %r4;
    MOV %r4 "special";
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "stylize";
    CALL_VAR %r4 %r5 2 false;
    MOV %r2 $RET;
LABEL _l3796_:
    MOV a %r2;
    JMP _l3793_;
LABEL _l3794_:
    MOV %r3 u;
    MOV %r4 "set";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3798_;
    MOV %r5 "[Setter]";
    PUSH %r5;
    MOV %r5 "special";
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "stylize";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV a %r4;
    MOV %r3 %r4;
LABEL _l3798_:
LABEL _l3793_:
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 .i;
    PUSH %r2;
    CALL_REG @O 2 false;
    MOV %r1 $RET;
    JIF %r1 _l3799_;
    MOV %r3 "[";
    MOV %r5 .i;
    ADD %r3 %r5;
    MOV %r4 "]";
    ADD %r3 %r4;
    MOV s %r3;
    MOV %r2 %r3;
LABEL _l3799_:
    MOV %r1 a;
    JIF %r1 _l3800_;
    MOV %r6 u;
    MOV %r7 "value";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r7 .e;
    MOV %r8 "seen";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "indexOf";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 0;
    LT %r3 %r4;
    JF %r3 _l3802_;
    MOV %r6 "
";
    PUSH %r6;
    MOV %r10 .r;
    PUSH %r10;
    CALL_REG @b 1 false;
    MOV %r9 $RET;
    JF %r9 _l3805_;
    MOV %r10 .e;
    PUSH %r10;
    MOV %r11 u;
    MOV %r12 "value";
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r10 null;
    PUSH %r10;
    CALL_REG @l 3 false;
    MOV %r8 $RET;
    JMP _l3804_;
LABEL _l3805_:
    MOV %r10 .e;
    PUSH %r10;
    MOV %r11 u;
    MOV %r12 "value";
    MOV_PROP %r10 %r11 %r12;
    PUSH %r10;
    MOV %r10 .r;
    MOV %r11 1;
    SUB %r10 %r11;
    PUSH %r10;
    CALL_REG @l 3 false;
    MOV %r8 $RET;
LABEL _l3804_:
    MOV a %r8;
    MOV %r6 %r8;
    MOV %r7 "indexOf";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    MOV %r5 1;
    MINUS %r5;
    GT %r4 %r5;
    MOV %r2 %r4;
    JF %r4 _l3803_;
    MOV %r7 .o;
    JF %r7 _l3807_;
    MOV %r8 2;
    PUSH %r8;
    MOV %r10 "
";
    PUSH %r10;
    FUNC %r12 @@f1111;
    PUSH %r12;
    MOV %r14 "
";
    PUSH %r14;
    MOV %r14 a;
    MOV %r15 "split";
    CALL_VAR %r14 %r15 1 false;
    MOV %r12 $RET;
    MOV %r13 "map";
    CALL_VAR %r12 %r13 1 false;
    MOV %r10 $RET;
    MOV %r11 "join";
    CALL_VAR %r10 %r11 1 false;
    MOV %r8 $RET;
    MOV %r9 "substr";
    CALL_VAR %r8 %r9 1 false;
    MOV %r6 $RET;
    JMP _l3806_;
LABEL _l3807_:
    MOV %r6 "
";
    MOV %r9 "
";
    PUSH %r9;
    FUNC %r11 @@f1112;
    PUSH %r11;
    MOV %r13 "
";
    PUSH %r13;
    MOV %r13 a;
    MOV %r14 "split";
    CALL_VAR %r13 %r14 1 false;
    MOV %r11 $RET;
    MOV %r12 "map";
    CALL_VAR %r11 %r12 1 false;
    MOV %r9 $RET;
    MOV %r10 "join";
    CALL_VAR %r9 %r10 1 false;
    MOV %r8 $RET;
    ADD %r6 %r8;
LABEL _l3806_:
    MOV a %r6;
    MOV %r5 %r6;
    LG_AND %r2 %r5;
LABEL _l3803_:
    JMP _l3801_;
LABEL _l3802_:
    MOV %r5 "[Circular]";
    PUSH %r5;
    MOV %r5 "special";
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "stylize";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV a %r4;
    MOV %r2 %r4;
LABEL _l3801_:
LABEL _l3800_:
    MOV %r1 s;
    PUSH %r1;
    CALL_REG @y 1 false;
    MOV %r0 $RET;
    JF %r0 _l3792_;
    MOV %r2 .o;
    MOV %r1 %r2;
    JF %r2 _l3810_;
    NEW_REG %r4 "^\\d+$" "";
    PUSH %r4;
    MOV %r4 .i;
    MOV %r5 "match";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l3810_:
    JF %r1 _l3809_;
    MOV %r2 a;
    MOV $RET %r2;
    RET;
    JMP _l3808_;
LABEL _l3809_:
LABEL _l3808_:
    NEW_REG %r2 "^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$" "";
    PUSH %r2;
    MOV %r5 "";
    MOV %r6 .i;
    ADD %r5 %r6;
    PUSH %r5;
    MOV_CTX %r5 "JSON";
    MOV %r6 "stringify";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV s %r4;
    MOV %r2 %r4;
    MOV %r3 "match";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l3812_;
    MOV %r3 1;
    PUSH %r3;
    MOV %r5 s;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 2;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 s;
    MOV %r4 "substr";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV s %r2;
    MOV %r3 s;
    PUSH %r3;
    MOV %r3 "name";
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "stylize";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV s %r2;
    JMP _l3811_;
LABEL _l3812_:
    NEW_REG %r3 "(^\"|\"$)" "g";
    PUSH %r3;
    MOV %r3 "'";
    PUSH %r3;
    NEW_REG %r5 "\\\\\"" "g";
    PUSH %r5;
    MOV %r5 "\"";
    PUSH %r5;
    NEW_REG %r7 "'" "g";
    PUSH %r7;
    MOV %r7 "\\'";
    PUSH %r7;
    MOV %r7 s;
    MOV %r8 "replace";
    CALL_VAR %r7 %r8 2 false;
    MOV %r5 $RET;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV s %r2;
    MOV %r3 s;
    PUSH %r3;
    MOV %r3 "string";
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "stylize";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV s %r2;
LABEL _l3811_:
    JMP _l3791_;
LABEL _l3792_:
LABEL _l3791_:
    MOV %r0 s;
    MOV %r2 ": ";
    ADD %r0 %r2;
    MOV %r1 a;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f824(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r1 "Array";
    MOV %r2 "isArray";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f825(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "boolean";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f826(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    MOV %r1 .e;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f827(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "number";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f828(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "string";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f829(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 0;
    VOID %r0;
    MOV %r1 .e;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f830(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @v 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l3813_;
    MOV %r2 "[object RegExp]";
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @x 1 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3813_:
    MOV $RET %r0;
    RET;
}
func @@f831(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 "object";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3814_;
    MOV %r2 null;
    MOV %r3 .e;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3814_:
    MOV $RET %r0;
    RET;
}
func @@f832(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @v 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l3815_;
    MOV %r2 "[object Date]";
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @x 1 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3815_:
    MOV $RET %r0;
    RET;
}
func @@f833(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @v 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l3816_;
    MOV %r3 "[object Error]";
    MOV %r5 .e;
    PUSH %r5;
    CALL_REG @x 1 false;
    MOV %r4 $RET;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3817_;
    MOV %r4 .e;
    MOV_CTX %r5 "Error";
    INST_OF %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3817_:
    LG_AND %r0 %r2;
LABEL _l3816_:
    MOV $RET %r0;
    RET;
}
func @@f834(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "function";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f835(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    PUSH %r1;
    MOV_CTX %r5 "Object";
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "toString";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f836(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    MOV %r2 10;
    LT %r1 %r2;
    JF %r1 _l3819_;
    MOV %r0 "0";
    MOV %r3 10;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "toString";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    JMP _l3818_;
LABEL _l3819_:
    MOV %r2 10;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "toString";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l3818_:
    MOV $RET %r0;
    RET;
}
func @@f837(.e) {
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    CLS @e;
    MOV @e .e;
    MOV %r2 @o;
    PUSH %r2;
    CALL_REG @y 1 false;
    MOV %r1 $RET;
    JF %r1 _l3822_;
    MOV %r7 @t;
    MOV %r8 "env";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "NODE_DEBUG";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l3823_;
    MOV %r5 "";
    LG_OR %r3 %r5;
LABEL _l3823_:
    MOV @o %r3;
    MOV %r2 %r3;
LABEL _l3822_:
    MOV %r2 @e;
    MOV %r3 "toUpperCase";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV @e %r1;
    MOV %r1 @s;
    MOV %r2 @e;
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l3821_;
    MOV %r2 @o;
    PUSH %r2;
    MOV %r4 "\\b";
    MOV %r6 @e;
    ADD %r4 %r6;
    MOV %r5 "\\b";
    ADD %r4 %r5;
    PUSH %r4;
    MOV %r4 "i";
    PUSH %r4;
    CALL_CTX 'RegExp' 2 true;
    MOV %r2 $RET;
    MOV %r3 "test";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l3825_;
    MOV %r2 @t;
    MOV %r3 "pid";
    MOV_PROP @n %r2 %r3;
    FUNC %r2 @@f1113;
    MOV %r3 @s;
    MOV %r4 @e;
    SET_KEY %r3 %r4 %r2;
    JMP _l3824_;
LABEL _l3825_:
    FUNC %r2 @@f1114;
    MOV %r3 @s;
    MOV %r4 @e;
    SET_KEY %r3 %r4 %r2;
LABEL _l3824_:
    JMP _l3820_;
LABEL _l3821_:
LABEL _l3820_:
    MOV %r1 @s;
    MOV %r2 @e;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f838(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    MOV %r1 .e;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f839(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "symbol";
    MOV %r1 .e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f840(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r5 null;
    MOV %r6 .e;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l3830_;
    MOV %r6 "boolean";
    MOV %r7 .e;
    TYPE_OF %r7;
    WEQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l3830_:
    MOV %r3 %r4;
    JIF %r4 _l3829_;
    MOV %r5 "number";
    MOV %r6 .e;
    TYPE_OF %r6;
    WEQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l3829_:
    MOV %r2 %r3;
    JIF %r3 _l3828_;
    MOV %r4 "string";
    MOV %r5 .e;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3828_:
    MOV %r1 %r2;
    JIF %r2 _l3827_;
    MOV %r3 "symbol";
    MOV %r4 .e;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3827_:
    MOV %r0 %r1;
    JIF %r1 _l3826_;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .e;
    EQ %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3826_:
    MOV $RET %r0;
    RET;
}
func @@f841(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV_CTX %r5 "Object";
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "hasOwnProperty";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f842() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "%s - %s";
    PUSH %r0;
    CALL_CTX 'Date' 0 true;
    MOV %r1 $RET;
    MOV e %r1;
    MOV %r2 ":";
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r6 e;
    MOV %r7 "getHours";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @k 1 false;
    MOV %r4 $RET;
    SET_KEY %r2 0 %r4;
    MOV %r6 e;
    MOV %r7 "getMinutes";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @k 1 false;
    MOV %r4 $RET;
    SET_KEY %r2 1 %r4;
    MOV %r6 e;
    MOV %r7 "getSeconds";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @k 1 false;
    MOV %r4 $RET;
    SET_KEY %r2 2 %r4;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV t %r1;
    MOV %r1 " ";
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r4 e;
    MOV %r5 "getDate";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    SET_KEY %r1 0 %r3;
    MOV %r4 @I;
    MOV %r6 e;
    MOV %r7 "getMonth";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r1 1 %r3;
    MOV %r3 t;
    SET_KEY %r1 2 %r3;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 @r;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r3 @r;
    MOV %r4 "format";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 3 false;
}
func @@f843(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .t;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l3833_;
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @v 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l3833_:
    JF %r0 _l3832_;
    MOV %r1 .e;
    MOV $RET %r1;
    RET;
    JMP _l3831_;
LABEL _l3832_:
LABEL _l3831_:
    MOV %r0 .t;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "keys";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV %r0 r;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
LABEL _l3834_:
    MOV %r1 n;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV n %r1;
    JF %r0 _l3835_;
LABEL _l3837_:
    MOV %r2 .t;
    MOV %r5 r;
    MOV %r4 n;
    MOV_PROP %r3 %r5 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .e;
    MOV %r5 r;
    MOV %r4 n;
    MOV_PROP %r3 %r5 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l3834_;
LABEL _l3835_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f844(.e) {
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    FUNC i @@f1115;
    CLS @e;
    MOV @e .e;
    MOV %r1 @e;
    MOV n %r1;
    MOV %r3 n;
    MOV %r4 "prototype";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "create";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r4 i;
    MOV r %r4;
    MOV %r2 %r4;
    MOV %r3 "prototype";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 r;
    MOV %r4 r;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "constructor";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 n;
    MOV %r2 r;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f845(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    CALL_CTX 'String' 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f846(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .r;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3839_;
    MOV %r3 .r;
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3839_:
    JF %r1 _l3838_;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l3838_:
    MOV %r2 .r;
    MOV %r4 .t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "substring";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    MOV %r1 .t;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f847(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "number";
    MOV %r2 .r;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l3840_;
    MOV %r3 0;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l3840_:
    MOV %r1 .r;
    MOV %r4 .t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    ADD %r1 %r3;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GT %r1 %r2;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l3841_;
    MOV %r2 1;
    MINUS %r2;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "indexOf";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3841_:
    MOV $RET %r0;
    RET;
}
func @@f848(.t) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "has";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l3843_;
    MOV n .t;
    MOV %r1 " is an experimental feature. This feature could change at any time";
    ADD n %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "add";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 "ExperimentalWarning";
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "emitWarning";
    CALL_VAR %r1 %r2 2 false;
    JMP _l3842_;
LABEL _l3843_:
LABEL _l3842_:
}
func @@f849() {
}
func @@f850(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_ARR t;
    MOV %r0 .e;
    FORIN r %r0 _l3844_ _l3845_;
LABEL _l3844_:
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    FORIN_END;
LABEL _l3845_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f851(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 @c;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l3847_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @c 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3846_;
LABEL _l3847_:
LABEL _l3846_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "allowHalfOpen";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    JF %r0 _l3848_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .e;
    MOV %r5 "readable";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l3849_;
    MOV %r4 1;
    NEG %r4;
    MOV_THIS %r5;
    MOV %r6 "readable";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3849_:
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .e;
    MOV %r5 "writable";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l3850_;
    MOV %r4 1;
    NEG %r4;
    MOV_THIS %r5;
    MOV %r6 "writable";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3850_:
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .e;
    MOV %r5 "allowHalfOpen";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3851_;
    MOV %r4 1;
    NEG %r4;
    MOV_THIS %r5;
    MOV %r6 "allowHalfOpen";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 "end";
    PUSH %r4;
    MOV %r4 @l;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "once";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l3851_:
LABEL _l3848_:
}
func @@f852() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "ended";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3852_;
    MOV %r2 @f;
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l3852_:
}
func @@f853(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
}
func @@f854() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f855() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r2;
    MOV %r3 "_writableState";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3853_;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "getBuffer";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l3853_:
    MOV $RET %r0;
    RET;
}
func @@f856() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f857() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r2 0;
    VOID %r2;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3855_;
    MOV %r3 0;
    VOID %r3;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3855_:
    MOV %r0 %r1;
    JF %r1 _l3854_;
    MOV_THIS %r6;
    MOV %r7 "_readableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "destroyed";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l3856_;
    MOV_THIS %r7;
    MOV %r8 "_writableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroyed";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l3856_:
    LG_AND %r0 %r2;
LABEL _l3854_:
    MOV $RET %r0;
    RET;
}
func @@f858(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3858_;
    MOV %r2 0;
    VOID %r2;
    MOV_THIS %r4;
    MOV %r5 "_writableState";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3858_:
    JF %r0 _l3857_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3857_:
}
func @@f859(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "listeners";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f860() {
}
func @@f861() {
}
func @@f862(.t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 @i;
    MOV %r0 %r1;
    JIF %r1 _l3859_;
    MOV %r3 "./_stream_duplex";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l3859_:
    MOV @i %r0;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l3860_;
    NEW_OBJ %r2;
    LG_OR %r0 %r2;
LABEL _l3860_:
    MOV .t %r0;
    MOV %r0 "boolean";
    MOV %r1 .n;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l3861_;
    MOV %r2 .r;
    MOV %r3 @i;
    INST_OF %r2 %r3;
    MOV .n %r2;
    MOV %r1 %r2;
LABEL _l3861_:
    MOV %r1 .t;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "objectMode";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .n;
    JF %r0 _l3862_;
    MOV_THIS %r4;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l3863_;
    MOV %r5 .t;
    MOV %r6 "readableObjectMode";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l3863_:
    MOV_THIS %r3;
    MOV %r4 "objectMode";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3862_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 "readableHighWaterMark";
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG @b 4 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "highWaterMark";
    SET_KEY %r1 %r2 %r0;
    CALL_REG @p 0 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "buffer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "pipes";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "pipesCount";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "flowing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "endEmitted";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "reading";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "emittedReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "readableListening";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "resumeScheduled";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "paused";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r2 .t;
    MOV %r3 "emitClose";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "emitClose";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 .t;
    MOV %r3 "defaultEncoding";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3864_;
    MOV %r2 "utf8";
    LG_OR %r0 %r2;
LABEL _l3864_:
    MOV_THIS %r1;
    MOV %r2 "defaultEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "awaitDrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "readingMore";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "decoder";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "encoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .t;
    MOV %r2 "encoding";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3865_;
    MOV %r2 @f;
    JIF %r2 _l3866_;
    MOV %r7 "string_decoder/";
    PUSH %r7;
    CALL_REG @e 1 false;
    MOV %r5 $RET;
    MOV %r6 "StringDecoder";
    MOV_PROP %r4 %r5 %r6;
    MOV @f %r4;
    MOV %r3 %r4;
LABEL _l3866_:
    MOV %r4 .t;
    MOV %r5 "encoding";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @f 1 true;
    MOV %r2 $RET;
    MOV_THIS %r3;
    MOV %r4 "decoder";
    SET_KEY %r3 %r4 %r2;
    MOV %r3 .t;
    MOV %r4 "encoding";
    MOV_PROP %r2 %r3 %r4;
    MOV_THIS %r3;
    MOV %r4 "encoding";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3865_:
}
func @@f863(.t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 @i;
    MOV %r1 %r2;
    JIF %r2 _l3869_;
    MOV %r4 "./_stream_duplex";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l3869_:
    MOV @i %r1;
    MOV_THIS %r0;
    MOV %r1 @x;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l3868_;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @x 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l3867_;
LABEL _l3868_:
LABEL _l3867_:
    MOV_THIS r;
    MOV %r0 @i;
    INST_OF r %r0;
    MOV %r1 .t;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @E 3 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "readable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    JF %r0 _l3870_;
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "read";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3871_;
    MOV %r5 .t;
    MOV %r6 "read";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_read";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l3871_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3872_;
    MOV %r5 .t;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_destroy";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3872_:
LABEL _l3870_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
}
func @@f864(.e, .t, .r, .n, .i) {
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r0 "readableAddChunk";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP s %r0 %r1;
    MOV %r0 null;
    MOV %r1 .t;
    EQ %r0 %r1;
    JF %r0 _l3874_;
    MOV %r1 1;
    NEG %r1;
    MOV %r2 s;
    MOV %r3 "reading";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 s;
    PUSH %r1;
    FUNC %r1 @@f1116;
    CALL_REG %r1 2 false;
    JMP _l3873_;
LABEL _l3874_:
    MOV %r2 .i;
    JIF %r2 _l3876_;
    MOV %r5 s;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    FUNC %r5 @@f1117;
    CALL_REG %r5 2 false;
    MOV %r4 $RET;
    MOV o %r4;
    MOV %r3 %r4;
LABEL _l3876_:
    MOV %r1 o;
    JF %r1 _l3875_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 o;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    JMP _l3873_;
LABEL _l3875_:
    MOV %r4 s;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l3878_;
    MOV %r5 .t;
    MOV %r4 %r5;
    JF %r5 _l3879_;
    MOV %r8 .t;
    MOV %r9 "length";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 0;
    GT %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l3879_:
    LG_OR %r2 %r4;
LABEL _l3878_:
    JF %r2 _l3877_;
    MOV %r6 "string";
    MOV %r7 .t;
    TYPE_OF %r7;
    WEQ %r6 %r7;
    MOV %r5 %r6;
    JIF %r6 _l3884_;
    MOV %r8 s;
    MOV %r9 "objectMode";
    MOV_PROP %r7 %r8 %r9;
    LG_OR %r5 %r7;
LABEL _l3884_:
    MOV %r4 %r5;
    JIF %r5 _l3883_;
    MOV %r8 .t;
    PUSH %r8;
    MOV_CTX %r8 "Object";
    MOV %r9 "getPrototypeOf";
    CALL_VAR %r8 %r9 1 false;
    MOV %r6 $RET;
    MOV %r8 @a;
    MOV %r9 "prototype";
    MOV_PROP %r7 %r8 %r9;
    EQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l3883_:
    JIF %r4 _l3882_;
    MOV %r7 .t;
    PUSH %r7;
    FUNC %r7 @@f1118;
    CALL_REG %r7 1 false;
    MOV %r6 $RET;
    MOV .t %r6;
    MOV %r5 %r6;
LABEL _l3882_:
    MOV %r3 .n;
    JF %r3 _l3881_;
    MOV %r5 s;
    MOV %r6 "endEmitted";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l3886_;
    MOV %r5 "error";
    PUSH %r5;
    CALL_REG @v 0 true;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 2 false;
    JMP _l3885_;
LABEL _l3886_:
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 s;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 0;
    NEG %r5;
    PUSH %r5;
    CALL_REG @I 4 false;
LABEL _l3885_:
    JMP _l3880_;
LABEL _l3881_:
    MOV %r5 s;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l3887_;
    MOV %r5 "error";
    PUSH %r5;
    CALL_REG @y 0 true;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 2 false;
    JMP _l3880_;
LABEL _l3887_:
    MOV %r6 s;
    MOV %r7 "destroyed";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3889_;
    MOV %r6 1;
    NEG %r6;
    MOV $RET %r6;
    RET;
    JMP _l3888_;
LABEL _l3889_:
LABEL _l3888_:
    MOV %r5 1;
    NEG %r5;
    MOV %r6 s;
    MOV %r7 "reading";
    SET_KEY %r6 %r7 %r5;
    MOV %r7 s;
    MOV %r8 "decoder";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    JF %r6 _l3892_;
    MOV %r7 .r;
    NEG %r7;
    LG_AND %r5 %r7;
LABEL _l3892_:
    JF %r5 _l3891_;
    MOV %r7 .t;
    PUSH %r7;
    MOV %r9 s;
    MOV %r10 "decoder";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "write";
    CALL_VAR %r7 %r8 1 false;
    MOV %r6 $RET;
    MOV .t %r6;
    MOV %r8 s;
    MOV %r9 "objectMode";
    MOV_PROP %r7 %r8 %r9;
    MOV %r6 %r7;
    JIF %r7 _l3895_;
    MOV %r8 0;
    MOV %r10 .t;
    MOV %r11 "length";
    MOV_PROP %r9 %r10 %r11;
    NE %r8 %r9;
    LG_OR %r6 %r8;
LABEL _l3895_:
    JF %r6 _l3894_;
    MOV %r7 .e;
    PUSH %r7;
    MOV %r7 s;
    PUSH %r7;
    MOV %r7 .t;
    PUSH %r7;
    MOV %r7 1;
    NEG %r7;
    PUSH %r7;
    CALL_REG @I 4 false;
    JMP _l3893_;
LABEL _l3894_:
    MOV %r7 .e;
    PUSH %r7;
    MOV %r7 s;
    PUSH %r7;
    CALL_REG @R 2 false;
LABEL _l3893_:
    JMP _l3890_;
LABEL _l3891_:
    MOV %r6 .e;
    PUSH %r6;
    MOV %r6 s;
    PUSH %r6;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 1;
    NEG %r6;
    PUSH %r6;
    CALL_REG @I 4 false;
LABEL _l3890_:
LABEL _l3880_:
    JMP _l3873_;
LABEL _l3877_:
    MOV %r3 .n;
    JIF %r3 _l3896_;
    MOV %r5 1;
    NEG %r5;
    MOV %r6 s;
    MOV %r7 "reading";
    SET_KEY %r6 %r7 %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 s;
    PUSH %r5;
    CALL_REG @R 2 false;
    MOV %r4 $RET;
LABEL _l3896_:
LABEL _l3873_:
    MOV %r2 s;
    MOV %r3 "ended";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l3897_;
    MOV %r5 s;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 s;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3898_;
    MOV %r4 0;
    MOV %r6 s;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l3898_:
    LG_AND %r0 %r2;
LABEL _l3897_:
    MOV $RET %r0;
    RET;
}
func @@f865(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 .t;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l3902_;
    MOV %r3 0;
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l3902_:
    MOV %r0 %r1;
    JF %r1 _l3901_;
    MOV %r3 .t;
    MOV %r4 "sync";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3901_:
    JF %r0 _l3900_;
    MOV %r1 0;
    MOV %r2 .t;
    MOV %r3 "awaitDrain";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "data";
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    JMP _l3899_;
LABEL _l3900_:
    MOV %r3 .t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3904_;
    MOV %r1 1;
    JMP _l3903_;
LABEL _l3904_:
    MOV %r3 .r;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
LABEL _l3903_:
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV %r3 .t;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 .n;
    JF %r1 _l3906_;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 .t;
    MOV %r5 "buffer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "unshift";
    CALL_VAR %r2 %r3 1 false;
    JMP _l3905_;
LABEL _l3906_:
    MOV %r2 .r;
    PUSH %r2;
    MOV %r4 .t;
    MOV %r5 "buffer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
LABEL _l3905_:
    MOV %r2 .t;
    MOV %r3 "needReadable";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3907_;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @j 1 false;
    MOV %r2 $RET;
LABEL _l3907_:
LABEL _l3899_:
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @R 2 false;
}
func @@f866() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3908_;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l3908_:
    MOV $RET %r0;
    RET;
}
func @@f867(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l3909_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l3909_:
}
func @@f868(.e, .t) {
    REG %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG .t 1 false;
}
func @@f869(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP n %r0 %r1;
    MOV %r2 n;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l3911_;
    MOV %r2 0;
    NEG %r2;
    MOV r %r2;
    JMP _l3910_;
LABEL _l3911_:
    MOV %r2 "string";
    MOV %r3 .e;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l3912_;
    MOV %r7 .t;
    MOV %r6 %r7;
    JIF %r7 _l3914_;
    MOV %r9 n;
    MOV %r10 "defaultEncoding";
    MOV_PROP %r8 %r9 %r10;
    LG_OR %r6 %r8;
LABEL _l3914_:
    MOV .t %r6;
    MOV %r4 %r6;
    MOV %r6 n;
    MOV %r7 "encoding";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    JF %r4 _l3913_;
    MOV %r7 .e;
    PUSH %r7;
    MOV %r7 .t;
    PUSH %r7;
    MOV %r7 @a;
    MOV %r8 "from";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    MOV .e %r6;
    MOV %r6 "";
    MOV .t %r6;
    MOV %r5 %r6;
LABEL _l3913_:
    MOV %r4 0;
    NEG %r4;
    MOV r %r4;
    MOV %r3 %r4;
LABEL _l3912_:
LABEL _l3910_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @k 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f870(.e) {
    REG %r0;
    REG %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    CALL_REG @k 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f871() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f872(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 @f;
    JIF %r1 _l3915_;
    MOV %r6 "string_decoder/";
    PUSH %r6;
    CALL_REG @e 1 false;
    MOV %r4 $RET;
    MOV %r5 "StringDecoder";
    MOV_PROP %r3 %r4 %r5;
    MOV @f %r3;
    MOV %r2 %r3;
LABEL _l3915_:
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @f 1 true;
    MOV %r1 $RET;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "decoder";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r6;
    MOV %r7 "_readableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "decoder";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "encoding";
    MOV_PROP %r1 %r2 %r3;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "encoding";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f873(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    MOV %r2 .e;
    MOV %r3 0;
    LE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3918_;
    MOV %r4 0;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l3919_;
    MOV %r6 .t;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l3919_:
    LG_OR %r1 %r3;
LABEL _l3918_:
    JF %r1 _l3917_;
    MOV %r0 0;
    JMP _l3916_;
LABEL _l3917_:
    MOV %r3 .t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3920_;
    MOV %r0 1;
    JMP _l3916_;
LABEL _l3920_:
    MOV %r3 .e;
    MOV %r4 .e;
    WNE %r3 %r4;
    JF %r3 _l3921_;
    MOV %r6 .t;
    MOV %r7 "flowing";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JF %r5 _l3924_;
    MOV %r7 .t;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    LG_AND %r4 %r6;
LABEL _l3924_:
    JF %r4 _l3923_;
    MOV %r11 .t;
    MOV %r12 "buffer";
    MOV_PROP %r9 %r11 %r12;
    MOV %r10 "head";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "data";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r0 %r5 %r6;
    JMP _l3922_;
LABEL _l3923_:
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r0 %r5 %r6;
LABEL _l3922_:
    JMP _l3916_;
LABEL _l3921_:
    MOV %r4 .e;
    MOV %r6 .t;
    MOV %r7 "highWaterMark";
    MOV_PROP %r5 %r6 %r7;
    GT %r4 %r5;
    JF %r4 _l3925_;
    MOV %r7 .e;
    PUSH %r7;
    FUNC %r7 @@f1119;
    CALL_REG %r7 1 false;
    MOV %r6 $RET;
    MOV %r7 .t;
    MOV %r8 "highWaterMark";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l3925_:
    MOV %r4 .e;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    LE %r4 %r5;
    JF %r4 _l3927_;
    MOV %r0 .e;
    JMP _l3926_;
LABEL _l3927_:
    MOV %r6 .t;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3928_;
    MOV %r6 .t;
    MOV %r7 "length";
    MOV_PROP %r0 %r6 %r7;
    JMP _l3926_;
LABEL _l3928_:
    MOV %r6 0;
    NEG %r6;
    MOV %r7 .t;
    MOV %r8 "needReadable";
    SET_KEY %r7 %r8 %r6;
    MOV %r0 0;
LABEL _l3926_:
LABEL _l3916_:
    MOV $RET %r0;
    RET;
}
func @@f874(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 t;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 t;
    MOV %r2 "emittedReadable";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3929_;
    MOV %r2 "emitReadable";
    PUSH %r2;
    MOV %r3 t;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c 2 false;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "emittedReadable";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @A;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l3929_:
}
func @@f875(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 "emitReadable_";
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "destroyed";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "ended";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c 4 false;
    MOV %r2 t;
    MOV %r3 "destroyed";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3931_;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l3932_;
    MOV %r5 t;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l3932_:
    LG_OR %r0 %r2;
LABEL _l3931_:
    JIF %r0 _l3930_;
    MOV %r2 "readable";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3930_:
    MOV %r3 t;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l3934_;
    MOV %r4 t;
    MOV %r5 "ended";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l3934_:
    MOV %r0 %r1;
    JF %r1 _l3933_;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "highWaterMark";
    MOV_PROP %r3 %r4 %r5;
    LE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3933_:
    MOV %r1 t;
    MOV %r2 "needReadable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @B 1 false;
}
func @@f876(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 "readingMore";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3935_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "readingMore";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @M;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l3935_:
}
func @@f877(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    BLOCK 1;
LABEL _l3936_:
    MOV %r3 .t;
    MOV %r4 "reading";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    MOV %r1 %r2;
    JF %r2 _l3941_;
    MOV %r4 .t;
    MOV %r5 "ended";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l3941_:
    MOV %r0 %r1;
    JF %r1 _l3940_;
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 .t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l3942_;
    MOV %r6 .t;
    MOV %r7 "flowing";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JF %r5 _l3943_;
    MOV %r6 0;
    MOV %r8 .t;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    EQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l3943_:
    LG_OR %r2 %r4;
LABEL _l3942_:
    LG_AND %r0 %r2;
LABEL _l3940_:
    JF %r0 _l3937_;
LABEL _l3939_:
    MOV %r1 .t;
    MOV %r2 "length";
    MOV_PROP r %r1 %r2;
    MOV %r2 "maybeReadMore read 0";
    PUSH %r2;
    CALL_REG @c 1 false;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 r;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l3945_;
    CLR_BLOCK 1;
    JMP _l3937_;
    JMP _l3944_;
LABEL _l3945_:
LABEL _l3944_:
    JMP _l3936_;
LABEL _l3937_:
    END_BLOCK 1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "readingMore";
    SET_KEY %r1 %r2 %r0;
}
func @@f878(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r2 "readable";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "listenerCount";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 0;
    GT %r0 %r1;
    MOV %r1 t;
    MOV %r2 "readableListening";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 t;
    MOV %r3 "resumeScheduled";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3948_;
    MOV %r3 t;
    MOV %r4 "paused";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3948_:
    JF %r0 _l3947_;
    MOV %r1 0;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "flowing";
    SET_KEY %r2 %r3 %r1;
    JMP _l3946_;
LABEL _l3947_:
    MOV %r3 "data";
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "listenerCount";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 0;
    GT %r1 %r2;
    JF %r1 _l3949_;
    MOV %r3 .e;
    MOV %r4 "resume";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l3949_:
LABEL _l3946_:
}
func @@f879(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "readable nexttick read 0";
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV %r0 0;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "read";
    CALL_VAR %r0 %r1 1 false;
}
func @@f880(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 "resume";
    PUSH %r0;
    MOV %r1 .t;
    MOV %r2 "reading";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r1 .t;
    MOV %r2 "reading";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3950_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3950_:
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "resumeScheduled";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "resume";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @B 1 false;
    MOV %r2 .t;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3952_;
    MOV %r3 .t;
    MOV %r4 "reading";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l3952_:
    JF %r0 _l3951_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3951_:
}
func @@f881(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 "flow";
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "flowing";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c 2 false;
LABEL _l3953_:
    MOV %r2 t;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l3957_;
    MOV %r2 null;
    MOV %r4 .e;
    MOV %r5 "read";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l3957_:
    JF %r0 _l3954_;
LABEL _l3956_:
    JMP _l3953_;
LABEL _l3954_:
}
func @@f882(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r1 0;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l3959_;
    MOV %r0 null;
    JMP _l3958_;
LABEL _l3959_:
    MOV %r3 .t;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l3961_;
    MOV %r6 .t;
    MOV %r7 "buffer";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "shift";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV r %r3;
    JMP _l3960_;
LABEL _l3961_:
    MOV %r4 .e;
    NEG %r4;
    MOV %r3 %r4;
    JIF %r4 _l3963_;
    MOV %r5 .e;
    MOV %r7 .t;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    GE %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l3963_:
    JF %r3 _l3962_;
    MOV %r6 .t;
    MOV %r7 "decoder";
    MOV_PROP %r5 %r6 %r7;
    JF %r5 _l3965_;
    MOV %r6 "";
    PUSH %r6;
    MOV %r8 .t;
    MOV %r9 "buffer";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "join";
    CALL_VAR %r6 %r7 1 false;
    MOV %r4 $RET;
    JMP _l3964_;
LABEL _l3965_:
    MOV %r6 1;
    MOV %r10 .t;
    MOV %r11 "buffer";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    EQ %r6 %r7;
    JF %r6 _l3966_;
    MOV %r9 .t;
    MOV %r10 "buffer";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "first";
    CALL_VAR %r7 %r8 0 false;
    MOV %r4 $RET;
    JMP _l3964_;
LABEL _l3966_:
    MOV %r8 .t;
    MOV %r9 "length";
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    MOV %r9 .t;
    MOV %r10 "buffer";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "concat";
    CALL_VAR %r7 %r8 1 false;
    MOV %r4 $RET;
LABEL _l3964_:
    MOV r %r4;
    MOV %r6 .t;
    MOV %r7 "buffer";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "clear";
    CALL_VAR %r4 %r5 0 false;
    JMP _l3960_;
LABEL _l3962_:
    MOV %r5 .e;
    PUSH %r5;
    MOV %r6 .t;
    MOV %r7 "decoder";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV %r7 .t;
    MOV %r8 "buffer";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "consume";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV r %r4;
LABEL _l3960_:
    MOV %r0 r;
LABEL _l3958_:
    MOV $RET %r0;
    RET;
}
func @@f883(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 "endReadable";
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "endEmitted";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r1 t;
    MOV %r2 "endEmitted";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l3967_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "ended";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @D;
    PUSH %r2;
    MOV %r2 t;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l3967_:
}
func @@f884(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "endReadableNT";
    PUSH %r0;
    MOV %r1 .e;
    MOV %r2 "endEmitted";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c 3 false;
    MOV %r2 .e;
    MOV %r3 "endEmitted";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l3969_;
    MOV %r2 0;
    MOV %r4 .e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l3969_:
    JIF %r0 _l3968_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .e;
    MOV %r4 "endEmitted";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "readable";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "end";
    PUSH %r2;
    MOV %r2 .t;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l3968_:
}
func @@f885(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV r 0;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP n %r0 %r1;
LABEL _l3970_:
    MOV %r0 r;
    MOV %r1 n;
    LT %r0 %r1;
    JF %r0 _l3971_;
LABEL _l3973_:
    MOV %r3 .e;
    MOV %r4 r;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 .t;
    EQ %r1 %r2;
    JF %r1 _l3975_;
    MOV %r2 r;
    MOV $RET %r2;
    RET;
    JMP _l3974_;
LABEL _l3975_:
LABEL _l3974_:
LABEL _l3972_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l3970_;
LABEL _l3971_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f886(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 "read";
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 10;
    PUSH %r1;
    CALL_CTX 'parseInt' 2 false;
    MOV %r0 $RET;
    MOV .e %r0;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV r .e;
    MOV %r1 0;
    MOV %r2 .e;
    NE %r1 %r2;
    JF %r1 _l3978_;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 t;
    MOV %r5 "emittedReadable";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l3978_:
    MOV %r2 0;
    MOV %r3 .e;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l3980_;
    MOV %r4 t;
    MOV %r5 "needReadable";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l3980_:
    MOV %r0 %r1;
    JF %r1 _l3979_;
    MOV %r4 0;
    MOV %r6 t;
    MOV %r7 "highWaterMark";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    JF %r4 _l3983_;
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
    MOV %r6 t;
    MOV %r7 "highWaterMark";
    MOV_PROP %r5 %r6 %r7;
    GE %r3 %r5;
    JMP _l3982_;
LABEL _l3983_:
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
    MOV %r5 0;
    GT %r3 %r5;
LABEL _l3982_:
    MOV %r2 %r3;
    JIF %r3 _l3981_;
    MOV %r5 t;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l3981_:
    LG_AND %r0 %r2;
LABEL _l3979_:
    JF %r0 _l3977_;
    MOV %r2 "read: emitReadable";
    PUSH %r2;
    MOV %r3 t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r3 t;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c 3 false;
    MOV %r3 0;
    MOV %r5 t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l3986_;
    MOV %r5 t;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l3986_:
    JF %r2 _l3985_;
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @U 1 false;
    JMP _l3984_;
LABEL _l3985_:
    MOV_THIS %r3;
    PUSH %r3;
    CALL_REG @j 1 false;
LABEL _l3984_:
    MOV %r1 null;
    MOV $RET %r1;
    RET;
    JMP _l3976_;
LABEL _l3977_:
LABEL _l3976_:
    MOV %r1 0;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 t;
    PUSH %r4;
    CALL_REG @T 2 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l3989_;
    MOV %r3 t;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l3989_:
    JF %r0 _l3988_;
    MOV %r2 0;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l3990_;
    MOV_THIS %r4;
    PUSH %r4;
    CALL_REG @U 1 false;
    MOV %r3 $RET;
LABEL _l3990_:
    MOV %r1 null;
    MOV $RET %r1;
    RET;
    JMP _l3987_;
LABEL _l3988_:
LABEL _l3987_:
    MOV %r0 t;
    MOV %r1 "needReadable";
    MOV_PROP i %r0 %r1;
    MOV %r1 "need readable";
    PUSH %r1;
    MOV %r1 i;
    PUSH %r1;
    CALL_REG @c 2 false;
    MOV %r2 0;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l3992_;
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r3 %r6 %r7;
    MOV %r5 .e;
    SUB %r3 %r5;
    MOV %r5 t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l3992_:
    JF %r1 _l3991_;
    MOV %r3 "length less than watermark";
    PUSH %r3;
    MOV %r4 0;
    NEG %r4;
    MOV i %r4;
    MOV %r3 %r4;
    PUSH %r3;
    CALL_REG @c 2 false;
    MOV %r2 $RET;
LABEL _l3991_:
    MOV %r3 t;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l3995_;
    MOV %r4 t;
    MOV %r5 "reading";
    MOV_PROP %r3 %r4 %r5;
    LG_OR %r1 %r3;
LABEL _l3995_:
    JF %r1 _l3994_;
    MOV %r2 "reading or ended";
    PUSH %r2;
    MOV %r3 1;
    NEG %r3;
    MOV i %r3;
    MOV %r2 %r3;
    PUSH %r2;
    CALL_REG @c 2 false;
    JMP _l3993_;
LABEL _l3994_:
    MOV %r2 i;
    JF %r2 _l3996_;
    MOV %r4 "do read";
    PUSH %r4;
    CALL_REG @c 1 false;
    MOV %r4 0;
    NEG %r4;
    MOV %r5 t;
    MOV %r6 "reading";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    NEG %r4;
    MOV %r5 t;
    MOV %r6 "sync";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    MOV %r6 t;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    JF %r4 _l3997_;
    MOV %r6 0;
    NEG %r6;
    MOV %r7 t;
    MOV %r8 "needReadable";
    SET_KEY %r7 %r8 %r6;
    MOV %r5 %r6;
LABEL _l3997_:
    MOV %r5 t;
    MOV %r6 "highWaterMark";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "_read";
    CALL_VAR %r4 %r5 1 false;
    MOV %r4 1;
    NEG %r4;
    MOV %r5 t;
    MOV %r6 "sync";
    SET_KEY %r5 %r6 %r4;
    MOV %r5 t;
    MOV %r6 "reading";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l3998_;
    MOV %r7 r;
    PUSH %r7;
    MOV %r7 t;
    PUSH %r7;
    CALL_REG @T 2 false;
    MOV %r6 $RET;
    MOV .e %r6;
    MOV %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l3998_:
LABEL _l3996_:
LABEL _l3993_:
    MOV %r1 null;
    MOV %r4 .e;
    MOV %r5 0;
    GT %r4 %r5;
    JF %r4 _l4002_;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 t;
    PUSH %r5;
    CALL_REG @N 2 false;
    MOV %r3 $RET;
    JMP _l4001_;
LABEL _l4002_:
    MOV %r3 null;
LABEL _l4001_:
    MOV n %r3;
    MOV %r2 %r3;
    EQ %r1 %r2;
    JF %r1 _l4000_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "needReadable";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 0;
    MOV .e %r2;
    JMP _l3999_;
LABEL _l4000_:
    MOV %r2 .e;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 %r2;
    MOV %r4 t;
    MOV %r5 "length";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 0;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    SET_KEY %r3 %r4 %r2;
LABEL _l3999_:
    MOV %r1 0;
    MOV %r3 t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    JF %r1 _l4003_;
    MOV %r4 t;
    MOV %r5 "ended";
    MOV_PROP %r3 %r4 %r5;
    JIF %r3 _l4004_;
    MOV %r5 0;
    NEG %r5;
    MOV %r6 t;
    MOV %r7 "needReadable";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l4004_:
    MOV %r4 r;
    MOV %r5 .e;
    NE %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l4006_;
    MOV %r6 t;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l4006_:
    MOV %r2 %r3;
    JF %r3 _l4005_;
    MOV_THIS %r5;
    PUSH %r5;
    CALL_REG @U 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l4005_:
LABEL _l4003_:
    MOV %r1 null;
    MOV %r2 n;
    NE %r1 %r2;
    JF %r1 _l4007_;
    MOV %r3 "data";
    PUSH %r3;
    MOV %r3 n;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l4007_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f887(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r1 "_read()";
    PUSH %r1;
    CALL_REG @m 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f888(.e, .t) {
    CLS @n;
    CLS @i;
    VAR s;
    CLS @a;
    CLS @u;
    CLS @l;
    CLS @f;
    CLS @h;
    CLS @p;
    CLS @d;
    CLS @b;
    CLS @g;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    FUNC @a @@f1120;
    FUNC @u @@f1121;
    FUNC @h @@f1123;
    FUNC @p @@f1124;
    FUNC @d @@f1125;
    FUNC @b @@f1126;
    FUNC @g @@f1127;
    CLS @e;
    MOV @e .e;
    MOV_THIS @n;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP @i %r0 %r1;
    BLOCK 1;
    MOV %r1 @i;
    MOV %r2 "pipesCount";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 0;
    JE %r0 %r1 _l4009_;
    JMP _l4010_;
LABEL _l4009_:
    MOV %r2 @e;
    MOV %r3 @i;
    MOV %r4 "pipes";
    SET_KEY %r3 %r4 %r2;
    CLR_BLOCK 1;
    JMP _l4008_;
    JMP _l4011_;
LABEL _l4010_:
    MOV %r2 1;
    JE %r0 %r2 _l4011_;
    JMP _l4012_;
LABEL _l4011_:
    NEW_ARR %r3;
    MOV %r5 @i;
    MOV %r6 "pipes";
    MOV_PROP %r4 %r5 %r6;
    SET_KEY %r3 0 %r4;
    MOV %r4 @e;
    SET_KEY %r3 1 %r4;
    MOV %r4 @i;
    MOV %r5 "pipes";
    SET_KEY %r4 %r5 %r3;
    CLR_BLOCK 1;
    JMP _l4008_;
    JMP _l4013_;
LABEL _l4012_:
LABEL _l4013_:
    MOV %r3 @e;
    PUSH %r3;
    MOV %r5 @i;
    MOV %r6 "pipes";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l4015_;
LABEL _l4014_:
LABEL _l4015_:
LABEL _l4008_:
    END_BLOCK 1;
    MOV %r0 1;
    MOV %r2 @i;
    MOV %r3 "pipesCount";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV %r2 @i;
    MOV %r3 "pipesCount";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 "pipe count=%d opts=%j";
    PUSH %r0;
    MOV %r1 @i;
    MOV %r2 "pipesCount";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @c 3 false;
    MOV %r3 .t;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l4020_;
    MOV %r4 1;
    NEG %r4;
    MOV %r6 .t;
    MOV %r7 "end";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l4020_:
    MOV %r1 %r2;
    JF %r2 _l4019_;
    MOV %r3 @e;
    MOV %r5 @r;
    MOV %r6 "stdout";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4019_:
    MOV %r0 %r1;
    JF %r1 _l4018_;
    MOV %r2 @e;
    MOV %r4 @r;
    MOV %r5 "stderr";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4018_:
    JF %r0 _l4017_;
    MOV s @u;
    JMP _l4016_;
LABEL _l4017_:
    MOV s @g;
LABEL _l4016_:
    MOV %r1 @i;
    MOV %r2 "endEmitted";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4022_;
    MOV %r1 s;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4021_;
LABEL _l4022_:
    MOV %r1 "end";
    PUSH %r1;
    MOV %r1 s;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
LABEL _l4021_:
    MOV %r0 "unpipe";
    PUSH %r0;
    MOV %r0 @a;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 @n;
    PUSH %r0;
    FUNC %r0 @@f1122;
    CALL_REG %r0 1 false;
    MOV @l $RET;
    MOV %r0 "drain";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV @f 1;
    NEG @f;
    MOV %r1 "data";
    PUSH %r1;
    MOV %r1 @h;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 @p;
    PUSH %r1;
    FUNC %r1 @@f1128;
    CALL_REG %r1 3 false;
    MOV %r1 "close";
    PUSH %r1;
    MOV %r1 @d;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "finish";
    PUSH %r1;
    MOV %r1 @b;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "once";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "pipe";
    PUSH %r1;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    MOV %r2 @i;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l4023_;
    MOV %r3 "pipe resume";
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r3 @n;
    MOV %r4 "resume";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l4023_:
    MOV %r0 @e;
    MOV $RET %r0;
    RET;
}
func @@f889(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    NEW_OBJ r;
    MOV %r0 1;
    NEG %r0;
    SET_KEY r 'hasUnpiped' %r0;
    MOV %r0 0;
    MOV %r2 t;
    MOV %r3 "pipesCount";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4025_;
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l4024_;
LABEL _l4025_:
LABEL _l4024_:
    MOV %r0 1;
    MOV %r2 t;
    MOV %r3 "pipesCount";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4027_;
    MOV %r3 .e;
    MOV %r2 %r3;
    JF %r3 _l4030_;
    MOV %r4 .e;
    MOV %r6 t;
    MOV %r7 "pipes";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l4030_:
    JF %r2 _l4029_;
    MOV_THIS %r1;
    JMP _l4028_;
LABEL _l4029_:
    MOV %r3 .e;
    JIF %r3 _l4031_;
    MOV %r6 t;
    MOV %r7 "pipes";
    MOV_PROP %r5 %r6 %r7;
    MOV .e %r5;
    MOV %r4 %r5;
LABEL _l4031_:
    MOV %r3 null;
    MOV %r4 t;
    MOV %r5 "pipes";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 1;
    NEG %r3;
    MOV %r4 t;
    MOV %r5 "flowing";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 .e;
    JF %r3 _l4032_;
    MOV %r5 "unpipe";
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 r;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
LABEL _l4032_:
    MOV_THIS %r1;
LABEL _l4028_:
    MOV $RET %r1;
    RET;
    JMP _l4026_;
LABEL _l4027_:
LABEL _l4026_:
    MOV %r0 .e;
    NEG %r0;
    JF %r0 _l4034_;
    MOV %r1 t;
    MOV %r2 "pipes";
    MOV_PROP n %r1 %r2;
    MOV %r1 t;
    MOV %r2 "pipesCount";
    MOV_PROP i %r1 %r2;
    MOV %r1 null;
    MOV %r2 t;
    MOV %r3 "pipes";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 0;
    MOV %r2 t;
    MOV %r3 "pipesCount";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    NEG %r1;
    MOV %r2 t;
    MOV %r3 "flowing";
    SET_KEY %r2 %r3 %r1;
    MOV o 0;
LABEL _l4035_:
    MOV %r1 o;
    MOV %r2 i;
    LT %r1 %r2;
    JF %r1 _l4036_;
LABEL _l4038_:
    MOV %r2 "unpipe";
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'hasUnpiped' %r3;
    PUSH %r2;
    MOV %r4 n;
    MOV %r5 o;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 3 false;
LABEL _l4037_:
    MOV %r2 o;
    ADD %r2 1;
    MOV o %r2;
    JMP _l4035_;
LABEL _l4036_:
    MOV_THIS %r1;
    MOV $RET %r1;
    RET;
    JMP _l4033_;
LABEL _l4034_:
LABEL _l4033_:
    MOV %r1 t;
    MOV %r2 "pipes";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @q 2 false;
    MOV s $RET;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 s;
    EQ %r1 %r2;
    JF %r1 _l4040_;
    MOV_THIS %r0;
    JMP _l4039_;
LABEL _l4040_:
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 1;
    PUSH %r2;
    MOV %r4 t;
    MOV %r5 "pipes";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "splice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 1;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 %r2;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 1;
    MOV %r4 t;
    MOV %r5 "pipesCount";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4041_;
    MOV %r7 t;
    MOV %r8 "pipes";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 0;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 t;
    MOV %r6 "pipes";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l4041_:
    MOV %r2 "unpipe";
    PUSH %r2;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 3 false;
    MOV_THIS %r0;
LABEL _l4039_:
    MOV $RET %r0;
    RET;
}
func @@f890(.e, .t) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r4 @s;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "on";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
    MOV n $RET;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP i %r0 %r1;
    MOV %r1 "data";
    MOV %r2 .e;
    EQ %r1 %r2;
    JF %r1 _l4043_;
    MOV %r4 "readable";
    PUSH %r4;
    MOV_THIS %r4;
    MOV %r5 "listenerCount";
    CALL_VAR %r4 %r5 1 false;
    MOV %r2 $RET;
    MOV %r3 0;
    GT %r2 %r3;
    MOV %r3 i;
    MOV %r4 "readableListening";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 i;
    MOV %r5 "flowing";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    JF %r2 _l4044_;
    MOV_THIS %r4;
    MOV %r5 "resume";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
LABEL _l4044_:
    JMP _l4042_;
LABEL _l4043_:
    MOV %r2 "readable";
    MOV %r3 .e;
    EQ %r2 %r3;
    JF %r2 _l4045_;
    MOV %r6 i;
    MOV %r7 "endEmitted";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l4047_;
    MOV %r7 i;
    MOV %r8 "readableListening";
    MOV_PROP %r6 %r7 %r8;
    LG_OR %r4 %r6;
LABEL _l4047_:
    MOV %r3 %r4;
    JIF %r4 _l4046_;
    MOV %r7 0;
    NEG %r7;
    MOV %r8 i;
    MOV %r9 "needReadable";
    SET_KEY %r8 %r9 %r7;
    MOV %r6 %r7;
    MOV %r7 i;
    MOV %r8 "readableListening";
    SET_KEY %r7 %r8 %r6;
    MOV %r6 1;
    NEG %r6;
    MOV %r7 i;
    MOV %r8 "flowing";
    SET_KEY %r7 %r8 %r6;
    MOV %r6 1;
    NEG %r6;
    MOV %r7 i;
    MOV %r8 "emittedReadable";
    SET_KEY %r7 %r8 %r6;
    MOV %r6 "on readable";
    PUSH %r6;
    MOV %r7 i;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r7 i;
    MOV %r8 "reading";
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    CALL_REG @c 3 false;
    MOV %r7 i;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    JF %r6 _l4049_;
    MOV_THIS %r7;
    PUSH %r7;
    CALL_REG @j 1 false;
    MOV %r5 $RET;
    JMP _l4048_;
LABEL _l4049_:
    MOV %r8 i;
    MOV %r9 "reading";
    MOV_PROP %r7 %r8 %r9;
    MOV %r5 %r7;
    JIF %r7 _l4050_;
    MOV %r9 @C;
    PUSH %r9;
    MOV_THIS %r9;
    PUSH %r9;
    MOV %r9 @r;
    MOV %r10 "nextTick";
    CALL_VAR %r9 %r10 2 false;
    MOV %r8 $RET;
    LG_OR %r5 %r8;
LABEL _l4050_:
LABEL _l4048_:
    LG_OR %r3 %r5;
LABEL _l4046_:
LABEL _l4045_:
LABEL _l4042_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f891(.e, .t) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r4 @s;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "removeListener";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
    MOV n $RET;
    MOV %r1 "readable";
    MOV %r2 .e;
    EQ %r1 %r2;
    JF %r1 _l4051_;
    MOV %r3 @P;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 @r;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l4051_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f892(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    PUSH %r0;
    MOV_ARGS %r0;
    PUSH %r0;
    MOV %r4 @s;
    MOV %r5 "prototype";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "removeAllListeners";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV t $RET;
    MOV %r2 "readable";
    MOV %r3 .e;
    NE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4053_;
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .e;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4053_:
    JIF %r1 _l4052_;
    MOV %r3 @P;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 @r;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l4052_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f893() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP e %r0 %r1;
    MOV %r2 e;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l4054_;
    MOV %r3 "resume";
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r4 e;
    MOV %r5 "readableListening";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    MOV %r4 e;
    MOV %r5 "flowing";
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 e;
    PUSH %r3;
    FUNC %r3 @@f1129;
    CALL_REG %r3 2 false;
    MOV %r2 $RET;
LABEL _l4054_:
    MOV %r1 1;
    NEG %r1;
    MOV %r2 e;
    MOV %r3 "paused";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f894() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 "call pause flowing=%j";
    PUSH %r1;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "flowing";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c 2 false;
    MOV %r1 1;
    NEG %r1;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "flowing";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    JF %r1 _l4055_;
    MOV %r3 "pause";
    PUSH %r3;
    CALL_REG @c 1 false;
    MOV %r3 1;
    NEG %r3;
    MOV_THIS %r6;
    MOV %r7 "_readableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "flowing";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 "pause";
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l4055_:
    MOV %r1 0;
    NEG %r1;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "paused";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f895(.e) {
    CLS @t;
    CLS @r;
    CLS @n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP @r %r0 %r1;
    MOV @n 1;
    NEG @n;
    MOV %r1 "end";
    PUSH %r1;
    FUNC %r1 @@f1130;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "data";
    PUSH %r1;
    FUNC %r1 @@f1131;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @e;
    FORIN i %r0 _l4056_ _l4057_;
LABEL _l4056_:
    MOV %r2 0;
    VOID %r2;
    MOV_THIS %r4;
    MOV %r5 i;
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4059_;
    MOV %r3 "function";
    MOV %r5 @e;
    MOV %r6 i;
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4059_:
    JF %r1 _l4058_;
    MOV %r4 i;
    PUSH %r4;
    FUNC %r4 @@f1132;
    CALL_REG %r4 1 false;
    MOV %r3 $RET;
    MOV_THIS %r4;
    MOV %r5 i;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l4058_:
    FORIN_END;
LABEL _l4057_:
    MOV o 0;
LABEL _l4060_:
    MOV %r0 o;
    MOV %r2 @S;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l4061_;
LABEL _l4063_:
    MOV %r2 @S;
    MOV %r3 o;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r3 @S;
    MOV %r4 o;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r4;
    MOV %r5 "emit";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
LABEL _l4062_:
    MOV %r1 o;
    ADD %r1 1;
    MOV o %r1;
    JMP _l4060_;
LABEL _l4061_:
    FUNC %r1 @@f1133;
    MOV_THIS %r2;
    MOV %r3 "_read";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f896() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 "Readable[Symbol.asyncIterator]";
    PUSH %r1;
    CALL_REG @w 1 false;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 @h;
    EQ %r1 %r2;
    JF %r1 _l4064_;
    MOV %r4 "./internal/streams/async_iterator";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r3 $RET;
    MOV @h %r3;
    MOV %r2 %r3;
LABEL _l4064_:
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @h 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f897() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f898() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r2;
    MOV %r3 "_readableState";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4065_;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "buffer";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4065_:
    MOV $RET %r0;
    RET;
}
func @@f899() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "flowing";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f900(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4066_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "flowing";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4066_:
}
func @@f901() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f902(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "_transformState";
    MOV_PROP r %r0 %r1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 r;
    MOV %r2 "transforming";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 r;
    MOV %r1 "writecb";
    MOV_PROP n %r0 %r1;
    MOV %r0 null;
    MOV %r1 n;
    EQ %r0 %r1;
    JF %r0 _l4068_;
    MOV %r2 "error";
    PUSH %r2;
    CALL_REG @o 0 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4067_;
LABEL _l4068_:
LABEL _l4067_:
    MOV %r0 null;
    MOV %r1 r;
    MOV %r2 "writechunk";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 r;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 .t;
    WNE %r0 %r1;
    JF %r0 _l4069_;
    MOV %r2 .t;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4069_:
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG n 1 false;
    MOV_THIS %r0;
    MOV %r1 "_readableState";
    MOV_PROP i %r0 %r1;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 i;
    MOV %r2 "reading";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 i;
    MOV %r3 "needReadable";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4071_;
    MOV %r4 i;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 i;
    MOV %r5 "highWaterMark";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l4071_:
    JF %r0 _l4070_;
    MOV %r3 i;
    MOV %r4 "highWaterMark";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_read";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4070_:
}
func @@f903(.t, .r) {
    REG %r0;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    CALL_REG @f 3 false;
}
func @@f904(.e) {
    REG %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @t 1 false;
}
func @@f905(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    CLS @e;
    MOV @e .e;
    MOV_THIS @t;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "next";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "entry";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1134;
    MOV_THIS %r1;
    MOV %r2 "finish";
    SET_KEY %r1 %r2 %r0;
}
func @@f906() {
}
func @@f907() {
}
func @@f908(.t, .n, .s) {
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @n;
    MOV @n .n;
    MOV %r1 @o;
    MOV %r0 %r1;
    JIF %r1 _l4072_;
    MOV %r3 "./_stream_duplex";
    PUSH %r3;
    CALL_REG @e 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l4072_:
    MOV @o %r0;
    MOV %r1 .t;
    MOV %r0 %r1;
    JIF %r1 _l4073_;
    NEW_OBJ %r2;
    LG_OR %r0 %r2;
LABEL _l4073_:
    MOV .t %r0;
    MOV %r0 "boolean";
    MOV %r1 .s;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l4074_;
    MOV %r2 @n;
    MOV %r3 @o;
    INST_OF %r2 %r3;
    MOV .s %r2;
    MOV %r1 %r2;
LABEL _l4074_:
    MOV %r1 .t;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "objectMode";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .s;
    JF %r0 _l4075_;
    MOV_THIS %r4;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l4076_;
    MOV %r5 .t;
    MOV %r6 "writableObjectMode";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l4076_:
    MOV_THIS %r3;
    MOV %r4 "objectMode";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4075_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 "writableHighWaterMark";
    PUSH %r1;
    MOV %r1 .s;
    PUSH %r1;
    CALL_REG @h 4 false;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "highWaterMark";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "finalCalled";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "needDrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "ending";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "finished";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "destroyed";
    SET_KEY %r1 %r2 %r0;
    MOV a 1;
    NEG a;
    MOV %r1 .t;
    MOV %r2 "decodeStrings";
    MOV_PROP %r0 %r1 %r2;
    EQ a %r0;
    MOV %r0 a;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "decodeStrings";
    SET_KEY %r1 %r2 %r0;
    MOV %r2 .t;
    MOV %r3 "defaultEncoding";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4077_;
    MOV %r2 "utf8";
    LG_OR %r0 %r2;
LABEL _l4077_:
    MOV_THIS %r1;
    MOV %r2 "defaultEncoding";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "writing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "corked";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "bufferProcessing";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1135;
    MOV_THIS %r1;
    MOV %r2 "onwrite";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "writelen";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "bufferedRequest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "lastBufferedRequest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "prefinished";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "errorEmitted";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r2 .t;
    MOV %r3 "emitClose";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "emitClose";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "bufferedRequestCount";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    PUSH %r1;
    CALL_REG @i 1 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "corkedRequestsFree";
    SET_KEY %r1 %r2 %r0;
}
func @@f909(.t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS r;
    MOV %r2 @o;
    MOV %r1 %r2;
    JIF %r2 _l4078_;
    MOV %r4 "./_stream_duplex";
    PUSH %r4;
    CALL_REG @e 1 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l4078_:
    MOV @o %r1;
    MOV %r0 %r1;
    INST_OF r %r0;
    MOV %r1 r;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l4081_;
    MOV %r3 @x;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 @l;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l4081_:
    JF %r0 _l4080_;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @x 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4079_;
LABEL _l4080_:
LABEL _l4079_:
    MOV %r1 .t;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @E 3 true;
    MOV %r0 $RET;
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "writable";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    JF %r0 _l4082_;
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "write";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l4083_;
    MOV %r5 .t;
    MOV %r6 "write";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_write";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l4083_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "writev";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l4084_;
    MOV %r5 .t;
    MOV %r6 "writev";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_writev";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l4084_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "destroy";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l4085_;
    MOV %r5 .t;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_destroy";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l4085_:
    MOV %r2 "function";
    MOV %r4 .t;
    MOV %r5 "final";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4086_;
    MOV %r5 .t;
    MOV %r6 "final";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "_final";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4086_:
LABEL _l4082_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 @a;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
}
func @@f910(.e, .t, .r, .n, .i, .o, .s) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .n;
    MOV %r1 .t;
    MOV %r2 "writelen";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .s;
    MOV %r1 .t;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "writing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .t;
    MOV %r2 "destroyed";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4088_;
    MOV %r2 "write";
    PUSH %r2;
    CALL_REG @y 1 true;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .t;
    MOV %r2 "onwrite";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4087_;
LABEL _l4088_:
    MOV %r1 .r;
    JF %r1 _l4089_;
    MOV %r2 .i;
    PUSH %r2;
    MOV %r3 .t;
    MOV %r4 "onwrite";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "_writev";
    CALL_VAR %r2 %r3 2 false;
    JMP _l4087_;
LABEL _l4089_:
    MOV %r2 .i;
    PUSH %r2;
    MOV %r2 .o;
    PUSH %r2;
    MOV %r3 .t;
    MOV %r4 "onwrite";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "_write";
    CALL_VAR %r2 %r3 3 false;
LABEL _l4087_:
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "sync";
    SET_KEY %r1 %r2 %r0;
}
func @@f911(.e, .t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .r;
    JIF %r0 _l4090_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    FUNC %r2 @@f1136;
    CALL_REG %r2 2 false;
    MOV %r1 $RET;
LABEL _l4090_:
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    CALL_REG .n 0 false;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @A 2 false;
}
func @@f912(.e, .t) {
    VAR r;
    VAR n;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    VAR l;
    VAR f;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "bufferProcessing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .t;
    MOV %r1 "bufferedRequest";
    MOV_PROP r %r0 %r1;
    MOV %r3 .e;
    MOV %r4 "_writev";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l4094_;
    MOV %r3 r;
    LG_AND %r1 %r3;
LABEL _l4094_:
    MOV %r0 %r1;
    JF %r1 _l4093_;
    MOV %r3 r;
    MOV %r4 "next";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4093_:
    JF %r0 _l4092_;
    MOV %r1 .t;
    MOV %r2 "bufferedRequestCount";
    MOV_PROP n %r1 %r2;
    MOV %r1 n;
    PUSH %r1;
    CALL_CTX 'Array' 1 true;
    MOV o $RET;
    MOV %r1 .t;
    MOV %r2 "corkedRequestsFree";
    MOV_PROP s %r1 %r2;
    MOV %r1 r;
    MOV %r2 s;
    MOV %r3 "entry";
    SET_KEY %r2 %r3 %r1;
    MOV a 0;
    MOV u 0;
    NEG u;
LABEL _l4095_:
    MOV %r1 r;
    JF %r1 _l4096_;
LABEL _l4098_:
    MOV %r2 r;
    MOV %r3 o;
    MOV %r4 a;
    SET_KEY %r3 %r4 %r2;
    MOV %r3 r;
    MOV %r4 "isBuf";
    MOV_PROP %r2 %r3 %r4;
    JIF %r2 _l4099_;
    MOV %r4 1;
    NEG %r4;
    MOV u %r4;
    MOV %r3 %r4;
LABEL _l4099_:
    MOV %r3 r;
    MOV %r4 "next";
    MOV_PROP %r2 %r3 %r4;
    MOV r %r2;
    MOV %r2 1;
    MOV %r3 a;
    ADD %r3 %r2;
    MOV a %r3;
    JMP _l4095_;
LABEL _l4096_:
    MOV %r1 u;
    MOV %r2 o;
    MOV %r3 "allBuffers";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r2 .t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 o;
    PUSH %r1;
    MOV %r1 "";
    PUSH %r1;
    MOV %r2 s;
    MOV %r3 "finish";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @k 7 false;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 1;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 null;
    MOV %r2 .t;
    MOV %r3 "lastBufferedRequest";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 s;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4101_;
    MOV %r3 s;
    MOV %r4 "next";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .t;
    MOV %r4 "corkedRequestsFree";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 null;
    MOV %r3 s;
    MOV %r4 "next";
    SET_KEY %r3 %r4 %r2;
    JMP _l4100_;
LABEL _l4101_:
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @i 1 true;
    MOV %r2 $RET;
    MOV %r3 .t;
    MOV %r4 "corkedRequestsFree";
    SET_KEY %r3 %r4 %r2;
LABEL _l4100_:
    MOV %r1 0;
    MOV %r2 .t;
    MOV %r3 "bufferedRequestCount";
    SET_KEY %r2 %r3 %r1;
    JMP _l4091_;
LABEL _l4092_:
    BLOCK 5;
LABEL _l4102_:
    MOV %r1 r;
    JF %r1 _l4103_;
LABEL _l4105_:
    MOV %r2 r;
    MOV %r3 "chunk";
    MOV_PROP c %r2 %r3;
    MOV %r2 r;
    MOV %r3 "encoding";
    MOV_PROP l %r2 %r3;
    MOV %r2 r;
    MOV %r3 "callback";
    MOV_PROP f %r2 %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 1;
    NEG %r3;
    PUSH %r3;
    MOV %r5 .t;
    MOV %r6 "objectMode";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l4109_;
    MOV %r3 1;
    JMP _l4108_;
LABEL _l4109_:
    MOV %r5 c;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
LABEL _l4108_:
    PUSH %r3;
    MOV %r3 c;
    PUSH %r3;
    MOV %r3 l;
    PUSH %r3;
    MOV %r3 f;
    PUSH %r3;
    CALL_REG @k 7 false;
    MOV %r4 r;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    MOV r %r3;
    MOV %r4 .t;
    MOV %r5 "bufferedRequestCount";
    MOV_PROP %r3 %r4 %r5;
    SUB %r3 1;
    MOV %r4 .t;
    MOV %r5 "bufferedRequestCount";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 .t;
    MOV %r4 "writing";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4107_;
    CLR_BLOCK 5;
    JMP _l4103_;
    JMP _l4106_;
LABEL _l4107_:
LABEL _l4106_:
    JMP _l4102_;
LABEL _l4103_:
    END_BLOCK 5;
    MOV %r1 null;
    MOV %r2 r;
    EQ %r1 %r2;
    JF %r1 _l4110_;
    MOV %r3 null;
    MOV %r4 .t;
    MOV %r5 "lastBufferedRequest";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l4110_:
LABEL _l4091_:
    MOV %r0 r;
    MOV %r1 .t;
    MOV %r2 "bufferedRequest";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "bufferProcessing";
    SET_KEY %r1 %r2 %r0;
}
func @@f913(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r5 .e;
    MOV %r6 "ending";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l4114_;
    MOV %r5 0;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l4114_:
    MOV %r2 %r3;
    JF %r3 _l4113_;
    MOV %r4 null;
    MOV %r6 .e;
    MOV %r7 "bufferedRequest";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l4113_:
    MOV %r1 %r2;
    JF %r2 _l4112_;
    MOV %r4 .e;
    MOV %r5 "finished";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l4112_:
    MOV %r0 %r1;
    JF %r1 _l4111_;
    MOV %r3 .e;
    MOV %r4 "writing";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l4111_:
    MOV $RET %r0;
    RET;
}
func @@f914(.e, .t) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1137;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "_final";
    CALL_VAR %r0 %r1 1 false;
}
func @@f915(.e, .t) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @T 1 false;
    MOV n $RET;
    MOV %r1 n;
    JF %r1 _l4115_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    FUNC %r4 @@f1138;
    CALL_REG %r4 2 false;
    MOV %r3 $RET;
    NEG %r3;
    MOV %r3 0;
    MOV %r5 .t;
    MOV %r6 "pendingcb";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l4116_;
    MOV %r5 0;
    NEG %r5;
    MOV %r6 .t;
    MOV %r7 "finished";
    SET_KEY %r6 %r7 %r5;
    MOV %r5 "finish";
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l4116_:
LABEL _l4115_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f916() {
    VAR e;
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r0;
    MOV %r1 "bufferedRequest";
    MOV_PROP e %r0 %r1;
    NEW_ARR t;
LABEL _l4117_:
    MOV %r0 e;
    JF %r0 _l4118_;
LABEL _l4120_:
    MOV %r1 e;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r2 e;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV e %r1;
    JMP _l4117_;
LABEL _l4118_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f917() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    TRY _l4121_ _l4122_;
    MOV %r1 @E;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    MOV %r0 "buffer";
    PUSH %r0;
    NEW_OBJ %r0;
    FUNC %r2 @@f1139;
    PUSH %r2;
    MOV %r2 "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.";
    PUSH %r2;
    MOV %r2 "DEP0003";
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "deprecate";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
    SET_KEY %r0 'get' %r1;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "defineProperty";
    CALL_VAR %r0 %r1 3 false;
    TRY_END;
LABEL _l4121_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    END_BLOCK 2;
LABEL _l4122_:
}
func @@f918(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @l;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l4123_;
    MOV_THIS %r3;
    MOV %r4 @x;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l4124_;
    MOV %r5 .e;
    MOV %r4 %r5;
    JF %r5 _l4125_;
    MOV %r8 .e;
    MOV %r9 "_writableState";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 @E;
    INST_OF %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l4125_:
    LG_AND %r2 %r4;
LABEL _l4124_:
    LG_OR %r0 %r2;
LABEL _l4123_:
    MOV $RET %r0;
    RET;
}
func @@f919(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    MOV_THIS %r1;
    INST_OF %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f920() {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    CALL_REG @_ 0 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f921(.e, .t, .n) {
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r0;
    MOV %r1 "_writableState";
    MOV_PROP o %r0 %r1;
    MOV s 1;
    NEG s;
    MOV %r1 o;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    MOV a %r0;
    JF %r0 _l4126_;
    MOV %r2 .e;
    MOV i %r2;
    MOV %r3 i;
    PUSH %r3;
    MOV %r3 @u;
    MOV %r4 "isBuffer";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l4127_;
    MOV %r3 i;
    MOV %r4 @c;
    INST_OF %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4127_:
    LG_AND a %r1;
LABEL _l4126_:
    MOV %r2 a;
    MOV %r1 %r2;
    JF %r2 _l4129_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 @u;
    MOV %r5 "isBuffer";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l4129_:
    JF %r1 _l4128_;
    MOV %r4 .e;
    PUSH %r4;
    FUNC %r4 @@f1140;
    CALL_REG %r4 1 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l4128_:
    MOV %r1 "function";
    MOV %r2 .t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4130_;
    MOV %r3 .t;
    MOV .n %r3;
    MOV %r3 null;
    MOV .t %r3;
    MOV %r2 %r3;
LABEL _l4130_:
    MOV %r1 a;
    JF %r1 _l4132_;
    MOV %r2 "buffer";
    MOV .t %r2;
    JMP _l4131_;
LABEL _l4132_:
    MOV %r2 .t;
    JIF %r2 _l4133_;
    MOV %r5 o;
    MOV %r6 "defaultEncoding";
    MOV_PROP %r4 %r5 %r6;
    MOV .t %r4;
    MOV %r3 %r4;
LABEL _l4133_:
LABEL _l4131_:
    MOV %r1 "function";
    MOV %r2 .n;
    TYPE_OF %r2;
    WNE %r1 %r2;
    JF %r1 _l4134_;
    MOV %r3 @S;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l4134_:
    MOV %r2 o;
    MOV %r3 "ending";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4136_;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    FUNC %r2 @@f1141;
    CALL_REG %r2 2 false;
    JMP _l4135_;
LABEL _l4136_:
    MOV %r3 a;
    MOV %r2 %r3;
    JIF %r3 _l4138_;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 o;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .n;
    PUSH %r5;
    FUNC %r5 @@f1142;
    CALL_REG %r5 4 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l4138_:
    JF %r2 _l4137_;
    MOV %r5 o;
    MOV %r6 "pendingcb";
    MOV_PROP %r4 %r5 %r6;
    ADD %r4 1;
    MOV %r5 o;
    MOV %r6 "pendingcb";
    SET_KEY %r5 %r6 %r4;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 o;
    PUSH %r5;
    MOV %r5 a;
    PUSH %r5;
    MOV %r5 .e;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 .n;
    PUSH %r5;
    FUNC %r5 @@f1143;
    CALL_REG %r5 6 false;
    MOV %r4 $RET;
    MOV s %r4;
    MOV %r3 %r4;
LABEL _l4137_:
LABEL _l4135_:
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f922() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "corked";
    MOV_PROP %r0 %r1 %r2;
    ADD %r0 1;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "corked";
    SET_KEY %r1 %r2 %r0;
}
func @@f923() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV_THIS %r0;
    MOV %r1 "_writableState";
    MOV_PROP e %r0 %r1;
    MOV %r1 e;
    MOV %r2 "corked";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4139_;
    MOV %r3 e;
    MOV %r4 "corked";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 1;
    MOV %r3 e;
    MOV %r4 "corked";
    SET_KEY %r3 %r4 %r2;
    MOV %r6 e;
    MOV %r7 "writing";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l4143_;
    MOV %r7 e;
    MOV %r8 "corked";
    MOV_PROP %r6 %r7 %r8;
    LG_OR %r4 %r6;
LABEL _l4143_:
    MOV %r3 %r4;
    JIF %r4 _l4142_;
    MOV %r6 e;
    MOV %r7 "bufferProcessing";
    MOV_PROP %r5 %r6 %r7;
    LG_OR %r3 %r5;
LABEL _l4142_:
    MOV %r2 %r3;
    JIF %r3 _l4141_;
    MOV %r5 e;
    MOV %r6 "bufferedRequest";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_OR %r2 %r4;
LABEL _l4141_:
    MOV %r1 %r2;
    JIF %r2 _l4140_;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 e;
    PUSH %r4;
    CALL_REG @O 2 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l4140_:
LABEL _l4139_:
}
func @@f924(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "string";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4146_;
    MOV %r4 .e;
    MOV %r5 "toLowerCase";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l4146_:
    MOV %r3 .e;
    MOV %r5 "";
    ADD %r3 %r5;
    MOV %r4 "toLowerCase";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r4 "hex";
    SET_KEY %r2 0 %r4;
    MOV %r4 "utf8";
    SET_KEY %r2 1 %r4;
    MOV %r4 "utf-8";
    SET_KEY %r2 2 %r4;
    MOV %r4 "ascii";
    SET_KEY %r2 3 %r4;
    MOV %r4 "binary";
    SET_KEY %r2 4 %r4;
    MOV %r4 "base64";
    SET_KEY %r2 5 %r4;
    MOV %r4 "ucs2";
    SET_KEY %r2 6 %r4;
    MOV %r4 "ucs-2";
    SET_KEY %r2 7 %r4;
    MOV %r4 "utf16le";
    SET_KEY %r2 8 %r4;
    MOV %r4 "utf-16le";
    SET_KEY %r2 9 %r4;
    MOV %r4 "raw";
    SET_KEY %r2 10 %r4;
    MOV %r3 "indexOf";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    MOV %r1 1;
    MINUS %r1;
    GT %r0 %r1;
    NEG %r0;
    JF %r0 _l4145_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @w 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l4144_;
LABEL _l4145_:
LABEL _l4144_:
    MOV %r1 .e;
    MOV_THIS %r4;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "defaultEncoding";
    SET_KEY %r2 %r3 %r1;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f925() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r2;
    MOV %r3 "_writableState";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4147_;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "getBuffer";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l4147_:
    MOV $RET %r0;
    RET;
}
func @@f926() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f927(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r1 "_write()";
    PUSH %r1;
    CALL_REG @b 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG .r 1 false;
}
func @@f928(.e, .t, .n) {
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV_THIS %r0;
    MOV %r1 "_writableState";
    MOV_PROP i %r0 %r1;
    MOV %r1 "function";
    MOV %r2 .e;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4149_;
    MOV %r2 .e;
    MOV .n %r2;
    MOV %r2 null;
    MOV .e %r2;
    MOV %r2 null;
    MOV .t %r2;
    JMP _l4148_;
LABEL _l4149_:
    MOV %r2 "function";
    MOV %r3 .t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l4150_;
    MOV %r4 .t;
    MOV .n %r4;
    MOV %r4 null;
    MOV .t %r4;
    MOV %r3 %r4;
LABEL _l4150_:
LABEL _l4148_:
    MOV %r1 null;
    MOV %r2 .e;
    WNE %r1 %r2;
    JF %r1 _l4151_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "write";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
LABEL _l4151_:
    MOV %r2 i;
    MOV %r3 "corked";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4152_;
    MOV %r3 1;
    MOV %r4 i;
    MOV %r5 "corked";
    SET_KEY %r4 %r5 %r3;
    MOV_THIS %r3;
    MOV %r4 "uncork";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l4152_:
    MOV %r2 i;
    MOV %r3 "ending";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l4153_;
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 i;
    PUSH %r3;
    MOV %r3 .n;
    PUSH %r3;
    FUNC %r3 @@f1144;
    CALL_REG %r3 3 false;
    MOV %r2 $RET;
LABEL _l4153_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f929() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f930() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    VOID %r1;
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    NE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4154_;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4154_:
    MOV $RET %r0;
    RET;
}
func @@f931(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4155_;
    MOV %r2 .e;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4155_:
}
func @@f932(.e, .t) {
    REG %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG .t 1 false;
}
func @@f933(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 .e;
    IN %r1 %r2;
    JF %r1 _l4157_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 .r;
    SET_KEY %r2 'value' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'enumerable' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'configurable' %r3;
    MOV %r3 0;
    NEG %r3;
    SET_KEY %r2 'writable' %r3;
    PUSH %r2;
    MOV_CTX %r2 "Object";
    MOV %r3 "defineProperty";
    CALL_VAR %r2 %r3 3 false;
    JMP _l4156_;
LABEL _l4157_:
    MOV %r2 .r;
    MOV %r3 .e;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
LABEL _l4156_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f934(.e, .t) {
    REG %r0;
    REG %r1;
    NEW_OBJ %r0;
    MOV %r1 .e;
    SET_KEY %r0 'value' %r1;
    MOV %r1 .t;
    SET_KEY %r0 'done' %r1;
    MOV $RET %r0;
    RET;
}
func @@f935(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .e;
    MOV %r1 @s;
    MOV_PROP t %r0 %r1;
    MOV %r0 null;
    MOV %r1 t;
    NE %r0 %r1;
    JF %r0 _l4159_;
    MOV %r3 .e;
    MOV %r4 @h;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 0 false;
    MOV r $RET;
    MOV %r1 null;
    MOV %r2 r;
    NE %r1 %r2;
    JF %r1 _l4160_;
    MOV %r3 null;
    MOV %r4 .e;
    MOV %r5 @l;
    SET_KEY %r4 %r5 %r3;
    MOV %r3 null;
    MOV %r4 .e;
    MOV %r5 @s;
    SET_KEY %r4 %r5 %r3;
    MOV %r3 null;
    MOV %r4 .e;
    MOV %r5 @a;
    SET_KEY %r4 %r5 %r3;
    MOV %r4 r;
    PUSH %r4;
    MOV %r4 1;
    NEG %r4;
    PUSH %r4;
    CALL_REG @p 2 false;
    MOV %r3 $RET;
    PUSH %r3;
    CALL_REG t 1 false;
    MOV %r2 $RET;
LABEL _l4160_:
    JMP _l4158_;
LABEL _l4159_:
LABEL _l4158_:
}
func @@f936() {
}
func @@f937() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r1;
    MOV %r2 @h;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f938() {
    CLS @e;
    VAR t;
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS @e;
    MOV_THIS %r0;
    MOV %r1 @u;
    MOV_PROP t %r0 %r1;
    MOV %r0 null;
    MOV %r1 t;
    NE %r0 %r1;
    JF %r0 _l4162_;
    MOV %r2 t;
    PUSH %r2;
    MOV_CTX %r2 "Promise";
    MOV %r3 "reject";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4161_;
LABEL _l4162_:
LABEL _l4161_:
    MOV_THIS %r1;
    MOV %r2 @c;
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4164_;
    MOV %r3 0;
    VOID %r3;
    PUSH %r3;
    MOV %r3 0;
    NEG %r3;
    PUSH %r3;
    CALL_REG @p 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_CTX %r2 "Promise";
    MOV %r3 "resolve";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4163_;
LABEL _l4164_:
LABEL _l4163_:
    MOV_THIS %r3;
    MOV %r4 @h;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "destroyed";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4166_;
    FUNC %r2 @@f1145;
    PUSH %r2;
    CALL_CTX 'Promise' 1 true;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4165_;
LABEL _l4166_:
LABEL _l4165_:
    MOV_THIS %r0;
    MOV %r1 @l;
    MOV_PROP i %r0 %r1;
    MOV %r0 i;
    JF %r0 _l4168_;
    MOV %r3 i;
    PUSH %r3;
    MOV_THIS %r3;
    PUSH %r3;
    FUNC %r3 @@f1146;
    CALL_REG %r3 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_CTX 'Promise' 1 true;
    MOV %r1 $RET;
    MOV n %r1;
    JMP _l4167_;
LABEL _l4168_:
    MOV_THIS %r3;
    MOV %r4 @h;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 0 false;
    MOV o $RET;
    MOV %r1 null;
    MOV %r2 o;
    NE %r1 %r2;
    JF %r1 _l4170_;
    MOV %r4 o;
    PUSH %r4;
    MOV %r4 1;
    NEG %r4;
    PUSH %r4;
    CALL_REG @p 2 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV_CTX %r3 "Promise";
    MOV %r4 "resolve";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l4169_;
LABEL _l4170_:
LABEL _l4169_:
    MOV_THIS %r3;
    MOV %r4 @f;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_CTX 'Promise' 1 true;
    MOV %r1 $RET;
    MOV n %r1;
LABEL _l4167_:
    MOV %r1 n;
    MOV_THIS %r2;
    MOV %r3 @l;
    SET_KEY %r2 %r3 %r1;
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f939() {
    REG %r0;
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f940() {
    CLS @e;
    REG %r0;
    REG %r1;
    MOV_THIS @e;
    FUNC %r1 @@f1147;
    PUSH %r1;
    CALL_CTX 'Promise' 1 true;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f941(.e) {
    VAR t;
    CLS @n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 @g;
    PUSH %r0;
    NEW_OBJ %r2;
    MOV t %r2;
    MOV %r1 %r2;
    PUSH %r1;
    MOV %r1 @h;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r2 .e;
    SET_KEY %r1 'value' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @s;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r2 null;
    SET_KEY %r1 'value' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @a;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r2 null;
    SET_KEY %r1 'value' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @u;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r2 null;
    SET_KEY %r1 'value' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @c;
    PUSH %r1;
    NEW_OBJ %r1;
    MOV %r5 .e;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "endEmitted";
    MOV_PROP %r2 %r3 %r4;
    SET_KEY %r1 'value' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @f;
    PUSH %r1;
    NEW_OBJ %r1;
    FUNC %r2 @@f1148;
    SET_KEY %r1 'value' %r2;
    MOV %r2 0;
    NEG %r2;
    SET_KEY %r1 'writable' %r2;
    PUSH %r1;
    CALL_REG @i 3 false;
    MOV %r0 t;
    PUSH %r0;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    CALL_VAR %r0 %r1 2 false;
    MOV @n $RET;
    MOV %r1 null;
    MOV %r2 @n;
    MOV %r3 @l;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f1149;
    PUSH %r1;
    CALL_REG @o 2 false;
    MOV %r1 "readable";
    PUSH %r1;
    MOV %r2 null;
    PUSH %r2;
    MOV %r2 @n;
    PUSH %r2;
    FUNC %r2 @@f1150;
    MOV %r3 "bind";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @n;
    MOV $RET %r0;
    RET;
}
func @@f942() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV_THIS %r1;
    MOV %r2 "tail";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f943(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    NEW_OBJ t;
    MOV %r0 .e;
    SET_KEY t 'data' %r0;
    MOV %r0 null;
    SET_KEY t 'next' %r0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l4172_;
    MOV %r1 t;
    MOV_THIS %r4;
    MOV %r5 "tail";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "next";
    SET_KEY %r2 %r3 %r1;
    JMP _l4171_;
LABEL _l4172_:
    MOV %r1 t;
    MOV_THIS %r2;
    MOV %r3 "head";
    SET_KEY %r2 %r3 %r1;
LABEL _l4171_:
    MOV %r0 t;
    MOV_THIS %r1;
    MOV %r2 "tail";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    ADD %r0 1;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f944(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    NEW_OBJ t;
    MOV %r0 .e;
    SET_KEY t 'data' %r0;
    MOV_THIS %r1;
    MOV %r2 "head";
    MOV_PROP %r0 %r1 %r2;
    SET_KEY t 'next' %r0;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4173_;
    MOV %r2 t;
    MOV_THIS %r3;
    MOV %r4 "tail";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4173_:
    MOV %r0 t;
    MOV_THIS %r1;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    ADD %r0 1;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f945() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l4175_;
    MOV_THIS %r3;
    MOV %r4 "head";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "data";
    MOV_PROP e %r1 %r2;
    MOV %r2 1;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4177_;
    MOV %r4 null;
    MOV_THIS %r5;
    MOV %r6 "tail";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
    MOV_THIS %r4;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
    JMP _l4176_;
LABEL _l4177_:
    MOV_THIS %r6;
    MOV %r7 "head";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    MOV_THIS %r4;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
LABEL _l4176_:
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 1;
    MOV_THIS %r3;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 e;
    MOV $RET %r1;
    RET;
    JMP _l4174_;
LABEL _l4175_:
LABEL _l4174_:
}
func @@f946() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 null;
    MOV_THIS %r2;
    MOV %r3 "tail";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV_THIS %r1;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    MOV_THIS %r1;
    MOV %r2 "length";
    SET_KEY %r1 %r2 %r0;
}
func @@f947(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4179_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l4178_;
LABEL _l4179_:
LABEL _l4178_:
    MOV_THIS %r0;
    MOV %r1 "head";
    MOV_PROP t %r0 %r1;
    MOV r "";
    MOV %r1 t;
    MOV %r2 "data";
    MOV_PROP %r0 %r1 %r2;
    ADD r %r0;
LABEL _l4180_:
    MOV %r2 t;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV t %r1;
    MOV %r0 %r1;
    JF %r0 _l4181_;
LABEL _l4183_:
    MOV %r1 .e;
    MOV %r3 t;
    MOV %r4 "data";
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    MOV %r2 r;
    ADD %r2 %r1;
    MOV r %r2;
    JMP _l4180_;
LABEL _l4181_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f948(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 0;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4185_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "alloc";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4184_;
LABEL _l4185_:
LABEL _l4184_:
    MOV %r0 .e;
    MOV %r1 0;
    ZSHR %r0 %r1;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV o $RET;
    MOV_THIS %r0;
    MOV %r1 "head";
    MOV_PROP s %r0 %r1;
    MOV a 0;
LABEL _l4186_:
    MOV %r0 s;
    JF %r0 _l4187_;
LABEL _l4189_:
    MOV %r2 s;
    MOV %r3 "data";
    MOV_PROP %r1 %r2 %r3;
    MOV t %r1;
    MOV %r1 o;
    MOV r %r1;
    MOV %r1 a;
    MOV n %r1;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV %r5 @i;
    MOV %r6 "prototype";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "copy";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 3 false;
    MOV %r4 s;
    MOV %r5 "data";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 a;
    ADD %r2 %r1;
    MOV a %r2;
    MOV %r2 s;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV s %r1;
    JMP _l4186_;
LABEL _l4187_:
    MOV %r0 o;
    MOV $RET %r0;
    RET;
}
func @@f949(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r1 .e;
    MOV_THIS %r7;
    MOV %r8 "head";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "data";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l4191_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV_THIS %r7;
    MOV %r8 "head";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "data";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV r %r2;
    MOV %r3 .e;
    PUSH %r3;
    MOV_THIS %r7;
    MOV %r8 "head";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "data";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV_THIS %r5;
    MOV %r6 "head";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "data";
    SET_KEY %r3 %r4 %r2;
    JMP _l4190_;
LABEL _l4191_:
    MOV %r3 .e;
    MOV_THIS %r9;
    MOV %r10 "head";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "data";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    JF %r3 _l4193_;
    MOV_THIS %r4;
    MOV %r5 "shift";
    CALL_VAR %r4 %r5 0 false;
    MOV %r2 $RET;
    JMP _l4192_;
LABEL _l4193_:
    MOV %r4 .t;
    JF %r4 _l4194_;
    MOV %r5 .e;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 "_getString";
    CALL_VAR %r5 %r6 1 false;
    MOV %r2 $RET;
    JMP _l4192_;
LABEL _l4194_:
    MOV %r5 .e;
    PUSH %r5;
    MOV_THIS %r5;
    MOV %r6 "_getBuffer";
    CALL_VAR %r5 %r6 1 false;
    MOV %r2 $RET;
LABEL _l4192_:
    MOV r %r2;
LABEL _l4190_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f950() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r3;
    MOV %r4 "head";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "data";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f951(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV_THIS %r0;
    MOV %r1 "head";
    MOV_PROP t %r0 %r1;
    MOV r 1;
    MOV %r0 t;
    MOV %r1 "data";
    MOV_PROP n %r0 %r1;
    BLOCK 1;
    MOV %r1 n;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 .e;
    SUB %r1 %r0;
    MOV .e %r1;
LABEL _l4195_:
    MOV %r2 t;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV t %r1;
    MOV %r0 %r1;
    JF %r0 _l4196_;
LABEL _l4198_:
    MOV %r1 t;
    MOV %r2 "data";
    MOV_PROP i %r1 %r2;
    MOV %r1 .e;
    MOV %r3 i;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GT %r1 %r2;
    JF %r1 _l4200_;
    MOV %r2 i;
    MOV %r3 "length";
    MOV_PROP o %r2 %r3;
    JMP _l4199_;
LABEL _l4200_:
    MOV o .e;
LABEL _l4199_:
    MOV %r2 o;
    MOV %r4 i;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4204_;
    MOV %r3 i;
    MOV %r4 n;
    ADD %r4 %r3;
    MOV n %r4;
    JMP _l4203_;
LABEL _l4204_:
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 i;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV %r4 n;
    ADD %r4 %r3;
    MOV n %r4;
LABEL _l4203_:
    MOV %r1 0;
    MOV %r3 o;
    MOV %r4 .e;
    SUB %r4 %r3;
    MOV .e %r4;
    MOV %r2 %r4;
    EQ %r1 %r2;
    JF %r1 _l4202_;
    MOV %r2 o;
    MOV %r4 i;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4206_;
    MOV %r3 r;
    ADD %r3 1;
    MOV r %r3;
    MOV %r4 t;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l4208_;
    MOV %r5 t;
    MOV %r6 "next";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
    JMP _l4207_;
LABEL _l4208_:
    MOV %r5 null;
    MOV_THIS %r6;
    MOV %r7 "tail";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV_THIS %r5;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
LABEL _l4207_:
    JMP _l4205_;
LABEL _l4206_:
    MOV %r3 t;
    MOV_THIS %r4;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 o;
    PUSH %r4;
    MOV %r4 i;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV %r4 t;
    MOV %r5 "data";
    SET_KEY %r4 %r5 %r3;
LABEL _l4205_:
    CLR_BLOCK 1;
    JMP _l4196_;
    JMP _l4201_;
LABEL _l4202_:
LABEL _l4201_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l4195_;
LABEL _l4196_:
    END_BLOCK 1;
    MOV %r1 r;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 %r1;
    MOV_THIS %r3;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f952(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV t $RET;
    MOV_THIS %r0;
    MOV %r1 "head";
    MOV_PROP r %r0 %r1;
    MOV n 1;
    BLOCK 1;
    MOV %r0 t;
    PUSH %r0;
    MOV %r2 r;
    MOV %r3 "data";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "copy";
    CALL_VAR %r0 %r1 1 false;
    MOV %r3 r;
    MOV %r4 "data";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 .e;
    SUB %r1 %r0;
    MOV .e %r1;
LABEL _l4209_:
    MOV %r2 r;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r0 %r1;
    JF %r0 _l4210_;
LABEL _l4212_:
    MOV %r1 r;
    MOV %r2 "data";
    MOV_PROP o %r1 %r2;
    MOV %r1 .e;
    MOV %r3 o;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GT %r1 %r2;
    JF %r1 _l4214_;
    MOV %r2 o;
    MOV %r3 "length";
    MOV_PROP s %r2 %r3;
    JMP _l4213_;
LABEL _l4214_:
    MOV s .e;
LABEL _l4213_:
    MOV %r2 t;
    PUSH %r2;
    MOV %r4 t;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .e;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 o;
    MOV %r3 "copy";
    CALL_VAR %r2 %r3 4 false;
    MOV %r1 0;
    MOV %r3 s;
    MOV %r4 .e;
    SUB %r4 %r3;
    MOV .e %r4;
    MOV %r2 %r4;
    EQ %r1 %r2;
    JF %r1 _l4216_;
    MOV %r2 s;
    MOV %r4 o;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4218_;
    MOV %r3 n;
    ADD %r3 1;
    MOV n %r3;
    MOV %r4 r;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l4220_;
    MOV %r5 r;
    MOV %r6 "next";
    MOV_PROP %r4 %r5 %r6;
    MOV_THIS %r5;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
    JMP _l4219_;
LABEL _l4220_:
    MOV %r5 null;
    MOV_THIS %r6;
    MOV %r7 "tail";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV_THIS %r5;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
LABEL _l4219_:
    JMP _l4217_;
LABEL _l4218_:
    MOV %r3 r;
    MOV_THIS %r4;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 s;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV %r4 r;
    MOV %r5 "data";
    SET_KEY %r4 %r5 %r3;
LABEL _l4217_:
    CLR_BLOCK 1;
    JMP _l4210_;
    JMP _l4215_;
LABEL _l4216_:
LABEL _l4215_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l4209_;
LABEL _l4210_:
    END_BLOCK 1;
    MOV %r1 n;
    MOV_THIS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 %r1;
    MOV_THIS %r3;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f953(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r1;
    PUSH %r1;
    NEW_OBJ %r2;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    NEW_OBJ %r2;
    MOV %r3 0;
    SET_KEY %r2 'depth' %r3;
    MOV %r3 1;
    NEG %r3;
    SET_KEY %r2 'customInspect' %r3;
    PUSH %r2;
    FUNC %r2 @@f1151;
    CALL_REG %r2 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @o 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f954(.e, .t) {
    REG %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @i 2 false;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @n 1 false;
}
func @@f955(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r3 .e;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l4223_;
    MOV %r6 .e;
    MOV %r7 "_writableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "emitClose";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l4223_:
    MOV %r0 %r1;
    JIF %r1 _l4222_;
    MOV %r4 .e;
    MOV %r5 "_readableState";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l4224_;
    MOV %r7 .e;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "emitClose";
    MOV_PROP %r4 %r5 %r6;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l4224_:
    LG_OR %r0 %r2;
LABEL _l4222_:
    JIF %r0 _l4221_;
    MOV %r2 "close";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4221_:
}
func @@f956(.e, .t) {
    REG %r0;
    REG %r1;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f957(.t, .o) {
    CLS @s;
    VAR a;
    VAR u;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    CLS @o;
    MOV @o .o;
    MOV_THIS @s;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    MOV a %r0;
    JF %r0 _l4225_;
    MOV_THIS %r4;
    MOV %r5 "_readableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "destroyed";
    MOV_PROP %r1 %r2 %r3;
    LG_AND a %r1;
LABEL _l4225_:
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    MOV u %r0;
    JF %r0 _l4226_;
    MOV_THIS %r4;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "destroyed";
    MOV_PROP %r1 %r2 %r3;
    LG_AND u %r1;
LABEL _l4226_:
    MOV %r2 a;
    MOV %r1 %r2;
    JIF %r2 _l4229_;
    MOV %r3 u;
    LG_OR %r1 %r3;
LABEL _l4229_:
    JF %r1 _l4228_;
    MOV %r2 @o;
    JF %r2 _l4231_;
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @o 1 false;
    JMP _l4230_;
LABEL _l4231_:
    MOV %r4 .t;
    NEG %r4;
    MOV %r3 %r4;
    JIF %r4 _l4233_;
    MOV_THIS %r7;
    MOV %r8 "_writableState";
    MOV_PROP %r6 %r7 %r8;
    MOV %r5 %r6;
    JF %r6 _l4234_;
    MOV_THIS %r10;
    MOV %r11 "_writableState";
    MOV_PROP %r8 %r10 %r11;
    MOV %r9 "errorEmitted";
    MOV_PROP %r7 %r8 %r9;
    LG_AND %r5 %r7;
LABEL _l4234_:
    LG_OR %r3 %r5;
LABEL _l4233_:
    JIF %r3 _l4232_;
    MOV %r5 @i;
    PUSH %r5;
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 @e;
    MOV %r6 "nextTick";
    CALL_VAR %r5 %r6 3 false;
    MOV %r4 $RET;
LABEL _l4232_:
LABEL _l4230_:
    MOV_THIS %r0;
    JMP _l4227_;
LABEL _l4228_:
    MOV_THIS %r3;
    MOV %r4 "_readableState";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4235_;
    MOV %r4 0;
    NEG %r4;
    MOV_THIS %r7;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroyed";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l4235_:
    MOV_THIS %r3;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4236_;
    MOV %r4 0;
    NEG %r4;
    MOV_THIS %r7;
    MOV %r8 "_writableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "destroyed";
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l4236_:
    MOV %r3 .t;
    MOV %r2 %r3;
    JIF %r3 _l4237_;
    MOV %r4 null;
    LG_OR %r2 %r4;
LABEL _l4237_:
    PUSH %r2;
    FUNC %r2 @@f1152;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "_destroy";
    CALL_VAR %r2 %r3 2 false;
    MOV_THIS %r0;
LABEL _l4227_:
    MOV $RET %r0;
    RET;
}
func @@f958() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_THIS %r1;
    MOV %r2 "_readableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4238_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "reading";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ended";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_readableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "endEmitted";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4238_:
    MOV_THIS %r1;
    MOV %r2 "_writableState";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4239_;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "destroyed";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ended";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "ending";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "finalCalled";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "prefinished";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "finished";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 1;
    NEG %r2;
    MOV_THIS %r5;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "errorEmitted";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4239_:
}
func @@f959(.e) {
    CLS @t;
    REG %r0;
    CLS @e;
    MOV @e .e;
    MOV @t 1;
    NEG @t;
    FUNC %r0 @@f1153;
    MOV $RET %r0;
    RET;
}
func @@f960() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @t;
    MOV %r2 "writable";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4240_;
    CALL_REG @l 0 false;
    MOV %r1 $RET;
LABEL _l4240_:
}
func @@f961() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    NEG %r0;
    MOV @a %r0;
    MOV %r0 0;
    NEG %r0;
    MOV @c %r0;
    MOV %r0 @s;
    JIF %r0 _l4241_;
    MOV %r2 @t;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4241_:
}
func @@f962() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    NEG %r0;
    MOV @s %r0;
    MOV %r0 0;
    NEG %r0;
    MOV @f %r0;
    MOV %r0 @a;
    JIF %r0 _l4242_;
    MOV %r2 @t;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4242_:
}
func @@f963(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f964() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r2 @s;
    MOV %r1 %r2;
    JF %r2 _l4245_;
    MOV %r3 @f;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l4245_:
    JF %r1 _l4244_;
    MOV %r4 @t;
    MOV %r5 "_readableState";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l4247_;
    MOV %r7 @t;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "ended";
    MOV_PROP %r4 %r5 %r6;
    LG_AND %r2 %r4;
LABEL _l4247_:
    JIF %r2 _l4246_;
    CALL_REG @n 0 true;
    MOV %r4 $RET;
    MOV e %r4;
    MOV %r3 %r4;
LABEL _l4246_:
    MOV %r2 @t;
    PUSH %r2;
    MOV %r2 e;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l4243_;
LABEL _l4244_:
    MOV %r3 @a;
    MOV %r2 %r3;
    JF %r3 _l4249_;
    MOV %r4 @c;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l4249_:
    JF %r2 _l4248_;
    MOV %r5 @t;
    MOV %r6 "_writableState";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l4251_;
    MOV %r8 @t;
    MOV %r9 "_writableState";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "ended";
    MOV_PROP %r5 %r6 %r7;
    LG_AND %r3 %r5;
LABEL _l4251_:
    JIF %r3 _l4250_;
    CALL_REG @n 0 true;
    MOV %r5 $RET;
    MOV e %r5;
    MOV %r4 %r5;
LABEL _l4250_:
    MOV %r3 @t;
    PUSH %r3;
    MOV %r3 e;
    PUSH %r3;
    MOV %r3 @o;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
    JMP _l4243_;
LABEL _l4248_:
    MOV %r0 0;
    VOID %r0;
LABEL _l4243_:
    MOV $RET %r0;
    RET;
}
func @@f965() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "finish";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV %r2 @t;
    MOV %r3 "req";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
}
func @@f966(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .e;
    MOV %r3 "setHeader";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4252_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "abort";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4252_:
    MOV $RET %r0;
    RET;
}
func @@f967() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 "complete";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "abort";
    PUSH %r0;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "request";
    PUSH %r0;
    MOV %r0 @b;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r1 @t;
    MOV %r2 "req";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4253_;
    MOV %r2 "finish";
    PUSH %r2;
    MOV %r2 @l;
    PUSH %r2;
    MOV %r4 @t;
    MOV %r5 "req";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4253_:
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @u;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @u;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "finish";
    PUSH %r0;
    MOV %r0 @l;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @h;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 @p;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
}
func @@f968(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 null;
    MOV %r3 .e;
    MOV %r4 "highWaterMark";
    MOV_PROP %r2 %r3 %r4;
    WNE %r1 %r2;
    JF %r1 _l4255_;
    MOV %r2 .e;
    MOV %r3 "highWaterMark";
    MOV_PROP %r0 %r2 %r3;
    JMP _l4254_;
LABEL _l4255_:
    MOV %r2 .t;
    JF %r2 _l4256_;
    MOV %r3 .e;
    MOV %r4 .r;
    MOV_PROP %r0 %r3 %r4;
    JMP _l4254_;
LABEL _l4256_:
    MOV %r0 null;
LABEL _l4254_:
    MOV $RET %r0;
    RET;
}
func @@f969(.e, .t, .u) {
    CLS @c;
    CLS @l;
    VAR f;
    VAR h;
    VAR p;
    CLS @d;
    CLS @b;
    CLS @g;
    CLS @_;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    CLS @e;
    MOV @e .e;
    MOV f "browser";
    MOV %r1 @r;
    MOV %r2 "title";
    MOV_PROP %r0 %r1 %r2;
    EQ f %r0;
    MOV %r0 @n;
    MOV %r1 "WebSocket";
    MOV_PROP h %r0 %r1;
    NEG h;
    NEG h;
    MOV %r0 f;
    JF %r0 _l4258_;
    FUNC p @@f1154;
    JMP _l4257_;
LABEL _l4258_:
    FUNC p @@f1155;
LABEL _l4257_:
    MOV %r2 .t;
    MOV %r1 %r2;
    JF %r2 _l4261_;
    MOV %r4 .t;
    PUSH %r4;
    MOV_CTX %r4 "Array";
    MOV %r5 "isArray";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l4261_:
    MOV %r0 %r1;
    JF %r1 _l4260_;
    MOV %r2 "object";
    MOV %r3 .t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4260_:
    JF %r0 _l4259_;
    MOV %r2 .t;
    MOV .u %r2;
    MOV %r2 null;
    MOV .t %r2;
    MOV %r3 "string";
    MOV %r5 .u;
    MOV %r6 "protocol";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l4263_;
    MOV %r6 .u;
    MOV %r7 "protocol";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_CTX %r5 "Array";
    MOV %r6 "isArray";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l4263_:
    MOV %r1 %r2;
    JF %r2 _l4262_;
    MOV %r5 .u;
    MOV %r6 "protocol";
    MOV_PROP %r4 %r5 %r6;
    MOV .t %r4;
    MOV %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4262_:
LABEL _l4259_:
    MOV %r0 .u;
    JIF %r0 _l4264_;
    NEW_OBJ %r2;
    MOV .u %r2;
    MOV %r1 %r2;
LABEL _l4264_:
    MOV %r0 0;
    VOID %r0;
    MOV %r2 .u;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4265_;
    MOV %r3 0;
    NEG %r3;
    MOV %r5 .u;
    MOV %r6 "binary";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l4266_;
    MOV %r4 0;
    VOID %r4;
    MOV %r6 .u;
    MOV %r7 "binary";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l4266_:
    NEG %r2;
    MOV %r3 .u;
    MOV %r4 "objectMode";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4265_:
    MOV %r0 .u;
    PUSH %r0;
    MOV %r0 p;
    PUSH %r0;
    FUNC %r0 @@f1156;
    PUSH %r0;
    FUNC %r0 @@f1157;
    CALL_REG %r0 3 false;
    MOV @d $RET;
    MOV %r1 .u;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4267_;
    FUNC %r2 @@f1158;
    MOV %r3 @d;
    MOV %r4 "_writev";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4267_:
    MOV %r1 .u;
    MOV %r2 "browserBufferSize";
    MOV_PROP %r0 %r1 %r2;
    MOV @b %r0;
    JIF %r0 _l4268_;
    MOV %r1 524288;
    LG_OR @b %r1;
LABEL _l4268_:
    MOV %r1 .u;
    MOV %r2 "browserBufferTimeout";
    MOV_PROP %r0 %r1 %r2;
    MOV @g %r0;
    JIF %r0 _l4269_;
    MOV %r1 1000;
    LG_OR @g %r1;
LABEL _l4269_:
    MOV %r0 "object";
    MOV %r1 @e;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l4271_;
    MOV %r1 @e;
    MOV @l %r1;
    JMP _l4270_;
LABEL _l4271_:
    MOV %r1 "arraybuffer";
    MOV %r6 h;
    MOV %r5 %r6;
    JF %r6 _l4274_;
    MOV %r7 f;
    LG_AND %r5 %r7;
LABEL _l4274_:
    JF %r5 _l4273_;
    MOV %r6 @e;
    PUSH %r6;
    MOV %r6 .t;
    PUSH %r6;
    CALL_REG @s 2 true;
    MOV %r4 $RET;
    JMP _l4272_;
LABEL _l4273_:
    MOV %r6 @e;
    PUSH %r6;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 .u;
    PUSH %r6;
    CALL_REG @s 3 true;
    MOV %r4 $RET;
LABEL _l4272_:
    MOV @l %r4;
    MOV %r2 %r4;
    MOV %r3 "binaryType";
    SET_KEY %r2 %r3 %r1;
LABEL _l4270_:
    MOV %r2 @l;
    MOV %r3 "readyState";
    MOV_PROP %r0 %r2 %r3;
    MOV %r2 @l;
    MOV %r3 "OPEN";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4276_;
    MOV %r1 @d;
    MOV @c %r1;
    JMP _l4275_;
LABEL _l4276_:
    MOV %r2 @o;
    MOV %r3 "obj";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
    MOV @c %r1;
    FUNC %r1 @@f1159;
    MOV %r2 @l;
    MOV %r3 "onopen";
    SET_KEY %r2 %r3 %r1;
LABEL _l4275_:
    MOV %r0 @l;
    MOV %r1 @c;
    MOV %r2 "socket";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1160;
    MOV %r1 @l;
    MOV %r2 "onclose";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1161;
    MOV %r1 @l;
    MOV %r2 "onerror";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1162;
    MOV %r1 @l;
    MOV %r2 "onmessage";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "close";
    PUSH %r0;
    FUNC %r0 @@f1163;
    PUSH %r0;
    MOV %r0 @d;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 .u;
    MOV %r1 "objectMode";
    MOV_PROP @_ %r0 %r1;
    NEG @_;
    MOV %r0 @c;
    MOV $RET %r0;
    RET;
}
func @@f970(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @t;
    MOV %r2 .e;
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 @n;
    MOV %r2 .e;
    SET_KEY %r1 %r2 %r0;
}
func @@f971() {
    VAR e;
    VAR r;
    CLS @n;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV_ARGS %r1;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV e $RET;
    MOV r 0;
LABEL _l4277_:
    MOV %r0 r;
    MOV %r2 e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l4278_;
LABEL _l4280_:
    MOV_ARGS %r2;
    MOV %r3 r;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 e;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
LABEL _l4279_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l4277_;
LABEL _l4278_:
    MOV_THIS %r0;
    PUSH %r0;
    MOV %r0 e;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV @n $RET;
    MOV %r0 e;
    MOV %r3 e;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 1;
    SUB %r1 %r2;
    MOV_PROP @i %r0 %r1;
    MOV %r2 "function";
    MOV %r3 @n;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4282_;
    MOV %r3 @n;
    MOV %r4 @i;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4282_:
    JF %r1 _l4281_;
    FUNC %r3 @@f1164;
    PUSH %r3;
    MOV %r5 @i;
    PUSH %r5;
    MOV_CTX %r5 "Object";
    MOV %r6 "keys";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "forEach";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l4281_:
    MOV %r0 @n;
    MOV $RET %r0;
    RET;
}
func @@f972(.s, .a) {
    VAR u;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @s;
    MOV @s .s;
    MOV %r1 @r;
    MOV %r2 @s;
    MOV_PROP %r0 %r1 %r2;
    NEG %r0;
    JF %r0 _l4284_;
    MOV %r2 @t;
    MOV %r3 @s;
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    JF %r1 _l4286_;
    MOV %r2 "function";
    MOV_CTX %r3 "require";
    TYPE_OF %r3;
    WEQ %r2 %r3;
    MOV u %r2;
    JF %r2 _l4287_;
    MOV_CTX %r3 "require";
    LG_AND u %r3;
LABEL _l4287_:
    MOV %r3 .a;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l4290_;
    MOV %r4 u;
    LG_AND %r2 %r4;
LABEL _l4290_:
    JF %r2 _l4289_;
    MOV %r4 @s;
    PUSH %r4;
    MOV %r4 0;
    NEG %r4;
    PUSH %r4;
    CALL_REG u 2 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l4288_;
LABEL _l4289_:
LABEL _l4288_:
    MOV %r2 @o;
    JF %r2 _l4292_;
    MOV %r4 @s;
    PUSH %r4;
    MOV %r4 0;
    NEG %r4;
    PUSH %r4;
    CALL_REG @o 2 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l4291_;
LABEL _l4292_:
LABEL _l4291_:
    MOV %r2 "Cannot find module '";
    MOV %r4 @s;
    ADD %r2 %r4;
    MOV %r3 "'";
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'Error' 1 true;
    MOV c $RET;
    MOV %r3 "MODULE_NOT_FOUND";
    MOV %r4 c;
    MOV %r5 "code";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 c;
    THROW %r2;
    JMP _l4285_;
LABEL _l4286_:
LABEL _l4285_:
    NEW_OBJ %r1;
    NEW_OBJ %r2;
    SET_KEY %r1 'exports' %r2;
    MOV %r2 @r;
    MOV %r3 @s;
    SET_KEY %r2 %r3 %r1;
    MOV l %r1;
    MOV %r2 l;
    MOV %r3 "exports";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    FUNC %r1 @@f1165;
    PUSH %r1;
    MOV %r1 l;
    PUSH %r1;
    MOV %r2 l;
    MOV %r3 "exports";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_CTX %r1 "e";
    PUSH %r1;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @r;
    PUSH %r1;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r5 @t;
    MOV %r6 @s;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 0;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 8 false;
    JMP _l4283_;
LABEL _l4284_:
LABEL _l4283_:
    MOV %r3 @r;
    MOV %r4 @s;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "exports";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f973(.i) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .i;
    JF %r0 _l4294_;
    MOV %r2 @r;
    MOV %r1 %r2;
    JF %r2 _l4295_;
    MOV %r4 .i;
    PUSH %r4;
    CALL_REG @r 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l4295_:
    MOV $RET %r1;
    RET;
    JMP _l4293_;
LABEL _l4294_:
LABEL _l4293_:
    CALL_REG @n 0 false;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    CALL_REG @b 3 false;
}
func @@f974() {
    REG %r0;
    REG %r1;
    MOV %r0 0;
    PUSH %r0;
    MOV_ARGS %r0;
    MOV %r1 3;
    CALL_VAR %r0 %r1 1 false;
}
func @@f975() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 1;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "connected";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS %r1;
    MOV %r2 "connackTimer";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'clearTimeout' 1 false;
}
func @@f976() {
    CLS @e;
    REG %r0;
    REG %r1;
    MOV_THIS %r0;
    MOV %r1 "queue";
    MOV_PROP @e %r0 %r1;
    FUNC %r1 @@f1166;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    NEG %r0;
}
func @@f977() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 null;
    MOV %r2 @n;
    MOV %r3 "pingTimer";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l4296_;
    MOV %r4 @n;
    MOV %r5 "pingTimer";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "clear";
    CALL_VAR %r2 %r3 0 false;
    MOV %r2 null;
    MOV %r3 @n;
    MOV %r4 "pingTimer";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4296_:
}
func @@f978() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @u;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4298_;
    MOV %r1 @l;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4297_;
LABEL _l4298_:
    MOV e @o;
    MOV %r1 null;
    MOV @o %r1;
    CALL_REG e 0 false;
LABEL _l4297_:
}
func @@f979() {
    VAR e;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @u;
    MOV %r1 "shift";
    CALL_VAR %r0 %r1 0 false;
    MOV e $RET;
    MOV %r0 e;
    JF %r0 _l4300_;
    MOV %r1 e;
    PUSH %r1;
    MOV %r1 @c;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "_handlePacket";
    CALL_VAR %r1 %r2 2 false;
    JMP _l4299_;
LABEL _l4300_:
    MOV r @o;
    MOV %r1 null;
    MOV @o %r1;
    MOV %r1 r;
    JF %r1 _l4301_;
    CALL_REG r 0 false;
    MOV %r2 $RET;
LABEL _l4301_:
LABEL _l4299_:
}
func @@f980(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @u;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f981(.e, .t, .r) {
    REG %r0;
    REG %r1;
    MOV %r0 .r;
    MOV @o %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "parse";
    CALL_VAR %r0 %r1 1 false;
    CALL_REG @l 0 false;
}
func @@f982() {
    REG %r0;
    REG %r1;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f983() {
    REG %r0;
    REG %r1;
    MOV %r0 0;
    NEG %r0;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "_cleanUp";
    CALL_VAR %r0 %r1 1 false;
}
func @@f984(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r5 @c;
    MOV %r6 "_resubscribeTopics";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "hasOwnProperty";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l4305_;
    MOV %r9 @c;
    MOV %r10 "_resubscribeTopics";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 .e;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "qos";
    MOV_PROP %r3 %r5 %r6;
    MOV %r5 @u;
    MOV %r6 "qos";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4305_:
    MOV %r0 %r1;
    JIF %r1 _l4304_;
    MOV %r2 @s;
    LG_OR %r0 %r2;
LABEL _l4304_:
    JF %r0 _l4303_;
    NEW_OBJ t;
    MOV %r1 .e;
    SET_KEY t 'topic' %r1;
    MOV %r2 @u;
    MOV %r3 "qos";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY t 'qos' %r1;
    MOV %r1 5;
    MOV %r2 @p;
    EQ %r1 %r2;
    JF %r1 _l4306_;
    MOV %r4 @u;
    MOV %r5 "nl";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "nl";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 @u;
    MOV %r5 "rap";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "rap";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 @u;
    MOV %r5 "rh";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "rh";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l4306_:
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4302_;
LABEL _l4303_:
LABEL _l4302_:
}
func @@f985(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r5 @c;
    MOV %r6 "_resubscribeTopics";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "hasOwnProperty";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l4310_;
    MOV %r9 @c;
    MOV %r10 "_resubscribeTopics";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 .e;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "qos";
    MOV_PROP %r3 %r5 %r6;
    MOV %r7 @o;
    MOV %r8 .e;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "qos";
    MOV_PROP %r4 %r5 %r6;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4310_:
    MOV %r0 %r1;
    JIF %r1 _l4309_;
    MOV %r2 @s;
    LG_OR %r0 %r2;
LABEL _l4309_:
    JF %r0 _l4308_;
    NEW_OBJ t;
    MOV %r1 .e;
    SET_KEY t 'topic' %r1;
    MOV %r4 @o;
    MOV %r5 .e;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "qos";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY t 'qos' %r1;
    MOV %r1 5;
    MOV %r2 @p;
    EQ %r1 %r2;
    JF %r1 _l4311_;
    MOV %r6 @o;
    MOV %r7 .e;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "nl";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "nl";
    SET_KEY %r4 %r5 %r3;
    MOV %r6 @o;
    MOV %r7 .e;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "rap";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "rap";
    SET_KEY %r4 %r5 %r3;
    MOV %r6 @o;
    MOV %r7 .e;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "rh";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 t;
    MOV %r5 "rh";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l4311_:
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4307_;
LABEL _l4308_:
LABEL _l4307_:
}
func @@f986(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r4 @c;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "reconnectPeriod";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 0;
    GT %r0 %r1;
    JF %r0 _l4313_;
    NEW_OBJ t;
    MOV %r2 .e;
    MOV %r3 "qos";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY t 'qos' %r1;
    MOV %r1 5;
    MOV %r2 @p;
    EQ %r1 %r2;
    JF %r1 _l4314_;
    MOV %r5 .e;
    MOV %r6 "nl";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l4315_;
    MOV %r5 1;
    NEG %r5;
    LG_OR %r3 %r5;
LABEL _l4315_:
    MOV %r4 t;
    MOV %r5 "nl";
    SET_KEY %r4 %r5 %r3;
    MOV %r5 .e;
    MOV %r6 "rap";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l4316_;
    MOV %r5 1;
    NEG %r5;
    LG_OR %r3 %r5;
LABEL _l4316_:
    MOV %r4 t;
    MOV %r5 "rap";
    SET_KEY %r4 %r5 %r3;
    MOV %r5 .e;
    MOV %r6 "rh";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l4317_;
    MOV %r5 0;
    LG_OR %r3 %r5;
LABEL _l4317_:
    MOV %r4 t;
    MOV %r5 "rh";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l4314_:
    MOV %r1 t;
    MOV %r4 @c;
    MOV %r5 "_resubscribeTopics";
    MOV_PROP %r2 %r4 %r5;
    MOV %r5 .e;
    MOV %r4 "topic";
    MOV_PROP %r3 %r5 %r4;
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .e;
    MOV %r3 "topic";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @b;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4312_;
LABEL _l4313_:
LABEL _l4312_:
}
func @@f987(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .e;
    NEG %r0;
    JF %r0 _l4319_;
    MOV %r1 .t;
    MOV %r2 "granted";
    MOV_PROP r %r1 %r2;
    MOV n 0;
LABEL _l4320_:
    MOV %r1 n;
    MOV %r3 r;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    JF %r1 _l4321_;
LABEL _l4323_:
    MOV %r3 r;
    MOV %r4 n;
    MOV_PROP %r2 %r3 %r4;
    MOV %r5 @i;
    MOV %r6 n;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "qos";
    SET_KEY %r3 %r4 %r2;
LABEL _l4322_:
    MOV %r2 1;
    MOV %r3 n;
    ADD %r3 %r2;
    MOV n %r3;
    JMP _l4320_;
LABEL _l4321_:
    JMP _l4318_;
LABEL _l4319_:
LABEL _l4318_:
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @i;
    PUSH %r0;
    CALL_REG @a 2 false;
}
func @@f988(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 @t;
    MOV %r3 "_resubscribeTopics";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .e;
    DEL %r0 %r1;
}
func @@f989() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 @e;
    MOV %r2 "disconnected";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f1167;
    PUSH %r0;
    MOV %r2 @e;
    MOV %r3 "incomingStore";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 1 false;
    MOV %r1 @e;
    MOV %r2 "_deferredReconnect";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4324_;
    MOV %r2 @e;
    MOV %r3 "_deferredReconnect";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l4324_:
}
func @@f990() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r1 null;
    PUSH %r1;
    MOV %r1 @i;
    PUSH %r1;
    MOV %r1 @h;
    MOV %r2 "bind";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "_cleanUp";
    CALL_VAR %r0 %r1 3 false;
}
func @@f991() {
    REG %r0;
    REG %r1;
    MOV %r1 "Message removed";
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @t 1 false;
}
func @@f992() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 @e;
    JF %r0 _l4326_;
    MOV %r2 @e;
    MOV %r3 "incomingStore";
    MOV_PROP %r1 %r2 %r3;
    MOV %r4 @t;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "incomingStore";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 @e;
    MOV %r3 "outgoingStore";
    MOV_PROP %r1 %r2 %r3;
    MOV %r4 @t;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "outgoingStore";
    SET_KEY %r2 %r3 %r1;
    JMP _l4325_;
LABEL _l4326_:
    MOV %r1 null;
    MOV %r4 @t;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "incomingStore";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 null;
    MOV %r4 @t;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "outgoingStore";
    SET_KEY %r2 %r3 %r1;
LABEL _l4325_:
    MOV %r4 @t;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "incomingStore";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4327_;
    CALL_REG @o 0 true;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l4327_:
    MOV %r1 @t;
    MOV %r2 "incomingStore";
    SET_KEY %r1 %r2 %r0;
    MOV %r4 @t;
    MOV %r5 "options";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "outgoingStore";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4328_;
    CALL_REG @o 0 true;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l4328_:
    MOV %r1 @t;
    MOV %r2 "outgoingStore";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 "disconnecting";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 "disconnected";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 @t;
    MOV %r2 "_deferredReconnect";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @t;
    MOV %r1 "_reconnect";
    CALL_VAR %r0 %r1 0 false;
}
func @@f993() {
    REG %r0;
    REG %r1;
    MOV %r0 @e;
    MOV %r1 "_reconnect";
    CALL_VAR %r0 %r1 0 false;
}
func @@f994(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "function";
    MOV %r2 @r;
    MOV %r3 .e;
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l4329_;
    MOV %r3 "Connection closed";
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 .e;
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 @r;
    MOV %r3 .e;
    DEL %r2 %r3;
LABEL _l4329_:
}
func @@f995(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    JF %r0 _l4331_;
    MOV %r2 @t;
    MOV %r1 %r2;
    JF %r2 _l4332_;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @t 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l4332_:
    MOV $RET %r1;
    RET;
    JMP _l4330_;
LABEL _l4331_:
LABEL _l4330_:
    CALL_REG @r 0 false;
}
func @@f996() {
    REG %r0;
    REG %r1;
    MOV %r0 @e;
    MOV %r1 "_checkPing";
    CALL_VAR %r0 %r1 0 false;
}
func @@f997(.r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .r;
    MOV_CTX %r2 "Error";
    INST_OF %r1 %r2;
    JIF %r1 _l4333_;
    MOV %r3 .r;
    MOV .n %r3;
    MOV %r3 null;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l4333_:
    MOV %r1 .r;
    JF %r1 _l4335_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l4334_;
LABEL _l4335_:
    MOV %r2 1;
    MINUS %r2;
    MOV %r4 .n;
    PUSH %r4;
    MOV %r4 @u;
    MOV %r5 "indexOf";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    JF %r2 _l4336_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Wrong reason code for pubrec";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
    JMP _l4334_;
LABEL _l4336_:
    MOV %r3 .n;
    JF %r3 _l4338_;
    NEW_OBJ %r4;
    MOV %r5 "pubrec";
    SET_KEY %r4 'cmd' %r5;
    MOV %r5 @o;
    SET_KEY %r4 'messageId' %r5;
    MOV %r5 .n;
    SET_KEY %r4 'reasonCode' %r5;
    PUSH %r4;
    MOV %r4 @t;
    PUSH %r4;
    MOV %r4 @s;
    MOV %r5 "_sendPacket";
    CALL_VAR %r4 %r5 2 false;
    MOV %r0 $RET;
    JMP _l4337_;
LABEL _l4338_:
    MOV %r4 @e;
    PUSH %r4;
    FUNC %r4 @@f1168;
    PUSH %r4;
    MOV %r6 @s;
    MOV %r7 "incomingStore";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "put";
    CALL_VAR %r4 %r5 2 false;
    MOV %r0 $RET;
LABEL _l4337_:
    VOID %r0;
LABEL _l4334_:
    MOV $RET %r0;
    RET;
}
func @@f998(.i, .a) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    CLS @a;
    MOV @a .a;
    MOV %r1 .i;
    MOV_CTX %r2 "Error";
    INST_OF %r1 %r2;
    JIF %r1 _l4339_;
    MOV %r3 .i;
    MOV @a %r3;
    MOV %r3 null;
    MOV .i %r3;
    MOV %r2 %r3;
LABEL _l4339_:
    MOV %r1 .i;
    JF %r1 _l4341_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .i;
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l4340_;
LABEL _l4341_:
    MOV %r2 1;
    MINUS %r2;
    MOV %r4 @a;
    PUSH %r4;
    MOV %r4 @u;
    MOV %r5 "indexOf";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    EQ %r2 %r3;
    JF %r2 _l4342_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r4 "Wrong reason code for puback";
    PUSH %r4;
    CALL_CTX 'Error' 1 true;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
    JMP _l4340_;
LABEL _l4342_:
    MOV %r3 @a;
    JIF %r3 _l4343_;
    MOV %r5 "message";
    PUSH %r5;
    MOV %r5 @r;
    PUSH %r5;
    MOV %r5 @n;
    PUSH %r5;
    MOV %r5 @e;
    PUSH %r5;
    MOV %r5 @s;
    MOV %r6 "emit";
    CALL_VAR %r5 %r6 4 false;
    MOV %r4 $RET;
LABEL _l4343_:
    MOV %r3 @e;
    PUSH %r3;
    FUNC %r3 @@f1169;
    PUSH %r3;
    MOV %r3 @s;
    MOV %r4 "handleMessage";
    CALL_VAR %r3 %r4 2 false;
    MOV %r0 $RET;
    VOID %r0;
LABEL _l4340_:
    MOV $RET %r0;
    RET;
}
func @@f999(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 @s;
    MOV %r3 "_resubscribeTopics";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .e;
    DEL %r0 %r1;
}
func @@f1000(.e, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @r;
    MOV @r .r;
    MOV %r0 .e;
    JF %r0 _l4345_;
    MOV %r1 @i;
    PUSH %r1;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "_sendPacket";
    CALL_VAR %r1 %r2 2 false;
    JMP _l4344_;
LABEL _l4345_:
    MOV %r1 "message";
    PUSH %r1;
    MOV %r2 @r;
    MOV %r3 "topic";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r2 @r;
    MOV %r3 "payload";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @r;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 4 false;
    MOV %r1 @r;
    PUSH %r1;
    FUNC %r1 @@f1170;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "handleMessage";
    CALL_VAR %r1 %r2 2 false;
LABEL _l4344_:
}
func @@f1001() {
    CLS @n;
    CLS @i;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC @i @@f1171;
    FUNC @o @@f1172;
    MOV %r2 @t;
    MOV %r3 "outgoingStore";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "createStream";
    CALL_VAR %r0 %r1 0 false;
    MOV @n $RET;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @o;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "once";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "error";
    PUSH %r0;
    FUNC %r0 @@f1173;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "end";
    PUSH %r0;
    FUNC %r0 @@f1174;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "on";
    CALL_VAR %r0 %r1 2 false;
    FUNC %r0 @@f1175;
    CALL_REG %r0 0 false;
}
func @@f1002(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    MOV %r2 "hostname";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4346_;
    MOV %r2 "localhost";
    MOV %r3 .e;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4346_:
    MOV %r1 .e;
    MOV %r2 "path";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4347_;
    MOV %r2 "/";
    MOV %r3 .e;
    MOV %r4 "path";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4347_:
    MOV %r1 .e;
    MOV %r2 "wsOptions";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4348_;
    NEW_OBJ %r2;
    MOV %r3 .e;
    MOV %r4 "wsOptions";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4348_:
}
func @@f1003(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 "alis";
    MOV %r2 .e;
    MOV %r3 "protocol";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4350_;
    MOV r "wss";
    JMP _l4349_;
LABEL _l4350_:
    MOV r "ws";
LABEL _l4349_:
    MOV n r;
    MOV %r2 "://";
    ADD n %r2;
    MOV %r2 .e;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    ADD n %r1;
    MOV %r1 .e;
    MOV %r2 "path";
    MOV_PROP %r0 %r1 %r2;
    ADD n %r0;
    MOV %r4 .e;
    MOV %r5 "port";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l4353_;
    MOV %r4 80;
    MOV %r6 .e;
    MOV %r7 "port";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l4353_:
    MOV %r1 %r2;
    JF %r2 _l4352_;
    MOV %r3 443;
    MOV %r5 .e;
    MOV %r6 "port";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4352_:
    JF %r1 _l4351_;
    MOV %r3 r;
    MOV %r8 "://";
    ADD %r3 %r8;
    MOV %r8 .e;
    MOV %r9 "hostname";
    MOV_PROP %r7 %r8 %r9;
    ADD %r3 %r7;
    MOV %r6 ":";
    ADD %r3 %r6;
    MOV %r6 .e;
    MOV %r7 "port";
    MOV_PROP %r5 %r6 %r7;
    ADD %r3 %r5;
    MOV %r5 .e;
    MOV %r6 "path";
    MOV_PROP %r4 %r5 %r6;
    ADD %r3 %r4;
    MOV n %r3;
    MOV %r2 %r3;
LABEL _l4351_:
    MOV %r1 "function";
    MOV %r3 .e;
    MOV %r4 "transformWsUrl";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4354_;
    MOV %r4 n;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "transformWsUrl";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    MOV n %r3;
    MOV %r2 %r3;
LABEL _l4354_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f1004() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CALL_REG @s 0 true;
    MOV e $RET;
    FUNC %r1 @@f1176;
    MOV %r2 e;
    MOV %r3 "_write";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f1177;
    MOV %r2 e;
    MOV %r3 "_flush";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 e;
    MOV $RET %r0;
    RET;
}
func @@f1005() {
    REG %r0;
    REG %r1;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "setReadable";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "setWritable";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 "connect";
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1006(.e) {
    VAR t;
    VAR n;
    CLS @o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "string";
    MOV %r2 .e;
    MOV %r3 "data";
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l4356_;
    MOV %r2 .e;
    MOV %r3 "data";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @u;
    MOV %r2 "toByteArray";
    CALL_VAR %r1 %r2 1 false;
    MOV t $RET;
    MOV %r1 t;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV n $RET;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4355_;
LABEL _l4356_:
    CALL_CTX 'FileReader' 0 true;
    MOV @o $RET;
    MOV %r1 "load";
    PUSH %r1;
    FUNC %r1 @@f1178;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "addEventListener";
    CALL_VAR %r1 %r2 2 false;
    MOV %r2 .e;
    MOV %r3 "data";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "readAsArrayBuffer";
    CALL_VAR %r1 %r2 1 false;
LABEL _l4355_:
}
func @@f1007() {
    REG %r0;
    REG %r1;
    MOV %r0 @o;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
    MOV %r0 @o;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1008(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1009(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    CLS @e;
    MOV @e .e;
    MOV %r1 @e;
    MOV %r2 "hostname";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4357_;
    MOV %r2 "localhost";
    MOV %r3 @e;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4357_:
    MOV %r1 @e;
    MOV %r2 "port";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4358_;
    MOV %r2 "wss";
    MOV %r4 @e;
    MOV %r5 "protocol";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4360_;
    MOV %r3 443;
    MOV %r4 @e;
    MOV %r5 "port";
    SET_KEY %r4 %r5 %r3;
    MOV %r1 %r3;
    JMP _l4359_;
LABEL _l4360_:
    MOV %r3 80;
    MOV %r4 @e;
    MOV %r5 "port";
    SET_KEY %r4 %r5 %r3;
    MOV %r1 %r3;
LABEL _l4359_:
LABEL _l4358_:
    MOV %r1 @e;
    MOV %r2 "path";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4361_;
    MOV %r2 "/";
    MOV %r3 @e;
    MOV %r4 "path";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4361_:
    MOV %r1 @e;
    MOV %r2 "wsOptions";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4362_;
    NEW_OBJ %r2;
    MOV %r3 @e;
    MOV %r4 "wsOptions";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4362_:
    MOV %r1 @s;
    MOV %r0 %r1;
    JIF %r1 _l4364_;
    MOV %r2 "wss";
    MOV %r4 @e;
    MOV %r5 "protocol";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l4364_:
    JIF %r0 _l4363_;
    FUNC %r2 @@f1179;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "forEach";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4363_:
}
func @@f1010(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r5 .e;
    MOV %r6 "protocol";
    MOV_PROP r %r5 %r6;
    MOV %r4 "://";
    ADD r %r4;
    MOV %r4 .e;
    MOV %r5 "hostname";
    MOV_PROP %r3 %r4 %r5;
    ADD r %r3;
    MOV %r2 ":";
    ADD r %r2;
    MOV %r2 .e;
    MOV %r3 "port";
    MOV_PROP %r1 %r2 %r3;
    ADD r %r1;
    MOV %r1 .e;
    MOV %r2 "path";
    MOV_PROP %r0 %r1 %r2;
    ADD r %r0;
    MOV %r1 "function";
    MOV %r3 .e;
    MOV %r4 "transformWsUrl";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4365_;
    MOV %r4 r;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "transformWsUrl";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    MOV r %r3;
    MOV %r2 %r3;
LABEL _l4365_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f1011(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .e;
    MOV %r2 "hostname";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4366_;
    MOV %r2 "localhost";
    MOV %r3 .e;
    MOV %r4 "hostname";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4366_:
    MOV %r1 .e;
    MOV %r2 "path";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4367_;
    MOV %r2 "/";
    MOV %r3 .e;
    MOV %r4 "path";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4367_:
    MOV %r1 .e;
    MOV %r2 "wsOptions";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4368_;
    NEW_OBJ %r2;
    MOV %r3 .e;
    MOV %r4 "wsOptions";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4368_:
}
func @@f1012(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 "wxs";
    MOV %r2 .e;
    MOV %r3 "protocol";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4370_;
    MOV r "wss";
    JMP _l4369_;
LABEL _l4370_:
    MOV r "ws";
LABEL _l4369_:
    MOV n r;
    MOV %r2 "://";
    ADD n %r2;
    MOV %r2 .e;
    MOV %r3 "hostname";
    MOV_PROP %r1 %r2 %r3;
    ADD n %r1;
    MOV %r1 .e;
    MOV %r2 "path";
    MOV_PROP %r0 %r1 %r2;
    ADD n %r0;
    MOV %r4 .e;
    MOV %r5 "port";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JF %r3 _l4373_;
    MOV %r4 80;
    MOV %r6 .e;
    MOV %r7 "port";
    MOV_PROP %r5 %r6 %r7;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l4373_:
    MOV %r1 %r2;
    JF %r2 _l4372_;
    MOV %r3 443;
    MOV %r5 .e;
    MOV %r6 "port";
    MOV_PROP %r4 %r5 %r6;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4372_:
    JF %r1 _l4371_;
    MOV %r3 r;
    MOV %r8 "://";
    ADD %r3 %r8;
    MOV %r8 .e;
    MOV %r9 "hostname";
    MOV_PROP %r7 %r8 %r9;
    ADD %r3 %r7;
    MOV %r6 ":";
    ADD %r3 %r6;
    MOV %r6 .e;
    MOV %r7 "port";
    MOV_PROP %r5 %r6 %r7;
    ADD %r3 %r5;
    MOV %r5 .e;
    MOV %r6 "path";
    MOV_PROP %r4 %r5 %r6;
    ADD %r3 %r4;
    MOV n %r3;
    MOV %r2 %r3;
LABEL _l4371_:
    MOV %r1 "function";
    MOV %r3 .e;
    MOV %r4 "transformWsUrl";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4374_;
    MOV %r4 n;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "transformWsUrl";
    CALL_VAR %r4 %r5 3 false;
    MOV %r3 $RET;
    MOV n %r3;
    MOV %r2 %r3;
LABEL _l4374_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f1013(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @e;
    MOV @e .e;
    CALL_REG @i 0 true;
    MOV t $RET;
    FUNC %r1 @@f1180;
    MOV %r2 t;
    MOV %r3 "_write";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f1181;
    MOV %r2 t;
    MOV %r3 "_flush";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f1014(.e, .t) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @l;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    NEW_OBJ %r0;
    FUNC %r1 @@f1182;
    SET_KEY %r0 'success' %r1;
    PUSH %r0;
    MOV %r0 @u;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1015() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @f;
    MOV %r1 @l;
    MOV %r2 "destroy";
    SET_KEY %r1 %r2 %r0;
    MOV_THIS @e;
    FUNC %r0 @@f1183;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1016(.e, .t, .r) {
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    FUNC %r0 @@f1184;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "onOpen";
    CALL_VAR %r0 %r1 1 false;
    FUNC %r0 @@f1185;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "onMessage";
    CALL_VAR %r0 %r1 1 false;
    FUNC %r0 @@f1186;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "onClose";
    CALL_VAR %r0 %r1 1 false;
    FUNC %r0 @@f1187;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "onError";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1017(.e, .t) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1018() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 @t;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l4377_;
    MOV %r2 @s;
    MOV %r4 @n;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LT %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4377_:
    JF %r0 _l4376_;
    MOV %r2 @n;
    MOV %r4 @s;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV @s %r4;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4375_;
LABEL _l4376_:
    MOV %r1 null;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l4375_:
}
func @@f1019() {
    CLS @e;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @t;
    NEG %r0;
    JF %r0 _l4379_;
    MOV_THIS @e;
    MOV %r1 0;
    NEG %r1;
    MOV @t %r1;
    FUNC %r1 @@f1188;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 1 false;
    JMP _l4378_;
LABEL _l4379_:
LABEL _l4378_:
}
func @@f1020(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .e;
    MOV %r2 "auth";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4380_;
    NEW_REG %r4 "^(.+):(.+)$" "";
    PUSH %r4;
    MOV %r6 .e;
    MOV %r7 "auth";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "match";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV t %r3;
    MOV %r2 %r3;
    JF %r2 _l4382_;
    MOV %r4 t;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .e;
    MOV %r5 "username";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 t;
    MOV %r5 2;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .e;
    MOV %r5 "password";
    SET_KEY %r4 %r5 %r3;
    MOV %r1 %r3;
    JMP _l4381_;
LABEL _l4382_:
    MOV %r4 .e;
    MOV %r5 "auth";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 .e;
    MOV %r5 "username";
    SET_KEY %r4 %r5 %r3;
    MOV %r1 %r3;
LABEL _l4381_:
LABEL _l4380_:
}
func @@f1021(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 @i;
    NEG %r2;
    MOV %r1 %r2;
    JIF %r2 _l4384_;
    MOV %r3 .t;
    MOV %r5 2;
    MOD %r3 %r5;
    MOV %r4 0;
    WNE %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4384_:
    MOV %r0 %r1;
    JF %r1 _l4383_;
    MOV %r2 "function";
    MOV %r4 @a;
    MOV %r5 .e;
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4383_:
    MOV $RET %r0;
    RET;
}
func @@f1022(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r2 @t;
    MOV %r3 "servers";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4385_;
    MOV %r5 .e;
    MOV %r6 "_reconnectCount";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JF %r4 _l4387_;
    MOV %r7 .e;
    MOV %r8 "_reconnectCount";
    MOV_PROP %r5 %r7 %r8;
    MOV %r9 @t;
    MOV %r10 "servers";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    NE %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l4387_:
    JIF %r3 _l4386_;
    MOV %r5 0;
    MOV %r6 .e;
    MOV %r7 "_reconnectCount";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
LABEL _l4386_:
    MOV %r8 @t;
    MOV %r9 "servers";
    MOV_PROP %r6 %r8 %r9;
    MOV %r9 .e;
    MOV %r8 "_reconnectCount";
    MOV_PROP %r7 %r9 %r8;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 @t;
    MOV %r5 "host";
    SET_KEY %r4 %r5 %r3;
    MOV %r8 @t;
    MOV %r9 "servers";
    MOV_PROP %r6 %r8 %r9;
    MOV %r9 .e;
    MOV %r8 "_reconnectCount";
    MOV_PROP %r7 %r9 %r8;
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "port";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 @t;
    MOV %r5 "port";
    SET_KEY %r4 %r5 %r3;
    MOV %r9 @t;
    MOV %r10 "servers";
    MOV_PROP %r7 %r9 %r10;
    MOV %r10 .e;
    MOV %r9 "_reconnectCount";
    MOV_PROP %r8 %r10 %r9;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "protocol";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l4389_;
    MOV %r9 @t;
    MOV %r10 "servers";
    MOV_PROP %r7 %r9 %r10;
    MOV %r10 .e;
    MOV %r9 "_reconnectCount";
    MOV_PROP %r8 %r10 %r9;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "protocol";
    MOV_PROP %r3 %r5 %r6;
    JMP _l4388_;
LABEL _l4389_:
    MOV %r5 @t;
    MOV %r6 "defaultProtocol";
    MOV_PROP %r3 %r5 %r6;
LABEL _l4388_:
    MOV %r4 @t;
    MOV %r5 "protocol";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 @t;
    MOV %r5 "host";
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 @t;
    MOV %r5 "hostname";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 .e;
    MOV %r5 "_reconnectCount";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    ADD %r3 1;
    MOV %r4 .e;
    MOV %r5 "_reconnectCount";
    SET_KEY %r4 %r5 %r3;
LABEL _l4385_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @a;
    MOV %r4 @t;
    MOV %r3 "protocol";
    MOV_PROP %r2 %r4 %r3;
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1023(.r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 0;
    PUSH %r1;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .r;
    MOV %r5 @e;
    MOV %r6 @t;
    MOV_PROP %r4 %r5 %r6;
    ADD %r3 %r4;
    PUSH %r3;
    MOV_THIS %r3;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 @t;
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1024(.e, .r) {
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 "string";
    MOV %r2 .r;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4391_;
    MOV %r2 "";
    MOV %r3 .r;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4391_:
    JIF %r0 _l4390_;
    MOV %r2 "utf8";
    MOV .r %r2;
    MOV %r1 %r2;
LABEL _l4390_:
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isEncoding";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l4393_;
    MOV %r2 "Unknown encoding: ";
    MOV %r3 .r;
    ADD %r2 %r3;
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l4392_;
LABEL _l4393_:
LABEL _l4392_:
    MOV n 0;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG @h 2 false;
    MOV %r0 $RET;
    OR n %r0;
    MOV %r0 n;
    PUSH %r0;
    CALL_REG @s 1 false;
    MOV i $RET;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    MOV %r0 i;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 2 false;
    MOV o $RET;
    MOV %r0 o;
    MOV %r1 n;
    NE %r0 %r1;
    JF %r0 _l4394_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 o;
    PUSH %r3;
    MOV %r3 i;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV i %r2;
    MOV %r1 %r2;
LABEL _l4394_:
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f1025(.e, .r, .n) {
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .r;
    MOV %r2 0;
    LT %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l4397_;
    MOV %r4 .e;
    MOV %r5 "byteLength";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .r;
    LT %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l4397_:
    JF %r0 _l4396_;
    MOV %r2 "\"offset\" is outside of buffer bounds";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l4395_;
LABEL _l4396_:
LABEL _l4395_:
    MOV %r2 .e;
    MOV %r3 "byteLength";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 .r;
    MOV %r3 .n;
    MOV %r2 %r3;
    JIF %r3 _l4400_;
    MOV %r4 0;
    LG_OR %r2 %r4;
LABEL _l4400_:
    ADD %r1 %r2;
    LT %r0 %r1;
    JF %r0 _l4399_;
    MOV %r2 "\"length\" is outside of buffer bounds";
    PUSH %r2;
    CALL_CTX 'RangeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l4398_;
LABEL _l4399_:
LABEL _l4398_:
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .r;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4403_;
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .n;
    EQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4403_:
    JF %r1 _l4402_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_CTX 'Uint8Array' 1 true;
    MOV %r0 $RET;
    JMP _l4401_;
LABEL _l4402_:
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .n;
    EQ %r2 %r3;
    JF %r2 _l4404_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    CALL_CTX 'Uint8Array' 2 true;
    MOV %r0 $RET;
    JMP _l4401_;
LABEL _l4404_:
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .n;
    PUSH %r3;
    CALL_CTX 'Uint8Array' 3 true;
    MOV %r0 $RET;
LABEL _l4401_:
    MOV i %r0;
    MOV %r2 @t;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 i;
    MOV %r3 "__proto__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f1026(.e) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "isBuffer";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l4406_;
    MOV r 0;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @f 1 false;
    MOV %r1 $RET;
    OR r %r1;
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @s 1 false;
    MOV n $RET;
    MOV %r2 0;
    MOV %r4 n;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4408_;
    MOV %r1 n;
    JMP _l4407_;
LABEL _l4408_:
    MOV %r3 n;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "copy";
    CALL_VAR %r3 %r4 4 false;
    MOV %r1 n;
LABEL _l4407_:
    MOV $RET %r1;
    RET;
    JMP _l4405_;
LABEL _l4406_:
LABEL _l4405_:
    MOV %r0 0;
    VOID %r0;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l4410_;
    MOV %r3 "number";
    MOV %r5 .e;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l4413_;
    MOV %r6 .e;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG @q 1 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l4413_:
    JF %r2 _l4412_;
    MOV %r3 0;
    PUSH %r3;
    CALL_REG @s 1 false;
    MOV %r1 $RET;
    JMP _l4411_;
LABEL _l4412_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @l 1 false;
    MOV %r1 $RET;
LABEL _l4411_:
    MOV $RET %r1;
    RET;
    JMP _l4409_;
LABEL _l4410_:
LABEL _l4409_:
    MOV %r1 "Buffer";
    MOV %r3 .e;
    MOV %r4 "type";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4416_;
    MOV %r4 .e;
    MOV %r5 "data";
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV_CTX %r3 "Array";
    MOV %r4 "isArray";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l4416_:
    JF %r0 _l4415_;
    MOV %r3 .e;
    MOV %r4 "data";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @l 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4414_;
LABEL _l4415_:
LABEL _l4414_:
}
func @@f1027(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 1;
    MOV %r2 @s;
    EQ %r1 %r2;
    JF %r1 _l4418_;
    MOV %r2 .e;
    MOV %r3 .t;
    MOV_PROP %r0 %r2 %r3;
    JMP _l4417_;
LABEL _l4418_:
    MOV %r2 .t;
    MOV %r3 @s;
    MUL %r2 %r3;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "readUInt16BE";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
LABEL _l4417_:
    MOV $RET %r0;
    RET;
}
func @@f1028(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    NEW_ARR t;
    MOV r 0;
LABEL _l4419_:
    MOV %r0 r;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l4420_;
LABEL _l4422_:
    MOV %r1 255;
    MOV %r3 r;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "charCodeAt";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    AND %r1 %r2;
    PUSH %r1;
    MOV %r1 t;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l4421_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    JMP _l4419_;
LABEL _l4420_:
    MOV %r0 t;
    MOV $RET %r0;
    RET;
}
func @@f1029(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    NEW_ARR o;
    MOV s 0;
LABEL _l4423_:
    MOV %r1 s;
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4427_;
    MOV %r4 2;
    MOV %r5 .t;
    SUB %r5 %r4;
    MOV .t %r5;
    MOV %r2 %r5;
    MOV %r3 0;
    LT %r2 %r3;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l4427_:
    JF %r0 _l4424_;
LABEL _l4426_:
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "charCodeAt";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV r %r1;
    MOV %r1 r;
    MOV %r2 8;
    SHR %r1 %r2;
    MOV n %r1;
    MOV %r1 r;
    MOV %r2 256;
    MOD %r1 %r2;
    MOV i %r1;
    MOV %r1 i;
    PUSH %r1;
    MOV %r1 o;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 o;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l4425_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l4423_;
LABEL _l4424_:
    MOV %r0 o;
    MOV $RET %r0;
    RET;
}
func @@f1030(.e) {
    VAR t;
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP t %r0 %r1;
    MOV %r0 t;
    MOV %r1 @x;
    LE %r0 %r1;
    JF %r0 _l4429_;
    MOV_CTX %r2 "String";
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV_CTX %r4 "String";
    MOV %r5 "fromCharCode";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4428_;
LABEL _l4429_:
LABEL _l4428_:
    MOV r "";
    MOV n 0;
LABEL _l4430_:
    MOV %r0 n;
    MOV %r1 t;
    LT %r0 %r1;
    JF %r0 _l4431_;
LABEL _l4433_:
    MOV_CTX %r2 "String";
    PUSH %r2;
    MOV %r3 n;
    PUSH %r3;
    MOV %r4 @x;
    MOV %r5 n;
    ADD %r5 %r4;
    MOV n %r5;
    MOV %r3 %r5;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "slice";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV_CTX %r4 "String";
    MOV %r5 "fromCharCode";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r2 r;
    ADD %r2 %r1;
    MOV r %r2;
    JMP _l4430_;
LABEL _l4431_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f1031() {
    REG %r0;
    MOV %r0 42;
    MOV $RET %r0;
    RET;
}
func @@f1032(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @u 1 false;
    MOV %r1 .e;
    MOV %r2 0;
    LE %r1 %r2;
    JF %r1 _l4435_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @s 1 false;
    MOV %r0 $RET;
    JMP _l4434_;
LABEL _l4435_:
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .t;
    NE %r2 %r3;
    JF %r2 _l4436_;
    MOV %r3 "string";
    MOV %r4 .r;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    JF %r3 _l4438_;
    MOV %r4 .t;
    PUSH %r4;
    MOV %r4 .r;
    PUSH %r4;
    MOV %r6 .e;
    PUSH %r6;
    CALL_REG @s 1 false;
    MOV %r4 $RET;
    MOV %r5 "fill";
    CALL_VAR %r4 %r5 2 false;
    MOV %r0 $RET;
    JMP _l4437_;
LABEL _l4438_:
    MOV %r4 .t;
    PUSH %r4;
    MOV %r6 .e;
    PUSH %r6;
    CALL_REG @s 1 false;
    MOV %r4 $RET;
    MOV %r5 "fill";
    CALL_VAR %r4 %r5 1 false;
    MOV %r0 $RET;
LABEL _l4437_:
    JMP _l4434_;
LABEL _l4436_:
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @s 1 false;
    MOV %r0 $RET;
LABEL _l4434_:
    MOV $RET %r0;
    RET;
}
func @@f1033(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    MOV n 1;
    NEG n;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .t;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l4442_;
    MOV %r3 .t;
    MOV %r4 0;
    LT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4442_:
    JF %r1 _l4441_;
    MOV %r3 0;
    MOV .t %r3;
    MOV %r2 %r3;
LABEL _l4441_:
    MOV %r0 .t;
    MOV_THIS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    GT %r0 %r1;
    JF %r0 _l4440_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l4439_;
LABEL _l4440_:
LABEL _l4439_:
    MOV %r2 0;
    VOID %r2;
    MOV %r3 .r;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l4446_;
    MOV %r3 .r;
    MOV_THIS %r5;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    GT %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4446_:
    JF %r1 _l4445_;
    MOV_THIS %r4;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV .r %r3;
    MOV %r2 %r3;
LABEL _l4445_:
    MOV %r0 .r;
    MOV %r1 0;
    LE %r0 %r1;
    JF %r0 _l4444_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l4443_;
LABEL _l4444_:
LABEL _l4443_:
    MOV %r2 0;
    MOV %r3 .r;
    ZSHR %r3 %r2;
    MOV .r %r3;
    MOV %r0 %r3;
    MOV %r2 0;
    MOV %r3 .t;
    ZSHR %r3 %r2;
    MOV .t %r3;
    MOV %r1 %r3;
    LE %r0 %r1;
    JF %r0 _l4448_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l4447_;
LABEL _l4448_:
LABEL _l4447_:
    MOV %r0 .e;
    JIF %r0 _l4452_;
    MOV %r2 "utf8";
    MOV .e %r2;
    MOV %r1 %r2;
LABEL _l4452_:
LABEL _l4449_:
LABEL _l4453_:
    MOV %r0 .e;
    MOV %r1 "hex";
    JE %r0 %r1 _l4455_;
    JMP _l4456_;
LABEL _l4455_:
    MOV_THIS %r3;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    CALL_REG @O 3 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l4457_;
LABEL _l4456_:
    MOV %r2 "utf8";
    JE %r0 %r2 _l4457_;
    JMP _l4458_;
LABEL _l4458_:
    MOV %r3 "utf-8";
    JE %r0 %r3 _l4457_;
    JMP _l4459_;
LABEL _l4457_:
    MOV_THIS %r5;
    PUSH %r5;
    MOV %r5 .t;
    PUSH %r5;
    MOV %r5 .r;
    PUSH %r5;
    CALL_REG @E 3 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    JMP _l4460_;
LABEL _l4459_:
    MOV %r4 "ascii";
    JE %r0 %r4 _l4460_;
    JMP _l4461_;
LABEL _l4460_:
    MOV_THIS %r6;
    PUSH %r6;
    MOV %r6 .t;
    PUSH %r6;
    MOV %r6 .r;
    PUSH %r6;
    CALL_REG @k 3 false;
    MOV %r5 $RET;
    MOV $RET %r5;
    RET;
    JMP _l4462_;
LABEL _l4461_:
    MOV %r5 "latin1";
    JE %r0 %r5 _l4462_;
    JMP _l4463_;
LABEL _l4463_:
    MOV %r6 "binary";
    JE %r0 %r6 _l4462_;
    JMP _l4464_;
LABEL _l4462_:
    MOV_THIS %r8;
    PUSH %r8;
    MOV %r8 .t;
    PUSH %r8;
    MOV %r8 .r;
    PUSH %r8;
    CALL_REG @I 3 false;
    MOV %r7 $RET;
    MOV $RET %r7;
    RET;
    JMP _l4465_;
LABEL _l4464_:
    MOV %r7 "base64";
    JE %r0 %r7 _l4465_;
    JMP _l4466_;
LABEL _l4465_:
    MOV_THIS %r9;
    PUSH %r9;
    MOV %r9 .t;
    PUSH %r9;
    MOV %r9 .r;
    PUSH %r9;
    CALL_REG @S 3 false;
    MOV %r8 $RET;
    MOV $RET %r8;
    RET;
    JMP _l4467_;
LABEL _l4466_:
    MOV %r8 "ucs2";
    JE %r0 %r8 _l4467_;
    JMP _l4468_;
LABEL _l4468_:
    MOV %r9 "ucs-2";
    JE %r0 %r9 _l4467_;
    JMP _l4469_;
LABEL _l4469_:
    MOV %r10 "utf16le";
    JE %r0 %r10 _l4467_;
    JMP _l4470_;
LABEL _l4470_:
    MOV %r11 "utf-16le";
    JE %r0 %r11 _l4467_;
    JMP _l4471_;
LABEL _l4467_:
    MOV_THIS %r13;
    PUSH %r13;
    MOV %r13 .t;
    PUSH %r13;
    MOV %r13 .r;
    PUSH %r13;
    CALL_REG @T 3 false;
    MOV %r12 $RET;
    MOV $RET %r12;
    RET;
    JMP _l4472_;
LABEL _l4471_:
LABEL _l4472_:
    MOV %r12 n;
    JF %r12 _l4475_;
    MOV %r14 "Unknown encoding: ";
    MOV %r15 .e;
    ADD %r14 %r15;
    PUSH %r14;
    CALL_CTX 'TypeError' 1 true;
    MOV %r13 $RET;
    THROW %r13;
    JMP _l4474_;
LABEL _l4475_:
LABEL _l4474_:
    MOV %r13 .e;
    MOV %r15 "";
    ADD %r13 %r15;
    MOV %r14 "toLowerCase";
    CALL_VAR %r13 %r14 0 false;
    MOV %r12 $RET;
    MOV .e %r12;
    MOV %r12 0;
    NEG %r12;
    MOV n %r12;
    JMP _l4476_;
LABEL _l4473_:
LABEL _l4476_:
LABEL _l4454_:
    JMP _l4449_;
LABEL _l4450_:
}
func @@f1034(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    MOV %r5 @C;
    PUSH %r5;
    MOV %r5 "";
    PUSH %r5;
    MOV %r12 "=";
    PUSH %r12;
    MOV %r12 .e;
    MOV %r13 "split";
    CALL_VAR %r12 %r13 1 false;
    MOV %r10 $RET;
    MOV %r11 0;
    MOV_PROP %r9 %r10 %r11;
    MOV .e %r9;
    MOV %r7 %r9;
    MOV %r8 "trim";
    CALL_VAR %r7 %r8 0 false;
    MOV %r5 $RET;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV .e %r4;
    MOV %r2 %r4;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 2;
    LT %r0 %r1;
    JF %r0 _l4478_;
    MOV %r1 "";
    MOV $RET %r1;
    RET;
    JMP _l4477_;
LABEL _l4478_:
LABEL _l4477_:
LABEL _l4479_:
    MOV %r3 .e;
    MOV %r4 "length";
    MOV_PROP %r0 %r3 %r4;
    MOV %r2 4;
    MOD %r0 %r2;
    MOV %r1 0;
    WNE %r0 %r1;
    JF %r0 _l4480_;
LABEL _l4482_:
    MOV %r1 "=";
    MOV %r2 .e;
    ADD %r2 %r1;
    MOV .e %r2;
    JMP _l4479_;
LABEL _l4480_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f1035(.r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .r;
    JF %r0 _l4484_;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r2 "premature close";
    MOV %r4 .r;
    MOV %r5 "message";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4486_;
    MOV %r1 null;
    JMP _l4485_;
LABEL _l4486_:
    MOV %r1 .r;
LABEL _l4485_:
    PUSH %r1;
    FUNC %r1 @@f1189;
    CALL_REG %r1 2 false;
    JMP _l4483_;
LABEL _l4484_:
    MOV %r2 @t;
    MOV %r1 %r2;
    JF %r2 _l4488_;
    MOV %r4 @e;
    MOV %r5 "_ended";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l4488_:
    JF %r1 _l4487_;
    MOV %r3 @e;
    MOV %r4 "end";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
LABEL _l4487_:
LABEL _l4483_:
}
func @@f1036() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @t;
    MOV %r1 "_ondrain";
    MOV_PROP e %r0 %r1;
    MOV %r0 null;
    MOV %r1 @t;
    MOV %r2 "_ondrain";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 e;
    JF %r0 _l4489_;
    CALL_REG e 0 false;
    MOV %r1 $RET;
LABEL _l4489_:
}
func @@f1037() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "drain";
    PUSH %r0;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r2 @t;
    MOV %r3 "_writable";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    CALL_REG @n 0 false;
}
func @@f1038() {
    REG %r0;
    REG %r1;
    MOV %r0 @r;
    MOV %r1 "_forward";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1039() {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1040() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "readable";
    PUSH %r0;
    MOV %r0 @s;
    PUSH %r0;
    MOV %r2 @r;
    MOV %r3 "_readable2";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @a;
    PUSH %r0;
    MOV %r2 @r;
    MOV %r3 "_readable2";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    CALL_REG @n 0 false;
}
func @@f1041() {
    REG %r0;
    REG %r1;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "_destroy";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1042() {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r2 @t;
    MOV %r3 "_forwardEnd";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4490_;
    MOV %r3 @t;
    MOV %r4 "_writable";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4490_:
    MOV r %r0;
    FUNC %r0 @@f1190;
    MOV n %r0;
    MOV %r0 r;
    JF %r0 _l4492_;
    MOV %r3 r;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JF %r2 _l4495_;
    MOV %r6 r;
    MOV %r7 "_writableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "finished";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l4495_:
    JF %r1 _l4494_;
    CALL_REG n 0 false;
    JMP _l4493_;
LABEL _l4494_:
    MOV %r3 r;
    MOV %r4 "_writableState";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4496_;
    MOV %r3 n;
    PUSH %r3;
    MOV %r3 r;
    MOV %r4 "end";
    CALL_VAR %r3 %r4 1 false;
    JMP _l4493_;
LABEL _l4496_:
    MOV %r3 r;
    MOV %r4 "end";
    CALL_VAR %r3 %r4 0 false;
    CALL_REG n 0 false;
LABEL _l4493_:
    JMP _l4491_;
LABEL _l4492_:
    CALL_REG n 0 false;
LABEL _l4491_:
}
func @@f1043(.e, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @r;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @u;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    JF %r1 _l4498_;
    MOV %r2 @c;
    PUSH %r2;
    MOV %r2 @f;
    PUSH %r2;
    MOV %r3 @r;
    MOV %r4 .e;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    MOV %r2 @s;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 6 false;
    MOV %r0 $RET;
    JMP _l4497_;
LABEL _l4498_:
    MOV %r0 @t;
LABEL _l4497_:
    MOV $RET %r0;
    RET;
}
func @@f1044(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .e;
    FORIN r %r0 _l4499_ _l4500_;
LABEL _l4499_:
    MOV %r2 .e;
    MOV %r3 r;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 .t;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
    FORIN_END;
LABEL _l4500_:
}
func @@f1045(.r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @r;
    MOV @r .r;
    FUNC %r1 @@f1191;
    PUSH %r1;
    NEW_ARR %r1;
    MOV %r3 0;
    SET_KEY %r1 0 %r3;
    MOV %r3 1;
    SET_KEY %r1 1 %r3;
    MOV %r2 "map";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1046(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    CLS @t;
    MOV @t .t;
    MOV %r0 @s;
    MOV %r1 @t;
    MOV_PROP r %r0 %r1;
    MOV %r2 r;
    PUSH %r2;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l4502_;
    FUNC %r3 @@f1192;
    PUSH %r3;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 r;
    MOV %r4 "reduce";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r3 .e;
    ADD %r3 %r2;
    MOV .e %r3;
    JMP _l4501_;
LABEL _l4502_:
    MOV %r2 3;
    MOV %r7 @t;
    MOV %r8 "toString";
    CALL_VAR %r7 %r8 0 false;
    MOV %r6 $RET;
    PUSH %r6;
    MOV %r6 @i;
    MOV %r7 "byteLength";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    ADD %r2 %r5;
    MOV %r4 2;
    ADD %r2 %r4;
    MOV %r7 @s;
    MOV %r8 @t;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "toString";
    CALL_VAR %r5 %r6 0 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 @i;
    MOV %r5 "byteLength";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    ADD %r2 %r3;
    MOV %r3 .e;
    ADD %r3 %r2;
    MOV .e %r3;
LABEL _l4501_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f1047(.r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    NEW_ARR %r1;
    MOV %r5 @n;
    MOV %r6 "properties";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 @o;
    MOV_PROP %r2 %r3 %r4;
    SET_KEY %r1 0 %r2;
    PUSH %r1;
    MOV %r1 @i;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r1 @t;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r1 .r;
    MOV %r2 "toString";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @w 3 false;
}
func @@f1048() {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1049() {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 3 false;
}
func @@f1050() {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @r;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 4 false;
}
func @@f1051() {
    REG %r0;
    REG %r1;
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @o;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1052(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 @w;
    MOV %r3 .e;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'RangeError' 1 true;
    MOV %r0 $RET;
    THROW %r0;
}
func @@f1053(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP r %r0 %r1;
    NEW_ARR n;
LABEL _l4503_:
    MOV %r1 r;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV r %r1;
    JF %r0 _l4504_;
LABEL _l4506_:
    MOV %r3 .e;
    MOV %r4 r;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG .t 1 false;
    MOV %r1 $RET;
    MOV %r2 n;
    MOV %r3 r;
    SET_KEY %r2 %r3 %r1;
    JMP _l4503_;
LABEL _l4504_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f1054(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 "@";
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "split";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV n "";
    MOV %r3 r;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 1;
    GT %r1 %r2;
    JF %r1 _l4507_;
    MOV %r5 r;
    MOV %r6 0;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "@";
    ADD %r3 %r4;
    MOV n %r3;
    MOV %r4 r;
    MOV %r5 1;
    MOV_PROP %r3 %r4 %r5;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l4507_:
    MOV %r0 n;
    MOV %r2 ".";
    PUSH %r2;
    MOV %r5 ".";
    PUSH %r5;
    MOV %r8 @v;
    PUSH %r8;
    MOV %r8 ".";
    PUSH %r8;
    MOV %r8 .e;
    MOV %r9 "replace";
    CALL_VAR %r8 %r9 2 false;
    MOV %r7 $RET;
    MOV .e %r7;
    MOV %r5 %r7;
    MOV %r6 "split";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    CALL_REG @I 2 false;
    MOV %r2 $RET;
    MOV %r3 "join";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1055(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    NEW_ARR n;
    MOV i 0;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP o %r0 %r1;
LABEL _l4508_:
    MOV %r0 i;
    MOV %r1 o;
    LT %r0 %r1;
    JF %r0 _l4509_;
LABEL _l4511_:
    MOV %r7 i;
    MOV %r6 %r7;
    ADD %r7 1;
    MOV i %r7;
    PUSH %r6;
    MOV %r6 .e;
    MOV %r7 "charCodeAt";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV t %r5;
    MOV %r3 %r5;
    MOV %r4 55296;
    GE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l4515_;
    MOV %r4 t;
    MOV %r5 56319;
    LE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l4515_:
    MOV %r1 %r2;
    JF %r2 _l4514_;
    MOV %r3 i;
    MOV %r4 o;
    LT %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l4514_:
    JF %r1 _l4513_;
    MOV %r2 56320;
    MOV %r3 64512;
    MOV %r7 i;
    MOV %r6 %r7;
    ADD %r7 1;
    MOV i %r7;
    PUSH %r6;
    MOV %r6 .e;
    MOV %r7 "charCodeAt";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    MOV r %r5;
    MOV %r4 %r5;
    AND %r3 %r4;
    WEQ %r2 %r3;
    JF %r2 _l4517_;
    MOV %r3 1023;
    MOV %r7 t;
    AND %r3 %r7;
    MOV %r6 10;
    SHL %r3 %r6;
    MOV %r5 1023;
    MOV %r6 r;
    AND %r5 %r6;
    ADD %r3 %r5;
    MOV %r4 65536;
    ADD %r3 %r4;
    PUSH %r3;
    MOV %r3 n;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    JMP _l4516_;
LABEL _l4517_:
    MOV %r3 t;
    PUSH %r3;
    MOV %r3 n;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r3 i;
    SUB %r3 1;
    MOV i %r3;
LABEL _l4516_:
    JMP _l4512_;
LABEL _l4513_:
    MOV %r2 t;
    PUSH %r2;
    MOV %r2 n;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
LABEL _l4512_:
    JMP _l4508_;
LABEL _l4509_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f1056(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 "";
    PUSH %r1;
    MOV %r3 .e;
    PUSH %r3;
    FUNC %r3 @@f1193;
    PUSH %r3;
    CALL_REG @I 2 false;
    MOV %r1 $RET;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1057(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r3 22;
    ADD %r0 %r3;
    MOV %r2 75;
    MOV %r3 .e;
    MOV %r4 26;
    LT %r3 %r4;
    MUL %r2 %r3;
    ADD %r0 %r2;
    MOV %r1 0;
    MOV %r3 .t;
    WNE %r1 %r3;
    MOV %r2 5;
    SHL %r1 %r2;
    SUB %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1058(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV n 0;
    MOV %r1 .r;
    JF %r1 _l4522_;
    MOV %r2 .e;
    MOV %r3 @d;
    DIV %r2 %r3;
    PUSH %r2;
    CALL_REG @E 1 false;
    MOV %r0 $RET;
    JMP _l4521_;
LABEL _l4522_:
    MOV %r0 .e;
    MOV %r2 1;
    SHR %r0 %r2;
LABEL _l4521_:
    MOV .e %r0;
    MOV %r1 .e;
    MOV %r2 .t;
    DIV %r1 %r2;
    PUSH %r1;
    CALL_REG @E 1 false;
    MOV %r0 $RET;
    MOV %r1 .e;
    ADD %r1 %r0;
    MOV .e %r1;
LABEL _l4518_:
    MOV %r0 .e;
    MOV %r1 @S;
    MOV %r3 @h;
    MUL %r1 %r3;
    MOV %r2 1;
    SHR %r1 %r2;
    GT %r0 %r1;
    JF %r0 _l4519_;
LABEL _l4523_:
    MOV %r2 .e;
    MOV %r3 @S;
    DIV %r2 %r3;
    PUSH %r2;
    CALL_REG @E 1 false;
    MOV %r1 $RET;
    MOV .e %r1;
LABEL _l4520_:
    MOV %r1 @l;
    MOV %r2 n;
    ADD %r2 %r1;
    MOV n %r2;
    JMP _l4518_;
LABEL _l4519_:
    MOV %r1 n;
    MOV %r2 @S;
    MOV %r5 1;
    ADD %r2 %r5;
    MOV %r4 .e;
    MUL %r2 %r4;
    MOV %r3 .e;
    MOV %r4 @p;
    ADD %r3 %r4;
    DIV %r2 %r3;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_REG @E 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1059(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR p;
    VAR d;
    VAR y;
    VAR m;
    VAR v;
    VAR w;
    VAR S;
    VAR x;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    NEW_ARR m;
    MOV %r0 .e;
    MOV %r1 "length";
    MOV_PROP v %r0 %r1;
    MOV w 0;
    MOV S @g;
    MOV x @b;
    MOV %r3 @_;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "lastIndexOf";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    MOV r %r2;
    MOV %r0 %r2;
    MOV %r1 0;
    LT %r0 %r1;
    JF %r0 _l4527_;
    MOV %r2 0;
    MOV r %r2;
    MOV %r1 %r2;
LABEL _l4527_:
    MOV %r0 0;
    MOV n %r0;
LABEL _l4524_:
    MOV %r0 n;
    MOV %r1 r;
    LT %r0 %r1;
    JF %r0 _l4525_;
LABEL _l4528_:
    MOV %r3 n;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "charCodeAt";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 128;
    GE %r1 %r2;
    JF %r1 _l4529_;
    MOV %r3 "not-basic";
    PUSH %r3;
    CALL_REG @k 1 false;
    MOV %r2 $RET;
LABEL _l4529_:
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "charCodeAt";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 m;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
LABEL _l4526_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l4524_;
LABEL _l4525_:
    MOV %r1 r;
    MOV %r2 0;
    GT %r1 %r2;
    JF %r1 _l4534_;
    MOV %r0 r;
    MOV %r2 1;
    ADD %r0 %r2;
    JMP _l4533_;
LABEL _l4534_:
    MOV %r0 0;
LABEL _l4533_:
    MOV i %r0;
LABEL _l4530_:
    MOV %r0 i;
    MOV %r1 v;
    LT %r0 %r1;
    JF %r0 _l4531_;
LABEL _l4535_:
    MOV %r1 w;
    MOV o %r1;
    MOV %r1 1;
    MOV s %r1;
    MOV %r1 @l;
    MOV a %r1;
LABEL _l4536_:
    MOV %r2 i;
    MOV %r3 v;
    GE %r2 %r3;
    JF %r2 _l4540_;
    MOV %r4 "invalid-input";
    PUSH %r4;
    CALL_REG @k 1 false;
    MOV %r3 $RET;
LABEL _l4540_:
    MOV %r11 i;
    MOV %r10 %r11;
    ADD %r11 1;
    MOV i %r11;
    PUSH %r10;
    MOV %r10 .e;
    MOV %r11 "charCodeAt";
    CALL_VAR %r10 %r11 1 false;
    MOV %r9 $RET;
    MOV y %r9;
    MOV %r6 %r9;
    MOV %r8 48;
    SUB %r6 %r8;
    MOV %r7 10;
    LT %r6 %r7;
    JF %r6 _l4544_;
    MOV %r5 y;
    MOV %r7 22;
    SUB %r5 %r7;
    JMP _l4543_;
LABEL _l4544_:
    MOV %r7 y;
    MOV %r9 65;
    SUB %r7 %r9;
    MOV %r8 26;
    LT %r7 %r8;
    JF %r7 _l4545_;
    MOV %r5 y;
    MOV %r8 65;
    SUB %r5 %r8;
    JMP _l4543_;
LABEL _l4545_:
    MOV %r8 y;
    MOV %r10 97;
    SUB %r8 %r10;
    MOV %r9 26;
    LT %r8 %r9;
    JF %r8 _l4546_;
    MOV %r5 y;
    MOV %r9 97;
    SUB %r5 %r9;
    JMP _l4543_;
LABEL _l4546_:
    MOV %r5 @l;
LABEL _l4543_:
    MOV u %r5;
    MOV %r3 %r5;
    MOV %r4 @l;
    GE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l4542_;
    MOV %r4 u;
    MOV %r6 @c;
    MOV %r8 w;
    SUB %r6 %r8;
    MOV %r7 s;
    DIV %r6 %r7;
    PUSH %r6;
    CALL_REG @E 1 false;
    MOV %r5 $RET;
    GT %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l4542_:
    JF %r2 _l4541_;
    MOV %r4 "overflow";
    PUSH %r4;
    CALL_REG @k 1 false;
    MOV %r3 $RET;
LABEL _l4541_:
    MOV %r2 u;
    MOV %r3 s;
    MUL %r2 %r3;
    MOV %r3 w;
    ADD %r3 %r2;
    MOV w %r3;
    MOV %r1 u;
    MOV %r4 a;
    MOV %r5 x;
    LE %r4 %r5;
    JF %r4 _l4548_;
    MOV %r3 @f;
    JMP _l4547_;
LABEL _l4548_:
    MOV %r5 a;
    MOV %r6 x;
    MOV %r7 @h;
    ADD %r6 %r7;
    GE %r5 %r6;
    JF %r5 _l4549_;
    MOV %r3 @h;
    JMP _l4547_;
LABEL _l4549_:
    MOV %r3 a;
    MOV %r6 x;
    SUB %r3 %r6;
LABEL _l4547_:
    MOV p %r3;
    MOV %r2 %r3;
    LT %r1 %r2;
    NEG %r1;
    JF %r1 _l4537_;
LABEL _l4539_:
    MOV %r2 s;
    MOV %r4 @c;
    MOV %r6 @l;
    MOV %r7 p;
    SUB %r6 %r7;
    MOV d %r6;
    MOV %r5 %r6;
    DIV %r4 %r5;
    PUSH %r4;
    CALL_REG @E 1 false;
    MOV %r3 $RET;
    GT %r2 %r3;
    JF %r2 _l4550_;
    MOV %r4 "overflow";
    PUSH %r4;
    CALL_REG @k 1 false;
    MOV %r3 $RET;
LABEL _l4550_:
    MOV %r2 d;
    MOV %r3 s;
    MUL %r3 %r2;
    MOV s %r3;
LABEL _l4538_:
    MOV %r2 @l;
    MOV %r3 a;
    ADD %r3 %r2;
    MOV a %r3;
    JMP _l4536_;
LABEL _l4537_:
    MOV %r2 w;
    MOV %r3 o;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r5 m;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 1;
    ADD %r3 %r4;
    MOV t %r3;
    MOV %r2 %r3;
    PUSH %r2;
    MOV %r2 0;
    MOV %r3 o;
    WEQ %r2 %r3;
    PUSH %r2;
    CALL_REG @R 3 false;
    MOV %r1 $RET;
    MOV x %r1;
    MOV %r3 w;
    MOV %r4 t;
    DIV %r3 %r4;
    PUSH %r3;
    CALL_REG @E 1 false;
    MOV %r1 $RET;
    MOV %r2 @c;
    MOV %r3 S;
    SUB %r2 %r3;
    GT %r1 %r2;
    JF %r1 _l4551_;
    MOV %r3 "overflow";
    PUSH %r3;
    CALL_REG @k 1 false;
    MOV %r2 $RET;
LABEL _l4551_:
    MOV %r2 w;
    MOV %r3 t;
    DIV %r2 %r3;
    PUSH %r2;
    CALL_REG @E 1 false;
    MOV %r1 $RET;
    MOV %r2 S;
    ADD %r2 %r1;
    MOV S %r2;
    MOV %r1 t;
    MOV %r2 w;
    MOD %r2 %r1;
    MOV w %r2;
    MOV %r2 w;
    MOV %r1 %r2;
    ADD %r2 1;
    MOV w %r2;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 S;
    PUSH %r1;
    MOV %r1 m;
    MOV %r2 "splice";
    CALL_VAR %r1 %r2 3 false;
    JMP _l4530_;
LABEL _l4531_:
    MOV %r1 m;
    PUSH %r1;
    CALL_REG @j 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1060(.e) {
    VAR t;
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    VAR a;
    VAR u;
    VAR p;
    VAR d;
    VAR y;
    VAR m;
    VAR v;
    VAR w;
    VAR S;
    VAR I;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    NEW_ARR I;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @T 1 false;
    MOV %r3 $RET;
    MOV .e %r3;
    MOV %r1 %r3;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV m %r0;
    MOV %r0 @g;
    MOV t %r0;
    MOV %r0 0;
    MOV r %r0;
    MOV %r0 @b;
    MOV o %r0;
    MOV %r0 0;
    MOV s %r0;
LABEL _l4552_:
    MOV %r0 s;
    MOV %r1 m;
    LT %r0 %r1;
    JF %r0 _l4553_;
LABEL _l4555_:
    MOV %r4 .e;
    MOV %r5 s;
    MOV_PROP %r3 %r4 %r5;
    MOV y %r3;
    MOV %r1 %r3;
    MOV %r2 128;
    LT %r1 %r2;
    JF %r1 _l4556_;
    MOV %r4 y;
    PUSH %r4;
    CALL_REG @x 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 I;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l4556_:
LABEL _l4554_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l4552_;
LABEL _l4553_:
    MOV %r2 I;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV i %r1;
    MOV %r0 %r1;
    MOV n %r0;
    MOV %r0 i;
    JF %r0 _l4560_;
    MOV %r2 @_;
    PUSH %r2;
    MOV %r2 I;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4560_:
LABEL _l4557_:
    MOV %r0 n;
    MOV %r1 m;
    LT %r0 %r1;
    JF %r0 _l4558_;
LABEL _l4561_:
    MOV %r1 @c;
    MOV a %r1;
    MOV %r1 0;
    MOV s %r1;
LABEL _l4562_:
    MOV %r1 s;
    MOV %r2 m;
    LT %r1 %r2;
    JF %r1 _l4563_;
LABEL _l4565_:
    MOV %r6 .e;
    MOV %r7 s;
    MOV_PROP %r5 %r6 %r7;
    MOV y %r5;
    MOV %r3 %r5;
    MOV %r4 t;
    GE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l4567_;
    MOV %r4 y;
    MOV %r5 a;
    LT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l4567_:
    JF %r2 _l4566_;
    MOV %r4 y;
    MOV a %r4;
    MOV %r3 %r4;
LABEL _l4566_:
LABEL _l4564_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l4562_;
LABEL _l4563_:
    MOV %r1 a;
    MOV %r3 t;
    SUB %r1 %r3;
    MOV %r3 @c;
    MOV %r5 r;
    SUB %r3 %r5;
    MOV %r5 n;
    MOV %r6 1;
    ADD %r5 %r6;
    MOV v %r5;
    MOV %r4 %r5;
    DIV %r3 %r4;
    PUSH %r3;
    CALL_REG @E 1 false;
    MOV %r2 $RET;
    GT %r1 %r2;
    JF %r1 _l4571_;
    MOV %r3 "overflow";
    PUSH %r3;
    CALL_REG @k 1 false;
    MOV %r2 $RET;
LABEL _l4571_:
    MOV %r1 a;
    MOV %r3 t;
    SUB %r1 %r3;
    MOV %r2 v;
    MUL %r1 %r2;
    MOV %r2 r;
    ADD %r2 %r1;
    MOV r %r2;
    MOV %r1 a;
    MOV t %r1;
    MOV %r1 0;
    MOV s %r1;
LABEL _l4568_:
    MOV %r1 s;
    MOV %r2 m;
    LT %r1 %r2;
    JF %r1 _l4569_;
LABEL _l4572_:
    MOV %r7 .e;
    MOV %r8 s;
    MOV_PROP %r6 %r7 %r8;
    MOV y %r6;
    MOV %r4 %r6;
    MOV %r5 t;
    LT %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l4576_;
    MOV %r7 r;
    ADD %r7 1;
    MOV %r5 %r7;
    MOV r %r7;
    MOV %r6 @c;
    GT %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l4576_:
    JF %r3 _l4575_;
    MOV %r5 "overflow";
    PUSH %r5;
    CALL_REG @k 1 false;
    MOV %r4 $RET;
LABEL _l4575_:
    MOV %r2 y;
    MOV %r3 t;
    WEQ %r2 %r3;
    JF %r2 _l4574_;
    MOV %r3 r;
    MOV u %r3;
    MOV %r3 @l;
    MOV p %r3;
LABEL _l4577_:
    MOV %r3 u;
    MOV %r6 p;
    MOV %r7 o;
    LE %r6 %r7;
    JF %r6 _l4582_;
    MOV %r5 @f;
    JMP _l4581_;
LABEL _l4582_:
    MOV %r7 p;
    MOV %r8 o;
    MOV %r9 @h;
    ADD %r8 %r9;
    GE %r7 %r8;
    JF %r7 _l4583_;
    MOV %r5 @h;
    JMP _l4581_;
LABEL _l4583_:
    MOV %r5 p;
    MOV %r8 o;
    SUB %r5 %r8;
LABEL _l4581_:
    MOV d %r5;
    MOV %r4 %r5;
    LT %r3 %r4;
    NEG %r3;
    JF %r3 _l4578_;
LABEL _l4580_:
    MOV %r4 u;
    MOV %r5 d;
    SUB %r4 %r5;
    MOV S %r4;
    MOV %r4 @l;
    MOV %r5 d;
    SUB %r4 %r5;
    MOV w %r4;
    MOV %r6 d;
    MOV %r7 S;
    MOV %r8 w;
    MOD %r7 %r8;
    ADD %r6 %r7;
    PUSH %r6;
    MOV %r6 0;
    PUSH %r6;
    CALL_REG @A 2 false;
    MOV %r5 $RET;
    PUSH %r5;
    CALL_REG @x 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 I;
    MOV %r5 "push";
    CALL_VAR %r4 %r5 1 false;
    MOV %r5 S;
    MOV %r6 w;
    DIV %r5 %r6;
    PUSH %r5;
    CALL_REG @E 1 false;
    MOV %r4 $RET;
    MOV u %r4;
LABEL _l4579_:
    MOV %r4 @l;
    MOV %r5 p;
    ADD %r5 %r4;
    MOV p %r5;
    JMP _l4577_;
LABEL _l4578_:
    MOV %r5 u;
    PUSH %r5;
    MOV %r5 0;
    PUSH %r5;
    CALL_REG @A 2 false;
    MOV %r4 $RET;
    PUSH %r4;
    CALL_REG @x 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 I;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r4 r;
    PUSH %r4;
    MOV %r4 v;
    PUSH %r4;
    MOV %r4 n;
    MOV %r5 i;
    WEQ %r4 %r5;
    PUSH %r4;
    CALL_REG @R 3 false;
    MOV %r3 $RET;
    MOV o %r3;
    MOV %r3 0;
    MOV r %r3;
    MOV %r3 n;
    ADD %r3 1;
    MOV n %r3;
    JMP _l4573_;
LABEL _l4574_:
LABEL _l4573_:
LABEL _l4570_:
    MOV %r2 s;
    ADD %r2 1;
    MOV s %r2;
    JMP _l4568_;
LABEL _l4569_:
    MOV %r1 r;
    ADD %r1 1;
    MOV r %r1;
    MOV %r1 t;
    ADD %r1 1;
    MOV t %r1;
    JMP _l4557_;
LABEL _l4558_:
    MOV %r1 "";
    PUSH %r1;
    MOV %r1 I;
    MOV %r2 "join";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1061(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f1194;
    PUSH %r1;
    CALL_REG @O 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1062(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f1195;
    PUSH %r1;
    CALL_REG @O 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1063(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @a;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @n 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_CTX 'encodeURIComponent' 1 false;
    MOV %r1 $RET;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1064(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .t;
    MOV %r2 "ended";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4585_;
    RET;
    JMP _l4584_;
LABEL _l4585_:
LABEL _l4584_:
    MOV %r1 .t;
    MOV %r2 "decoder";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4587_;
    MOV %r3 .t;
    MOV %r4 "decoder";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    CALL_VAR %r1 %r2 0 false;
    MOV r $RET;
    MOV %r2 r;
    MOV %r1 %r2;
    JF %r2 _l4589_;
    MOV %r4 r;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l4589_:
    JF %r1 _l4588_;
    MOV %r3 r;
    PUSH %r3;
    MOV %r5 .t;
    MOV %r6 "buffer";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r5 .t;
    MOV %r6 "objectMode";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l4591_;
    MOV %r3 1;
    JMP _l4590_;
LABEL _l4591_:
    MOV %r5 r;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
LABEL _l4590_:
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    ADD %r4 %r3;
    MOV %r5 .t;
    MOV %r6 "length";
    SET_KEY %r5 %r6 %r4;
    MOV %r2 %r4;
LABEL _l4588_:
    JMP _l4586_;
LABEL _l4587_:
LABEL _l4586_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    PUSH %r0;
    CALL_REG @x 1 false;
}
func @@f1065(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .t;
    MOV n %r0;
    MOV %r5 n;
    PUSH %r5;
    MOV %r5 @c;
    MOV %r6 "isBuffer";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JIF %r4 _l4596_;
    MOV %r5 n;
    MOV %r6 @l;
    INST_OF %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l4596_:
    MOV %r2 %r3;
    JIF %r3 _l4595_;
    MOV %r4 "string";
    MOV %r5 .t;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l4595_:
    MOV %r1 %r2;
    JIF %r2 _l4594_;
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .t;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4594_:
    MOV %r0 %r1;
    JIF %r1 _l4593_;
    MOV %r3 .e;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l4593_:
    JIF %r0 _l4592_;
    MOV %r3 "Invalid non-string/buffer chunk";
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    MOV r %r2;
    MOV %r1 %r2;
LABEL _l4592_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f1066(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @c;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1067(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r2 .e;
    MOV %r3 "ended";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l4597_;
    MOV %r5 .e;
    MOV %r6 "needReadable";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l4599_;
    MOV %r7 .e;
    MOV %r8 "length";
    MOV_PROP %r5 %r7 %r8;
    MOV %r7 .e;
    MOV %r8 "highWaterMark";
    MOV_PROP %r6 %r7 %r8;
    LT %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l4599_:
    MOV %r2 %r3;
    JIF %r3 _l4598_;
    MOV %r4 0;
    MOV %r6 .e;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    EQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l4598_:
    LG_AND %r0 %r2;
LABEL _l4597_:
    MOV $RET %r0;
    RET;
}
func @@f1068(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    MOV %r2 @S;
    GE %r1 %r2;
    JF %r1 _l4601_;
    MOV %r2 @S;
    MOV .e %r2;
    JMP _l4600_;
LABEL _l4601_:
    MOV %r2 .e;
    SUB %r2 1;
    MOV .e %r2;
    MOV %r2 .e;
    MOV %r3 1;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 2;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 4;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 8;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 16;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    ADD %r2 1;
    MOV .e %r2;
LABEL _l4600_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f1069(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 .e;
    MOV %r6 .t;
    MOV %r7 "head";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "data";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l4603_;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r6 .t;
    MOV %r7 "head";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "data";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV n %r1;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r6 .t;
    MOV %r7 "head";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "data";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "slice";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r4 .t;
    MOV %r5 "head";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "data";
    SET_KEY %r2 %r3 %r1;
    JMP _l4602_;
LABEL _l4603_:
    MOV %r2 .e;
    MOV %r8 .t;
    MOV %r9 "head";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 "data";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4605_;
    MOV %r3 .t;
    MOV %r4 "shift";
    CALL_VAR %r3 %r4 0 false;
    MOV %r1 $RET;
    JMP _l4604_;
LABEL _l4605_:
    MOV %r3 .r;
    JF %r3 _l4606_;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    FUNC %r4 @@f1196;
    CALL_REG %r4 2 false;
    MOV %r1 $RET;
    JMP _l4604_;
LABEL _l4606_:
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 .t;
    PUSH %r4;
    FUNC %r4 @@f1197;
    CALL_REG %r4 2 false;
    MOV %r1 $RET;
LABEL _l4604_:
    MOV n %r1;
LABEL _l4602_:
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f1070(.t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r0 "onunpipe";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r2 .t;
    MOV %r3 @n;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4609_;
    MOV %r3 .r;
    LG_AND %r1 %r3;
LABEL _l4609_:
    MOV %r0 %r1;
    JF %r1 _l4608_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "hasUnpiped";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4608_:
    JF %r0 _l4607_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .r;
    MOV %r4 "hasUnpiped";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "cleanup";
    PUSH %r2;
    CALL_REG @p 1 false;
    MOV %r2 "close";
    PUSH %r2;
    MOV %r2 @_;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "finish";
    PUSH %r2;
    MOV %r2 @y;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "drain";
    PUSH %r2;
    MOV %r2 @f;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 @g;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "unpipe";
    PUSH %r2;
    MOV %r2 @c;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "end";
    PUSH %r2;
    MOV %r2 @l;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "end";
    PUSH %r2;
    MOV %r2 @m;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "data";
    PUSH %r2;
    MOV %r2 @b;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 0;
    NEG %r2;
    MOV @h %r2;
    MOV %r4 @o;
    MOV %r5 "awaitDrain";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l4611_;
    MOV %r6 @e;
    MOV %r7 "_writableState";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JF %r5 _l4612_;
    MOV %r9 @e;
    MOV %r10 "_writableState";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "needDrain";
    MOV_PROP %r6 %r7 %r8;
    NEG %r6;
    LG_AND %r4 %r6;
LABEL _l4612_:
    LG_OR %r2 %r4;
LABEL _l4611_:
    MOV %r1 %r2;
    JIF %r2 _l4610_;
    CALL_REG @f 0 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l4610_:
LABEL _l4607_:
}
func @@f1071() {
    REG %r0;
    REG %r1;
    MOV %r0 "onend";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r0 @e;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1072(.e) {
    REG %r0;
    CLS @e;
    MOV @e .e;
    FUNC %r0 @@f1198;
    MOV $RET %r0;
    RET;
}
func @@f1073(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r0 "ondata";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r0 1;
    NEG %r0;
    MOV @d %r0;
    MOV %r1 1;
    NEG %r1;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "write";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l4614_;
    MOV %r2 @d;
    LG_OR %r0 %r2;
LABEL _l4614_:
    JIF %r0 _l4613_;
    MOV %r5 1;
    MOV %r7 @o;
    MOV %r8 "pipesCount";
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l4618_;
    MOV %r8 @o;
    MOV %r9 "pipes";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 @e;
    EQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l4618_:
    MOV %r3 %r4;
    JIF %r4 _l4617_;
    MOV %r8 @o;
    MOV %r9 "pipesCount";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 1;
    GT %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l4619_;
    MOV %r7 1;
    MINUS %r7;
    MOV %r10 @o;
    MOV %r11 "pipes";
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r9 @e;
    PUSH %r9;
    CALL_REG @C 2 false;
    MOV %r8 $RET;
    NE %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l4619_:
    LG_OR %r3 %r5;
LABEL _l4617_:
    MOV %r2 %r3;
    JF %r3 _l4616_;
    MOV %r4 @h;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l4616_:
    JF %r2 _l4615_;
    MOV %r4 "false write response, pause";
    PUSH %r4;
    MOV %r7 @n;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "awaitDrain";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @p 2 false;
    MOV %r7 @n;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "awaitDrain";
    MOV_PROP %r4 %r5 %r6;
    ADD %r4 1;
    MOV %r7 @n;
    MOV %r8 "_readableState";
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 "awaitDrain";
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    NEG %r4;
    MOV @d %r4;
    MOV %r3 %r4;
LABEL _l4615_:
    MOV %r2 @n;
    MOV %r3 "pause";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l4613_:
}
func @@f1074(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "onerror";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @p 2 false;
    CALL_REG @m 0 false;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 @g;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 0;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 "error";
    PUSH %r2;
    CALL_REG @a 2 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    JF %r0 _l4620_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4620_:
}
func @@f1075() {
    REG %r0;
    REG %r1;
    MOV %r0 "finish";
    PUSH %r0;
    MOV %r0 @y;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    CALL_REG @m 0 false;
}
func @@f1076() {
    REG %r0;
    REG %r1;
    MOV %r0 "onfinish";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @_;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    CALL_REG @m 0 false;
}
func @@f1077() {
    REG %r0;
    REG %r1;
    MOV %r0 "unpipe";
    PUSH %r0;
    CALL_REG @p 1 false;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "unpipe";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1078(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "function";
    MOV %r2 .e;
    MOV %r3 "prependListener";
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l4622_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "prependListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4621_;
LABEL _l4622_:
LABEL _l4621_:
    MOV %r2 .e;
    MOV %r3 "_events";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4625_;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4625_:
    JF %r0 _l4624_;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @s 1 false;
    MOV %r1 $RET;
    JF %r1 _l4627_;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r6 .e;
    MOV %r7 "_events";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .t;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "unshift";
    CALL_VAR %r2 %r3 1 false;
    JMP _l4626_;
LABEL _l4627_:
    NEW_ARR %r2;
    MOV %r3 .r;
    SET_KEY %r2 0 %r3;
    MOV %r6 .e;
    MOV %r7 "_events";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .t;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r2 1 %r3;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
LABEL _l4626_:
    JMP _l4623_;
LABEL _l4624_:
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
LABEL _l4623_:
}
func @@f1079(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 "resumeScheduled";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4628_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "resumeScheduled";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @j;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l4628_:
}
func @@f1080() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "wrapped end";
    PUSH %r1;
    CALL_REG @p 1 false;
    MOV %r2 @r;
    MOV %r3 "decoder";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4631_;
    MOV %r3 @r;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l4631_:
    JF %r0 _l4630_;
    MOV %r3 @r;
    MOV %r4 "decoder";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    CALL_VAR %r1 %r2 0 false;
    MOV e $RET;
    MOV %r2 e;
    MOV %r1 %r2;
    JF %r2 _l4633_;
    MOV %r4 e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l4633_:
    JF %r1 _l4632_;
    MOV %r3 e;
    PUSH %r3;
    MOV %r3 @t;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l4632_:
    JMP _l4629_;
LABEL _l4630_:
LABEL _l4629_:
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1081(.i) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r1 "wrapped data";
    PUSH %r1;
    CALL_REG @p 1 false;
    MOV %r2 @r;
    MOV %r3 "decoder";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4635_;
    MOV %r4 .i;
    PUSH %r4;
    MOV %r6 @r;
    MOV %r7 "decoder";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "write";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV .i %r3;
    MOV %r2 %r3;
LABEL _l4635_:
    MOV %r2 @r;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4636_;
    MOV %r2 null;
    MOV %r3 .i;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4636_:
    JIF %r0 _l4634_;
    MOV %r4 @r;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l4638_;
    MOV %r5 .i;
    MOV %r4 %r5;
    JF %r5 _l4639_;
    MOV %r7 .i;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    LG_AND %r4 %r6;
LABEL _l4639_:
    LG_OR %r2 %r4;
LABEL _l4638_:
    MOV %r1 %r2;
    JF %r2 _l4637_;
    MOV %r5 .i;
    PUSH %r5;
    MOV %r5 @t;
    MOV %r6 "push";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JIF %r4 _l4640_;
    MOV %r6 0;
    NEG %r6;
    MOV @n %r6;
    MOV %r6 @e;
    MOV %r7 "pause";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    LG_OR %r3 %r5;
LABEL _l4640_:
    LG_AND %r1 %r3;
LABEL _l4637_:
LABEL _l4634_:
}
func @@f1082(.t) {
    REG %r0;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1199;
    MOV $RET %r0;
    RET;
}
func @@f1083(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "wrapped _read";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @p 2 false;
    MOV %r0 @n;
    JF %r0 _l4641_;
    MOV %r2 1;
    NEG %r2;
    MOV @n %r2;
    MOV %r2 @e;
    MOV %r3 "resume";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l4641_:
}
func @@f1084() {
    REG %r0;
    REG %r1;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    FUNC %r1 @@f1200;
    CALL_REG %r1 2 false;
    MOV %r0 $RET;
    NEG %r0;
}
func @@f1085(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 @r;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f1201;
    CALL_REG %r1 2 false;
    MOV %r0 $RET;
    NEG %r0;
}
func @@f1086(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 0;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4643_;
    MOV %r3 .t;
    MOV %r4 "needDrain";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4643_:
    JF %r0 _l4642_;
    MOV %r2 1;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "needDrain";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "drain";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4642_:
}
func @@f1087(.r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 @t;
    MOV %r2 "pendingcb";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV %r1 @t;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .r;
    JF %r0 _l4644_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4644_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 "prefinished";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "prefinish";
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    CALL_REG @x 2 false;
}
func @@f1088(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r2 .t;
    MOV %r3 "prefinished";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4646_;
    MOV %r3 .t;
    MOV %r4 "finalCalled";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l4646_:
    JIF %r0 _l4645_;
    MOV %r2 "function";
    MOV %r4 .e;
    MOV %r5 "_final";
    MOV_PROP %r3 %r4 %r5;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    JF %r2 _l4648_;
    MOV %r4 .t;
    MOV %r5 "pendingcb";
    MOV_PROP %r3 %r4 %r5;
    ADD %r3 1;
    MOV %r4 .t;
    MOV %r5 "pendingcb";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    NEG %r3;
    MOV %r4 .t;
    MOV %r5 "finalCalled";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 @E;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 @o;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 3 false;
    MOV %r1 $RET;
    JMP _l4647_;
LABEL _l4648_:
    MOV %r3 0;
    NEG %r3;
    MOV %r4 .t;
    MOV %r5 "prefinished";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 "prefinish";
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
LABEL _l4647_:
LABEL _l4645_:
}
func @@f1089() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r1;
    MOV %r2 "getBuffer";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1090(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @h;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1091(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    MOV %r0 "write after end";
    PUSH %r0;
    CALL_CTX 'Error' 1 true;
    MOV r $RET;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 r;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 r;
    PUSH %r0;
    MOV %r0 @o;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1092(.e, .t, .r, .n) {
    VAR i;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV i 0;
    NEG i;
    MOV s 1;
    NEG s;
    MOV %r1 null;
    MOV %r2 .r;
    EQ %r1 %r2;
    JF %r1 _l4650_;
    MOV %r3 "May not write null values to stream";
    PUSH %r3;
    CALL_CTX 'TypeError' 1 true;
    MOV %r2 $RET;
    MOV s %r2;
    JMP _l4649_;
LABEL _l4650_:
    MOV %r4 "string";
    MOV %r5 .r;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JIF %r4 _l4653_;
    MOV %r5 0;
    VOID %r5;
    MOV %r6 .r;
    EQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l4653_:
    MOV %r2 %r3;
    JIF %r3 _l4652_;
    MOV %r5 .t;
    MOV %r6 "objectMode";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l4652_:
    JIF %r2 _l4651_;
    MOV %r5 "Invalid non-string/buffer chunk";
    PUSH %r5;
    CALL_CTX 'TypeError' 1 true;
    MOV %r4 $RET;
    MOV s %r4;
    MOV %r3 %r4;
LABEL _l4651_:
LABEL _l4649_:
    MOV %r1 s;
    JF %r1 _l4654_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r3 s;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 s;
    PUSH %r3;
    MOV %r3 @o;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 1;
    NEG %r3;
    MOV i %r3;
    MOV %r2 %r3;
LABEL _l4654_:
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f1093(.e, .t, .r, .n, .i, .o) {
    VAR s;
    VAR a;
    VAR u;
    VAR c;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .r;
    NEG %r0;
    JF %r0 _l4656_;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    FUNC %r1 @@f1202;
    CALL_REG %r1 3 false;
    MOV s $RET;
    MOV %r1 .n;
    MOV %r2 s;
    NE %r1 %r2;
    JF %r1 _l4657_;
    MOV %r3 0;
    NEG %r3;
    MOV .r %r3;
    MOV %r3 "buffer";
    MOV .i %r3;
    MOV %r3 s;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l4657_:
    JMP _l4655_;
LABEL _l4656_:
LABEL _l4655_:
    MOV %r1 .t;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4659_;
    MOV a 1;
    JMP _l4658_;
LABEL _l4659_:
    MOV %r1 .n;
    MOV %r2 "length";
    MOV_PROP a %r1 %r2;
LABEL _l4658_:
    MOV %r0 a;
    MOV %r2 .t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV %r2 .t;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 "length";
    MOV_PROP u %r1 %r2;
    MOV %r1 .t;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    LT u %r0;
    MOV %r0 u;
    JIF %r0 _l4660_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "needDrain";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4660_:
    MOV %r2 .t;
    MOV %r3 "writing";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4663_;
    MOV %r3 .t;
    MOV %r4 "corked";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l4663_:
    JF %r0 _l4662_;
    MOV %r1 .t;
    MOV %r2 "lastBufferedRequest";
    MOV_PROP c %r1 %r2;
    NEW_OBJ %r1;
    MOV %r2 .n;
    SET_KEY %r1 'chunk' %r2;
    MOV %r2 .i;
    SET_KEY %r1 'encoding' %r2;
    MOV %r2 .r;
    SET_KEY %r1 'isBuf' %r2;
    MOV %r2 .o;
    SET_KEY %r1 'callback' %r2;
    MOV %r2 null;
    SET_KEY %r1 'next' %r2;
    MOV %r2 .t;
    MOV %r3 "lastBufferedRequest";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 c;
    JF %r1 _l4665_;
    MOV %r3 .t;
    MOV %r4 "lastBufferedRequest";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 c;
    MOV %r4 "next";
    SET_KEY %r3 %r4 %r2;
    JMP _l4664_;
LABEL _l4665_:
    MOV %r3 .t;
    MOV %r4 "lastBufferedRequest";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .t;
    MOV %r4 "bufferedRequest";
    SET_KEY %r3 %r4 %r2;
LABEL _l4664_:
    MOV %r1 1;
    MOV %r3 .t;
    MOV %r4 "bufferedRequestCount";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV %r3 .t;
    MOV %r4 "bufferedRequestCount";
    SET_KEY %r3 %r4 %r2;
    JMP _l4661_;
LABEL _l4662_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 a;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .o;
    PUSH %r1;
    CALL_REG @m 7 false;
LABEL _l4661_:
    MOV %r0 u;
    MOV $RET %r0;
    RET;
}
func @@f1094(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "ending";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @x 2 false;
    MOV %r0 .r;
    JF %r0 _l4666_;
    MOV %r3 .t;
    MOV %r4 "finished";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4668_;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 @o;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l4667_;
LABEL _l4668_:
    MOV %r3 "finish";
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "once";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
LABEL _l4667_:
LABEL _l4666_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .e;
    MOV %r2 "writable";
    SET_KEY %r1 %r2 %r0;
}
func @@f1095(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    MOV %r1 .t;
    INST_OF %r0 %r1;
    NEG %r0;
    JF %r0 _l4670_;
    MOV %r2 "Cannot call a class as a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l4669_;
LABEL _l4670_:
LABEL _l4669_:
}
func @@f1096(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    JIF %r0 _l4671_;
    MOV %r3 @n;
    MOV %r4 "_interval";
    MOV_PROP %r2 %r3 %r4;
    MOV .e %r2;
    MOV %r1 %r2;
LABEL _l4671_:
    MOV %r1 @n;
    MOV %r2 "_interval";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4672_;
    MOV %r3 @n;
    MOV %r4 "_interval";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_CTX 'clearInterval' 1 false;
    MOV %r1 $RET;
LABEL _l4672_:
    MOV %r2 @n;
    MOV %r3 "_callback";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r2 @n;
    MOV %r3 "_args";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'setInterval' 3 false;
    MOV %r0 $RET;
    MOV %r1 @n;
    MOV %r2 "_interval";
    SET_KEY %r1 %r2 %r0;
}
func @@f1097() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 @n;
    MOV %r2 "_interval";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4673_;
    MOV %r3 @n;
    MOV %r4 "_interval";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_CTX 'clearInterval' 1 false;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 @n;
    MOV %r4 "_interval";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4673_:
}
func @@f1098() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 @n;
    MOV %r2 "_interval";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4674_;
    MOV %r3 @n;
    MOV %r4 "_interval";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_CTX 'clearInterval' 1 false;
    MOV %r1 $RET;
LABEL _l4674_:
    MOV %r0 0;
    VOID %r0;
    MOV %r1 @n;
    MOV %r2 "_callback";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    VOID %r0;
    MOV %r1 @n;
    MOV %r2 "_interval";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 0;
    VOID %r0;
    MOV %r1 @n;
    MOV %r2 "_args";
    SET_KEY %r1 %r2 %r0;
}
func @@f1099(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    REG %r12;
    REG %r13;
    REG %r14;
    REG %r15;
    MOV %r0 .e;
    NEG %r0;
    JF %r0 _l4676_;
    MOV %r1 "utf8";
    MOV $RET %r1;
    RET;
    JMP _l4675_;
LABEL _l4676_:
LABEL _l4675_:
LABEL _l4677_:
LABEL _l4680_:
    MOV %r0 .e;
    MOV %r1 "utf8";
    JE %r0 %r1 _l4682_;
    JMP _l4683_;
LABEL _l4683_:
    MOV %r2 "utf-8";
    JE %r0 %r2 _l4682_;
    JMP _l4684_;
LABEL _l4682_:
    MOV %r3 "utf8";
    MOV $RET %r3;
    RET;
    JMP _l4685_;
LABEL _l4684_:
    MOV %r3 "ucs2";
    JE %r0 %r3 _l4685_;
    JMP _l4686_;
LABEL _l4686_:
    MOV %r4 "ucs-2";
    JE %r0 %r4 _l4685_;
    JMP _l4687_;
LABEL _l4687_:
    MOV %r5 "utf16le";
    JE %r0 %r5 _l4685_;
    JMP _l4688_;
LABEL _l4688_:
    MOV %r6 "utf-16le";
    JE %r0 %r6 _l4685_;
    JMP _l4689_;
LABEL _l4685_:
    MOV %r7 "utf16le";
    MOV $RET %r7;
    RET;
    JMP _l4690_;
LABEL _l4689_:
    MOV %r7 "latin1";
    JE %r0 %r7 _l4690_;
    JMP _l4691_;
LABEL _l4691_:
    MOV %r8 "binary";
    JE %r0 %r8 _l4690_;
    JMP _l4692_;
LABEL _l4690_:
    MOV %r9 "latin1";
    MOV $RET %r9;
    RET;
    JMP _l4693_;
LABEL _l4692_:
    MOV %r9 "base64";
    JE %r0 %r9 _l4693_;
    JMP _l4694_;
LABEL _l4694_:
    MOV %r10 "ascii";
    JE %r0 %r10 _l4693_;
    JMP _l4695_;
LABEL _l4695_:
    MOV %r11 "hex";
    JE %r0 %r11 _l4693_;
    JMP _l4696_;
LABEL _l4693_:
    MOV %r12 .e;
    MOV $RET %r12;
    RET;
    JMP _l4697_;
LABEL _l4696_:
LABEL _l4697_:
    MOV %r12 t;
    JF %r12 _l4700_;
    RET;
    JMP _l4699_;
LABEL _l4700_:
LABEL _l4699_:
    MOV %r13 "";
    MOV %r15 .e;
    ADD %r13 %r15;
    MOV %r14 "toLowerCase";
    CALL_VAR %r13 %r14 0 false;
    MOV %r12 $RET;
    MOV .e %r12;
    MOV %r12 0;
    NEG %r12;
    MOV t %r12;
    JMP _l4701_;
LABEL _l4698_:
LABEL _l4701_:
LABEL _l4681_:
    JMP _l4677_;
LABEL _l4678_:
}
func @@f1100() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 @e;
    MOV %r2 "_onTimeout";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4702_;
    MOV %r2 @e;
    MOV %r3 "_onTimeout";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l4702_:
}
func @@f1101() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 @a;
    MOV %r2 @t;
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4703_;
    MOV %r2 @n;
    JF %r2 _l4705_;
    MOV %r3 null;
    PUSH %r3;
    MOV %r3 @n;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "apply";
    CALL_VAR %r3 %r4 2 false;
    JMP _l4704_;
LABEL _l4705_:
    MOV %r3 null;
    PUSH %r3;
    MOV %r3 @e;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 1 false;
LABEL _l4704_:
    MOV %r2 @t;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "clearImmediate";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4703_:
}
func @@f1102() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @n;
    NEG %r0;
    JF %r0 _l4707_;
    MOV %r2 "throwDeprecation";
    PUSH %r2;
    CALL_REG @r 1 false;
    MOV %r1 $RET;
    JF %r1 _l4709_;
    MOV %r3 @t;
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l4708_;
LABEL _l4709_:
LABEL _l4708_:
    MOV %r2 "traceDeprecation";
    PUSH %r2;
    CALL_REG @r 1 false;
    MOV %r1 $RET;
    JF %r1 _l4711_;
    MOV %r2 @t;
    PUSH %r2;
    MOV_CTX %r2 "console";
    MOV %r3 "trace";
    CALL_VAR %r2 %r3 1 false;
    JMP _l4710_;
LABEL _l4711_:
    MOV %r2 @t;
    PUSH %r2;
    MOV_CTX %r2 "console";
    MOV %r3 "warn";
    CALL_VAR %r2 %r3 1 false;
LABEL _l4710_:
    MOV %r1 0;
    NEG %r1;
    MOV @n %r1;
    JMP _l4706_;
LABEL _l4707_:
LABEL _l4706_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1103(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 "%%";
    MOV %r1 .e;
    EQ %r0 %r1;
    JF %r0 _l4713_;
    MOV %r1 "%";
    MOV $RET %r1;
    RET;
    JMP _l4712_;
LABEL _l4713_:
LABEL _l4712_:
    MOV %r0 @r;
    MOV %r1 @o;
    GE %r0 %r1;
    JF %r0 _l4715_;
    MOV %r1 .e;
    MOV $RET %r1;
    RET;
    JMP _l4714_;
LABEL _l4715_:
LABEL _l4714_:
    MOV %r0 .e;
    MOV %r1 "%s";
    JE %r0 %r1 _l4717_;
    JMP _l4718_;
LABEL _l4717_:
    MOV %r4 @n;
    MOV %r6 @r;
    MOV %r5 %r6;
    ADD %r6 1;
    MOV @r %r6;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_CTX 'String' 1 false;
    MOV %r2 $RET;
    MOV $RET %r2;
    RET;
    JMP _l4719_;
LABEL _l4718_:
    MOV %r2 "%d";
    JE %r0 %r2 _l4719_;
    JMP _l4720_;
LABEL _l4719_:
    MOV %r5 @n;
    MOV %r7 @r;
    MOV %r6 %r7;
    ADD %r7 1;
    MOV @r %r7;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_CTX 'Number' 1 false;
    MOV %r3 $RET;
    MOV $RET %r3;
    RET;
    JMP _l4721_;
LABEL _l4720_:
    MOV %r3 "%j";
    JE %r0 %r3 _l4721_;
    JMP _l4722_;
LABEL _l4721_:
    TRY _l4723_ _l4724_;
    MOV %r6 @n;
    MOV %r8 @r;
    MOV %r7 %r8;
    ADD %r8 1;
    MOV @r %r8;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    MOV_CTX %r5 "JSON";
    MOV %r6 "stringify";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV $RET %r4;
    RET;
    TRY_END;
LABEL _l4723_:
    BLOCK 3;
    VAR e;
    GET_ERR e;
    MOV %r4 "[Circular]";
    MOV $RET %r4;
    RET;
    END_BLOCK 3;
LABEL _l4724_:
    JMP _l4725_;
LABEL _l4722_:
LABEL _l4725_:
    MOV %r4 .e;
    MOV $RET %r4;
    RET;
    JMP _l4727_;
LABEL _l4726_:
LABEL _l4727_:
LABEL _l4716_:
}
func @@f1104() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV_THIS %r1;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r3 @e;
    PUSH %r3;
    MOV %r3 @i;
    PUSH %r3;
    MOV %r3 @r;
    MOV %r4 "deprecate";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1105() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @o;
    NEG %r0;
    JF %r0 _l4729_;
    MOV %r2 @t;
    MOV %r3 "throwDeprecation";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4731_;
    MOV %r3 @i;
    PUSH %r3;
    CALL_CTX 'Error' 1 true;
    MOV %r2 $RET;
    THROW %r2;
    JMP _l4730_;
LABEL _l4731_:
LABEL _l4730_:
    MOV %r2 @t;
    MOV %r3 "traceDeprecation";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4733_;
    MOV %r2 @i;
    PUSH %r2;
    MOV_CTX %r2 "console";
    MOV %r3 "trace";
    CALL_VAR %r2 %r3 1 false;
    JMP _l4732_;
LABEL _l4733_:
    MOV %r2 @i;
    PUSH %r2;
    MOV_CTX %r2 "console";
    MOV %r3 "error";
    CALL_VAR %r2 %r3 1 false;
LABEL _l4732_:
    MOV %r1 0;
    NEG %r1;
    MOV @o %r1;
    JMP _l4728_;
LABEL _l4729_:
LABEL _l4728_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1106(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @y 1 false;
    MOV %r0 $RET;
    JF %r0 _l4735_;
    MOV %r2 "undefined";
    PUSH %r2;
    MOV %r2 "undefined";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "stylize";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4734_;
LABEL _l4735_:
LABEL _l4734_:
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @_ 1 false;
    MOV %r0 $RET;
    JF %r0 _l4737_;
    MOV r "'";
    NEW_REG %r3 "\\\\\"" "g";
    PUSH %r3;
    MOV %r3 "\"";
    PUSH %r3;
    NEW_REG %r5 "'" "g";
    PUSH %r5;
    MOV %r5 "\\'";
    PUSH %r5;
    NEW_REG %r7 "^\"|\"$" "g";
    PUSH %r7;
    MOV %r7 "";
    PUSH %r7;
    MOV %r9 .t;
    PUSH %r9;
    MOV_CTX %r9 "JSON";
    MOV %r10 "stringify";
    CALL_VAR %r9 %r10 1 false;
    MOV %r7 $RET;
    MOV %r8 "replace";
    CALL_VAR %r7 %r8 2 false;
    MOV %r5 $RET;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 "replace";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    ADD r %r2;
    MOV %r1 "'";
    ADD r %r1;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 "string";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "stylize";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4736_;
LABEL _l4737_:
LABEL _l4736_:
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @g 1 false;
    MOV %r0 $RET;
    JF %r0 _l4739_;
    MOV %r2 "";
    MOV %r3 .t;
    ADD %r2 %r3;
    PUSH %r2;
    MOV %r2 "number";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "stylize";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4738_;
LABEL _l4739_:
LABEL _l4738_:
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @d 1 false;
    MOV %r0 $RET;
    JF %r0 _l4741_;
    MOV %r2 "";
    MOV %r3 .t;
    ADD %r2 %r3;
    PUSH %r2;
    MOV %r2 "boolean";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "stylize";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4740_;
LABEL _l4741_:
LABEL _l4740_:
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @b 1 false;
    MOV %r0 $RET;
    JF %r0 _l4743_;
    MOV %r2 "null";
    PUSH %r2;
    MOV %r2 "null";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "stylize";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4742_;
LABEL _l4743_:
LABEL _l4742_:
}
func @@f1107(.e) {
    CLS @t;
    REG %r0;
    REG %r1;
    REG %r2;
    NEW_OBJ @t;
    FUNC %r1 @@f1203;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 @t;
    MOV $RET %r0;
    RET;
}
func @@f1108(.e, .t, .r, .n, .i) {
    CLS @o;
    VAR s;
    VAR a;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    NEW_ARR @o;
    MOV s 0;
    MOV %r0 @t;
    MOV %r1 "length";
    MOV_PROP a %r0 %r1;
LABEL _l4744_:
    MOV %r0 s;
    MOV %r1 a;
    LT %r0 %r1;
    JF %r0 _l4745_;
LABEL _l4747_:
    MOV %r2 @t;
    PUSH %r2;
    MOV %r3 s;
    PUSH %r3;
    CALL_CTX 'String' 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @O 2 false;
    MOV %r1 $RET;
    JF %r1 _l4749_;
    MOV %r3 @e;
    PUSH %r3;
    MOV %r3 @t;
    PUSH %r3;
    MOV %r3 @r;
    PUSH %r3;
    MOV %r3 @n;
    PUSH %r3;
    MOV %r4 s;
    PUSH %r4;
    CALL_CTX 'String' 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 0;
    NEG %r3;
    PUSH %r3;
    CALL_REG @h 6 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    JMP _l4748_;
LABEL _l4749_:
    MOV %r2 "";
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
LABEL _l4748_:
LABEL _l4746_:
    MOV %r1 s;
    ADD %r1 1;
    MOV s %r1;
    JMP _l4744_;
LABEL _l4745_:
    FUNC %r1 @@f1204;
    PUSH %r1;
    MOV %r1 .i;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 @o;
    MOV $RET %r0;
    RET;
}
func @@f1109(.r) {
    REG %r0;
    REG %r1;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 @a;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 @x;
    PUSH %r1;
    CALL_REG @h 6 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1110(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    FUNC %r2 @@f1205;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "reduce";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    MOV %r1 60;
    GT %r0 %r1;
    JF %r0 _l4751_;
    MOV %r7 .r;
    MOV %r8 0;
    MOV_PROP %r1 %r7 %r8;
    MOV %r7 "";
    MOV %r8 .t;
    EQ %r7 %r8;
    JF %r7 _l4753_;
    MOV %r6 "";
    JMP _l4752_;
LABEL _l4753_:
    MOV %r6 .t;
    MOV %r8 "
 ";
    ADD %r6 %r8;
LABEL _l4752_:
    ADD %r1 %r6;
    MOV %r5 " ";
    ADD %r1 %r5;
    MOV %r5 ",
  ";
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "join";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    ADD %r1 %r4;
    MOV %r3 " ";
    ADD %r1 %r3;
    MOV %r3 .r;
    MOV %r4 1;
    MOV_PROP %r2 %r3 %r4;
    ADD %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l4750_;
LABEL _l4751_:
LABEL _l4750_:
    MOV %r6 .r;
    MOV %r7 0;
    MOV_PROP %r0 %r6 %r7;
    MOV %r5 .t;
    ADD %r0 %r5;
    MOV %r4 " ";
    ADD %r0 %r4;
    MOV %r4 ", ";
    PUSH %r4;
    MOV %r4 .e;
    MOV %r5 "join";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    ADD %r0 %r3;
    MOV %r2 " ";
    ADD %r0 %r2;
    MOV %r2 .r;
    MOV %r3 1;
    MOV_PROP %r1 %r2 %r3;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1111(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "  ";
    MOV %r1 .e;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1112(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 "   ";
    MOV %r1 .e;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1113() {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @r;
    PUSH %r0;
    MOV_ARGS %r0;
    PUSH %r0;
    MOV %r2 @r;
    MOV %r3 "format";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV t $RET;
    MOV %r0 "%s %d: %s";
    PUSH %r0;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 t;
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "error";
    CALL_VAR %r0 %r1 4 false;
}
func @@f1114() {
}
func @@f1115(.r, .n, .i) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV_THIS %r2;
    PUSH %r2;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 .i;
    PUSH %r3;
    FUNC %r3 @@f1206;
    CALL_REG %r3 3 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l4754_;
    MOV_THIS %r2;
    LG_OR %r0 %r2;
LABEL _l4754_:
    MOV $RET %r0;
    RET;
}
func @@f1116(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .t;
    MOV %r2 "ended";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4756_;
    RET;
    JMP _l4755_;
LABEL _l4756_:
LABEL _l4755_:
    MOV %r1 .t;
    MOV %r2 "decoder";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4758_;
    MOV %r3 .t;
    MOV %r4 "decoder";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    CALL_VAR %r1 %r2 0 false;
    MOV r $RET;
    MOV %r2 r;
    MOV %r1 %r2;
    JF %r2 _l4760_;
    MOV %r4 r;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l4760_:
    JF %r1 _l4759_;
    MOV %r3 r;
    PUSH %r3;
    MOV %r5 .t;
    MOV %r6 "buffer";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r5 .t;
    MOV %r6 "objectMode";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l4762_;
    MOV %r3 1;
    JMP _l4761_;
LABEL _l4762_:
    MOV %r5 r;
    MOV %r6 "length";
    MOV_PROP %r3 %r5 %r6;
LABEL _l4761_:
    MOV %r5 .t;
    MOV %r6 "length";
    MOV_PROP %r4 %r5 %r6;
    ADD %r4 %r3;
    MOV %r5 .t;
    MOV %r6 "length";
    SET_KEY %r5 %r6 %r4;
    MOV %r2 %r4;
LABEL _l4759_:
    JMP _l4757_;
LABEL _l4758_:
LABEL _l4757_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .t;
    MOV %r2 "sync";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4764_;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @j 1 false;
    JMP _l4763_;
LABEL _l4764_:
    MOV %r1 1;
    NEG %r1;
    MOV %r2 .t;
    MOV %r3 "needReadable";
    SET_KEY %r2 %r3 %r1;
    MOV %r2 .t;
    MOV %r3 "emittedReadable";
    MOV_PROP %r1 %r2 %r3;
    JIF %r1 _l4765_;
    MOV %r3 0;
    NEG %r3;
    MOV %r4 .t;
    MOV %r5 "emittedReadable";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @A 1 false;
    MOV %r2 $RET;
LABEL _l4765_:
LABEL _l4763_:
}
func @@f1117(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 .t;
    MOV n %r0;
    MOV %r5 n;
    PUSH %r5;
    MOV %r5 @a;
    MOV %r6 "isBuffer";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JIF %r4 _l4770_;
    MOV %r5 n;
    MOV %r6 @u;
    INST_OF %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l4770_:
    MOV %r2 %r3;
    JIF %r3 _l4769_;
    MOV %r4 "string";
    MOV %r5 .t;
    TYPE_OF %r5;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l4769_:
    MOV %r1 %r2;
    JIF %r2 _l4768_;
    MOV %r3 0;
    VOID %r3;
    MOV %r4 .t;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4768_:
    MOV %r0 %r1;
    JIF %r1 _l4767_;
    MOV %r3 .e;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l4767_:
    JIF %r0 _l4766_;
    MOV %r3 "chunk";
    PUSH %r3;
    NEW_ARR %r3;
    MOV %r4 "string";
    SET_KEY %r3 0 %r4;
    MOV %r4 "Buffer";
    SET_KEY %r3 1 %r4;
    MOV %r4 "Uint8Array";
    SET_KEY %r3 2 %r4;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    CALL_REG @_ 3 true;
    MOV %r2 $RET;
    MOV r %r2;
    MOV %r1 %r2;
LABEL _l4766_:
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f1118(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @a;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1119(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    MOV %r2 @O;
    GE %r1 %r2;
    JF %r1 _l4772_;
    MOV %r2 @O;
    MOV .e %r2;
    JMP _l4771_;
LABEL _l4772_:
    MOV %r2 .e;
    SUB %r2 1;
    MOV .e %r2;
    MOV %r2 .e;
    MOV %r3 1;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 2;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 4;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 8;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    MOV %r3 16;
    ZSHR %r2 %r3;
    MOV %r3 .e;
    OR %r3 %r2;
    MOV .e %r3;
    MOV %r2 .e;
    ADD %r2 1;
    MOV .e %r2;
LABEL _l4771_:
    MOV %r0 .e;
    MOV $RET %r0;
    RET;
}
func @@f1120(.t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    MOV %r0 "onunpipe";
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV %r2 .t;
    MOV %r3 @n;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l4775_;
    MOV %r3 .r;
    LG_AND %r1 %r3;
LABEL _l4775_:
    MOV %r0 %r1;
    JF %r1 _l4774_;
    MOV %r2 1;
    NEG %r2;
    MOV %r4 .r;
    MOV %r5 "hasUnpiped";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4774_:
    JF %r0 _l4773_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .r;
    MOV %r4 "hasUnpiped";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "cleanup";
    PUSH %r2;
    CALL_REG @c 1 false;
    MOV %r2 "close";
    PUSH %r2;
    MOV %r2 @d;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "finish";
    PUSH %r2;
    MOV %r2 @b;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "drain";
    PUSH %r2;
    MOV %r2 @l;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 @p;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "unpipe";
    PUSH %r2;
    MOV %r2 @a;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "end";
    PUSH %r2;
    MOV %r2 @u;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "end";
    PUSH %r2;
    MOV %r2 @g;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 "data";
    PUSH %r2;
    MOV %r2 @h;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "removeListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 0;
    NEG %r2;
    MOV @f %r2;
    MOV %r4 @i;
    MOV %r5 "awaitDrain";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    MOV %r2 %r3;
    JIF %r3 _l4777_;
    MOV %r6 @e;
    MOV %r7 "_writableState";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JF %r5 _l4778_;
    MOV %r9 @e;
    MOV %r10 "_writableState";
    MOV_PROP %r7 %r9 %r10;
    MOV %r8 "needDrain";
    MOV_PROP %r6 %r7 %r8;
    NEG %r6;
    LG_AND %r4 %r6;
LABEL _l4778_:
    LG_OR %r2 %r4;
LABEL _l4777_:
    MOV %r1 %r2;
    JIF %r2 _l4776_;
    CALL_REG @l 0 false;
    MOV %r3 $RET;
    LG_OR %r1 %r3;
LABEL _l4776_:
LABEL _l4773_:
}
func @@f1121() {
    REG %r0;
    REG %r1;
    MOV %r0 "onend";
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV %r0 @e;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1122(.e) {
    REG %r0;
    CLS @e;
    MOV @e .e;
    FUNC %r0 @@f1207;
    MOV $RET %r0;
    RET;
}
func @@f1123(.t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    REG %r10;
    REG %r11;
    MOV %r0 "ondata";
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "write";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV %r0 "dest.write";
    PUSH %r0;
    MOV %r0 r;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 r;
    EQ %r0 %r1;
    JF %r0 _l4779_;
    MOV %r5 1;
    MOV %r7 @i;
    MOV %r8 "pipesCount";
    MOV_PROP %r6 %r7 %r8;
    EQ %r5 %r6;
    MOV %r4 %r5;
    JF %r5 _l4783_;
    MOV %r8 @i;
    MOV %r9 "pipes";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 @e;
    EQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l4783_:
    MOV %r3 %r4;
    JIF %r4 _l4782_;
    MOV %r8 @i;
    MOV %r9 "pipesCount";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 1;
    GT %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l4784_;
    MOV %r7 1;
    MINUS %r7;
    MOV %r10 @i;
    MOV %r11 "pipes";
    MOV_PROP %r9 %r10 %r11;
    PUSH %r9;
    MOV %r9 @e;
    PUSH %r9;
    CALL_REG @q 2 false;
    MOV %r8 $RET;
    NE %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l4784_:
    LG_OR %r3 %r5;
LABEL _l4782_:
    MOV %r2 %r3;
    JF %r3 _l4781_;
    MOV %r4 @f;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l4781_:
    JF %r2 _l4780_;
    MOV %r4 "false write response, pause";
    PUSH %r4;
    MOV %r5 @i;
    MOV %r6 "awaitDrain";
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c 2 false;
    MOV %r5 @i;
    MOV %r6 "awaitDrain";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV %r5 @i;
    MOV %r6 "awaitDrain";
    SET_KEY %r5 %r6 %r4;
LABEL _l4780_:
    MOV %r2 @n;
    MOV %r3 "pause";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l4779_:
}
func @@f1124(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "onerror";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @c 2 false;
    CALL_REG @g 0 false;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 @p;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 0;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 "error";
    PUSH %r2;
    CALL_REG @o 2 false;
    MOV %r1 $RET;
    EQ %r0 %r1;
    JF %r0 _l4785_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4785_:
}
func @@f1125() {
    REG %r0;
    REG %r1;
    MOV %r0 "finish";
    PUSH %r0;
    MOV %r0 @b;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    CALL_REG @g 0 false;
}
func @@f1126() {
    REG %r0;
    REG %r1;
    MOV %r0 "onfinish";
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    CALL_REG @g 0 false;
}
func @@f1127() {
    REG %r0;
    REG %r1;
    MOV %r0 "unpipe";
    PUSH %r0;
    CALL_REG @c 1 false;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "unpipe";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1128(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 "function";
    MOV %r2 .e;
    MOV %r3 "prependListener";
    MOV_PROP %r1 %r2 %r3;
    TYPE_OF %r1;
    WEQ %r0 %r1;
    JF %r0 _l4787_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "prependListener";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4786_;
LABEL _l4787_:
LABEL _l4786_:
    MOV %r2 .e;
    MOV %r3 "_events";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4790_;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4790_:
    JF %r0 _l4789_;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    MOV_CTX %r2 "Array";
    MOV %r3 "isArray";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l4792_;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r6 .e;
    MOV %r7 "_events";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .t;
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "unshift";
    CALL_VAR %r2 %r3 1 false;
    JMP _l4791_;
LABEL _l4792_:
    NEW_ARR %r2;
    MOV %r3 .r;
    SET_KEY %r2 0 %r3;
    MOV %r6 .e;
    MOV %r7 "_events";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 .t;
    MOV_PROP %r3 %r4 %r5;
    SET_KEY %r2 1 %r3;
    MOV %r5 .e;
    MOV %r6 "_events";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
LABEL _l4791_:
    JMP _l4788_;
LABEL _l4789_:
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .r;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "on";
    CALL_VAR %r1 %r2 2 false;
LABEL _l4788_:
}
func @@f1129(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 .t;
    MOV %r2 "resumeScheduled";
    MOV_PROP %r0 %r1 %r2;
    JIF %r0 _l4793_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "resumeScheduled";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @L;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 3 false;
    MOV %r1 $RET;
LABEL _l4793_:
}
func @@f1130() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 "wrapped end";
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r2 @r;
    MOV %r3 "decoder";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4796_;
    MOV %r3 @r;
    MOV %r4 "ended";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l4796_:
    JF %r0 _l4795_;
    MOV %r3 @r;
    MOV %r4 "decoder";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "end";
    CALL_VAR %r1 %r2 0 false;
    MOV e $RET;
    MOV %r2 e;
    MOV %r1 %r2;
    JF %r2 _l4798_;
    MOV %r4 e;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l4798_:
    JF %r1 _l4797_;
    MOV %r3 e;
    PUSH %r3;
    MOV %r3 @t;
    MOV %r4 "push";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
LABEL _l4797_:
    JMP _l4794_;
LABEL _l4795_:
LABEL _l4794_:
    MOV %r0 null;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1131(.i) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r1 "wrapped data";
    PUSH %r1;
    CALL_REG @c 1 false;
    MOV %r2 @r;
    MOV %r3 "decoder";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4800_;
    MOV %r4 .i;
    PUSH %r4;
    MOV %r6 @r;
    MOV %r7 "decoder";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "write";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV .i %r3;
    MOV %r2 %r3;
LABEL _l4800_:
    MOV %r2 @r;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JF %r1 _l4801_;
    MOV %r2 null;
    MOV %r3 .i;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4801_:
    JIF %r0 _l4799_;
    MOV %r4 @r;
    MOV %r5 "objectMode";
    MOV_PROP %r3 %r4 %r5;
    MOV %r2 %r3;
    JIF %r3 _l4803_;
    MOV %r5 .i;
    MOV %r4 %r5;
    JF %r5 _l4804_;
    MOV %r7 .i;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    LG_AND %r4 %r6;
LABEL _l4804_:
    LG_OR %r2 %r4;
LABEL _l4803_:
    MOV %r1 %r2;
    JF %r2 _l4802_;
    MOV %r5 .i;
    PUSH %r5;
    MOV %r5 @t;
    MOV %r6 "push";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JIF %r4 _l4805_;
    MOV %r6 0;
    NEG %r6;
    MOV @n %r6;
    MOV %r6 @e;
    MOV %r7 "pause";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    LG_OR %r3 %r5;
LABEL _l4805_:
    LG_AND %r1 %r3;
LABEL _l4802_:
LABEL _l4799_:
}
func @@f1132(.t) {
    REG %r0;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1208;
    MOV $RET %r0;
    RET;
}
func @@f1133(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 "wrapped _read";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r0 @n;
    JF %r0 _l4806_;
    MOV %r2 1;
    NEG %r2;
    MOV @n %r2;
    MOV %r2 @e;
    MOV %r3 "resume";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 $RET;
LABEL _l4806_:
}
func @@f1134() {
    REG %r0;
    REG %r1;
    MOV %r1 @t;
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    FUNC %r1 @@f1209;
    CALL_REG %r1 2 false;
    MOV %r0 $RET;
    NEG %r0;
}
func @@f1135(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    FUNC %r1 @@f1210;
    CALL_REG %r1 2 false;
    MOV %r0 $RET;
    NEG %r0;
}
func @@f1136(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 0;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4808_;
    MOV %r3 .t;
    MOV %r4 "needDrain";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l4808_:
    JF %r0 _l4807_;
    MOV %r2 1;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "needDrain";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 "drain";
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4807_:
}
func @@f1137(.r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 @t;
    MOV %r2 "pendingcb";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV %r1 @t;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .r;
    JF %r0 _l4809_;
    MOV %r2 "error";
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "emit";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4809_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 "prefinished";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 "prefinish";
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    CALL_REG @A 2 false;
}
func @@f1138(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 .t;
    MOV %r3 "prefinished";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4811_;
    MOV %r3 .t;
    MOV %r4 "finalCalled";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l4811_:
    JIF %r0 _l4810_;
    MOV %r3 "function";
    MOV %r5 .e;
    MOV %r6 "_final";
    MOV_PROP %r4 %r5 %r6;
    TYPE_OF %r4;
    WNE %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l4814_;
    MOV %r5 .t;
    MOV %r6 "destroyed";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l4814_:
    JF %r2 _l4813_;
    MOV %r3 0;
    NEG %r3;
    MOV %r4 .t;
    MOV %r5 "prefinished";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 "prefinish";
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l4812_;
LABEL _l4813_:
    MOV %r4 .t;
    MOV %r5 "pendingcb";
    MOV_PROP %r3 %r4 %r5;
    ADD %r3 1;
    MOV %r4 .t;
    MOV %r5 "pendingcb";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 0;
    NEG %r3;
    MOV %r4 .t;
    MOV %r5 "finalCalled";
    SET_KEY %r4 %r5 %r3;
    MOV %r3 @j;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 @r;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 3 false;
    MOV %r1 $RET;
LABEL _l4812_:
LABEL _l4810_:
}
func @@f1139() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV_THIS %r1;
    MOV %r2 "getBuffer";
    CALL_VAR %r1 %r2 0 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1140(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 @u;
    MOV %r2 "from";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1141(.e, .t) {
    VAR n;
    REG %r0;
    REG %r1;
    CALL_REG @v 0 true;
    MOV n $RET;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 n;
    PUSH %r0;
    MOV %r0 .e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 n;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1142(.e, .t, .n, .i) {
    VAR o;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 null;
    MOV %r2 .n;
    EQ %r1 %r2;
    JF %r1 _l4816_;
    CALL_REG @m 0 true;
    MOV %r2 $RET;
    MOV o %r2;
    JMP _l4815_;
LABEL _l4816_:
    MOV %r3 "string";
    MOV %r4 .n;
    TYPE_OF %r4;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l4818_;
    MOV %r5 .t;
    MOV %r6 "objectMode";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l4818_:
    JIF %r2 _l4817_;
    MOV %r5 "chunk";
    PUSH %r5;
    NEW_ARR %r5;
    MOV %r6 "string";
    SET_KEY %r5 0 %r6;
    MOV %r6 "Buffer";
    SET_KEY %r5 1 %r6;
    PUSH %r5;
    MOV %r5 .n;
    PUSH %r5;
    CALL_REG @d 3 true;
    MOV %r4 $RET;
    MOV o %r4;
    MOV %r3 %r4;
LABEL _l4817_:
LABEL _l4815_:
    MOV %r1 o;
    NEG %r1;
    MOV %r0 %r1;
    JIF %r1 _l4819_;
    MOV %r3 "error";
    PUSH %r3;
    MOV %r3 o;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "emit";
    CALL_VAR %r3 %r4 2 false;
    MOV %r3 .i;
    PUSH %r3;
    MOV %r3 o;
    PUSH %r3;
    MOV %r3 @r;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 1;
    NEG %r2;
    LG_OR %r0 %r2;
LABEL _l4819_:
    MOV $RET %r0;
    RET;
}
func @@f1143(.e, .t, .r, .n, .i, .o) {
    VAR s;
    VAR a;
    VAR c;
    VAR l;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .r;
    NEG %r0;
    JF %r0 _l4821_;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    FUNC %r1 @@f1211;
    CALL_REG %r1 3 false;
    MOV s $RET;
    MOV %r1 .n;
    MOV %r2 s;
    NE %r1 %r2;
    JF %r1 _l4822_;
    MOV %r3 0;
    NEG %r3;
    MOV .r %r3;
    MOV %r3 "buffer";
    MOV .i %r3;
    MOV %r3 s;
    MOV .n %r3;
    MOV %r2 %r3;
LABEL _l4822_:
    JMP _l4820_;
LABEL _l4821_:
LABEL _l4820_:
    MOV %r1 .t;
    MOV %r2 "objectMode";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4824_;
    MOV a 1;
    JMP _l4823_;
LABEL _l4824_:
    MOV %r1 .n;
    MOV %r2 "length";
    MOV_PROP a %r1 %r2;
LABEL _l4823_:
    MOV %r0 a;
    MOV %r2 .t;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    ADD %r1 %r0;
    MOV %r2 .t;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 "length";
    MOV_PROP c %r1 %r2;
    MOV %r1 .t;
    MOV %r2 "highWaterMark";
    MOV_PROP %r0 %r1 %r2;
    LT c %r0;
    MOV %r0 c;
    JIF %r0 _l4825_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 .t;
    MOV %r4 "needDrain";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4825_:
    MOV %r2 .t;
    MOV %r3 "writing";
    MOV_PROP %r1 %r2 %r3;
    MOV %r0 %r1;
    JIF %r1 _l4828_;
    MOV %r3 .t;
    MOV %r4 "corked";
    MOV_PROP %r2 %r3 %r4;
    LG_OR %r0 %r2;
LABEL _l4828_:
    JF %r0 _l4827_;
    MOV %r1 .t;
    MOV %r2 "lastBufferedRequest";
    MOV_PROP l %r1 %r2;
    NEW_OBJ %r1;
    MOV %r2 .n;
    SET_KEY %r1 'chunk' %r2;
    MOV %r2 .i;
    SET_KEY %r1 'encoding' %r2;
    MOV %r2 .r;
    SET_KEY %r1 'isBuf' %r2;
    MOV %r2 .o;
    SET_KEY %r1 'callback' %r2;
    MOV %r2 null;
    SET_KEY %r1 'next' %r2;
    MOV %r2 .t;
    MOV %r3 "lastBufferedRequest";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 l;
    JF %r1 _l4830_;
    MOV %r3 .t;
    MOV %r4 "lastBufferedRequest";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 l;
    MOV %r4 "next";
    SET_KEY %r3 %r4 %r2;
    JMP _l4829_;
LABEL _l4830_:
    MOV %r3 .t;
    MOV %r4 "lastBufferedRequest";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 .t;
    MOV %r4 "bufferedRequest";
    SET_KEY %r3 %r4 %r2;
LABEL _l4829_:
    MOV %r1 1;
    MOV %r3 .t;
    MOV %r4 "bufferedRequestCount";
    MOV_PROP %r2 %r3 %r4;
    ADD %r2 %r1;
    MOV %r3 .t;
    MOV %r4 "bufferedRequestCount";
    SET_KEY %r3 %r4 %r2;
    JMP _l4826_;
LABEL _l4827_:
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 1;
    NEG %r1;
    PUSH %r1;
    MOV %r1 a;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .o;
    PUSH %r1;
    CALL_REG @k 7 false;
LABEL _l4826_:
    MOV %r0 c;
    MOV $RET %r0;
    RET;
}
func @@f1144(.e, .t, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "ending";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    CALL_REG @A 2 false;
    MOV %r0 .n;
    JF %r0 _l4831_;
    MOV %r3 .t;
    MOV %r4 "finished";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4833_;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 @r;
    MOV %r4 "nextTick";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    JMP _l4832_;
LABEL _l4833_:
    MOV %r3 "finish";
    PUSH %r3;
    MOV %r3 .n;
    PUSH %r3;
    MOV %r3 .e;
    MOV %r4 "once";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
LABEL _l4832_:
LABEL _l4831_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 .t;
    MOV %r2 "ended";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .e;
    MOV %r2 "writable";
    SET_KEY %r1 %r2 %r0;
}
func @@f1145(.t, .n) {
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    CLS @n;
    MOV @n .n;
    FUNC %r0 @@f1212;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1146(.e, .t) {
    REG %r0;
    CLS @e;
    MOV @e .e;
    CLS @t;
    MOV @t .t;
    FUNC %r0 @@f1213;
    MOV $RET %r0;
    RET;
}
func @@f1147(.t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @t;
    MOV @t .t;
    CLS @r;
    MOV @r .r;
    MOV %r0 null;
    PUSH %r0;
    FUNC %r0 @@f1214;
    PUSH %r0;
    MOV %r2 @e;
    MOV %r3 @h;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1148(.e, .t) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 @n;
    MOV %r3 @h;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "read";
    CALL_VAR %r0 %r1 0 false;
    MOV r $RET;
    MOV %r0 r;
    JF %r0 _l4835_;
    MOV %r1 null;
    MOV %r2 @n;
    MOV %r3 @l;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 null;
    MOV %r2 @n;
    MOV %r3 @s;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 null;
    MOV %r2 @n;
    MOV %r3 @a;
    SET_KEY %r2 %r3 %r1;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 1;
    NEG %r2;
    PUSH %r2;
    CALL_REG @p 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG .e 1 false;
    JMP _l4834_;
LABEL _l4835_:
    MOV %r1 .e;
    MOV %r2 @n;
    MOV %r3 @s;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .t;
    MOV %r2 @n;
    MOV %r3 @a;
    SET_KEY %r2 %r3 %r1;
LABEL _l4834_:
}
func @@f1149(.e) {
    VAR t;
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    MOV %r0 %r1;
    JF %r1 _l4838_;
    MOV %r2 "ERR_STREAM_PREMATURE_CLOSE";
    MOV %r4 .e;
    MOV %r5 "code";
    MOV_PROP %r3 %r4 %r5;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4838_:
    JF %r0 _l4837_;
    MOV %r1 @n;
    MOV %r2 @a;
    MOV_PROP t %r1 %r2;
    MOV %r2 null;
    MOV %r3 t;
    NE %r2 %r3;
    JF %r2 _l4839_;
    MOV %r4 null;
    MOV %r5 @n;
    MOV %r6 @l;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 null;
    MOV %r5 @n;
    MOV %r6 @s;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 null;
    MOV %r5 @n;
    MOV %r6 @a;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG t 1 false;
    MOV %r3 $RET;
LABEL _l4839_:
    MOV %r2 .e;
    MOV %r3 @n;
    MOV %r4 @u;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    VOID %r1;
    MOV $RET %r1;
    RET;
    JMP _l4836_;
LABEL _l4837_:
LABEL _l4836_:
    MOV %r0 @n;
    MOV %r1 @s;
    MOV_PROP r %r0 %r1;
    MOV %r0 null;
    MOV %r1 r;
    NE %r0 %r1;
    JF %r0 _l4840_;
    MOV %r2 null;
    MOV %r3 @n;
    MOV %r4 @l;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 null;
    MOV %r3 @n;
    MOV %r4 @s;
    SET_KEY %r3 %r4 %r2;
    MOV %r2 null;
    MOV %r3 @n;
    MOV %r4 @a;
    SET_KEY %r3 %r4 %r2;
    MOV %r3 0;
    VOID %r3;
    PUSH %r3;
    MOV %r3 0;
    NEG %r3;
    PUSH %r3;
    CALL_REG @p 2 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG r 1 false;
    MOV %r1 $RET;
LABEL _l4840_:
    MOV %r0 0;
    NEG %r0;
    MOV %r1 @n;
    MOV %r2 @c;
    SET_KEY %r1 %r2 %r0;
}
func @@f1150(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "nextTick";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1151(.e) {
    VAR t;
    CLS @r;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    CLS @e;
    MOV @e .e;
    MOV t 1;
LABEL _l4841_:
    MOV %r0 t;
    MOV_ARGS %r2;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l4842_;
LABEL _l4844_:
    MOV %r1 null;
    MOV_ARGS %r3;
    MOV %r4 t;
    MOV_PROP %r2 %r3 %r4;
    WNE %r1 %r2;
    JF %r1 _l4846_;
    MOV_ARGS %r2;
    MOV %r3 t;
    MOV_PROP @r %r2 %r3;
    JMP _l4845_;
LABEL _l4846_:
    NEW_OBJ @r;
LABEL _l4845_:
    MOV %r1 @r;
    PUSH %r1;
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    CALL_VAR %r1 %r2 1 false;
    MOV i $RET;
    MOV %r1 "function";
    MOV_CTX %r3 "Object";
    MOV %r4 "getOwnPropertySymbols";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4847_;
    FUNC %r5 @@f1215;
    PUSH %r5;
    MOV %r7 @r;
    PUSH %r7;
    MOV_CTX %r7 "Object";
    MOV %r8 "getOwnPropertySymbols";
    CALL_VAR %r7 %r8 1 false;
    MOV %r5 $RET;
    MOV %r6 "filter";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    PUSH %r4;
    MOV %r4 i;
    MOV %r5 "concat";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV i %r3;
    MOV %r2 %r3;
LABEL _l4847_:
    FUNC %r1 @@f1216;
    PUSH %r1;
    MOV %r1 i;
    MOV %r2 "forEach";
    CALL_VAR %r1 %r2 1 false;
LABEL _l4843_:
    MOV %r1 t;
    ADD %r1 1;
    MOV t %r1;
    JMP _l4841_;
LABEL _l4842_:
    MOV %r0 @e;
    MOV $RET %r0;
    RET;
}
func @@f1152(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 @o;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l4850_;
    MOV %r2 .t;
    LG_AND %r0 %r2;
LABEL _l4850_:
    JF %r0 _l4849_;
    MOV %r1 @r;
    PUSH %r1;
    MOV %r1 @s;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 3 false;
    MOV %r2 @s;
    MOV %r3 "_writableState";
    MOV_PROP %r1 %r2 %r3;
    JF %r1 _l4851_;
    MOV %r3 0;
    NEG %r3;
    MOV %r6 @s;
    MOV %r7 "_writableState";
    MOV_PROP %r4 %r6 %r7;
    MOV %r5 "errorEmitted";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l4851_:
    JMP _l4848_;
LABEL _l4849_:
    MOV %r1 @o;
    JF %r1 _l4852_;
    MOV %r2 @n;
    PUSH %r2;
    MOV %r2 @s;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 2 false;
    MOV %r2 .t;
    PUSH %r2;
    CALL_REG @o 1 false;
    JMP _l4848_;
LABEL _l4852_:
    MOV %r2 @n;
    PUSH %r2;
    MOV %r2 @s;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 2 false;
LABEL _l4848_:
}
func @@f1153() {
    VAR r;
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 @t;
    NEG %r0;
    JF %r0 _l4854_;
    MOV %r1 0;
    NEG %r1;
    MOV @t %r1;
    MOV_ARGS %r1;
    MOV %r2 "length";
    MOV_PROP r %r1 %r2;
    MOV %r1 r;
    PUSH %r1;
    CALL_CTX 'Array' 1 true;
    MOV n $RET;
    MOV i 0;
LABEL _l4855_:
    MOV %r1 i;
    MOV %r2 r;
    LT %r1 %r2;
    JF %r1 _l4856_;
LABEL _l4858_:
    MOV_ARGS %r3;
    MOV %r4 i;
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 n;
    MOV %r4 i;
    SET_KEY %r3 %r4 %r2;
LABEL _l4857_:
    MOV %r2 i;
    ADD %r2 1;
    MOV i %r2;
    JMP _l4855_;
LABEL _l4856_:
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 n;
    PUSH %r1;
    MOV %r1 @e;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    JMP _l4853_;
LABEL _l4854_:
LABEL _l4853_:
}
func @@f1154(.t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @l;
    MOV %r3 "bufferedAmount";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @b;
    GT %r0 %r1;
    JF %r0 _l4860_;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 @g;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    CALL_CTX 'setTimeout' 5 false;
    MOV %r1 $RET;
    VOID %r1;
    MOV $RET %r1;
    RET;
    JMP _l4859_;
LABEL _l4860_:
LABEL _l4859_:
    MOV %r1 @_;
    MOV %r0 %r1;
    JF %r1 _l4862_;
    MOV %r2 "string";
    MOV %r3 .t;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4862_:
    JF %r0 _l4861_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 "utf8";
    PUSH %r3;
    MOV %r3 @a;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV .t %r2;
    MOV %r1 %r2;
LABEL _l4861_:
    TRY _l4863_ _l4864_;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r0 @l;
    MOV %r1 "send";
    CALL_VAR %r0 %r1 1 false;
    TRY_END;
LABEL _l4863_:
    BLOCK 2;
    VAR e;
    GET_ERR e;
    MOV %r1 e;
    PUSH %r1;
    CALL_REG .n 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
    END_BLOCK 2;
LABEL _l4864_:
    CALL_REG .n 0 false;
}
func @@f1155(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r2 @l;
    MOV %r3 "readyState";
    MOV_PROP %r0 %r2 %r3;
    MOV %r2 @l;
    MOV %r3 "OPEN";
    MOV_PROP %r1 %r2 %r3;
    NE %r0 %r1;
    JF %r0 _l4866_;
    CALL_REG .r 0 false;
    MOV %r1 $RET;
    VOID %r1;
    MOV $RET %r1;
    RET;
    JMP _l4865_;
LABEL _l4866_:
LABEL _l4865_:
    MOV %r1 @_;
    MOV %r0 %r1;
    JF %r1 _l4868_;
    MOV %r2 "string";
    MOV %r3 .e;
    TYPE_OF %r3;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l4868_:
    JF %r0 _l4867_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 "utf8";
    PUSH %r3;
    MOV %r3 @a;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV .e %r2;
    MOV %r1 %r2;
LABEL _l4867_:
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 .r;
    PUSH %r0;
    MOV %r0 @l;
    MOV %r1 "send";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1156(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 @l;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 0 false;
    CALL_REG .e 0 false;
}
func @@f1157(.e, .t, .r) {
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    NEW_OBJ %r0;
    MOV %r2 .e;
    MOV %r3 "objectMode";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY %r0 'objectMode' %r1;
    PUSH %r0;
    CALL_REG @i 1 true;
    MOV n $RET;
    MOV %r1 .t;
    MOV %r2 n;
    MOV %r3 "_write";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .r;
    MOV %r2 n;
    MOV %r3 "_flush";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 n;
    MOV $RET %r0;
    RET;
}
func @@f1158(.e, .t) {
    VAR r;
    VAR n;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r1 .e;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'Array' 1 true;
    MOV r $RET;
    MOV n 0;
LABEL _l4869_:
    MOV %r0 n;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    LT %r0 %r1;
    JF %r0 _l4870_;
LABEL _l4872_:
    MOV %r1 "string";
    MOV %r5 .e;
    MOV %r6 n;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "chunk";
    MOV_PROP %r2 %r3 %r4;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4874_;
    MOV %r4 .e;
    MOV %r5 n;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    MOV %r3 "utf8";
    PUSH %r3;
    MOV %r3 @a;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV %r3 r;
    MOV %r4 n;
    SET_KEY %r3 %r4 %r2;
    JMP _l4873_;
LABEL _l4874_:
    MOV %r5 .e;
    MOV %r6 n;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "chunk";
    MOV_PROP %r2 %r3 %r4;
    MOV %r3 r;
    MOV %r4 n;
    SET_KEY %r3 %r4 %r2;
LABEL _l4873_:
LABEL _l4871_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l4869_;
LABEL _l4870_:
    MOV %r1 r;
    PUSH %r1;
    MOV %r1 @a;
    MOV %r2 "concat";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 "binary";
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV_THIS %r0;
    MOV %r1 "_write";
    CALL_VAR %r0 %r1 3 false;
}
func @@f1159() {
    REG %r0;
    REG %r1;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 @c;
    MOV %r1 "setReadable";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @d;
    PUSH %r0;
    MOV %r0 @c;
    MOV %r1 "setWritable";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 "connect";
    PUSH %r0;
    MOV %r0 @c;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1160() {
    REG %r0;
    REG %r1;
    MOV %r0 @c;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
    MOV %r0 @c;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1161(.e) {
    REG %r0;
    REG %r1;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @c;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1162(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .e;
    MOV %r1 "data";
    MOV_PROP t %r0 %r1;
    MOV %r1 t;
    MOV_CTX %r2 "ArrayBuffer";
    INST_OF %r1 %r2;
    JF %r1 _l4876_;
    MOV %r2 t;
    PUSH %r2;
    MOV %r2 @a;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l4875_;
LABEL _l4876_:
    MOV %r2 t;
    PUSH %r2;
    MOV %r2 "utf8";
    PUSH %r2;
    MOV %r2 @a;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l4875_:
    MOV t %r0;
    MOV %r0 t;
    PUSH %r0;
    MOV %r0 @d;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1163() {
    REG %r0;
    REG %r1;
    MOV %r0 @l;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1164(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @i;
    MOV %r2 .e;
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 @n;
    MOV %r2 .e;
    SET_KEY %r1 %r2 %r0;
}
func @@f1165(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r7 @t;
    MOV %r8 @s;
    MOV_PROP %r5 %r7 %r8;
    MOV %r6 1;
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .e;
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l4877_;
    MOV %r3 .e;
    LG_OR %r1 %r3;
LABEL _l4877_:
    PUSH %r1;
    CALL_REG @i 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1166() {
    VAR r;
    CLS @i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 @e;
    MOV %r1 "shift";
    CALL_VAR %r0 %r1 0 false;
    MOV @i $RET;
    MOV %r0 @i;
    JF %r0 _l4878_;
    MOV %r3 @i;
    MOV %r4 "packet";
    MOV_PROP %r2 %r3 %r4;
    MOV r %r2;
    MOV %r2 r;
    PUSH %r2;
    FUNC %r2 @@f1217;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "_sendPacket";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4878_:
}
func @@f1167() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    FUNC %r0 @@f1218;
    PUSH %r0;
    MOV %r2 @e;
    MOV %r3 "outgoingStore";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1168() {
    REG %r0;
    REG %r1;
    NEW_OBJ %r0;
    MOV %r1 "pubrec";
    SET_KEY %r0 'cmd' %r1;
    MOV %r1 @o;
    SET_KEY %r0 'messageId' %r1;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "_sendPacket";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1169(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    JF %r0 _l4880_;
    MOV %r2 @t;
    MOV %r1 %r2;
    JF %r2 _l4881_;
    MOV %r4 .e;
    PUSH %r4;
    CALL_REG @t 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l4881_:
    MOV $RET %r1;
    RET;
    JMP _l4879_;
LABEL _l4880_:
LABEL _l4879_:
    NEW_OBJ %r0;
    MOV %r1 "puback";
    SET_KEY %r0 'cmd' %r1;
    MOV %r1 @o;
    SET_KEY %r0 'messageId' %r1;
    MOV %r1 @a;
    SET_KEY %r0 'reasonCode' %r1;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @s;
    MOV %r1 "_sendPacket";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1170(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .e;
    JF %r0 _l4883_;
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @t 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l4882_;
LABEL _l4883_:
LABEL _l4882_:
    MOV %r0 @r;
    PUSH %r0;
    MOV %r0 @_;
    PUSH %r0;
    MOV %r2 @n;
    MOV %r3 "incomingStore";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "del";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 @i;
    PUSH %r0;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "_sendPacket";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1171() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 "_storeProcessing";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r1 @t;
    MOV %r2 "_packetIdsDuringStoreProcessing";
    SET_KEY %r1 %r2 %r0;
}
func @@f1172() {
    REG %r0;
    REG %r1;
    MOV %r0 @n;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 0 false;
    MOV %r0 null;
    MOV @n %r0;
    CALL_REG @i 0 false;
}
func @@f1173(.e) {
    REG %r0;
    REG %r1;
    CALL_REG @i 0 false;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @o;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "removeListener";
    CALL_VAR %r0 %r1 2 false;
    MOV %r0 "error";
    PUSH %r0;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1174() {
    VAR n;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV n 0;
    NEG n;
    MOV %r1 @t;
    MOV %r2 "_packetIdsDuringStoreProcessing";
    MOV_PROP %r0 %r1 %r2;
    FORIN s %r0 _l4884_ _l4885_;
LABEL _l4884_:
    MOV %r4 @t;
    MOV %r5 "_packetIdsDuringStoreProcessing";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 s;
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    JF %r1 _l4887_;
    MOV %r2 1;
    NEG %r2;
    MOV n %r2;
    BREAK_FORIN;
    JMP _l4886_;
LABEL _l4887_:
LABEL _l4886_:
    FORIN_END;
LABEL _l4885_:
    MOV %r0 n;
    JF %r0 _l4889_;
    CALL_REG @i 0 false;
    MOV %r1 "close";
    PUSH %r1;
    MOV %r1 @o;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "removeListener";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 "connect";
    PUSH %r1;
    MOV %r1 @e;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    JMP _l4888_;
LABEL _l4889_:
    CALL_REG @r 0 false;
LABEL _l4888_:
}
func @@f1175() {
    CLS @r;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    MOV %r0 @n;
    JF %r0 _l4891_;
    MOV %r1 0;
    NEG %r1;
    MOV %r2 @t;
    MOV %r3 "_storeProcessing";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 @n;
    MOV %r2 "read";
    CALL_VAR %r1 %r2 1 false;
    MOV i $RET;
    MOV %r1 i;
    JF %r1 _l4893_;
    MOV %r5 @t;
    MOV %r6 "_packetIdsDuringStoreProcessing";
    MOV_PROP %r3 %r5 %r6;
    MOV %r6 i;
    MOV %r5 "messageId";
    MOV_PROP %r4 %r6 %r5;
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l4895_;
    CALL_REG @e 0 false;
    JMP _l4894_;
LABEL _l4895_:
    MOV %r5 @t;
    MOV %r6 "disconnecting";
    MOV_PROP %r4 %r5 %r6;
    MOV %r3 %r4;
    JIF %r4 _l4897_;
    MOV %r6 @t;
    MOV %r7 "reconnectTimer";
    MOV_PROP %r5 %r6 %r7;
    LG_OR %r3 %r5;
LABEL _l4897_:
    JF %r3 _l4896_;
    MOV %r5 @n;
    MOV %r6 "destroy";
    MOV_PROP %r4 %r5 %r6;
    JF %r4 _l4898_;
    MOV %r6 @n;
    MOV %r7 "destroy";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
LABEL _l4898_:
    JMP _l4894_;
LABEL _l4896_:
    MOV %r7 @t;
    MOV %r8 "outgoing";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 i;
    MOV %r7 "messageId";
    MOV_PROP %r6 %r8 %r7;
    MOV_PROP %r4 %r5 %r6;
    MOV @r %r4;
    FUNC %r4 @@f1219;
    MOV %r7 @t;
    MOV %r8 "outgoing";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 i;
    MOV %r7 "messageId";
    MOV_PROP %r6 %r8 %r7;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 0;
    NEG %r4;
    MOV %r7 @t;
    MOV %r8 "_packetIdsDuringStoreProcessing";
    MOV_PROP %r5 %r7 %r8;
    MOV %r8 i;
    MOV %r7 "messageId";
    MOV_PROP %r6 %r8 %r7;
    SET_KEY %r5 %r6 %r4;
    MOV %r4 i;
    PUSH %r4;
    MOV %r4 @t;
    MOV %r5 "_sendPacket";
    CALL_VAR %r4 %r5 1 false;
LABEL _l4894_:
    JMP _l4892_;
LABEL _l4893_:
    MOV %r2 "readable";
    PUSH %r2;
    MOV %r2 @e;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "once";
    CALL_VAR %r2 %r3 2 false;
LABEL _l4892_:
    JMP _l4890_;
LABEL _l4891_:
LABEL _l4890_:
}
func @@f1176(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @r;
    MOV @r .r;
    NEW_OBJ %r0;
    MOV %r2 .e;
    MOV %r3 "buffer";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY %r0 'data' %r1;
    FUNC %r1 @@f1220;
    SET_KEY %r0 'success' %r1;
    FUNC %r1 @@f1221;
    SET_KEY %r0 'fail' %r1;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "sendSocketMessage";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1177(.e) {
    REG %r0;
    REG %r1;
    CLS @e;
    MOV @e .e;
    NEW_OBJ %r0;
    FUNC %r1 @@f1222;
    SET_KEY %r0 'success' %r1;
    PUSH %r0;
    MOV %r0 @n;
    MOV %r1 "closeSocket";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1178() {
    VAR e;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @o;
    MOV %r1 "result";
    MOV_PROP e %r0 %r1;
    MOV %r1 e;
    MOV_CTX %r2 "ArrayBuffer";
    INST_OF %r1 %r2;
    JF %r1 _l4900_;
    MOV %r2 e;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l4899_;
LABEL _l4900_:
    MOV %r2 e;
    PUSH %r2;
    MOV %r2 "utf8";
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l4899_:
    MOV e %r0;
    MOV %r0 e;
    PUSH %r0;
    MOV %r0 @i;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1179(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 @e;
    MOV %r3 "hasOwnProperty";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l4902_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r5 @e;
    MOV %r6 "wsOptions";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "hasOwnProperty";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l4902_:
    JF %r0 _l4901_;
    MOV %r3 @e;
    MOV %r4 .t;
    MOV_PROP %r2 %r3 %r4;
    MOV %r5 @e;
    MOV %r6 "wsOptions";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 .t;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4901_:
}
func @@f1180(.t, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    CLS @n;
    MOV @n .n;
    NEW_OBJ %r0;
    MOV %r2 .t;
    MOV %r3 "buffer";
    MOV_PROP %r1 %r2 %r3;
    SET_KEY %r0 'data' %r1;
    FUNC %r1 @@f1223;
    SET_KEY %r0 'success' %r1;
    FUNC %r1 @@f1224;
    SET_KEY %r0 'fail' %r1;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "send";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1181(.t) {
    REG %r0;
    REG %r1;
    CLS @t;
    MOV @t .t;
    NEW_OBJ %r0;
    FUNC %r1 @@f1225;
    SET_KEY %r0 'success' %r1;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1182() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @t;
    JF %r0 _l4903_;
    MOV %r2 @e;
    PUSH %r2;
    CALL_REG @t 1 false;
    MOV %r1 $RET;
LABEL _l4903_:
}
func @@f1183() {
    REG %r0;
    REG %r1;
    NEW_OBJ %r0;
    FUNC %r1 @@f1226;
    SET_KEY %r0 'fail' %r1;
    PUSH %r0;
    MOV %r0 @u;
    MOV %r1 "close";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1184() {
    REG %r0;
    REG %r1;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "setReadable";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "setWritable";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 "connect";
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1185(.e) {
    VAR r;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 .e;
    MOV %r1 "data";
    MOV_PROP r %r0 %r1;
    MOV %r1 r;
    MOV_CTX %r2 "ArrayBuffer";
    INST_OF %r1 %r2;
    JF %r1 _l4905_;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l4904_;
LABEL _l4905_:
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 "utf8";
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "from";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
LABEL _l4904_:
    MOV r %r0;
    MOV %r0 r;
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "push";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1186() {
    REG %r0;
    REG %r1;
    MOV %r0 @r;
    MOV %r1 "end";
    CALL_VAR %r0 %r1 0 false;
    MOV %r0 @r;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 0 false;
}
func @@f1187(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 .e;
    MOV %r3 "errMsg";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @r;
    MOV %r1 "destroy";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1188() {
    REG %r0;
    REG %r1;
    MOV %r0 "close";
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1189(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 .e;
    MOV %r2 "_autoDestroy";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4906_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .e;
    MOV %r3 "destroy";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4906_:
}
func @@f1190() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r0 1;
    NEG %r0;
    MOV %r4 @t;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "prefinished";
    MOV_PROP %r1 %r2 %r3;
    EQ %r0 %r1;
    JF %r0 _l4907_;
    MOV %r2 0;
    NEG %r2;
    MOV %r5 @t;
    MOV %r6 "_writableState";
    MOV_PROP %r3 %r5 %r6;
    MOV %r4 "prefinished";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l4907_:
    MOV %r0 "prefinish";
    PUSH %r0;
    MOV %r0 @t;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
    MOV %r0 @t;
    PUSH %r0;
    MOV %r0 @e;
    PUSH %r0;
    CALL_REG @c 2 false;
}
func @@f1191(.o) {
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV %r0 1;
    PUSH %r0;
    CALL_REG @n 1 true;
    MOV s $RET;
    MOV %r8 @i;
    MOV %r9 "codes";
    MOV_PROP %r6 %r8 %r9;
    MOV %r7 @e;
    MOV_PROP %r1 %r6 %r7;
    MOV %r6 @i;
    MOV %r7 "CMD_SHIFT";
    MOV_PROP %r5 %r6 %r7;
    SHL %r1 %r5;
    MOV %r5 @r;
    JF %r5 _l4909_;
    MOV %r6 @i;
    MOV %r7 "DUP_MASK";
    MOV_PROP %r4 %r6 %r7;
    JMP _l4908_;
LABEL _l4909_:
    MOV %r4 0;
LABEL _l4908_:
    OR %r1 %r4;
    MOV %r3 @t;
    MOV %r5 @i;
    MOV %r6 "QOS_SHIFT";
    MOV_PROP %r4 %r5 %r6;
    SHL %r3 %r4;
    OR %r1 %r3;
    MOV %r2 .o;
    OR %r1 %r2;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 0;
    NEG %r1;
    PUSH %r1;
    MOV %r1 s;
    MOV %r2 "writeUInt8";
    CALL_VAR %r1 %r2 3 false;
    MOV %r0 s;
    MOV $RET %r0;
    RET;
}
func @@f1192(.e, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r1 3;
    MOV %r6 @t;
    MOV %r7 "toString";
    CALL_VAR %r6 %r7 0 false;
    MOV %r5 $RET;
    PUSH %r5;
    MOV %r5 @i;
    MOV %r6 "byteLength";
    CALL_VAR %r5 %r6 1 false;
    MOV %r4 $RET;
    ADD %r1 %r4;
    MOV %r3 2;
    ADD %r1 %r3;
    MOV %r4 .r;
    MOV %r5 "toString";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 @i;
    MOV %r4 "byteLength";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    ADD %r1 %r2;
    MOV %r2 .e;
    ADD %r2 %r1;
    MOV .e %r2;
    MOV %r0 %r2;
    MOV $RET %r0;
    RET;
}
func @@f1193(.e) {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    REG %r8;
    REG %r9;
    MOV t "";
    MOV %r1 .e;
    MOV %r2 65535;
    GT %r1 %r2;
    JF %r1 _l4910_;
    MOV %r8 65536;
    MOV %r9 .e;
    SUB %r9 %r8;
    MOV .e %r9;
    MOV %r4 %r9;
    MOV %r7 10;
    ZSHR %r4 %r7;
    MOV %r6 1023;
    AND %r4 %r6;
    MOV %r5 55296;
    OR %r4 %r5;
    PUSH %r4;
    CALL_REG @x 1 false;
    MOV %r3 $RET;
    MOV %r4 t;
    ADD %r4 %r3;
    MOV t %r4;
    MOV %r3 56320;
    MOV %r4 1023;
    MOV %r5 .e;
    AND %r4 %r5;
    OR %r3 %r4;
    MOV .e %r3;
    MOV %r2 %r3;
LABEL _l4910_:
    MOV %r2 .e;
    PUSH %r2;
    CALL_REG @x 1 false;
    MOV %r1 $RET;
    MOV %r2 t;
    ADD %r2 %r1;
    MOV t %r2;
    MOV %r0 %r2;
    MOV $RET %r0;
    RET;
}
func @@f1194(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @m;
    MOV %r3 "test";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l4912_;
    MOV %r0 "xn--";
    MOV %r3 .e;
    PUSH %r3;
    CALL_REG @P 1 false;
    MOV %r2 $RET;
    ADD %r0 %r2;
    JMP _l4911_;
LABEL _l4912_:
    MOV %r0 .e;
LABEL _l4911_:
    MOV $RET %r0;
    RET;
}
func @@f1195(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @y;
    MOV %r3 "test";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    JF %r1 _l4914_;
    MOV %r5 4;
    PUSH %r5;
    MOV %r5 .e;
    MOV %r6 "slice";
    CALL_VAR %r5 %r6 1 false;
    MOV %r3 $RET;
    MOV %r4 "toLowerCase";
    CALL_VAR %r3 %r4 0 false;
    MOV %r2 $RET;
    PUSH %r2;
    CALL_REG @M 1 false;
    MOV %r0 $RET;
    JMP _l4913_;
LABEL _l4914_:
    MOV %r0 .e;
LABEL _l4913_:
    MOV $RET %r0;
    RET;
}
func @@f1196(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .t;
    MOV %r1 "head";
    MOV_PROP r %r0 %r1;
    MOV n 1;
    MOV %r0 r;
    MOV %r1 "data";
    MOV_PROP i %r0 %r1;
    MOV %r1 i;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 .e;
    SUB %r1 %r0;
    MOV .e %r1;
    BLOCK 1;
LABEL _l4915_:
    MOV %r2 r;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV r %r1;
    MOV %r0 %r1;
    JF %r0 _l4916_;
LABEL _l4918_:
    MOV %r1 r;
    MOV %r2 "data";
    MOV_PROP o %r1 %r2;
    MOV %r1 .e;
    MOV %r3 o;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GT %r1 %r2;
    JF %r1 _l4920_;
    MOV %r2 o;
    MOV %r3 "length";
    MOV_PROP s %r2 %r3;
    JMP _l4919_;
LABEL _l4920_:
    MOV s .e;
LABEL _l4919_:
    MOV %r2 s;
    MOV %r4 o;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4924_;
    MOV %r3 o;
    MOV %r4 i;
    ADD %r4 %r3;
    MOV i %r4;
    JMP _l4923_;
LABEL _l4924_:
    MOV %r4 0;
    PUSH %r4;
    MOV %r4 .e;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV %r4 i;
    ADD %r4 %r3;
    MOV i %r4;
LABEL _l4923_:
    MOV %r1 0;
    MOV %r3 s;
    MOV %r4 .e;
    SUB %r4 %r3;
    MOV .e %r4;
    MOV %r2 %r4;
    EQ %r1 %r2;
    JF %r1 _l4922_;
    MOV %r2 s;
    MOV %r4 o;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4926_;
    MOV %r3 n;
    ADD %r3 1;
    MOV n %r3;
    MOV %r4 r;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l4928_;
    MOV %r5 r;
    MOV %r6 "next";
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 .t;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
    JMP _l4927_;
LABEL _l4928_:
    MOV %r5 null;
    MOV %r6 .t;
    MOV %r7 "tail";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 .t;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
LABEL _l4927_:
    JMP _l4925_;
LABEL _l4926_:
    MOV %r3 r;
    MOV %r4 .t;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 s;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV %r4 r;
    MOV %r5 "data";
    SET_KEY %r4 %r5 %r3;
LABEL _l4925_:
    CLR_BLOCK 1;
    JMP _l4916_;
    JMP _l4921_;
LABEL _l4922_:
LABEL _l4921_:
    MOV %r1 n;
    ADD %r1 1;
    MOV n %r1;
    JMP _l4915_;
LABEL _l4916_:
    END_BLOCK 1;
    MOV %r1 n;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 %r1;
    MOV %r3 .t;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 i;
    MOV $RET %r0;
    RET;
}
func @@f1197(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .e;
    PUSH %r0;
    MOV %r0 @c;
    MOV %r1 "allocUnsafe";
    CALL_VAR %r0 %r1 1 false;
    MOV r $RET;
    MOV %r0 .t;
    MOV %r1 "head";
    MOV_PROP n %r0 %r1;
    MOV i 1;
    MOV %r0 r;
    PUSH %r0;
    MOV %r2 n;
    MOV %r3 "data";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 "copy";
    CALL_VAR %r0 %r1 1 false;
    MOV %r3 n;
    MOV %r4 "data";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV %r1 .e;
    SUB %r1 %r0;
    MOV .e %r1;
    BLOCK 1;
LABEL _l4929_:
    MOV %r2 n;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV n %r1;
    MOV %r0 %r1;
    JF %r0 _l4930_;
LABEL _l4932_:
    MOV %r1 n;
    MOV %r2 "data";
    MOV_PROP o %r1 %r2;
    MOV %r1 .e;
    MOV %r3 o;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GT %r1 %r2;
    JF %r1 _l4934_;
    MOV %r2 o;
    MOV %r3 "length";
    MOV_PROP s %r2 %r3;
    JMP _l4933_;
LABEL _l4934_:
    MOV s .e;
LABEL _l4933_:
    MOV %r2 r;
    PUSH %r2;
    MOV %r4 r;
    MOV %r5 "length";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 .e;
    SUB %r2 %r3;
    PUSH %r2;
    MOV %r2 0;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 o;
    MOV %r3 "copy";
    CALL_VAR %r2 %r3 4 false;
    MOV %r1 0;
    MOV %r3 s;
    MOV %r4 .e;
    SUB %r4 %r3;
    MOV .e %r4;
    MOV %r2 %r4;
    EQ %r1 %r2;
    JF %r1 _l4936_;
    MOV %r2 s;
    MOV %r4 o;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    EQ %r2 %r3;
    JF %r2 _l4938_;
    MOV %r3 i;
    ADD %r3 1;
    MOV i %r3;
    MOV %r4 n;
    MOV %r5 "next";
    MOV_PROP %r3 %r4 %r5;
    JF %r3 _l4940_;
    MOV %r5 n;
    MOV %r6 "next";
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 .t;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
    JMP _l4939_;
LABEL _l4940_:
    MOV %r5 null;
    MOV %r6 .t;
    MOV %r7 "tail";
    SET_KEY %r6 %r7 %r5;
    MOV %r4 %r5;
    MOV %r5 .t;
    MOV %r6 "head";
    SET_KEY %r5 %r6 %r4;
LABEL _l4939_:
    JMP _l4937_;
LABEL _l4938_:
    MOV %r3 n;
    MOV %r4 .t;
    MOV %r5 "head";
    SET_KEY %r4 %r5 %r3;
    MOV %r4 s;
    PUSH %r4;
    MOV %r4 o;
    MOV %r5 "slice";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV %r4 n;
    MOV %r5 "data";
    SET_KEY %r4 %r5 %r3;
LABEL _l4937_:
    CLR_BLOCK 1;
    JMP _l4930_;
    JMP _l4935_;
LABEL _l4936_:
LABEL _l4935_:
    MOV %r1 i;
    ADD %r1 1;
    MOV i %r1;
    JMP _l4929_;
LABEL _l4930_:
    END_BLOCK 1;
    MOV %r1 i;
    MOV %r3 .t;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    SUB %r2 %r1;
    MOV %r3 .t;
    MOV %r4 "length";
    SET_KEY %r3 %r4 %r2;
    MOV %r0 r;
    MOV $RET %r0;
    RET;
}
func @@f1198() {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 @e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 "pipeOnDrain";
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "awaitDrain";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @p 2 false;
    MOV %r1 t;
    MOV %r2 "awaitDrain";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4941_;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    SUB %r2 1;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    SET_KEY %r3 %r4 %r2;
LABEL _l4941_:
    MOV %r1 0;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4943_;
    MOV %r3 @e;
    PUSH %r3;
    MOV %r3 "data";
    PUSH %r3;
    CALL_REG @a 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l4943_:
    JF %r0 _l4942_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "flowing";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @e;
    PUSH %r2;
    CALL_REG @A 1 false;
    MOV %r1 $RET;
LABEL _l4942_:
}
func @@f1199() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 @e;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r3 @e;
    MOV %r4 @t;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1200(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r0 .e;
    MOV %r1 "entry";
    MOV_PROP n %r0 %r1;
    MOV %r0 null;
    MOV %r1 .e;
    MOV %r2 "entry";
    SET_KEY %r1 %r2 %r0;
LABEL _l4944_:
    MOV %r0 n;
    JF %r0 _l4945_;
LABEL _l4947_:
    MOV %r1 n;
    MOV %r2 "callback";
    MOV_PROP i %r1 %r2;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 1;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG i 1 false;
    MOV %r2 n;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV n %r1;
    JMP _l4944_;
LABEL _l4945_:
    MOV %r1 .t;
    MOV %r2 "corkedRequestsFree";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4949_;
    MOV %r1 .e;
    MOV %r4 .t;
    MOV %r5 "corkedRequestsFree";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "next";
    SET_KEY %r2 %r3 %r1;
    JMP _l4948_;
LABEL _l4949_:
    MOV %r1 .e;
    MOV %r2 .t;
    MOV %r3 "corkedRequestsFree";
    SET_KEY %r2 %r3 %r1;
LABEL _l4948_:
}
func @@f1201(.e, .t) {
    VAR r;
    VAR n;
    VAR i;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .e;
    MOV %r1 "_writableState";
    MOV_PROP r %r0 %r1;
    MOV %r0 r;
    MOV %r1 "sync";
    MOV_PROP n %r0 %r1;
    MOV %r0 r;
    MOV %r1 "writecb";
    MOV_PROP i %r0 %r1;
    MOV %r1 r;
    PUSH %r1;
    FUNC %r1 @@f1227;
    CALL_REG %r1 1 false;
    MOV %r0 .t;
    JF %r0 _l4951_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 i;
    PUSH %r2;
    FUNC %r2 @@f1228;
    CALL_REG %r2 5 false;
    MOV %r1 $RET;
    NEG %r1;
    JMP _l4950_;
LABEL _l4951_:
    MOV %r1 r;
    PUSH %r1;
    CALL_REG @S 1 false;
    MOV s $RET;
    MOV %r4 s;
    MOV %r3 %r4;
    JIF %r4 _l4955_;
    MOV %r6 r;
    MOV %r7 "corked";
    MOV_PROP %r5 %r6 %r7;
    LG_OR %r3 %r5;
LABEL _l4955_:
    MOV %r2 %r3;
    JIF %r3 _l4954_;
    MOV %r5 r;
    MOV %r6 "bufferProcessing";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l4954_:
    MOV %r1 %r2;
    JIF %r2 _l4953_;
    MOV %r4 r;
    MOV %r5 "bufferedRequest";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l4953_:
    JIF %r1 _l4952_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 r;
    PUSH %r3;
    CALL_REG @w 2 false;
    MOV %r2 $RET;
LABEL _l4952_:
    MOV %r1 n;
    JF %r1 _l4957_;
    MOV %r2 @v;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 i;
    PUSH %r2;
    CALL_REG @u 5 false;
    JMP _l4956_;
LABEL _l4957_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 r;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 i;
    PUSH %r2;
    CALL_REG @v 4 false;
LABEL _l4956_:
LABEL _l4950_:
}
func @@f1202(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 .e;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l4960_;
    MOV %r3 1;
    NEG %r3;
    MOV %r5 .e;
    MOV %r6 "decodeStrings";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4960_:
    MOV %r0 %r1;
    JIF %r1 _l4959_;
    MOV %r2 "string";
    MOV %r3 .t;
    TYPE_OF %r3;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l4959_:
    JIF %r0 _l4958_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 @h;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV .t %r2;
    MOV %r1 %r2;
LABEL _l4958_:
    MOV %r0 .t;
    MOV $RET %r0;
    RET;
}
func @@f1203(.e, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 0;
    NEG %r0;
    MOV %r1 @t;
    MOV %r2 .e;
    SET_KEY %r1 %r2 %r0;
}
func @@f1204(.i) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    NEW_REG %r1 "^\\d+$" "";
    PUSH %r1;
    MOV %r1 .i;
    MOV %r2 "match";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JIF %r0 _l4961_;
    MOV %r3 @e;
    PUSH %r3;
    MOV %r3 @t;
    PUSH %r3;
    MOV %r3 @r;
    PUSH %r3;
    MOV %r3 @n;
    PUSH %r3;
    MOV %r3 .i;
    PUSH %r3;
    MOV %r3 0;
    NEG %r3;
    PUSH %r3;
    CALL_REG @h 6 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @o;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4961_:
}
func @@f1205(.e, .t) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 "
";
    PUSH %r3;
    MOV %r3 .t;
    MOV %r4 "indexOf";
    CALL_VAR %r3 %r4 1 false;
    MOV %r1 $RET;
    MOV %r2 0;
    GE %r1 %r2;
    JF %r1 _l4962_;
    MOV %r2 0;
LABEL _l4962_:
    MOV %r0 .e;
    NEW_REG %r5 "\\u001b\\[\\d\\d?m" "g";
    PUSH %r5;
    MOV %r5 "";
    PUSH %r5;
    MOV %r5 .t;
    MOV %r6 "replace";
    CALL_VAR %r5 %r6 2 false;
    MOV %r3 $RET;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    ADD %r0 %r2;
    MOV %r1 1;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f1206(.e, .r, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 "string";
    MOV %r2 @t;
    TYPE_OF %r2;
    WEQ %r1 %r2;
    JF %r1 _l4964_;
    MOV %r0 @t;
    JMP _l4963_;
LABEL _l4964_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 .r;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    CALL_REG @t 3 false;
    MOV %r0 $RET;
LABEL _l4963_:
    MOV $RET %r0;
    RET;
}
func @@f1207() {
    VAR t;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 @e;
    MOV %r1 "_readableState";
    MOV_PROP t %r0 %r1;
    MOV %r0 "pipeOnDrain";
    PUSH %r0;
    MOV %r1 t;
    MOV %r2 "awaitDrain";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c 2 false;
    MOV %r1 t;
    MOV %r2 "awaitDrain";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4965_;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    SUB %r2 1;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    SET_KEY %r3 %r4 %r2;
LABEL _l4965_:
    MOV %r1 0;
    MOV %r3 t;
    MOV %r4 "awaitDrain";
    MOV_PROP %r2 %r3 %r4;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l4967_;
    MOV %r3 @e;
    PUSH %r3;
    MOV %r3 "data";
    PUSH %r3;
    CALL_REG @o 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l4967_:
    JF %r0 _l4966_;
    MOV %r2 0;
    NEG %r2;
    MOV %r3 t;
    MOV %r4 "flowing";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @e;
    PUSH %r2;
    CALL_REG @B 1 false;
    MOV %r1 $RET;
LABEL _l4966_:
}
func @@f1208() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r1 @e;
    PUSH %r1;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV %r3 @e;
    MOV %r4 @t;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f1209(.e, .t, .r) {
    VAR n;
    VAR i;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r0 .e;
    MOV %r1 "entry";
    MOV_PROP n %r0 %r1;
    MOV %r0 null;
    MOV %r1 .e;
    MOV %r2 "entry";
    SET_KEY %r1 %r2 %r0;
LABEL _l4968_:
    MOV %r0 n;
    JF %r0 _l4969_;
LABEL _l4971_:
    MOV %r1 n;
    MOV %r2 "callback";
    MOV_PROP i %r1 %r2;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 1;
    MOV %r2 .t;
    MOV %r3 "pendingcb";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 .r;
    PUSH %r1;
    CALL_REG i 1 false;
    MOV %r2 n;
    MOV %r3 "next";
    MOV_PROP %r1 %r2 %r3;
    MOV n %r1;
    JMP _l4968_;
LABEL _l4969_:
    MOV %r0 .e;
    MOV %r3 .t;
    MOV %r4 "corkedRequestsFree";
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 "next";
    SET_KEY %r1 %r2 %r0;
}
func @@f1210(.e, .t) {
    VAR n;
    VAR i;
    VAR o;
    VAR s;
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    REG %r7;
    MOV %r0 .e;
    MOV %r1 "_writableState";
    MOV_PROP n %r0 %r1;
    MOV %r0 n;
    MOV %r1 "sync";
    MOV_PROP i %r0 %r1;
    MOV %r0 n;
    MOV %r1 "writecb";
    MOV_PROP o %r0 %r1;
    MOV %r0 "function";
    MOV %r1 o;
    TYPE_OF %r1;
    WNE %r0 %r1;
    JF %r0 _l4973_;
    CALL_REG @g 0 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l4972_;
LABEL _l4973_:
LABEL _l4972_:
    MOV %r1 n;
    PUSH %r1;
    FUNC %r1 @@f1229;
    CALL_REG %r1 1 false;
    MOV %r0 .t;
    JF %r0 _l4975_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 i;
    PUSH %r2;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 o;
    PUSH %r2;
    FUNC %r2 @@f1230;
    CALL_REG %r2 5 false;
    MOV %r1 $RET;
    NEG %r1;
    JMP _l4974_;
LABEL _l4975_:
    MOV %r2 n;
    PUSH %r2;
    CALL_REG @T 1 false;
    MOV %r1 $RET;
    MOV s %r1;
    JIF %r1 _l4976_;
    MOV %r3 .e;
    MOV %r4 "destroyed";
    MOV_PROP %r2 %r3 %r4;
    LG_OR s %r2;
LABEL _l4976_:
    MOV %r4 s;
    MOV %r3 %r4;
    JIF %r4 _l4980_;
    MOV %r6 n;
    MOV %r7 "corked";
    MOV_PROP %r5 %r6 %r7;
    LG_OR %r3 %r5;
LABEL _l4980_:
    MOV %r2 %r3;
    JIF %r3 _l4979_;
    MOV %r5 n;
    MOV %r6 "bufferProcessing";
    MOV_PROP %r4 %r5 %r6;
    LG_OR %r2 %r4;
LABEL _l4979_:
    MOV %r1 %r2;
    JIF %r2 _l4978_;
    MOV %r4 n;
    MOV %r5 "bufferedRequest";
    MOV_PROP %r3 %r4 %r5;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l4978_:
    JIF %r1 _l4977_;
    MOV %r3 .e;
    PUSH %r3;
    MOV %r3 n;
    PUSH %r3;
    CALL_REG @O 2 false;
    MOV %r2 $RET;
LABEL _l4977_:
    MOV %r1 i;
    JF %r1 _l4982_;
    MOV %r2 @I;
    PUSH %r2;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 o;
    PUSH %r2;
    MOV %r2 @r;
    MOV %r3 "nextTick";
    CALL_VAR %r2 %r3 5 false;
    JMP _l4981_;
LABEL _l4982_:
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 n;
    PUSH %r2;
    MOV %r2 s;
    PUSH %r2;
    MOV %r2 o;
    PUSH %r2;
    CALL_REG @I 4 false;
LABEL _l4981_:
LABEL _l4974_:
}
func @@f1211(.e, .t, .r) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    REG %r6;
    MOV %r3 .e;
    MOV %r4 "objectMode";
    MOV_PROP %r2 %r3 %r4;
    MOV %r1 %r2;
    JIF %r2 _l4985_;
    MOV %r3 1;
    NEG %r3;
    MOV %r5 .e;
    MOV %r6 "decodeStrings";
    MOV_PROP %r4 %r5 %r6;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l4985_:
    MOV %r0 %r1;
    JIF %r1 _l4984_;
    MOV %r2 "string";
    MOV %r3 .t;
    TYPE_OF %r3;
    WNE %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l4984_:
    JIF %r0 _l4983_;
    MOV %r3 .t;
    PUSH %r3;
    MOV %r3 .r;
    PUSH %r3;
    MOV %r3 @u;
    MOV %r4 "from";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    MOV .t %r2;
    MOV %r1 %r2;
LABEL _l4983_:
    MOV %r0 .t;
    MOV $RET %r0;
    RET;
}
func @@f1212() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 @e;
    MOV %r2 @u;
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4987_;
    MOV %r2 @e;
    MOV %r3 @u;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @n 1 false;
    JMP _l4986_;
LABEL _l4987_:
    MOV %r2 0;
    VOID %r2;
    PUSH %r2;
    MOV %r2 0;
    NEG %r2;
    PUSH %r2;
    CALL_REG @p 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @t 1 false;
LABEL _l4986_:
}
func @@f1213(.r, .n) {
    REG %r0;
    REG %r1;
    CLS @r;
    MOV @r .r;
    CLS @n;
    MOV @n .n;
    FUNC %r0 @@f1231;
    PUSH %r0;
    MOV %r0 @n;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "then";
    CALL_VAR %r0 %r1 2 false;
}
func @@f1214(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 .e;
    JF %r0 _l4989_;
    MOV %r1 .e;
    PUSH %r1;
    CALL_REG @r 1 false;
    JMP _l4988_;
LABEL _l4989_:
    MOV %r2 0;
    VOID %r2;
    PUSH %r2;
    MOV %r2 0;
    NEG %r2;
    PUSH %r2;
    CALL_REG @p 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @t 1 false;
LABEL _l4988_:
}
func @@f1215(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    MOV %r3 @r;
    PUSH %r3;
    MOV %r3 .e;
    PUSH %r3;
    MOV_CTX %r3 "Object";
    MOV %r4 "getOwnPropertyDescriptor";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
    MOV %r2 "enumerable";
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f1216(.t) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @e;
    PUSH %r0;
    MOV %r0 .t;
    PUSH %r0;
    MOV %r1 @r;
    MOV %r2 .t;
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @n 3 false;
}
func @@f1217(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r1 @i;
    MOV %r2 "cb";
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4990_;
    MOV %r2 .e;
    PUSH %r2;
    MOV %r2 @i;
    MOV %r3 "cb";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l4990_:
    CALL_REG @t 0 false;
}
func @@f1218() {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 @n;
    JF %r0 _l4991_;
    MOV %r2 null;
    PUSH %r2;
    MOV_ARGS %r2;
    PUSH %r2;
    MOV %r2 @n;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
LABEL _l4991_:
    MOV %r0 "end";
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "emit";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1219(.t, .n) {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r0 @r;
    JF %r0 _l4992_;
    MOV %r2 .t;
    PUSH %r2;
    MOV %r2 .n;
    PUSH %r2;
    CALL_REG @r 2 false;
    MOV %r1 $RET;
LABEL _l4992_:
    CALL_REG @e 0 false;
}
func @@f1220() {
    CALL_REG @r 0 false;
}
func @@f1221() {
    REG %r0;
    CALL_CTX 'Error' 0 true;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @r 1 false;
}
func @@f1222() {
    CALL_REG @e 0 false;
}
func @@f1223() {
    CALL_REG @n 0 false;
}
func @@f1224(.e) {
    REG %r0;
    REG %r1;
    MOV %r1 .e;
    PUSH %r1;
    CALL_CTX 'Error' 1 true;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @n 1 false;
}
func @@f1225() {
    CALL_REG @t 0 false;
}
func @@f1226() {
    REG %r0;
    REG %r1;
    CALL_CTX 'Error' 0 true;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @e;
    MOV %r1 "_destroy";
    CALL_VAR %r0 %r1 1 false;
}
func @@f1227(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .e;
    MOV %r2 "writing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 .e;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .e;
    MOV %r2 "writelen";
    MOV_PROP %r0 %r1 %r2;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 %r0;
    MOV %r2 .e;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 0;
    MOV %r1 .e;
    MOV %r2 "writelen";
    SET_KEY %r1 %r2 %r0;
}
func @@f1228(.e, .t, .r, .n, .i) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .r;
    JF %r0 _l4994_;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 @x;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 @o;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 3 false;
    MOV %r1 0;
    NEG %r1;
    MOV %r4 .e;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "errorEmitted";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    JMP _l4993_;
LABEL _l4994_:
    MOV %r1 .n;
    PUSH %r1;
    CALL_REG .i 1 false;
    MOV %r1 0;
    NEG %r1;
    MOV %r4 .e;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "errorEmitted";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 .n;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @x 2 false;
LABEL _l4993_:
}
func @@f1229(.e) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    MOV %r0 1;
    NEG %r0;
    MOV %r1 .e;
    MOV %r2 "writing";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 null;
    MOV %r1 .e;
    MOV %r2 "writecb";
    SET_KEY %r1 %r2 %r0;
    MOV %r1 .e;
    MOV %r2 "writelen";
    MOV_PROP %r0 %r1 %r2;
    MOV %r2 .e;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    SUB %r1 %r0;
    MOV %r2 .e;
    MOV %r3 "length";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 0;
    MOV %r1 .e;
    MOV %r2 "writelen";
    SET_KEY %r1 %r2 %r0;
}
func @@f1230(.e, .t, .n, .i, .o) {
    REG %r0;
    REG %r1;
    REG %r2;
    REG %r3;
    REG %r4;
    REG %r5;
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    MOV_PROP %r0 %r1 %r2;
    SUB %r0 1;
    MOV %r1 .t;
    MOV %r2 "pendingcb";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 .n;
    JF %r0 _l4996_;
    MOV %r1 .o;
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 @A;
    PUSH %r1;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    MOV %r1 @r;
    MOV %r2 "nextTick";
    CALL_VAR %r1 %r2 3 false;
    MOV %r1 0;
    NEG %r1;
    MOV %r4 .e;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "errorEmitted";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    JMP _l4995_;
LABEL _l4996_:
    MOV %r1 .i;
    PUSH %r1;
    CALL_REG .o 1 false;
    MOV %r1 0;
    NEG %r1;
    MOV %r4 .e;
    MOV %r5 "_writableState";
    MOV_PROP %r2 %r4 %r5;
    MOV %r3 "errorEmitted";
    SET_KEY %r2 %r3 %r1;
    MOV %r1 "error";
    PUSH %r1;
    MOV %r1 .i;
    PUSH %r1;
    MOV %r1 .e;
    MOV %r2 "emit";
    CALL_VAR %r1 %r2 2 false;
    MOV %r1 .e;
    PUSH %r1;
    MOV %r1 .t;
    PUSH %r1;
    CALL_REG @A 2 false;
LABEL _l4995_:
}
func @@f1231() {
    REG %r0;
    REG %r1;
    REG %r2;
    MOV %r1 @t;
    MOV %r2 @c;
    MOV_PROP %r0 %r1 %r2;
    JF %r0 _l4998_;
    MOV %r2 0;
    VOID %r2;
    PUSH %r2;
    MOV %r2 0;
    NEG %r2;
    PUSH %r2;
    CALL_REG @p 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @r 1 false;
    JMP _l4997_;
LABEL _l4998_:
    MOV %r1 @r;
    PUSH %r1;
    MOV %r1 @n;
    PUSH %r1;
    MOV %r1 @t;
    MOV %r2 @f;
    CALL_VAR %r1 %r2 2 false;
LABEL _l4997_:
}
