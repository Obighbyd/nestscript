func @@main() {
    VAR %r0;
    VAR %r1;
    MOV_THIS %r0;
    PUSH %r0;
    FUNC %r0 @@f0;
    MOV %r1 "call";
    CALL_VAR %r0 %r1 1 false;
    MOV $RET $RET;
}
func @@f0() {
    VAR @c33;
    ALLOC @c33;
    VAR @c9;
    ALLOC @c9;
    VAR @c23;
    ALLOC @c23;
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR @c12;
    ALLOC @c12;
    VAR @c8;
    ALLOC @c8;
    VAR @c73;
    ALLOC @c73;
    VAR @c41;
    ALLOC @c41;
    VAR @c67;
    ALLOC @c67;
    VAR @c13;
    ALLOC @c13;
    VAR @c14;
    ALLOC @c14;
    VAR @c35;
    ALLOC @c35;
    VAR @c69;
    ALLOC @c69;
    VAR @c3;
    ALLOC @c3;
    VAR @c22;
    ALLOC @c22;
    VAR @c50;
    ALLOC @c50;
    VAR @c30;
    ALLOC @c30;
    VAR @c29;
    ALLOC @c29;
    VAR @c53;
    ALLOC @c53;
    VAR @c32;
    ALLOC @c32;
    VAR @c75;
    ALLOC @c75;
    VAR @c45;
    ALLOC @c45;
    VAR N;
    VAR @c31;
    ALLOC @c31;
    VAR @c42;
    ALLOC @c42;
    VAR @c18;
    ALLOC @c18;
    VAR @c20;
    ALLOC @c20;
    VAR @c7;
    ALLOC @c7;
    VAR @c46;
    ALLOC @c46;
    VAR @c27;
    ALLOC @c27;
    VAR @c51;
    ALLOC @c51;
    VAR q;
    VAR @c106;
    ALLOC @c106;
    VAR z;
    VAR @c26;
    ALLOC @c26;
    VAR @c57;
    ALLOC @c57;
    VAR @c19;
    ALLOC @c19;
    VAR @c24;
    ALLOC @c24;
    VAR @c38;
    ALLOC @c38;
    VAR @c39;
    ALLOC @c39;
    VAR @c0;
    ALLOC @c0;
    VAR @c66;
    ALLOC @c66;
    VAR @c64;
    ALLOC @c64;
    VAR @c59;
    ALLOC @c59;
    VAR @c58;
    ALLOC @c58;
    VAR @c21;
    ALLOC @c21;
    VAR Y;
    VAR @c6;
    ALLOC @c6;
    VAR @c56;
    ALLOC @c56;
    VAR @c62;
    ALLOC @c62;
    VAR @c60;
    ALLOC @c60;
    VAR @c47;
    ALLOC @c47;
    VAR un;
    VAR @c70;
    ALLOC @c70;
    VAR cn;
    VAR @c61;
    ALLOC @c61;
    VAR @c74;
    ALLOC @c74;
    VAR @c49;
    ALLOC @c49;
    VAR @c1;
    ALLOC @c1;
    VAR @c72;
    ALLOC @c72;
    VAR @c16;
    ALLOC @c16;
    VAR @c71;
    ALLOC @c71;
    VAR @c123;
    ALLOC @c123;
    VAR @c2;
    ALLOC @c2;
    VAR @c65;
    ALLOC @c65;
    VAR @c25;
    ALLOC @c25;
    VAR @c34;
    ALLOC @c34;
    VAR @c54;
    ALLOC @c54;
    VAR @c5;
    ALLOC @c5;
    VAR @c11;
    ALLOC @c11;
    VAR @c28;
    ALLOC @c28;
    VAR @c17;
    ALLOC @c17;
    VAR En;
    VAR wn;
    VAR kn;
    VAR @c15;
    ALLOC @c15;
    VAR @c37;
    ALLOC @c37;
    VAR @c44;
    ALLOC @c44;
    VAR @c55;
    ALLOC @c55;
    VAR Bn;
    VAR Rn;
    VAR @c10;
    ALLOC @c10;
    VAR @c48;
    ALLOC @c48;
    VAR $n;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    FUNC @c33 @@f1;
    FUNC @c9 @@f2;
    FUNC @c23 @@f3;
    FUNC @c36 @@f4;
    FUNC @c40 @@f5;
    FUNC @c52 @@f6;
    FUNC @c4 @@f7;
    FUNC @c43 @@f8;
    FUNC @c63 @@f9;
    FUNC @c68 @@f10;
    FUNC @c12 @@f11;
    FUNC @c8 @@f12;
    FUNC @c73 @@f13;
    FUNC @c41 @@f14;
    FUNC @c67 @@f15;
    FUNC @c13 @@f16;
    FUNC @c14 @@f17;
    FUNC @c35 @@f18;
    FUNC @c69 @@f19;
    FUNC @c3 @@f20;
    FUNC @c22 @@f21;
    FUNC @c50 @@f22;
    FUNC @c30 @@f23;
    FUNC @c29 @@f24;
    FUNC @c53 @@f25;
    FUNC @c32 @@f26;
    FUNC @c75 @@f27;
    FUNC @c45 @@f28;
    FUNC N @@f29;
    FUNC @c31 @@f30;
    FUNC @c42 @@f31;
    FUNC @c18 @@f32;
    FUNC @c20 @@f33;
    FUNC @c7 @@f34;
    FUNC @c46 @@f35;
    FUNC @c27 @@f36;
    FUNC @c51 @@f37;
    FUNC q @@f38;
    FUNC @c106 @@f39;
    FUNC z @@f40;
    FUNC @c26 @@f41;
    FUNC @c57 @@f42;
    FUNC @c19 @@f43;
    FUNC @c24 @@f44;
    FUNC @c38 @@f45;
    FUNC @c39 @@f46;
    FUNC @c0 @@f47;
    FUNC @c66 @@f48;
    FUNC @c64 @@f49;
    FUNC @c59 @@f50;
    FUNC @c58 @@f51;
    FUNC @c21 @@f52;
    FUNC Y @@f53;
    MOV @c56 1;
    MOV %r0 0;
    DIV @c56 %r0;
    NEW_REG @c62 "[&<>\"']" "g";
    MOV %r1 @c62;
    MOV %r2 "source";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_CTX 'RegExp' 1 false;
    MOV @c60 $RET;
    NEW_REG @c47 "^(?:0|[1-9]\\d*)$" "";
    MOV_CTX %r2 "self";
    TYPE_OF %r2;
    MOV %r3 "object";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l2_;
    MOV_CTX %r3 "self";
    LG_AND %r1 %r3;
LABEL _l2_:
    MOV %r0 %r1;
    JF %r1 _l1_;
    MOV_CTX %r4 "self";
    MOV %r5 "Object";
    MOV_PROP %r2 %r4 %r5;
    MOV_CTX %r3 "Object";
    EQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l1_:
    MOV un %r0;
    JF %r0 _l0_;
    MOV_CTX %r1 "self";
    LG_AND un %r1;
LABEL _l0_:
    MOV_CTX %r4 "global";
    TYPE_OF %r4;
    MOV %r5 "object";
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l7_;
    MOV_CTX %r5 "global";
    LG_AND %r3 %r5;
LABEL _l7_:
    MOV %r2 %r3;
    JF %r3 _l6_;
    MOV_CTX %r6 "global";
    MOV %r7 "Object";
    MOV_PROP %r4 %r6 %r7;
    MOV_CTX %r5 "Object";
    EQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l6_:
    MOV %r1 %r2;
    JF %r2 _l5_;
    MOV_CTX %r3 "global";
    LG_AND %r1 %r3;
LABEL _l5_:
    MOV %r0 %r1;
    JIF %r1 _l4_;
    MOV %r2 un;
    LG_OR %r0 %r2;
LABEL _l4_:
    MOV @c70 %r0;
    JIF %r0 _l3_;
    MOV %r3 "return this";
    PUSH %r3;
    CALL_CTX 'Function' 1 false;
    MOV %r2 $RET;
    CALL_REG %r2 0 false;
    MOV %r1 $RET;
    LG_OR @c70 %r1;
LABEL _l3_:
    MOV_CTX %r7 "exports";
    TYPE_OF %r7;
    MOV %r8 "object";
    WEQ %r7 %r8;
    MOV %r6 %r7;
    JF %r7 _l14_;
    MOV_CTX %r8 "exports";
    LG_AND %r6 %r8;
LABEL _l14_:
    MOV %r5 %r6;
    JF %r6 _l13_;
    MOV_CTX %r8 "exports";
    MOV %r9 "nodeType";
    MOV_PROP %r7 %r8 %r9;
    NEG %r7;
    LG_AND %r5 %r7;
LABEL _l13_:
    MOV %r4 %r5;
    JF %r5 _l12_;
    MOV_CTX %r6 "exports";
    LG_AND %r4 %r6;
LABEL _l12_:
    MOV un %r4;
    MOV %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l11_;
    MOV_CTX %r4 "module";
    TYPE_OF %r4;
    MOV %r5 "object";
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l11_:
    MOV %r1 %r2;
    JF %r2 _l10_;
    MOV_CTX %r3 "module";
    LG_AND %r1 %r3;
LABEL _l10_:
    MOV %r0 %r1;
    JF %r1 _l9_;
    MOV_CTX %r3 "module";
    MOV %r4 "nodeType";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l9_:
    MOV cn %r0;
    JF %r0 _l8_;
    MOV_CTX %r1 "module";
    LG_AND cn %r1;
LABEL _l8_:
    NEW_OBJ %r0;
    MOV %r1 "&amp;";
    SET_KEY %r0 "&" %r1;
    MOV %r1 "&lt;";
    SET_KEY %r0 "<" %r1;
    MOV %r1 "&gt;";
    SET_KEY %r0 ">" %r1;
    MOV %r1 "&quot;";
    SET_KEY %r0 '"' %r1;
    MOV %r1 "&#39;";
    SET_KEY %r0 "'" %r1;
    PUSH %r0;
    FUNC %r0 @@f54;
    CALL_REG %r0 1 false;
    MOV @c61 $RET;
    MOV_CTX %r0 "Array";
    MOV %r1 "prototype";
    MOV_PROP @c74 %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "prototype";
    MOV_PROP @c49 %r0 %r1;
    MOV %r0 @c49;
    MOV %r1 "hasOwnProperty";
    MOV_PROP @c1 %r0 %r1;
    MOV @c72 0;
    MOV %r0 @c49;
    MOV %r1 "toString";
    MOV_PROP @c16 %r0 %r1;
    MOV %r0 @c70;
    MOV %r1 "_";
    MOV_PROP @c71 %r0 %r1;
    MOV_CTX %r0 "Object";
    MOV %r1 "create";
    MOV_PROP @c123 %r0 %r1;
    MOV %r0 @c49;
    MOV %r1 "propertyIsEnumerable";
    MOV_PROP @c2 %r0 %r1;
    MOV %r0 @c70;
    MOV %r1 "isFinite";
    MOV_PROP @c65 %r0 %r1;
    MOV_CTX %r0 "Object";
    PUSH %r0;
    MOV_CTX %r1 "Object";
    MOV %r2 "keys";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    FUNC %r0 @@f55;
    CALL_REG %r0 2 false;
    MOV @c25 $RET;
    MOV_CTX %r0 "Math";
    MOV %r1 "max";
    MOV_PROP @c34 %r0 %r1;
    FUNC %r0 @@f56;
    CALL_REG %r0 0 false;
    MOV @c54 $RET;
    MOV %r2 @c52;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c54 1 false;
    MOV %r0 $RET;
    MOV %r1 @c4;
    MOV %r2 "prototype";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c4;
    MOV %r3 @c4;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "constructor";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c73;
    PUSH %r0;
    FUNC %r0 @@f57;
    CALL_REG %r0 1 false;
    MOV @c5 $RET;
    FUNC %r0 @@f58;
    CALL_REG %r0 0 false;
    MOV @c11 $RET;
    MOV @c28 @c21;
    FUNC %r0 @@f59;
    PUSH %r0;
    FUNC %r0 @@f60;
    CALL_REG %r0 1 false;
    MOV @c17 $RET;
    FUNC %r0 @@f61;
    PUSH %r0;
    CALL_REG @c30 1 false;
    MOV En $RET;
    FUNC %r0 @@f62;
    PUSH %r0;
    CALL_REG @c30 1 false;
    MOV wn $RET;
    FUNC %r0 @@f63;
    PUSH %r0;
    CALL_REG @c30 1 false;
    MOV kn $RET;
    MOV_CTX %r0 "Array";
    MOV %r1 "isArray";
    MOV_PROP @c15 %r0 %r1;
    MOV @c37 Number;
    MOV @c44 Number;
    FUNC %r0 @@f64;
    PUSH %r0;
    CALL_REG N 1 false;
    MOV @c55 $RET;
    FUNC %r0 @@f65;
    PUSH %r0;
    CALL_REG N 1 false;
    MOV Bn $RET;
    FUNC %r0 @@f66;
    PUSH %r0;
    CALL_REG @c30 1 false;
    MOV Rn $RET;
    MOV @c10 @c25;
    MOV @c48 @c46;
    FUNC %r0 @@f67;
    PUSH %r0;
    FUNC %r0 @@f68;
    CALL_REG %r0 1 false;
    MOV $n $RET;
    MOV %r0 Bn;
    MOV %r1 @c52;
    MOV %r2 "assignIn";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c57;
    MOV %r1 @c52;
    MOV %r2 "before";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 En;
    MOV %r1 @c52;
    MOV %r2 "bind";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f69;
    MOV %r1 @c52;
    MOV %r2 "chain";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f70;
    MOV %r1 @c52;
    MOV %r2 "compact";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f71;
    MOV %r1 @c52;
    MOV %r2 "concat";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f72;
    MOV %r1 @c52;
    MOV %r2 "create";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 Rn;
    MOV %r1 @c52;
    MOV %r2 "defaults";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 wn;
    MOV %r1 @c52;
    MOV %r2 "defer";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 kn;
    MOV %r1 @c52;
    MOV %r2 "delay";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f73;
    MOV %r1 @c52;
    MOV %r2 "filter";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c51;
    MOV %r1 @c52;
    MOV %r2 "flatten";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f74;
    MOV %r1 @c52;
    MOV %r2 "flattenDeep";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c35;
    MOV %r1 @c52;
    MOV %r2 "iteratee";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c10;
    MOV %r1 @c52;
    MOV %r2 "keys";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f75;
    MOV %r1 @c52;
    MOV %r2 "map";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f76;
    MOV %r1 @c52;
    MOV %r2 "matches";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 Y;
    MOV %r1 @c52;
    MOV %r2 "mixin";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f77;
    MOV %r1 @c52;
    MOV %r2 "negate";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f78;
    MOV %r1 @c52;
    MOV %r2 "once";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 $n;
    MOV %r1 @c52;
    MOV %r2 "pick";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f79;
    MOV %r1 @c52;
    MOV %r2 "slice";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f80;
    MOV %r1 @c52;
    MOV %r2 "sortBy";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f81;
    MOV %r1 @c52;
    MOV %r2 "tap";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f82;
    MOV %r1 @c52;
    MOV %r2 "thru";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f83;
    MOV %r1 @c52;
    MOV %r2 "toArray";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c58;
    MOV %r1 @c52;
    MOV %r2 "values";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 Bn;
    MOV %r1 @c52;
    MOV %r2 "extend";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c52;
    PUSH %r0;
    MOV %r0 @c52;
    PUSH %r0;
    CALL_REG Y 2 false;
    MOV %r0 @c52;
    PUSH %r0;
    MOV %r0 "-------->";
    PUSH %r0;
    MOV_CTX %r0 "console";
    MOV %r1 "log";
    CALL_VAR %r0 %r1 2 false;
    FUNC %r0 @@f84;
    MOV %r1 @c52;
    MOV %r2 "clone";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f85;
    MOV %r1 @c52;
    MOV %r2 "escape";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f86;
    MOV %r1 @c52;
    MOV %r2 "every";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c17;
    MOV %r1 @c52;
    MOV %r2 "find";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 z;
    MOV %r1 @c52;
    MOV %r2 "forEach";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f87;
    MOV %r1 @c52;
    MOV %r2 "has";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 q;
    MOV %r1 @c52;
    MOV %r2 "head";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c21;
    MOV %r1 @c52;
    MOV %r2 "identity";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c106;
    MOV %r1 @c52;
    MOV %r2 "indexOf";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c33;
    MOV %r1 @c52;
    MOV %r2 "isArguments";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c15;
    MOV %r1 @c52;
    MOV %r2 "isArray";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f88;
    MOV %r1 @c52;
    MOV %r2 "isBoolean";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f89;
    MOV %r1 @c52;
    MOV %r2 "isDate";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f90;
    MOV %r1 @c52;
    MOV %r2 "isEmpty";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f91;
    MOV %r1 @c52;
    MOV %r2 "isEqual";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f92;
    MOV %r1 @c52;
    MOV %r2 "isFinite";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c38;
    MOV %r1 @c52;
    MOV %r2 "isFunction";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f93;
    MOV %r1 @c52;
    MOV %r2 "isNaN";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f94;
    MOV %r1 @c52;
    MOV %r2 "isNull";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c66;
    MOV %r1 @c52;
    MOV %r2 "isNumber";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c39;
    MOV %r1 @c52;
    MOV %r2 "isObject";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f95;
    MOV %r1 @c52;
    MOV %r2 "isRegExp";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c64;
    MOV %r1 @c52;
    MOV %r2 "isString";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f96;
    MOV %r1 @c52;
    MOV %r2 "isUndefined";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f97;
    MOV %r1 @c52;
    MOV %r2 "last";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f98;
    MOV %r1 @c52;
    MOV %r2 "max";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f99;
    MOV %r1 @c52;
    MOV %r2 "min";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f100;
    MOV %r1 @c52;
    MOV %r2 "noConflict";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f101;
    MOV %r1 @c52;
    MOV %r2 "noop";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c26;
    MOV %r1 @c52;
    MOV %r2 "reduce";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f102;
    MOV %r1 @c52;
    MOV %r2 "result";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f103;
    MOV %r1 @c52;
    MOV %r2 "size";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f104;
    MOV %r1 @c52;
    MOV %r2 "some";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f105;
    MOV %r1 @c52;
    MOV %r2 "uniqueId";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 z;
    MOV %r1 @c52;
    MOV %r2 "each";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 q;
    MOV %r1 @c52;
    MOV %r2 "first";
    SET_KEY %r1 %r2 %r0;
    NEW_OBJ %r0;
    MOV %r1 false;
    SET_KEY %r0 'chain' %r1;
    PUSH %r0;
    FUNC %r1 @@f106;
    CALL_REG %r1 0 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c52;
    PUSH %r0;
    CALL_REG Y 3 false;
    MOV %r0 "4.17.15";
    MOV %r1 @c52;
    MOV %r2 "VERSION";
    SET_KEY %r1 %r2 %r0;
    FUNC %r0 @@f107;
    PUSH %r0;
    MOV %r1 " ";
    PUSH %r1;
    MOV %r1 "pop join replace reverse split push shift sort splice unshift";
    MOV %r2 "split";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    CALL_REG @c5 2 false;
    FUNC %r2 @@f108;
    MOV %r5 @c52;
    MOV %r4 "prototype";
    MOV_PROP %r3 %r5 %r4;
    MOV %r4 "value";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
    MOV %r4 @c52;
    MOV %r3 "prototype";
    MOV_PROP %r2 %r4 %r3;
    MOV %r3 "valueOf";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 %r1;
    MOV %r3 @c52;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "toJSON";
    SET_KEY %r1 %r2 %r0;
    MOV_CTX %r2 "define";
    TYPE_OF %r2;
    MOV %r3 "function";
    WEQ %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l18_;
    MOV_CTX %r5 "define";
    MOV %r6 "amd";
    MOV_PROP %r3 %r5 %r6;
    TYPE_OF %r3;
    MOV %r4 "object";
    WEQ %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l18_:
    MOV %r0 %r1;
    JF %r1 _l17_;
    MOV_CTX %r3 "define";
    MOV %r4 "amd";
    MOV_PROP %r2 %r3 %r4;
    LG_AND %r0 %r2;
LABEL _l17_:
    JF %r0 _l16_;
    MOV %r1 @c52;
    MOV %r2 @c70;
    MOV %r3 "_";
    SET_KEY %r2 %r3 %r1;
    FUNC %r1 @@f109;
    PUSH %r1;
    CALL_CTX 'define' 1 false;
    JMP _l15_;
LABEL _l16_:
    MOV %r1 cn;
    JF %r1 _l19_;
    MOV %r2 @c52;
    MOV %r5 @c52;
    MOV %r6 cn;
    MOV %r7 "exports";
    SET_KEY %r6 %r7 %r5;
    MOV %r3 %r5;
    MOV %r4 "_";
    SET_KEY %r3 %r4 %r2;
    MOV %r2 @c52;
    MOV %r3 un;
    MOV %r4 "_";
    SET_KEY %r3 %r4 %r2;
    JMP _l15_;
LABEL _l19_:
    MOV %r2 @c52;
    MOV %r3 @c70;
    MOV %r4 "_";
    SET_KEY %r3 %r4 %r2;
LABEL _l15_:
}
func @@f1(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c0 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l21_;
    MOV %r4 "callee";
    PUSH %r4;
    MOV %r4 @c33;
    PUSH %r4;
    MOV %r4 @c1;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l21_:
    MOV %r0 %r1;
    JF %r1 _l20_;
    MOV %r3 "callee";
    PUSH %r3;
    MOV %r3 @c33;
    PUSH %r3;
    MOV %r3 @c2;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l20_:
    MOV $RET %r0;
    RET;
}
func @@f2(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    MOV %r3 @c33;
    MOV %r2 "push";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f3(n) {
    VAR %r0;
    ALLOC @c76;
    MOV @c76 n;
    FUNC %r0 @@f110;
    MOV $RET %r0;
    RET;
}
func @@f4(n, t, r, e, u) {
    VAR %r0;
    VAR %r1;
    ALLOC @c79;
    MOV @c79 t;
    ALLOC @c78;
    MOV @c78 r;
    ALLOC @c77;
    MOV @c77 e;
    FUNC %r1 @@f111;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c40 2 false;
    MOV %r0 @c23;
    MOV $RET %r0;
    RET;
}
func @@f5(n, t) {
    VAR %r0;
    VAR %r1;
    ALLOC @c80;
    MOV @c80 n;
    FUNC %r1 @@f112;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c3 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f6(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c33;
    MOV %r2 @c4;
    INST_OF %r1 %r2;
    JF %r1 _l23_;
    MOV %r0 @c33;
    JMP _l22_;
LABEL _l23_:
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c4 1 true;
    MOV %r0 $RET;
LABEL _l22_:
    MOV $RET %r0;
    RET;
}
func @@f7(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c33;
    MOV_THIS %r1;
    MOV %r2 "__wrapped__";
    SET_KEY %r1 %r2 %r0;
    NEW_ARR %r0;
    MOV_THIS %r1;
    MOV %r2 "__actions__";
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c9;
    NEG %r0;
    NEG %r0;
    MOV_THIS %r1;
    MOV %r2 "__chain__";
    SET_KEY %r1 %r2 %r0;
}
func @@f8(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c82;
    MOV @c82 n;
    ALLOC @c81;
    MOV @c81 r;
    MOV %r0 @c33;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l25_;
    MOV %r2 "Expected a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l24_;
LABEL _l25_:
LABEL _l24_:
    MOV %r1 @c9;
    PUSH %r1;
    FUNC %r1 @@f113;
    PUSH %r1;
    CALL_CTX 'setTimeout' 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f9(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR %r0;
    VAR %r1;
    ALLOC @c83;
    MOV @c83 t;
    MOV @c23 true;
    FUNC %r1 @@f114;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c5 2 false;
    MOV %r0 @c23;
    MOV $RET %r0;
    RET;
}
func @@f10(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV @c36 1;
    MINUS e;
    MOV %r0 @c33;
    MOV %r1 "length";
    MOV_PROP @c40 %r0 %r1;
LABEL _l26_:
    MOV %r2 @c36;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c36 %r2;
    MOV %r1 @c40;
    LT %r0 %r1;
    JF %r0 _l27_;
LABEL _l29_:
    MOV %r1 @c33;
    MOV %r2 @c36;
    MOV_PROP @c52 %r1 %r2;
    MOV %r1 @c52;
    PUSH %r1;
    CALL_REG @c9 1 false;
    MOV @c4 $RET;
    MOV %r2 null;
    MOV %r3 @c4;
    WNE %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l32_;
    MOV %r4 @c43;
    MOV %r5 @c6;
    EQ %r4 %r5;
    JF %r4 _l34_;
    MOV %r3 @c4;
    MOV %r5 @c4;
    EQ %r3 %r5;
    JMP _l33_;
LABEL _l34_:
    MOV %r5 @c43;
    PUSH %r5;
    MOV %r5 @c4;
    PUSH %r5;
    CALL_REG @c23 2 false;
    MOV %r3 $RET;
LABEL _l33_:
    LG_AND %r1 %r3;
LABEL _l32_:
    JF %r1 _l31_;
    MOV @c43 @c4;
    MOV @c63 @c52;
    JMP _l30_;
LABEL _l31_:
LABEL _l30_:
    JMP _l26_;
LABEL _l27_:
    MOV %r0 @c63;
    MOV $RET %r0;
    RET;
}
func @@f11(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR %r0;
    VAR %r1;
    ALLOC @c85;
    MOV @c85 t;
    NEW_ARR @c23;
    FUNC %r1 @@f115;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c5 2 false;
    MOV %r0 @c23;
    MOV $RET %r0;
    RET;
}
func @@f12(n, r, e, u, o) {
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV @c4 1;
    MINUS i;
    MOV %r0 @c33;
    MOV %r1 "length";
    MOV_PROP @c43 %r0 %r1;
    MOV %r0 @c36;
    JIF %r0 _l38_;
    MOV %r2 @c7;
    MOV @c36 %r2;
    MOV %r1 %r2;
LABEL _l38_:
    MOV %r0 @c52;
    JIF %r0 _l39_;
    NEW_ARR %r2;
    MOV @c52 %r2;
    MOV %r1 %r2;
LABEL _l39_:
LABEL _l35_:
    MOV %r2 @c4;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c4 %r2;
    MOV %r1 @c43;
    LT %r0 %r1;
    JF %r0 _l36_;
LABEL _l40_:
    MOV %r1 @c33;
    MOV %r2 @c4;
    MOV_PROP @c63 %r1 %r2;
    MOV %r2 0;
    MOV %r3 @c23;
    LT %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l43_;
    MOV %r4 @c63;
    PUSH %r4;
    CALL_REG @c36 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l43_:
    JF %r1 _l42_;
    MOV %r2 1;
    MOV %r3 @c23;
    LT %r2 %r3;
    JF %r2 _l45_;
    MOV %r3 @c52;
    PUSH %r3;
    MOV %r3 @c40;
    PUSH %r3;
    MOV %r3 @c36;
    PUSH %r3;
    MOV %r3 @c23;
    MOV %r4 1;
    SUB %r3 %r4;
    PUSH %r3;
    MOV %r3 @c63;
    PUSH %r3;
    CALL_REG @c8 5 false;
    JMP _l44_;
LABEL _l45_:
    MOV %r3 @c63;
    PUSH %r3;
    MOV %r3 @c52;
    PUSH %r3;
    CALL_REG @c9 2 false;
LABEL _l44_:
    JMP _l41_;
LABEL _l42_:
    MOV %r2 @c40;
    JIF %r2 _l46_;
    MOV %r4 @c63;
    MOV %r5 @c52;
    MOV %r5 @c52;
    MOV %r7 "length";
    MOV_PROP %r6 %r5 %r7;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l46_:
LABEL _l41_:
    JMP _l35_;
LABEL _l36_:
    MOV %r0 @c52;
    MOV $RET %r0;
    RET;
}
func @@f13(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c33;
    MOV %r0 %r1;
    JF %r1 _l47_;
    MOV %r3 @c10;
    PUSH %r3;
    MOV %r3 @c9;
    PUSH %r3;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c11 3 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l47_:
    MOV $RET %r0;
    RET;
}
func @@f14(n, t) {
    VAR %r0;
    VAR %r1;
    ALLOC @c87;
    MOV @c87 n;
    FUNC %r1 @@f116;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c12 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f15(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c33;
    MOV %r1 @c9;
    GT %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f16(n, t, r, e, u) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV %r1 @c33;
    MOV %r2 @c9;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l48_;
    MOV %r5 null;
    MOV %r6 @c33;
    WEQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l52_;
    MOV %r6 null;
    MOV %r7 @c9;
    WEQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l52_:
    MOV %r3 %r4;
    JIF %r4 _l51_;
    MOV %r7 @c33;
    PUSH %r7;
    CALL_REG @c0 1 false;
    MOV %r6 $RET;
    NEG %r6;
    MOV %r5 %r6;
    JF %r6 _l53_;
    MOV %r8 @c9;
    PUSH %r8;
    CALL_REG @c0 1 false;
    MOV %r7 $RET;
    NEG %r7;
    LG_AND %r5 %r7;
LABEL _l53_:
    LG_OR %r3 %r5;
LABEL _l51_:
    JF %r3 _l50_;
    MOV %r4 @c33;
    MOV %r5 @c33;
    NE %r4 %r5;
    MOV %r2 %r4;
    JF %r4 _l54_;
    MOV %r5 @c9;
    MOV %r6 @c9;
    NE %r5 %r6;
    LG_AND %r2 %r5;
LABEL _l54_:
    JMP _l49_;
LABEL _l50_:
    MOV %r4 @c40;
    PUSH %r4;
    MOV %r4 @c13;
    PUSH %r4;
    MOV %r4 @c36;
    PUSH %r4;
    MOV %r4 @c23;
    PUSH %r4;
    MOV %r4 @c9;
    PUSH %r4;
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c14 6 false;
    MOV %r2 $RET;
LABEL _l49_:
    LG_OR %r0 %r2;
LABEL _l48_:
    MOV $RET %r0;
    RET;
}
func @@f17(n, t, r, e, u, o) {
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR @c12;
    ALLOC @c12;
    VAR @c43;
    ALLOC @c43;
    VAR @c68;
    ALLOC @c68;
    VAR @c8;
    ALLOC @c8;
    VAR @c73;
    ALLOC @c73;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    ALLOC @c88;
    MOV @c88 n;
    ALLOC @c89;
    MOV @c89 t;
    MOV %r0 @c33;
    PUSH %r0;
    CALL_REG @c15 1 false;
    MOV @c4 $RET;
    MOV %r0 @c9;
    PUSH %r0;
    CALL_REG @c15 1 false;
    MOV @c43 $RET;
    MOV %r0 @c4;
    JF %r0 _l56_;
    MOV @c63 "[object Array]";
    JMP _l55_;
LABEL _l56_:
    MOV %r1 @c33;
    PUSH %r1;
    MOV %r1 @c16;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 1 false;
    MOV @c63 $RET;
LABEL _l55_:
    MOV %r0 @c43;
    JF %r0 _l58_;
    MOV @c68 "[object Array]";
    JMP _l57_;
LABEL _l58_:
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c16;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 1 false;
    MOV @c68 $RET;
LABEL _l57_:
    MOV %r0 "[object Arguments]";
    MOV %r1 @c63;
    WEQ %r0 %r1;
    JF %r0 _l60_;
    MOV @c63 "[object Object]";
    JMP _l59_;
LABEL _l60_:
    MOV @c63 @c63;
LABEL _l59_:
    MOV %r0 "[object Arguments]";
    MOV %r1 @c68;
    WEQ %r0 %r1;
    JF %r0 _l62_;
    MOV @c68 "[object Object]";
    JMP _l61_;
LABEL _l62_:
    MOV @c68 @c68;
LABEL _l61_:
    MOV @c12 "[object Object]";
    MOV %r0 @c63;
    WEQ @c12 %r0;
    MOV @c43 "[object Object]";
    MOV %r0 @c68;
    WEQ @c43 %r0;
    MOV @c68 @c63;
    MOV %r0 @c68;
    WEQ @c68 %r0;
    MOV %r0 @c52;
    JIF %r0 _l63_;
    NEW_ARR %r2;
    MOV @c52 %r2;
    MOV %r1 %r2;
LABEL _l63_:
    FUNC %r0 @@f117;
    PUSH %r0;
    MOV %r0 @c52;
    PUSH %r0;
    CALL_REG @c17 2 false;
    MOV @c8 $RET;
    FUNC %r0 @@f118;
    PUSH %r0;
    MOV %r0 @c52;
    PUSH %r0;
    CALL_REG @c17 2 false;
    MOV @c73 $RET;
    MOV %r1 @c8;
    MOV %r0 %r1;
    JF %r1 _l66_;
    MOV %r2 @c73;
    LG_AND %r0 %r2;
LABEL _l66_:
    JF %r0 _l65_;
    MOV %r3 @c8;
    MOV %r4 1;
    MOV_PROP %r1 %r3 %r4;
    MOV %r2 @c9;
    WEQ %r1 %r2;
    MOV $RET %r1;
    RET;
    JMP _l64_;
LABEL _l65_:
LABEL _l64_:
    NEW_ARR %r1;
    MOV %r2 @c33;
    SET_KEY %r1 0 %r2;
    MOV %r2 @c9;
    SET_KEY %r1 1 %r2;
    PUSH %r1;
    MOV %r1 @c52;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    NEW_ARR %r1;
    MOV %r2 @c9;
    SET_KEY %r1 0 %r2;
    MOV %r2 @c33;
    SET_KEY %r1 1 %r2;
    PUSH %r1;
    MOV %r1 @c52;
    MOV %r2 "push";
    CALL_VAR %r1 %r2 1 false;
    MOV %r1 @c68;
    MOV %r0 %r1;
    JF %r1 _l69_;
    MOV %r2 @c12;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l69_:
    JF %r0 _l68_;
    MOV %r1 @c4;
    JF %r1 _l71_;
    MOV %r3 @c52;
    PUSH %r3;
    MOV %r3 @c40;
    PUSH %r3;
    MOV %r3 @c36;
    PUSH %r3;
    MOV %r3 @c23;
    PUSH %r3;
    MOV %r3 @c9;
    PUSH %r3;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c18 6 false;
    MOV %r2 $RET;
    MOV @c23 %r2;
    JMP _l70_;
LABEL _l71_:
    MOV %r2 @c63;
    MOV %r3 "[object Boolean]";
    JE %r2 %r3 _l74_;
    JMP _l75_;
LABEL _l74_:
LABEL _l75_:
    MOV %r4 "[object Date]";
    JE %r2 %r4 _l76_;
    JMP _l77_;
LABEL _l76_:
LABEL _l77_:
    MOV %r5 "[object Number]";
    JE %r2 %r5 _l78_;
    JMP _l79_;
LABEL _l78_:
    MOV %r7 @c9;
    PLUS %r7;
    PUSH %r7;
    MOV %r7 @c33;
    PLUS %r7;
    PUSH %r7;
    CALL_REG @c19 2 false;
    MOV %r6 $RET;
    MOV @c23 %r6;
    MOV %r5 %r6;
    JMP _l72_;
LABEL _l79_:
    MOV %r6 "[object Error]";
    JE %r2 %r6 _l80_;
    JMP _l81_;
LABEL _l80_:
    MOV %r10 @c33;
    MOV %r11 "name";
    MOV_PROP %r8 %r10 %r11;
    MOV %r10 @c9;
    MOV %r11 "name";
    MOV_PROP %r9 %r10 %r11;
    WEQ %r8 %r9;
    MOV %r7 %r8;
    JF %r8 _l82_;
    MOV %r11 @c33;
    MOV %r12 "message";
    MOV_PROP %r9 %r11 %r12;
    MOV %r11 @c9;
    MOV %r12 "message";
    MOV_PROP %r10 %r11 %r12;
    WEQ %r9 %r10;
    LG_AND %r7 %r9;
LABEL _l82_:
    MOV @c23 %r7;
    MOV %r6 %r7;
    JMP _l72_;
LABEL _l81_:
    MOV %r7 "[object RegExp]";
    JE %r2 %r7 _l83_;
    JMP _l84_;
LABEL _l83_:
LABEL _l84_:
    MOV %r8 "[object String]";
    JE %r2 %r8 _l85_;
    JMP _l86_;
LABEL _l85_:
    MOV %r9 @c33;
    MOV %r10 @c9;
    MOV %r11 "";
    ADD %r10 %r11;
    WEQ %r9 %r10;
    MOV @c23 %r9;
    MOV %r8 %r9;
    JMP _l72_;
LABEL _l86_:
LABEL _l73_:
    MOV %r2 false;
    MOV @c23 %r2;
LABEL _l72_:
LABEL _l70_:
    MOV %r2 @c52;
    MOV %r3 "pop";
    CALL_VAR %r2 %r3 0 false;
    MOV %r1 @c23;
    MOV $RET %r1;
    RET;
    JMP _l67_;
LABEL _l68_:
LABEL _l67_:
    MOV %r2 1;
    MOV %r3 @c23;
    AND %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l89_;
    MOV %r5 @c12;
    MOV %r4 %r5;
    JF %r5 _l90_;
    MOV %r7 "__wrapped__";
    PUSH %r7;
    MOV %r7 @c33;
    PUSH %r7;
    MOV %r7 @c1;
    MOV %r8 "call";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    LG_AND %r4 %r6;
LABEL _l90_:
    MOV @c4 %r4;
    MOV %r5 @c43;
    MOV %r4 %r5;
    JF %r5 _l91_;
    MOV %r7 "__wrapped__";
    PUSH %r7;
    MOV %r7 @c9;
    PUSH %r7;
    MOV %r7 @c1;
    MOV %r8 "call";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    LG_AND %r4 %r6;
LABEL _l91_:
    MOV @c63 %r4;
    MOV %r4 @c4;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l92_;
    MOV %r5 @c63;
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l92_:
    LG_OR %r1 %r3;
LABEL _l89_:
    JF %r1 _l88_;
    MOV %r2 @c68;
    NEG %r2;
    NEG %r2;
    MOV %r0 %r2;
    JF %r2 _l93_;
    MOV %r5 @c52;
    PUSH %r5;
    MOV %r5 @c40;
    PUSH %r5;
    MOV %r5 @c36;
    PUSH %r5;
    MOV %r5 @c23;
    PUSH %r5;
    MOV %r5 @c9;
    PUSH %r5;
    MOV %r5 @c33;
    PUSH %r5;
    CALL_REG @c20 6 false;
    MOV %r4 $RET;
    MOV @c23 %r4;
    MOV %r4 @c52;
    MOV %r5 "pop";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 @c23;
    LG_AND %r0 %r3;
LABEL _l93_:
    JMP _l87_;
LABEL _l88_:
    MOV %r3 @c4;
    JF %r3 _l95_;
    MOV %r4 @c33;
    MOV %r5 "value";
    CALL_VAR %r4 %r5 0 false;
    MOV %r2 $RET;
    JMP _l94_;
LABEL _l95_:
    MOV %r2 @c33;
LABEL _l94_:
    MOV @c4 %r2;
    MOV %r3 @c63;
    JF %r3 _l97_;
    MOV %r4 @c9;
    MOV %r5 "value";
    CALL_VAR %r4 %r5 0 false;
    MOV %r2 $RET;
    JMP _l96_;
LABEL _l97_:
    MOV %r2 @c9;
LABEL _l96_:
    MOV @c63 %r2;
    MOV %r3 @c52;
    PUSH %r3;
    MOV %r3 @c36;
    PUSH %r3;
    MOV %r3 @c23;
    PUSH %r3;
    MOV %r3 @c63;
    PUSH %r3;
    MOV %r3 @c4;
    PUSH %r3;
    CALL_REG @c40 5 false;
    MOV %r2 $RET;
    MOV @c23 %r2;
    MOV %r2 @c52;
    MOV %r3 "pop";
    CALL_VAR %r2 %r3 0 false;
    MOV %r0 @c23;
LABEL _l87_:
    MOV $RET %r0;
    RET;
}
func @@f18(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 @c33;
    TYPE_OF %r1;
    MOV %r2 "function";
    WEQ %r1 %r2;
    JF %r1 _l99_;
    MOV %r0 @c33;
    JMP _l98_;
LABEL _l99_:
    MOV %r2 null;
    MOV %r3 @c33;
    WEQ %r2 %r3;
    JF %r2 _l100_;
    MOV %r0 @c21;
    JMP _l98_;
LABEL _l100_:
    MOV %r3 @c33;
    PUSH %r3;
    MOV %r4 @c33;
    TYPE_OF %r4;
    MOV %r5 "object";
    WEQ %r4 %r5;
    JF %r4 _l102_;
    MOV %r3 @c22;
    JMP _l101_;
LABEL _l102_:
    MOV %r3 @c23;
LABEL _l101_:
    CALL_REG %r3 1 false;
    MOV %r0 $RET;
LABEL _l98_:
    MOV $RET %r0;
    RET;
}
func @@f19(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c33;
    MOV %r1 @c9;
    LT %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f20(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    ALLOC @c90;
    MOV @c90 t;
    MOV @c23 1;
    MINUS r;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c24 1 false;
    MOV %r0 $RET;
    JF %r0 _l104_;
    MOV %r2 @c33;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_CTX 'Array' 1 false;
    MOV @c36 $RET;
    JMP _l103_;
LABEL _l104_:
    NEW_ARR @c36;
LABEL _l103_:
    FUNC %r1 @@f119;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c5 2 false;
    MOV %r0 @c36;
    MOV $RET %r0;
    RET;
}
func @@f21(n) {
    VAR @c9;
    ALLOC @c9;
    VAR %r0;
    ALLOC @c94;
    MOV @c94 n;
    MOV %r0 @c33;
    PUSH %r0;
    CALL_REG @c25 1 false;
    MOV @c9 $RET;
    FUNC %r0 @@f120;
    MOV $RET %r0;
    RET;
}
func @@f22(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c95;
    MOV @c95 n;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_CTX 'Object' 1 false;
    MOV %r1 $RET;
    MOV @c33 %r1;
    NEW_OBJ %r1;
    PUSH %r1;
    FUNC %r1 @@f121;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c26 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f23(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c33;
    MOV %r2 "";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r2 @c21;
    PUSH %r2;
    MOV %r2 0;
    VOID %r2;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c27 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c28 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f24(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV @c36 1;
    MINUS e;
    MOV %r0 @c33;
    MOV %r1 "length";
    MOV_PROP @c40 %r0 %r1;
    MOV %r0 0;
    MOV %r1 @c9;
    GT %r0 %r1;
    JF %r0 _l108_;
    MOV %r3 @c9;
    MINUS %r3;
    MOV %r4 @c40;
    GT %r3 %r4;
    JF %r3 _l110_;
    MOV %r2 0;
    JMP _l109_;
LABEL _l110_:
    MOV %r2 @c40;
    MOV %r4 @c9;
    ADD %r2 %r4;
LABEL _l109_:
    MOV @c9 %r2;
    MOV %r1 %r2;
LABEL _l108_:
    MOV %r1 @c23;
    MOV %r2 @c40;
    GT %r1 %r2;
    JF %r1 _l112_;
    MOV %r0 @c40;
    JMP _l111_;
LABEL _l112_:
    MOV %r0 @c23;
LABEL _l111_:
    MOV @c23 %r0;
    MOV %r0 0;
    MOV %r1 @c23;
    GT %r0 %r1;
    JF %r0 _l113_;
    MOV %r2 @c40;
    MOV %r3 @c23;
    ADD %r3 %r2;
    MOV @c23 %r3;
    MOV %r1 %r3;
LABEL _l113_:
    MOV %r1 @c9;
    MOV %r2 @c23;
    GT %r1 %r2;
    JF %r1 _l115_;
    MOV %r0 0;
    JMP _l114_;
LABEL _l115_:
    MOV %r0 @c23;
    MOV %r3 @c9;
    SUB %r0 %r3;
    MOV %r2 0;
    ZSHR %r0 %r2;
LABEL _l114_:
    MOV @c40 %r0;
    MOV %r0 0;
    MOV %r1 @c9;
    ZSHR %r1 %r0;
    MOV @c9 %r1;
    MOV %r1 @c40;
    PUSH %r1;
    CALL_CTX 'Array' 1 false;
    MOV %r0 $RET;
    MOV @c23 %r0;
LABEL _l105_:
    MOV %r2 @c36;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c36 %r2;
    MOV %r1 @c40;
    LT %r0 %r1;
    JF %r0 _l106_;
LABEL _l116_:
    MOV %r2 @c33;
    MOV %r3 @c36;
    MOV %r4 @c9;
    ADD %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @c23;
    MOV %r3 @c36;
    SET_KEY %r2 %r3 %r1;
    JMP _l105_;
LABEL _l106_:
    MOV %r0 @c23;
    MOV $RET %r0;
    RET;
}
func @@f25(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c33;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 0;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c29 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f26(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR %r0;
    VAR %r1;
    ALLOC @c96;
    MOV @c96 t;
    FUNC %r1 @@f122;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c5 2 false;
    MOV %r0 @c23;
    NEG %r0;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f27(n, r) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c33;
    PUSH %r1;
    FUNC %r1 @@f123;
    PUSH %r1;
    MOV %r1 @c23;
    PUSH %r1;
    CALL_REG @c26 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f28(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV @c36 @c23;
    NEG e;
    MOV %r0 @c23;
    JIF %r0 _l117_;
    NEW_OBJ %r2;
    MOV @c23 %r2;
    MOV %r1 %r2;
LABEL _l117_:
    MOV @c40 1;
    MINUS u;
    MOV %r0 @c9;
    MOV %r1 "length";
    MOV_PROP @c52 %r0 %r1;
LABEL _l118_:
    MOV %r2 @c40;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c40 %r2;
    MOV %r1 @c52;
    LT %r0 %r1;
    JF %r0 _l119_;
LABEL _l121_:
    MOV %r1 @c9;
    MOV %r2 @c40;
    MOV_PROP @c4 %r1 %r2;
    MOV @c43 @c6;
    MOV %r2 @c43;
    MOV %r3 @c6;
    EQ %r2 %r3;
    JF %r2 _l124_;
    MOV %r5 @c33;
    MOV %r6 @c4;
    MOV_PROP %r4 %r5 %r6;
    MOV @c43 %r4;
    MOV %r3 %r4;
LABEL _l124_:
    MOV %r1 @c36;
    JF %r1 _l123_;
    MOV %r2 @c43;
    MOV %r3 @c23;
    MOV %r4 @c4;
    SET_KEY %r3 %r4 %r2;
    JMP _l122_;
LABEL _l123_:
    MOV @c63 @c23;
    MOV %r2 @c63;
    MOV %r3 @c4;
    MOV_PROP @c68 %r2 %r3;
    MOV %r5 @c4;
    PUSH %r5;
    MOV %r5 @c63;
    PUSH %r5;
    MOV %r5 @c1;
    MOV %r6 "call";
    CALL_VAR %r5 %r6 2 false;
    MOV %r4 $RET;
    MOV %r3 %r4;
    JF %r4 _l127_;
    MOV %r6 @c43;
    PUSH %r6;
    MOV %r6 @c68;
    PUSH %r6;
    CALL_REG @c19 2 false;
    MOV %r5 $RET;
    LG_AND %r3 %r5;
LABEL _l127_:
    MOV %r2 %r3;
    JF %r3 _l126_;
    MOV %r5 @c43;
    MOV %r6 @c6;
    NE %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l128_;
    MOV %r6 @c4;
    MOV %r7 @c63;
    IN %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l128_:
    LG_AND %r2 %r4;
LABEL _l126_:
    JIF %r2 _l125_;
    MOV %r4 @c43;
    MOV %r5 @c63;
    MOV %r6 @c4;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l125_:
LABEL _l122_:
    JMP _l118_;
LABEL _l119_:
    MOV %r0 @c23;
    MOV $RET %r0;
    RET;
}
func @@f29(n) {
    VAR %r0;
    VAR %r1;
    ALLOC @c98;
    MOV @c98 n;
    FUNC %r1 @@f124;
    PUSH %r1;
    CALL_REG @c30 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f30(n) {
    VAR %r0;
    ALLOC @c99;
    MOV @c99 n;
    FUNC %r0 @@f125;
    MOV $RET %r0;
    RET;
}
func @@f31(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    FUNC @c36 @@f126;
    ALLOC @c103;
    MOV @c103 n;
    ALLOC @c104;
    MOV @c104 t;
    ALLOC @c100;
    MOV @c100 r;
    MOV %r0 @c33;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l130_;
    MOV %r2 "Expected a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l129_;
LABEL _l130_:
LABEL _l129_:
    MOV %r0 @c33;
    PUSH %r0;
    CALL_REG @c31 1 false;
    MOV @c40 $RET;
    MOV %r0 @c36;
    MOV $RET %r0;
    RET;
}
func @@f32(n, t, r, e, u, o) {
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR @c12;
    ALLOC @c12;
    VAR @c8;
    ALLOC @c8;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    ALLOC @c110;
    MOV @c110 r;
    ALLOC @c109;
    MOV @c109 e;
    ALLOC @c111;
    MOV @c111 u;
    ALLOC @c108;
    MOV @c108 o;
    MOV %r0 @c33;
    MOV %r1 "length";
    MOV_PROP @c4 %r0 %r1;
    MOV %r0 @c9;
    MOV %r1 "length";
    MOV_PROP @c43 %r0 %r1;
    MOV %r1 @c4;
    MOV %r2 @c43;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l133_;
    MOV %r3 1;
    MOV %r4 @c23;
    AND %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l134_;
    MOV %r4 @c43;
    MOV %r5 @c4;
    GT %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l134_:
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l133_:
    JF %r0 _l132_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l131_;
LABEL _l132_:
LABEL _l131_:
    MOV @c43 1;
    MINUS c;
    MOV @c63 true;
    MOV %r0 2;
    MOV %r1 @c23;
    AND %r0 %r1;
    JF %r0 _l139_;
    NEW_ARR @c68;
    JMP _l138_;
LABEL _l139_:
    MOV @c68 @c6;
LABEL _l138_:
LABEL _l135_:
    MOV %r2 @c43;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c43 %r2;
    MOV %r1 @c4;
    LT %r0 %r1;
    JF %r0 _l136_;
LABEL _l140_:
    MOV %r1 @c33;
    MOV %r2 @c43;
    MOV_PROP @c12 %r1 %r2;
    MOV %r1 @c9;
    MOV %r2 @c43;
    MOV_PROP @c8 %r1 %r2;
    MOV %r1 0;
    VOID %r1;
    MOV %r2 @c6;
    NE %r1 %r2;
    JF %r1 _l142_;
    MOV %r2 false;
    MOV @c63 %r2;
    JMP _l136_;
    JMP _l141_;
LABEL _l142_:
LABEL _l141_:
    MOV %r1 @c68;
    JF %r1 _l144_;
    FUNC %r3 @@f127;
    PUSH %r3;
    MOV %r3 @c9;
    PUSH %r3;
    CALL_REG @c32 2 false;
    MOV %r2 $RET;
    NEG %r2;
    JF %r2 _l146_;
    MOV %r3 false;
    MOV @c63 %r3;
    JMP _l136_;
    JMP _l145_;
LABEL _l146_:
LABEL _l145_:
    JMP _l143_;
LABEL _l144_:
    MOV %r3 @c12;
    MOV %r4 @c8;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l148_;
    MOV %r5 @c52;
    PUSH %r5;
    MOV %r5 @c36;
    PUSH %r5;
    MOV %r5 @c23;
    PUSH %r5;
    MOV %r5 @c8;
    PUSH %r5;
    MOV %r5 @c12;
    PUSH %r5;
    CALL_REG @c40 5 false;
    MOV %r4 $RET;
    NEG %r4;
    LG_AND %r2 %r4;
LABEL _l148_:
    JF %r2 _l147_;
    MOV %r3 false;
    MOV @c63 %r3;
    JMP _l136_;
    JMP _l143_;
LABEL _l147_:
LABEL _l143_:
    JMP _l135_;
LABEL _l136_:
    MOV %r0 @c63;
    MOV $RET %r0;
    RET;
}
func @@f33(n, t, r, e, u, o) {
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR @c12;
    ALLOC @c12;
    VAR @c8;
    ALLOC @c8;
    VAR @c8;
    ALLOC @c8;
    VAR @c73;
    ALLOC @c73;
    VAR @c41;
    ALLOC @c41;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    MOV @c4 1;
    MOV %r0 @c23;
    AND @c4 %r0;
    MOV %r0 @c33;
    PUSH %r0;
    CALL_REG @c10 1 false;
    MOV @c43 $RET;
    MOV %r0 @c43;
    MOV %r1 "length";
    MOV_PROP @c63 %r0 %r1;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c10 1 false;
    MOV %r0 $RET;
    MOV %r1 "length";
    MOV_PROP @c68 %r0 %r1;
    MOV %r1 @c63;
    MOV %r2 @c68;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l151_;
    MOV %r2 @c4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l151_:
    JF %r0 _l150_;
    MOV %r1 false;
    MOV $RET %r1;
    RET;
    JMP _l149_;
LABEL _l150_:
LABEL _l149_:
    MOV @c12 @c63;
LABEL _l152_:
    MOV %r1 @c12;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV @c12 %r1;
    JF %r0 _l153_;
LABEL _l155_:
    MOV %r1 @c43;
    MOV %r2 @c12;
    MOV_PROP @c8 %r1 %r2;
    MOV %r2 @c4;
    JF %r2 _l159_;
    MOV %r1 @c8;
    MOV %r3 @c9;
    IN %r1 %r3;
    JMP _l158_;
LABEL _l159_:
    MOV %r3 @c8;
    PUSH %r3;
    MOV %r3 @c9;
    PUSH %r3;
    MOV %r3 @c1;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r1 $RET;
LABEL _l158_:
    NEG %r1;
    JF %r1 _l157_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l156_;
LABEL _l157_:
LABEL _l156_:
    JMP _l152_;
LABEL _l153_:
    MOV %r0 true;
    MOV @c68 %r0;
LABEL _l160_:
    MOV %r2 @c12;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c12 %r2;
    MOV %r1 @c63;
    LT %r0 %r1;
    JF %r0 _l161_;
LABEL _l163_:
    MOV %r1 @c43;
    MOV %r2 @c12;
    MOV_PROP @c8 %r1 %r2;
    MOV %r1 @c33;
    MOV %r2 @c8;
    MOV_PROP @c73 %r1 %r2;
    MOV %r1 @c9;
    MOV %r2 @c8;
    MOV_PROP @c41 %r1 %r2;
    MOV %r2 0;
    VOID %r2;
    MOV %r3 @c6;
    NE %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l166_;
    MOV %r4 @c73;
    MOV %r5 @c41;
    NE %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l167_;
    MOV %r6 @c52;
    PUSH %r6;
    MOV %r6 @c36;
    PUSH %r6;
    MOV %r6 @c23;
    PUSH %r6;
    MOV %r6 @c41;
    PUSH %r6;
    MOV %r6 @c73;
    PUSH %r6;
    CALL_REG @c40 5 false;
    MOV %r5 $RET;
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l167_:
    LG_OR %r1 %r3;
LABEL _l166_:
    JF %r1 _l165_;
    MOV %r2 false;
    MOV @c68 %r2;
    JMP _l161_;
    JMP _l164_;
LABEL _l165_:
LABEL _l164_:
    MOV %r1 @c4;
    JIF %r1 _l168_;
    MOV %r3 "constructor";
    MOV %r4 @c8;
    WEQ %r3 %r4;
    MOV @c4 %r3;
    MOV %r2 %r3;
LABEL _l168_:
    JMP _l160_;
LABEL _l161_:
    MOV %r2 @c68;
    MOV %r1 %r2;
    JF %r2 _l170_;
    MOV %r3 @c4;
    NEG %r3;
    LG_AND %r1 %r3;
LABEL _l170_:
    JF %r1 _l169_;
    MOV %r4 @c33;
    MOV %r5 "constructor";
    MOV_PROP %r3 %r4 %r5;
    MOV @c23 %r3;
    MOV %r4 @c9;
    MOV %r5 "constructor";
    MOV_PROP %r3 %r4 %r5;
    MOV @c36 %r3;
    MOV %r6 @c23;
    MOV %r7 @c36;
    WNE %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l174_;
    MOV %r7 "constructor";
    MOV %r8 @c33;
    IN %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l174_:
    MOV %r4 %r5;
    JF %r5 _l173_;
    MOV %r6 "constructor";
    MOV %r7 @c9;
    IN %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l173_:
    MOV %r3 %r4;
    JF %r4 _l172_;
    MOV %r8 @c23;
    TYPE_OF %r8;
    MOV %r9 "function";
    WEQ %r8 %r9;
    MOV %r7 %r8;
    JF %r8 _l177_;
    MOV %r9 @c23;
    MOV %r10 @c23;
    INST_OF %r9 %r10;
    LG_AND %r7 %r9;
LABEL _l177_:
    MOV %r6 %r7;
    JF %r7 _l176_;
    MOV %r8 @c36;
    TYPE_OF %r8;
    MOV %r9 "function";
    WEQ %r8 %r9;
    LG_AND %r6 %r8;
LABEL _l176_:
    MOV %r5 %r6;
    JF %r6 _l175_;
    MOV %r7 @c36;
    MOV %r8 @c36;
    INST_OF %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l175_:
    NEG %r5;
    LG_AND %r3 %r5;
LABEL _l172_:
    MOV %r2 %r3;
    JF %r3 _l171_;
    MOV %r5 false;
    MOV @c68 %r5;
    MOV %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l171_:
LABEL _l169_:
    MOV %r0 @c68;
    MOV $RET %r0;
    RET;
}
func @@f34(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c15 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JIF %r1 _l178_;
    MOV %r3 @c9;
    PUSH %r3;
    CALL_REG @c33 1 false;
    MOV %r2 $RET;
    LG_OR %r0 %r2;
LABEL _l178_:
    MOV $RET %r0;
    RET;
}
func @@f35(n) {
    VAR @c9;
    ALLOC @c9;
    VAR @c23;
    ALLOC @c23;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    NEW_ARR @c9;
    MOV %r0 null;
    MOV %r1 @c33;
    WNE %r0 %r1;
    JF %r0 _l180_;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_CTX 'Object' 1 false;
    MOV %r1 $RET;
    FORIN @c23 %r1 _l181_ _l182_;
LABEL _l181_:
    MOV %r2 @c23;
    PUSH %r2;
    MOV %r2 @c9;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    FORIN_END;
LABEL _l182_:
    JMP _l179_;
LABEL _l180_:
LABEL _l179_:
    MOV %r0 @c9;
    MOV $RET %r0;
    RET;
}
func @@f36(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    ALLOC @c114;
    MOV @c114 n;
    ALLOC @c112;
    MOV @c112 t;
    ALLOC @c113;
    MOV @c113 r;
    MOV %r2 0;
    PUSH %r2;
    MOV %r3 @c9;
    MOV %r4 @c6;
    EQ %r3 %r4;
    JF %r3 _l184_;
    MOV %r5 @c33;
    MOV %r6 "length";
    MOV_PROP %r2 %r5 %r6;
    MOV %r4 1;
    SUB %r2 %r4;
    JMP _l183_;
LABEL _l184_:
    MOV %r2 @c9;
LABEL _l183_:
    PUSH %r2;
    CALL_REG @c34 2 false;
    MOV %r1 $RET;
    MOV @c9 %r1;
    FUNC %r0 @@f128;
    MOV $RET %r0;
    RET;
}
func @@f37(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 null;
    MOV %r3 @c33;
    WEQ %r2 %r3;
    JF %r2 _l188_;
    MOV %r1 0;
    JMP _l187_;
LABEL _l188_:
    MOV %r3 @c33;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
LABEL _l187_:
    JF %r1 _l186_;
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c8 2 false;
    MOV %r0 $RET;
    JMP _l185_;
LABEL _l186_:
    NEW_ARR %r0;
LABEL _l185_:
    MOV $RET %r0;
    RET;
}
func @@f38(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c33;
    MOV %r1 %r2;
    JF %r2 _l191_;
    MOV %r4 @c33;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l191_:
    JF %r1 _l190_;
    MOV %r2 @c33;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    JMP _l189_;
LABEL _l190_:
    MOV %r0 @c6;
LABEL _l189_:
    MOV $RET %r0;
    RET;
}
func @@f39(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 null;
    MOV %r1 @c33;
    WEQ %r0 %r1;
    JF %r0 _l193_;
    MOV @c36 0;
    JMP _l192_;
LABEL _l193_:
    MOV %r1 @c33;
    MOV %r2 "length";
    MOV_PROP @c36 %r1 %r2;
LABEL _l192_:
    MOV %r1 @c23;
    TYPE_OF %r1;
    MOV %r2 "number";
    WEQ %r1 %r2;
    JF %r1 _l195_;
    MOV %r2 0;
    MOV %r3 @c23;
    GT %r2 %r3;
    JF %r2 _l197_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 @c36;
    MOV %r4 @c23;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_REG @c34 2 false;
    MOV %r0 $RET;
    JMP _l196_;
LABEL _l197_:
    MOV %r0 @c23;
LABEL _l196_:
    JMP _l194_;
LABEL _l195_:
    MOV %r0 0;
LABEL _l194_:
    MOV @c23 %r0;
    MOV %r2 @c23;
    MOV %r0 %r2;
    JIF %r2 _l198_;
    MOV %r3 0;
    LG_OR %r0 %r3;
LABEL _l198_:
    MOV %r1 1;
    SUB %r0 %r1;
    MOV @c23 %r0;
    MOV @c40 @c9;
    MOV %r0 @c9;
    EQ @c40 %r0;
LABEL _l199_:
    MOV %r2 @c23;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c23 %r2;
    MOV %r1 @c36;
    LT %r0 %r1;
    JF %r0 _l200_;
LABEL _l202_:
    MOV %r1 @c33;
    MOV %r2 @c23;
    MOV_PROP @c52 %r1 %r2;
    MOV %r2 @c40;
    JF %r2 _l206_;
    MOV %r1 @c52;
    MOV %r3 @c9;
    EQ %r1 %r3;
    JMP _l205_;
LABEL _l206_:
    MOV %r1 @c52;
    MOV %r3 @c52;
    NE %r1 %r3;
LABEL _l205_:
    JF %r1 _l204_;
    MOV %r2 @c23;
    MOV $RET %r2;
    RET;
    JMP _l203_;
LABEL _l204_:
LABEL _l203_:
    JMP _l199_;
LABEL _l200_:
    MOV %r0 1;
    MINUS %r0;
    MOV $RET %r0;
    RET;
}
func @@f40(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c5 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f41(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 @c5;
    PUSH %r1;
    MOV %r1 3;
    MOV_ARGS %r3;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    GT %r1 %r2;
    PUSH %r1;
    MOV %r1 @c23;
    PUSH %r1;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c36 5 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f42(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c115;
    MOV @c115 n;
    ALLOC @c116;
    MOV @c116 t;
    MOV %r0 @c9;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l208_;
    MOV %r2 "Expected a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l207_;
LABEL _l208_:
LABEL _l207_:
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c37 1 false;
    MOV %r1 $RET;
    MOV @c33 %r1;
    FUNC %r0 @@f129;
    MOV $RET %r0;
    RET;
}
func @@f43(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 @c33;
    MOV %r2 @c9;
    EQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l209_;
    MOV %r3 @c33;
    MOV %r4 @c33;
    NE %r3 %r4;
    MOV %r2 %r3;
    JF %r3 _l210_;
    MOV %r4 @c9;
    MOV %r5 @c9;
    NE %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l210_:
    LG_OR %r0 %r2;
LABEL _l209_:
    MOV $RET %r0;
    RET;
}
func @@f44(n) {
    VAR @c9;
    ALLOC @c9;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV %r2 null;
    MOV %r3 @c33;
    WNE %r2 %r3;
    MOV @c9 %r2;
    MOV %r1 %r2;
    JF %r1 _l211_;
    MOV %r4 @c33;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    MOV @c9 %r3;
    MOV %r6 @c9;
    TYPE_OF %r6;
    MOV %r7 "number";
    WEQ %r6 %r7;
    MOV %r5 %r6;
    JF %r6 _l214_;
    MOV %r7 1;
    MINUS %r7;
    MOV %r8 @c9;
    LT %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l214_:
    MOV %r4 %r5;
    JF %r5 _l213_;
    MOV %r6 0;
    MOV %r7 @c9;
    MOV %r8 1;
    MOD %r7 %r8;
    WEQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l213_:
    MOV %r3 %r4;
    JF %r4 _l212_;
    MOV %r5 9007199254740991;
    MOV %r6 @c9;
    GE %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l212_:
    MOV @c9 %r3;
    MOV %r2 %r3;
LABEL _l211_:
    MOV %r1 @c9;
    MOV %r0 %r1;
    JF %r1 _l215_;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c38 1 false;
    MOV %r2 $RET;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l215_:
    MOV $RET %r0;
    RET;
}
func @@f45(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c39 1 false;
    MOV %r1 $RET;
    NEG %r1;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l216_;
    MOV %r4 @c33;
    PUSH %r4;
    MOV %r4 @c16;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    MOV @c33 %r3;
    MOV %r5 "[object Function]";
    MOV %r6 @c33;
    WEQ %r5 %r6;
    MOV %r4 %r5;
    JIF %r5 _l219_;
    MOV %r6 "[object GeneratorFunction]";
    MOV %r7 @c33;
    WEQ %r6 %r7;
    LG_OR %r4 %r6;
LABEL _l219_:
    MOV %r3 %r4;
    JIF %r4 _l218_;
    MOV %r5 "[object AsyncFunction]";
    MOV %r6 @c33;
    WEQ %r5 %r6;
    LG_OR %r3 %r5;
LABEL _l218_:
    MOV %r2 %r3;
    JIF %r3 _l217_;
    MOV %r4 "[object Proxy]";
    MOV %r5 @c33;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l217_:
    LG_AND %r0 %r2;
LABEL _l216_:
    MOV $RET %r0;
    RET;
}
func @@f46(n) {
    VAR @c9;
    ALLOC @c9;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV @c9 @c33;
    TYPE_OF t;
    MOV %r1 null;
    MOV %r2 @c33;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l220_;
    MOV %r3 "object";
    MOV %r4 @c9;
    WEQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l221_;
    MOV %r4 "function";
    MOV %r5 @c9;
    WEQ %r4 %r5;
    LG_OR %r2 %r4;
LABEL _l221_:
    LG_AND %r0 %r2;
LABEL _l220_:
    MOV $RET %r0;
    RET;
}
func @@f47(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 null;
    MOV %r2 @c33;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l222_;
    MOV %r2 @c33;
    TYPE_OF %r2;
    MOV %r3 "object";
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l222_:
    MOV $RET %r0;
    RET;
}
func @@f48(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r1 @c33;
    TYPE_OF %r1;
    MOV %r2 "number";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l223_;
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c0 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l224_;
    MOV %r4 "[object Number]";
    MOV %r6 @c33;
    PUSH %r6;
    MOV %r6 @c16;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l224_:
    LG_OR %r0 %r2;
LABEL _l223_:
    MOV $RET %r0;
    RET;
}
func @@f49(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r1 @c33;
    TYPE_OF %r1;
    MOV %r2 "string";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l225_;
    MOV %r5 @c33;
    PUSH %r5;
    CALL_REG @c15 1 false;
    MOV %r4 $RET;
    NEG %r4;
    MOV %r3 %r4;
    JF %r4 _l227_;
    MOV %r6 @c33;
    PUSH %r6;
    CALL_REG @c0 1 false;
    MOV %r5 $RET;
    LG_AND %r3 %r5;
LABEL _l227_:
    MOV %r2 %r3;
    JF %r3 _l226_;
    MOV %r4 "[object String]";
    MOV %r6 @c33;
    PUSH %r6;
    MOV %r6 @c16;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l226_:
    LG_OR %r0 %r2;
LABEL _l225_:
    MOV $RET %r0;
    RET;
}
func @@f50(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c33;
    TYPE_OF %r1;
    MOV %r2 "string";
    WEQ %r1 %r2;
    JF %r1 _l229_;
    MOV %r0 @c33;
    JMP _l228_;
LABEL _l229_:
    MOV %r2 null;
    MOV %r3 @c33;
    WEQ %r2 %r3;
    JF %r2 _l230_;
    MOV %r0 "";
    JMP _l228_;
LABEL _l230_:
    MOV %r0 @c33;
    MOV %r3 "";
    ADD %r0 %r3;
LABEL _l228_:
    MOV $RET %r0;
    RET;
}
func @@f51(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 null;
    MOV %r2 @c33;
    WEQ %r1 %r2;
    JF %r1 _l232_;
    NEW_ARR %r0;
    JMP _l231_;
LABEL _l232_:
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c10 1 false;
    MOV %r2 $RET;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c40 2 false;
    MOV %r0 $RET;
LABEL _l231_:
    MOV $RET %r0;
    RET;
}
func @@f52(n) {
    VAR %r0;
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f53(n, r, e) {
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    ALLOC @c118;
    MOV @c118 n;
    MOV %r0 @c23;
    PUSH %r0;
    CALL_REG @c10 1 false;
    MOV @c40 $RET;
    MOV %r0 @c40;
    PUSH %r0;
    MOV %r0 @c23;
    PUSH %r0;
    CALL_REG @c41 2 false;
    MOV @c52 $RET;
    MOV %r1 null;
    MOV %r2 @c36;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JIF %r1 _l234_;
    MOV %r4 @c23;
    PUSH %r4;
    CALL_REG @c39 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l235_;
    MOV %r6 @c52;
    MOV %r7 "length";
    MOV_PROP %r5 %r6 %r7;
    MOV %r4 %r5;
    JIF %r5 _l236_;
    MOV %r7 @c40;
    MOV %r8 "length";
    MOV_PROP %r6 %r7 %r8;
    NEG %r6;
    LG_OR %r4 %r6;
LABEL _l236_:
    LG_AND %r2 %r4;
LABEL _l235_:
    LG_OR %r0 %r2;
LABEL _l234_:
    JIF %r0 _l233_;
    MOV %r2 @c23;
    MOV @c36 %r2;
    MOV %r2 @c33;
    MOV @c23 %r2;
    MOV_THIS %r2;
    MOV @c33 %r2;
    MOV %r4 @c23;
    PUSH %r4;
    CALL_REG @c10 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 @c23;
    PUSH %r3;
    CALL_REG @c41 2 false;
    MOV %r2 $RET;
    MOV @c52 %r2;
    MOV %r1 %r2;
LABEL _l233_:
    MOV %r2 @c36;
    PUSH %r2;
    CALL_REG @c39 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l238_;
    MOV %r2 "chain";
    MOV %r3 @c36;
    IN %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l238_:
    MOV @c4 %r0;
    JF %r0 _l237_;
    MOV %r2 @c36;
    MOV %r3 "chain";
    MOV_PROP %r1 %r2 %r3;
    NEG %r1;
    LG_AND @c4 %r1;
LABEL _l237_:
    NEG i;
    MOV %r0 @c33;
    PUSH %r0;
    CALL_REG @c38 1 false;
    MOV @c43 $RET;
    FUNC %r1 @@f130;
    PUSH %r1;
    MOV %r1 @c52;
    PUSH %r1;
    CALL_REG @c5 2 false;
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f54(n) {
    VAR %r0;
    ALLOC @c120;
    MOV @c120 n;
    FUNC %r0 @@f131;
    MOV $RET %r0;
    RET;
}
func @@f55(n, t) {
    VAR %r0;
    ALLOC @c122;
    MOV @c122 n;
    ALLOC @c121;
    MOV @c121 t;
    FUNC %r0 @@f132;
    MOV $RET %r0;
    RET;
}
func @@f56() {
    VAR @c33;
    ALLOC @c33;
    VAR %r0;
    FUNC @c33 @@f133;
    FUNC %r0 @@f134;
    MOV $RET %r0;
    RET;
}
func @@f57(n, t) {
    VAR %r0;
    ALLOC @c125;
    MOV @c125 n;
    ALLOC @c126;
    MOV @c126 t;
    FUNC %r0 @@f135;
    MOV $RET %r0;
    RET;
}
func @@f58(n) {
    VAR %r0;
    ALLOC @c127;
    MOV @c127 n;
    FUNC %r0 @@f136;
    MOV $RET %r0;
    RET;
}
func @@f59(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 null;
    MOV %r1 @c33;
    WEQ %r0 %r1;
    JF %r0 _l240_;
    MOV @c36 0;
    JMP _l239_;
LABEL _l240_:
    MOV %r1 @c33;
    MOV %r2 "length";
    MOV_PROP @c36 %r1 %r2;
LABEL _l239_:
    MOV %r0 @c36;
    NEG %r0;
    JF %r0 _l242_;
    MOV %r1 1;
    MINUS %r1;
    MOV $RET %r1;
    RET;
    JMP _l241_;
LABEL _l242_:
LABEL _l241_:
    MOV %r1 null;
    MOV %r2 @c23;
    WEQ %r1 %r2;
    JF %r1 _l244_;
    MOV %r0 0;
    JMP _l243_;
LABEL _l244_:
    MOV %r2 @c23;
    PUSH %r2;
    CALL_REG @c37 1 false;
    MOV %r0 $RET;
LABEL _l243_:
    MOV @c23 %r0;
    MOV %r0 0;
    MOV %r1 @c23;
    GT %r0 %r1;
    JF %r0 _l245_;
    MOV %r3 0;
    PUSH %r3;
    MOV %r3 @c36;
    MOV %r4 @c23;
    ADD %r3 %r4;
    PUSH %r3;
    CALL_REG @c34 2 false;
    MOV %r2 $RET;
    MOV @c23 %r2;
    MOV %r1 %r2;
LABEL _l245_:
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV %r0 $RET;
    MOV @c9 %r0;
    MOV %r1 @c33;
    MOV %r2 "length";
    MOV_PROP %r0 %r1 %r2;
    MOV @c36 %r0;
    MOV %r0 1;
    MINUS %r0;
    MOV %r1 @c23;
    ADD %r1 %r0;
    MOV @c23 %r1;
LABEL _l247_:
    MOV %r2 @c23;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c23 %r2;
    MOV %r1 @c36;
    LT %r0 %r1;
    JF %r0 _l248_;
LABEL _l250_:
    MOV %r2 @c33;
    PUSH %r2;
    MOV %r2 @c23;
    PUSH %r2;
    MOV %r3 @c33;
    MOV %r4 @c23;
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    CALL_REG @c9 3 false;
    MOV %r1 $RET;
    JF %r1 _l252_;
    MOV %r2 @c23;
    MOV @c33 %r2;
    JMP _l246_;
    JMP _l251_;
LABEL _l252_:
LABEL _l251_:
    JMP _l247_;
LABEL _l248_:
    MOV %r0 1;
    MINUS %r0;
    MOV @c33 %r0;
LABEL _l246_:
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f60(n) {
    VAR %r0;
    ALLOC @c128;
    MOV @c128 n;
    FUNC %r0 @@f137;
    MOV $RET %r0;
    RET;
}
func @@f61(n, t, r) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c23;
    PUSH %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c42 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f62(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 1;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c43 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f63(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c23;
    PUSH %r1;
    MOV %r3 @c9;
    PUSH %r3;
    CALL_REG @c44 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JIF %r2 _l253_;
    MOV %r3 0;
    LG_OR %r1 %r3;
LABEL _l253_:
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c43 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f64(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c33;
    PUSH %r0;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c25 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    CALL_REG @c45 3 false;
}
func @@f65(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c33;
    PUSH %r0;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c46 1 false;
    MOV %r0 $RET;
    PUSH %r0;
    MOV %r0 @c9;
    PUSH %r0;
    CALL_REG @c45 3 false;
}
func @@f66(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c43;
    ALLOC @c43;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    VAR %r10;
    VAR %r11;
    VAR %r12;
    VAR %r13;
    VAR %r14;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_CTX 'Object' 1 false;
    MOV %r0 $RET;
    MOV @c33 %r0;
    MOV @c36 1;
    MINUS e;
    MOV %r0 @c9;
    MOV %r1 "length";
    MOV_PROP @c40 %r0 %r1;
    MOV %r0 2;
    MOV %r1 @c40;
    LT %r0 %r1;
    JF %r0 _l255_;
    MOV %r1 @c9;
    MOV %r2 2;
    MOV_PROP @c52 %r1 %r2;
    JMP _l254_;
LABEL _l255_:
    MOV @c52 @c6;
LABEL _l254_:
    MOV %r1 @c52;
    MOV @c23 %r1;
    MOV %r0 %r1;
    JF %r0 _l257_;
    MOV %r2 @c9;
    MOV %r3 0;
    MOV_PROP %r1 %r2 %r3;
    MOV @c23 %r1;
    MOV %r1 @c9;
    MOV %r2 1;
    MOV_PROP @c4 %r1 %r2;
    MOV %r2 @c52;
    PUSH %r2;
    CALL_REG @c39 1 false;
    MOV %r1 $RET;
    JF %r1 _l259_;
    MOV @c43 @c4;
    TYPE_OF c;
    MOV %r2 "number";
    MOV %r3 @c43;
    WEQ %r2 %r3;
    JF %r2 _l261_;
    MOV %r5 @c52;
    PUSH %r5;
    CALL_REG @c24 1 false;
    MOV %r4 $RET;
    MOV @c43 %r4;
    MOV %r3 %r4;
    JF %r3 _l263_;
    MOV %r4 @c52;
    MOV %r5 "length";
    MOV_PROP @c43 %r4 %r5;
    MOV @c63 @c4;
    TYPE_OF f;
    MOV %r4 null;
    MOV %r5 @c43;
    WEQ %r4 %r5;
    JF %r4 _l265_;
    MOV @c43 9007199254740991;
    JMP _l264_;
LABEL _l265_:
    MOV @c43 @c43;
LABEL _l264_:
    MOV %r7 @c43;
    NEG %r7;
    NEG %r7;
    MOV %r6 %r7;
    JF %r7 _l269_;
    MOV %r9 "number";
    MOV %r10 @c63;
    WEQ %r9 %r10;
    MOV %r8 %r9;
    JIF %r9 _l270_;
    MOV %r11 "symbol";
    MOV %r12 @c63;
    WNE %r11 %r12;
    MOV %r10 %r11;
    JF %r11 _l271_;
    MOV %r13 @c4;
    PUSH %r13;
    MOV %r13 @c47;
    MOV %r14 "test";
    CALL_VAR %r13 %r14 1 false;
    MOV %r12 $RET;
    LG_AND %r10 %r12;
LABEL _l271_:
    LG_OR %r8 %r10;
LABEL _l270_:
    LG_AND %r6 %r8;
LABEL _l269_:
    MOV %r5 %r6;
    JF %r6 _l268_;
    MOV %r7 1;
    MINUS %r7;
    MOV %r8 @c4;
    LT %r7 %r8;
    LG_AND %r5 %r7;
LABEL _l268_:
    MOV %r4 %r5;
    JF %r5 _l267_;
    MOV %r6 0;
    MOV %r7 @c4;
    MOV %r8 1;
    MOD %r7 %r8;
    WEQ %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l267_:
    MOV @c43 %r4;
    JF %r4 _l266_;
    MOV %r5 @c4;
    MOV %r6 @c43;
    LT %r5 %r6;
    LG_AND @c43 %r5;
LABEL _l266_:
    JMP _l262_;
LABEL _l263_:
LABEL _l262_:
    JMP _l260_;
LABEL _l261_:
    MOV %r4 "string";
    MOV %r5 @c43;
    WEQ %r4 %r5;
    MOV %r3 %r4;
    JF %r4 _l272_;
    MOV %r5 @c4;
    MOV %r6 @c52;
    IN %r5 %r6;
    LG_AND %r3 %r5;
LABEL _l272_:
    MOV @c43 %r3;
LABEL _l260_:
    MOV %r3 @c43;
    NEG %r3;
    NEG %r3;
    MOV %r2 %r3;
    JF %r3 _l273_;
    MOV %r5 @c23;
    PUSH %r5;
    MOV %r6 @c52;
    MOV %r7 @c4;
    MOV_PROP %r5 %r6 %r7;
    PUSH %r5;
    CALL_REG @c19 2 false;
    MOV %r4 $RET;
    LG_AND %r2 %r4;
LABEL _l273_:
    MOV @c23 %r2;
    JMP _l258_;
LABEL _l259_:
    MOV %r2 false;
    MOV @c23 %r2;
LABEL _l258_:
    JMP _l256_;
LABEL _l257_:
LABEL _l256_:
    MOV %r0 @c23;
    JF %r0 _l277_;
    MOV %r2 1;
    MOV @c40 %r2;
    MOV %r1 %r2;
LABEL _l277_:
LABEL _l274_:
    MOV %r2 @c36;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c36 %r2;
    MOV %r1 @c40;
    LT %r0 %r1;
    JF %r0 _l275_;
LABEL _l278_:
    MOV %r2 @c9;
    MOV %r3 @c36;
    MOV_PROP %r1 %r2 %r3;
    MOV @c52 %r1;
    MOV %r2 @c52;
    PUSH %r2;
    CALL_REG @c48 1 false;
    MOV %r1 $RET;
    MOV @c23 %r1;
    MOV %r1 1;
    MINUS %r1;
    MOV @c4 %r1;
    MOV %r2 @c23;
    MOV %r3 "length";
    MOV_PROP %r1 %r2 %r3;
    MOV @c43 %r1;
LABEL _l279_:
    MOV %r3 @c4;
    ADD %r3 1;
    MOV %r1 %r3;
    MOV @c4 %r3;
    MOV %r2 @c43;
    LT %r1 %r2;
    JF %r1 _l280_;
LABEL _l282_:
    MOV %r2 @c23;
    MOV %r3 @c4;
    MOV_PROP @c63 %r2 %r3;
    MOV %r2 @c33;
    MOV %r3 @c63;
    MOV_PROP @c68 %r2 %r3;
    MOV %r3 @c68;
    MOV %r4 @c6;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l284_;
    MOV %r7 @c49;
    MOV %r8 @c63;
    MOV_PROP %r6 %r7 %r8;
    PUSH %r6;
    MOV %r6 @c68;
    PUSH %r6;
    CALL_REG @c19 2 false;
    MOV %r5 $RET;
    MOV %r4 %r5;
    JF %r5 _l285_;
    MOV %r7 @c63;
    PUSH %r7;
    MOV %r7 @c33;
    PUSH %r7;
    MOV %r7 @c1;
    MOV %r8 "call";
    CALL_VAR %r7 %r8 2 false;
    MOV %r6 $RET;
    NEG %r6;
    LG_AND %r4 %r6;
LABEL _l285_:
    LG_OR %r2 %r4;
LABEL _l284_:
    JF %r2 _l283_;
    MOV %r5 @c52;
    MOV %r6 @c63;
    MOV_PROP %r4 %r5 %r6;
    MOV %r5 @c33;
    MOV %r6 @c63;
    SET_KEY %r5 %r6 %r4;
    MOV %r3 %r4;
LABEL _l283_:
    JMP _l279_;
LABEL _l280_:
    JMP _l274_;
LABEL _l275_:
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f67(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 null;
    MOV %r2 @c33;
    WEQ %r1 %r2;
    JF %r1 _l287_;
    NEW_OBJ %r0;
    JMP _l286_;
LABEL _l287_:
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c50 2 false;
    MOV %r0 $RET;
LABEL _l286_:
    MOV $RET %r0;
    RET;
}
func @@f68(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c33;
    MOV %r2 "";
    ADD %r1 %r2;
    PUSH %r1;
    MOV %r2 @c51;
    PUSH %r2;
    MOV %r2 @c6;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c27 3 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c28 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f69(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c52 1 false;
    MOV %r1 $RET;
    MOV @c33 %r1;
    MOV %r1 true;
    MOV %r2 @c33;
    MOV %r3 "__chain__";
    SET_KEY %r2 %r3 %r1;
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f70(n) {
    VAR %r0;
    VAR %r1;
    MOV_CTX %r1 "Boolean";
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c12 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f71() {
    VAR @c33;
    ALLOC @c33;
    VAR @c23;
    ALLOC @c23;
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV_ARGS %r0;
    MOV %r1 "length";
    MOV_PROP @c33 %r0 %r1;
    MOV %r0 @c33;
    NEG %r0;
    JF %r0 _l289_;
    NEW_ARR %r1;
    MOV $RET %r1;
    RET;
    JMP _l288_;
LABEL _l289_:
LABEL _l288_:
    MOV %r0 @c33;
    MOV %r1 1;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV @c23 $RET;
    MOV_ARGS %r0;
    MOV %r1 0;
    MOV_PROP @c36 %r0 %r1;
LABEL _l290_:
    MOV %r1 @c33;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV @c33 %r1;
    JF %r0 _l291_;
LABEL _l293_:
    MOV_ARGS %r2;
    MOV %r3 @c33;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @c23;
    MOV %r3 @c33;
    MOV %r4 1;
    SUB %r3 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l290_;
LABEL _l291_:
    MOV %r2 1;
    PUSH %r2;
    MOV %r2 @c23;
    PUSH %r2;
    CALL_REG @c8 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r3 @c36;
    PUSH %r3;
    CALL_REG @c15 1 false;
    MOV %r2 $RET;
    JF %r2 _l295_;
    MOV %r3 @c36;
    PUSH %r3;
    CALL_REG @c53 1 false;
    MOV %r1 $RET;
    JMP _l294_;
LABEL _l295_:
    NEW_ARR %r1;
    MOV %r3 @c36;
    SET_KEY %r1 0 %r3;
LABEL _l294_:
    PUSH %r1;
    CALL_REG @c9 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f72(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c33;
    PUSH %r0;
    CALL_REG @c54 1 false;
    MOV @c23 $RET;
    MOV %r1 null;
    MOV %r2 @c9;
    WEQ %r1 %r2;
    JF %r1 _l297_;
    MOV %r0 @c23;
    JMP _l296_;
LABEL _l297_:
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 @c23;
    PUSH %r2;
    CALL_REG @c55 2 false;
    MOV %r0 $RET;
LABEL _l296_:
    MOV $RET %r0;
    RET;
}
func @@f73(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c12 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f74(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 null;
    MOV %r3 @c33;
    WEQ %r2 %r3;
    JF %r2 _l301_;
    MOV %r1 0;
    JMP _l300_;
LABEL _l301_:
    MOV %r3 @c33;
    MOV %r4 "length";
    MOV_PROP %r1 %r3 %r4;
LABEL _l300_:
    JF %r1 _l299_;
    MOV %r2 @c56;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c8 2 false;
    MOV %r0 $RET;
    JMP _l298_;
LABEL _l299_:
    NEW_ARR %r0;
LABEL _l298_:
    MOV $RET %r0;
    RET;
}
func @@f75(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c3 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f76(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c33;
    PUSH %r2;
    NEW_OBJ %r2;
    PUSH %r2;
    CALL_REG @c55 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c22 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f77(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    ALLOC @c129;
    MOV @c129 n;
    MOV %r0 @c33;
    TYPE_OF %r0;
    MOV %r1 "function";
    WNE %r0 %r1;
    JF %r0 _l303_;
    MOV %r2 "Expected a function";
    PUSH %r2;
    CALL_CTX 'TypeError' 1 true;
    MOV %r1 $RET;
    THROW %r1;
    JMP _l302_;
LABEL _l303_:
LABEL _l302_:
    FUNC %r0 @@f138;
    MOV $RET %r0;
    RET;
}
func @@f78(n) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c33;
    PUSH %r1;
    MOV %r1 2;
    PUSH %r1;
    CALL_REG @c57 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f79(n, t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 null;
    MOV %r1 @c33;
    WEQ %r0 %r1;
    JF %r0 _l305_;
    MOV @c36 0;
    JMP _l304_;
LABEL _l305_:
    MOV %r1 @c33;
    MOV %r2 "length";
    MOV_PROP @c36 %r1 %r2;
LABEL _l304_:
    MOV %r2 @c23;
    MOV %r3 @c6;
    EQ %r2 %r3;
    JF %r2 _l307_;
    MOV %r1 @c36;
    JMP _l306_;
LABEL _l307_:
    MOV %r1 @c23;
    PLUS %r1;
LABEL _l306_:
    MOV @c23 %r1;
    MOV %r1 @c36;
    JF %r1 _l309_;
    MOV %r2 @c23;
    PUSH %r2;
    MOV %r3 null;
    MOV %r4 @c9;
    WEQ %r3 %r4;
    JF %r3 _l311_;
    MOV %r2 0;
    JMP _l310_;
LABEL _l311_:
    MOV %r2 @c9;
    PLUS %r2;
LABEL _l310_:
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c29 3 false;
    MOV %r0 $RET;
    JMP _l308_;
LABEL _l309_:
    NEW_ARR %r0;
LABEL _l308_:
    MOV $RET %r0;
    RET;
}
func @@f80(n, t) {
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    ALLOC @c131;
    MOV @c131 t;
    MOV @c36 0;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    MOV @c9 %r1;
    MOV %r2 "value";
    PUSH %r2;
    CALL_REG @c23 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    FUNC %r2 @@f139;
    PUSH %r2;
    FUNC %r4 @@f140;
    PUSH %r4;
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c3 2 false;
    MOV %r2 $RET;
    MOV %r3 "sort";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c3 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f81(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c9 1 false;
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f82(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c9 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f83(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c24 1 false;
    MOV %r1 $RET;
    JF %r1 _l313_;
    MOV %r3 @c33;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    JF %r2 _l315_;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c53 1 false;
    MOV %r0 $RET;
    JMP _l314_;
LABEL _l315_:
    NEW_ARR %r0;
LABEL _l314_:
    JMP _l312_;
LABEL _l313_:
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c58 1 false;
    MOV %r0 $RET;
LABEL _l312_:
    MOV $RET %r0;
    RET;
}
func @@f84(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c39 1 false;
    MOV %r1 $RET;
    JF %r1 _l317_;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c15 1 false;
    MOV %r2 $RET;
    JF %r2 _l319_;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c53 1 false;
    MOV %r0 $RET;
    JMP _l318_;
LABEL _l319_:
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c25 1 false;
    MOV %r3 $RET;
    PUSH %r3;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c45 2 false;
    MOV %r0 $RET;
LABEL _l318_:
    JMP _l316_;
LABEL _l317_:
    MOV %r0 @c33;
LABEL _l316_:
    MOV $RET %r0;
    RET;
}
func @@f85(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c59 1 false;
    MOV %r3 $RET;
    MOV @c33 %r3;
    MOV %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l322_;
    MOV %r4 @c33;
    PUSH %r4;
    MOV %r4 @c60;
    MOV %r5 "test";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l322_:
    JF %r1 _l321_;
    MOV %r2 @c61;
    PUSH %r2;
    MOV %r2 @c62;
    PUSH %r2;
    MOV %r2 @c33;
    MOV %r3 "replace";
    CALL_VAR %r2 %r3 2 false;
    MOV %r0 $RET;
    JMP _l320_;
LABEL _l321_:
    MOV %r0 @c33;
LABEL _l320_:
    MOV $RET %r0;
    RET;
}
func @@f86(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c23;
    JF %r2 _l324_;
    MOV %r1 @c6;
    JMP _l323_;
LABEL _l324_:
    MOV %r1 @c9;
LABEL _l323_:
    MOV @c9 %r1;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c63 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f87(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 null;
    MOV %r2 @c33;
    WNE %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l325_;
    MOV %r3 @c9;
    PUSH %r3;
    MOV %r3 @c33;
    PUSH %r3;
    MOV %r3 @c1;
    MOV %r4 "call";
    CALL_VAR %r3 %r4 2 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l325_:
    MOV $RET %r0;
    RET;
}
func @@f88(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    MOV %r2 true;
    MOV %r3 @c33;
    EQ %r2 %r3;
    MOV %r1 %r2;
    JIF %r2 _l327_;
    MOV %r3 false;
    MOV %r4 @c33;
    EQ %r3 %r4;
    LG_OR %r1 %r3;
LABEL _l327_:
    MOV %r0 %r1;
    JIF %r1 _l326_;
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c0 1 false;
    MOV %r3 $RET;
    MOV %r2 %r3;
    JF %r3 _l328_;
    MOV %r4 "[object Boolean]";
    MOV %r6 @c33;
    PUSH %r6;
    MOV %r6 @c16;
    MOV %r7 "call";
    CALL_VAR %r6 %r7 1 false;
    MOV %r5 $RET;
    WEQ %r4 %r5;
    LG_AND %r2 %r4;
LABEL _l328_:
    LG_OR %r0 %r2;
LABEL _l326_:
    MOV $RET %r0;
    RET;
}
func @@f89(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c0 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l329_;
    MOV %r2 "[object Date]";
    MOV %r4 @c33;
    PUSH %r4;
    MOV %r4 @c16;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l329_:
    MOV $RET %r0;
    RET;
}
func @@f90(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    VAR %r9;
    MOV %r3 @c9;
    PUSH %r3;
    CALL_REG @c24 1 false;
    MOV %r2 $RET;
    MOV %r1 %r2;
    JF %r2 _l332_;
    MOV %r7 @c9;
    PUSH %r7;
    CALL_REG @c15 1 false;
    MOV %r6 $RET;
    MOV %r5 %r6;
    JIF %r6 _l335_;
    MOV %r8 @c9;
    PUSH %r8;
    CALL_REG @c64 1 false;
    MOV %r7 $RET;
    LG_OR %r5 %r7;
LABEL _l335_:
    MOV %r4 %r5;
    JIF %r5 _l334_;
    MOV %r8 @c9;
    MOV %r9 "splice";
    MOV_PROP %r7 %r8 %r9;
    PUSH %r7;
    CALL_REG @c38 1 false;
    MOV %r6 $RET;
    LG_OR %r4 %r6;
LABEL _l334_:
    MOV %r3 %r4;
    JIF %r4 _l333_;
    MOV %r6 @c9;
    PUSH %r6;
    CALL_REG @c33 1 false;
    MOV %r5 $RET;
    LG_OR %r3 %r5;
LABEL _l333_:
    LG_AND %r1 %r3;
LABEL _l332_:
    JF %r1 _l331_;
    MOV %r2 @c9;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    NEG %r0;
    JMP _l330_;
LABEL _l331_:
    MOV %r4 @c9;
    PUSH %r4;
    CALL_REG @c25 1 false;
    MOV %r2 $RET;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    NEG %r0;
LABEL _l330_:
    MOV $RET %r0;
    RET;
}
func @@f91(n, t) {
    VAR %r0;
    VAR %r1;
    MOV %r1 @c9;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c13 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f92(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c33;
    TYPE_OF %r1;
    MOV %r2 "number";
    WEQ %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l336_;
    MOV %r3 @c33;
    PUSH %r3;
    CALL_REG @c65 1 false;
    MOV %r2 $RET;
    LG_AND %r0 %r2;
LABEL _l336_:
    MOV $RET %r0;
    RET;
}
func @@f93(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c66 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l337_;
    MOV %r2 @c33;
    MOV %r3 @c33;
    PLUS %r3;
    WNE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l337_:
    MOV $RET %r0;
    RET;
}
func @@f94(n) {
    VAR %r0;
    VAR %r1;
    MOV %r0 null;
    MOV %r1 @c33;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f95(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c0 1 false;
    MOV %r1 $RET;
    MOV %r0 %r1;
    JF %r1 _l338_;
    MOV %r2 "[object RegExp]";
    MOV %r4 @c33;
    PUSH %r4;
    MOV %r4 @c16;
    MOV %r5 "call";
    CALL_VAR %r4 %r5 1 false;
    MOV %r3 $RET;
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l338_:
    MOV $RET %r0;
    RET;
}
func @@f96(n) {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c33;
    MOV %r1 @c6;
    EQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f97(n) {
    VAR @c9;
    ALLOC @c9;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r0 null;
    MOV %r1 @c33;
    WEQ %r0 %r1;
    JF %r0 _l340_;
    MOV @c9 0;
    JMP _l339_;
LABEL _l340_:
    MOV %r1 @c33;
    MOV %r2 "length";
    MOV_PROP @c9 %r1 %r2;
LABEL _l339_:
    MOV %r1 @c9;
    JF %r1 _l342_;
    MOV %r2 @c33;
    MOV %r3 @c9;
    MOV %r4 1;
    SUB %r3 %r4;
    MOV_PROP %r0 %r2 %r3;
    JMP _l341_;
LABEL _l342_:
    MOV %r0 @c6;
LABEL _l341_:
    MOV $RET %r0;
    RET;
}
func @@f98(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c33;
    MOV %r1 %r2;
    JF %r2 _l345_;
    MOV %r4 @c33;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l345_:
    JF %r1 _l344_;
    MOV %r2 @c67;
    PUSH %r2;
    MOV %r2 @c21;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c68 3 false;
    MOV %r0 $RET;
    JMP _l343_;
LABEL _l344_:
    MOV %r0 @c6;
LABEL _l343_:
    MOV $RET %r0;
    RET;
}
func @@f99(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c33;
    MOV %r1 %r2;
    JF %r2 _l348_;
    MOV %r4 @c33;
    MOV %r5 "length";
    MOV_PROP %r3 %r4 %r5;
    LG_AND %r1 %r3;
LABEL _l348_:
    JF %r1 _l347_;
    MOV %r2 @c69;
    PUSH %r2;
    MOV %r2 @c21;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c68 3 false;
    MOV %r0 $RET;
    JMP _l346_;
LABEL _l347_:
    MOV %r0 @c6;
LABEL _l346_:
    MOV $RET %r0;
    RET;
}
func @@f100() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r3 @c70;
    MOV %r4 "_";
    MOV_PROP %r1 %r3 %r4;
    MOV_THIS %r2;
    EQ %r1 %r2;
    JF %r1 _l349_;
    MOV %r3 @c71;
    MOV %r4 @c70;
    MOV %r5 "_";
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l349_:
    MOV_THIS %r0;
    MOV $RET %r0;
    RET;
}
func @@f101() {
}
func @@f102(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r2 null;
    MOV %r3 @c33;
    WEQ %r2 %r3;
    JF %r2 _l351_;
    MOV %r1 @c6;
    JMP _l350_;
LABEL _l351_:
    MOV %r3 @c33;
    MOV %r4 @c9;
    MOV_PROP %r1 %r3 %r4;
LABEL _l350_:
    MOV @c9 %r1;
    MOV %r1 @c9;
    MOV %r2 @c6;
    EQ %r1 %r2;
    JF %r1 _l352_;
    MOV %r3 @c23;
    MOV @c9 %r3;
    MOV %r2 %r3;
LABEL _l352_:
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c38 1 false;
    MOV %r1 $RET;
    JF %r1 _l354_;
    MOV %r2 @c33;
    PUSH %r2;
    MOV %r2 @c9;
    MOV %r3 "call";
    CALL_VAR %r2 %r3 1 false;
    MOV %r0 $RET;
    JMP _l353_;
LABEL _l354_:
    MOV %r0 @c9;
LABEL _l353_:
    MOV $RET %r0;
    RET;
}
func @@f103(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 null;
    MOV %r2 @c33;
    WEQ %r1 %r2;
    JF %r1 _l356_;
    MOV %r0 0;
    JMP _l355_;
LABEL _l356_:
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c24 1 false;
    MOV %r3 $RET;
    JF %r3 _l358_;
    MOV %r2 @c33;
    JMP _l357_;
LABEL _l358_:
    MOV %r4 @c33;
    PUSH %r4;
    CALL_REG @c25 1 false;
    MOV %r2 $RET;
LABEL _l357_:
    MOV @c33 %r2;
    MOV %r2 @c33;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
LABEL _l355_:
    MOV $RET %r0;
    RET;
}
func @@f104(n, t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c23;
    JF %r2 _l360_;
    MOV %r1 @c6;
    JMP _l359_;
LABEL _l360_:
    MOV %r1 @c9;
LABEL _l359_:
    MOV @c9 %r1;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c35 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c32 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f105(n) {
    VAR @c9;
    ALLOC @c9;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r0 @c72;
    ADD %r0 1;
    MOV t %r0;
    MOV @c72 %r0;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c59 1 false;
    MOV %r0 $RET;
    MOV %r1 @c9;
    ADD %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f106() {
    VAR @c33;
    ALLOC @c33;
    VAR %r0;
    VAR %r1;
    NEW_OBJ @c33;
    FUNC %r1 @@f141;
    PUSH %r1;
    MOV %r1 @c52;
    PUSH %r1;
    CALL_REG @c73 2 false;
    MOV %r0 @c33;
    MOV $RET %r0;
    RET;
}
func @@f107(n) {
    VAR @c9;
    ALLOC @c9;
    VAR @c23;
    ALLOC @c23;
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 @c33;
    PUSH %r3;
    NEW_REG %r3 "^(?:replace|split)$" "";
    MOV %r4 "test";
    CALL_VAR %r3 %r4 1 false;
    MOV %r2 $RET;
    JF %r2 _l362_;
    MOV_CTX %r3 "String";
    MOV %r4 "prototype";
    MOV_PROP %r0 %r3 %r4;
    JMP _l361_;
LABEL _l362_:
    MOV %r0 @c74;
LABEL _l361_:
    MOV %r1 @c33;
    MOV_PROP @c9 %r0 %r1;
    MOV %r1 @c33;
    PUSH %r1;
    NEW_REG %r1 "^(?:push|sort|unshift)$" "";
    MOV %r2 "test";
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    JF %r0 _l364_;
    MOV @c23 "tap";
    JMP _l363_;
LABEL _l364_:
    MOV @c23 "thru";
LABEL _l363_:
    MOV %r0 @c33;
    PUSH %r0;
    NEW_REG %r0 "^(?:pop|join|replace|shift)$" "";
    MOV %r1 "test";
    CALL_VAR %r0 %r1 1 false;
    MOV @c36 $RET;
    FUNC %r0 @@f142;
    MOV %r3 @c52;
    MOV %r2 "prototype";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 @c33;
    SET_KEY %r1 %r2 %r0;
}
func @@f108() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV_THIS %r2;
    MOV %r3 "__actions__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV_THIS %r2;
    MOV %r3 "__wrapped__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c75 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f109() {
    VAR %r0;
    MOV %r0 @c52;
    MOV $RET %r0;
    RET;
}
func @@f110(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 null;
    MOV %r2 @c9;
    WEQ %r1 %r2;
    JF %r1 _l366_;
    MOV %r0 @c6;
    JMP _l365_;
LABEL _l366_:
    MOV %r2 @c9;
    MOV %r3 @c76;
    MOV_PROP %r0 %r2 %r3;
LABEL _l365_:
    MOV $RET %r0;
    RET;
}
func @@f111(n, u, o) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c77;
    JF %r1 _l368_;
    MOV %r2 false;
    MOV @c77 %r2;
    MOV %r0 @c33;
    JMP _l367_;
LABEL _l368_:
    MOV %r2 @c52;
    PUSH %r2;
    MOV %r2 @c40;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    MOV %r2 @c78;
    PUSH %r2;
    CALL_REG @c79 4 false;
    MOV %r0 $RET;
LABEL _l367_:
    MOV @c78 %r0;
}
func @@f112(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r1 @c80;
    MOV %r2 @c9;
    MOV_PROP %r0 %r1 %r2;
    MOV $RET %r0;
    RET;
}
func @@f113() {
    VAR %r0;
    VAR %r1;
    MOV %r0 @c81;
    PUSH %r0;
    MOV %r0 @c6;
    PUSH %r0;
    MOV %r0 @c82;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
}
func @@f114(n, e, u) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c40;
    PUSH %r2;
    MOV %r2 @c36;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c83 3 false;
    MOV %r1 $RET;
    NEG %r1;
    NEG %r1;
    MOV @c84 %r1;
    MOV %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f115(n, e, u) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c40;
    PUSH %r1;
    MOV %r1 @c36;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c85 3 false;
    MOV %r0 $RET;
    JF %r0 _l369_;
    MOV %r2 @c33;
    PUSH %r2;
    MOV %r2 @c86;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
LABEL _l369_:
}
func @@f116(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c87;
    MOV %r3 @c9;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c38 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f117(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c89;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @c88;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f118(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r2 @c88;
    MOV %r3 0;
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @c89;
    WEQ %r0 %r1;
    MOV $RET %r0;
    RET;
}
func @@f119(n, u, o) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c52;
    PUSH %r1;
    MOV %r1 @c40;
    PUSH %r1;
    MOV %r1 @c33;
    PUSH %r1;
    CALL_REG @c90 3 false;
    MOV %r0 $RET;
    MOV %r1 @c91;
    MOV %r3 @c92;
    ADD %r3 1;
    MOV %r2 %r3;
    MOV @c92 %r3;
    SET_KEY %r1 %r2 %r0;
}
func @@f120(r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 @c93;
    MOV %r1 "length";
    MOV_PROP @c36 %r0 %r1;
    MOV %r0 null;
    MOV %r1 @c23;
    WEQ %r0 %r1;
    JF %r0 _l371_;
    MOV %r1 @c36;
    NEG %r1;
    MOV $RET %r1;
    RET;
    JMP _l370_;
LABEL _l371_:
LABEL _l370_:
    MOV %r1 @c23;
    PUSH %r1;
    CALL_CTX 'Object' 1 false;
    MOV %r0 $RET;
    MOV @c23 %r0;
LABEL _l372_:
    MOV %r1 @c36;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV @c36 %r1;
    JF %r0 _l373_;
LABEL _l375_:
    MOV %r1 @c93;
    MOV %r2 @c36;
    MOV_PROP @c40 %r1 %r2;
    MOV %r2 @c40;
    MOV %r3 @c23;
    IN %r2 %r3;
    MOV %r1 %r2;
    JF %r2 _l378_;
    MOV %r4 3;
    PUSH %r4;
    MOV %r5 @c23;
    MOV %r6 @c40;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    MOV %r5 @c94;
    MOV %r6 @c40;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c13 3 false;
    MOV %r3 $RET;
    LG_AND %r1 %r3;
LABEL _l378_:
    NEG %r1;
    JF %r1 _l377_;
    MOV %r2 false;
    MOV $RET %r2;
    RET;
    JMP _l376_;
LABEL _l377_:
LABEL _l376_:
    JMP _l372_;
LABEL _l373_:
    MOV %r0 true;
    MOV $RET %r0;
    RET;
}
func @@f121(t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 @c23;
    MOV %r2 @c95;
    IN %r1 %r2;
    JF %r1 _l379_;
    MOV %r4 @c95;
    MOV %r5 @c23;
    MOV_PROP %r3 %r4 %r5;
    MOV %r4 @c9;
    MOV %r5 @c23;
    SET_KEY %r4 %r5 %r3;
    MOV %r2 %r3;
LABEL _l379_:
    MOV %r0 @c9;
    MOV $RET %r0;
    RET;
}
func @@f122(n, e, u) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c40;
    PUSH %r2;
    MOV %r2 @c36;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c96 3 false;
    MOV %r1 $RET;
    MOV @c97 %r1;
    MOV %r0 @c97;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f123(n, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r3 @c23;
    MOV %r4 "args";
    MOV_PROP %r2 %r3 %r4;
    PUSH %r2;
    NEW_ARR %r2;
    MOV %r3 @c33;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    CALL_REG @c9 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r2 @c23;
    MOV %r3 "thisArg";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r3 @c23;
    MOV %r2 "func";
    MOV_PROP %r1 %r3 %r2;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f124(t, r) {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV @c36 1;
    MINUS e;
    MOV %r0 @c23;
    MOV %r1 "length";
    MOV_PROP @c40 %r0 %r1;
    MOV %r0 1;
    MOV %r1 @c40;
    LT %r0 %r1;
    JF %r0 _l381_;
    MOV %r1 @c23;
    MOV %r2 @c40;
    MOV %r3 1;
    SUB %r2 %r3;
    MOV_PROP @c52 %r1 %r2;
    JMP _l380_;
LABEL _l381_:
    MOV @c52 @c6;
LABEL _l380_:
    MOV %r1 3;
    MOV %r3 @c98;
    MOV %r4 "length";
    MOV_PROP %r2 %r3 %r4;
    LT %r1 %r2;
    MOV %r0 %r1;
    JF %r1 _l384_;
    MOV %r2 @c52;
    TYPE_OF %r2;
    MOV %r3 "function";
    WEQ %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l384_:
    JF %r0 _l383_;
    MOV %r1 @c40;
    SUB %r1 1;
    MOV @c40 %r1;
    MOV @c52 @c52;
    JMP _l382_;
LABEL _l383_:
    MOV @c52 @c6;
LABEL _l382_:
    MOV %r1 @c9;
    PUSH %r1;
    CALL_CTX 'Object' 1 false;
    MOV %r0 $RET;
    MOV @c9 %r0;
LABEL _l385_:
    MOV %r2 @c36;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c36 %r2;
    MOV %r1 @c40;
    LT %r0 %r1;
    JF %r0 _l386_;
LABEL _l388_:
    MOV %r1 @c23;
    MOV %r2 @c36;
    MOV_PROP @c4 %r1 %r2;
    MOV %r1 @c4;
    JF %r1 _l389_;
    MOV %r3 @c52;
    PUSH %r3;
    MOV %r3 @c36;
    PUSH %r3;
    MOV %r3 @c4;
    PUSH %r3;
    MOV %r3 @c9;
    PUSH %r3;
    CALL_REG @c98 4 false;
    MOV %r2 $RET;
LABEL _l389_:
    JMP _l385_;
LABEL _l386_:
    MOV %r0 @c9;
    MOV $RET %r0;
    RET;
}
func @@f125() {
    VAR @c9;
    ALLOC @c9;
    VAR @c23;
    ALLOC @c23;
    VAR @c9;
    ALLOC @c9;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV @c9 arguments;
    MOV %r1 @c99;
    MOV %r2 "prototype";
    MOV_PROP %r0 %r1 %r2;
    PUSH %r0;
    CALL_REG @c54 1 false;
    MOV @c23 $RET;
    MOV %r0 @c9;
    PUSH %r0;
    MOV %r0 @c23;
    PUSH %r0;
    MOV %r0 @c99;
    MOV %r1 "apply";
    CALL_VAR %r0 %r1 2 false;
    MOV @c9 $RET;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c39 1 false;
    MOV %r1 $RET;
    JF %r1 _l391_;
    MOV %r0 @c9;
    JMP _l390_;
LABEL _l391_:
    MOV %r0 @c23;
LABEL _l390_:
    MOV $RET %r0;
    RET;
}
func @@f126() {
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR @c12;
    ALLOC @c12;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV @c52 1;
    MINUS o;
    MOV_ARGS %r0;
    MOV %r1 "length";
    MOV_PROP @c4 %r0 %r1;
    MOV @c43 1;
    MINUS c;
    MOV %r0 @c100;
    MOV %r1 "length";
    MOV_PROP @c63 %r0 %r1;
    MOV %r0 @c63;
    MOV %r1 @c4;
    ADD %r0 %r1;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV @c68 $RET;
    MOV_THIS %r2;
    MOV %r1 %r2;
    JF %r2 _l398_;
    MOV_THIS %r3;
    MOV %r4 @c70;
    NE %r3 %r4;
    LG_AND %r1 %r3;
LABEL _l398_:
    MOV %r0 %r1;
    JF %r1 _l397_;
    MOV_THIS %r2;
    MOV %r3 @c101;
    INST_OF %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l397_:
    JF %r0 _l396_;
    MOV @c12 @c102;
    JMP _l395_;
LABEL _l396_:
    MOV @c12 @c103;
LABEL _l395_:
LABEL _l392_:
    MOV %r2 @c43;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c43 %r2;
    MOV %r1 @c63;
    LT %r0 %r1;
    JF %r0 _l393_;
LABEL _l399_:
    MOV %r2 @c100;
    MOV %r3 @c43;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @c68;
    MOV %r3 @c43;
    SET_KEY %r2 %r3 %r1;
    JMP _l392_;
LABEL _l393_:
LABEL _l400_:
    MOV %r1 @c4;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV @c4 %r1;
    JF %r0 _l401_;
LABEL _l403_:
    MOV_ARGS %r2;
    MOV %r4 @c52;
    ADD %r4 1;
    MOV %r3 %r4;
    MOV @c52 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @c68;
    MOV %r4 @c43;
    MOV %r3 %r4;
    ADD %r4 1;
    MOV @c43 %r4;
    SET_KEY %r2 %r3 %r1;
    JMP _l400_;
LABEL _l401_:
    MOV %r1 @c68;
    PUSH %r1;
    MOV %r1 @c104;
    PUSH %r1;
    MOV %r1 @c12;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f127(n, t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 @c105;
    PUSH %r2;
    CALL_REG @c106 2 false;
    MOV %r1 $RET;
    NEG %r1;
    MOV %r0 %r1;
    JF %r1 _l406_;
    MOV %r3 @c107;
    MOV %r4 @c33;
    EQ %r3 %r4;
    MOV %r2 %r3;
    JIF %r3 _l407_;
    MOV %r5 @c108;
    PUSH %r5;
    MOV %r5 @c109;
    PUSH %r5;
    MOV %r5 @c110;
    PUSH %r5;
    MOV %r5 @c33;
    PUSH %r5;
    MOV %r5 @c107;
    PUSH %r5;
    CALL_REG @c111 5 false;
    MOV %r4 $RET;
    LG_OR %r2 %r4;
LABEL _l407_:
    LG_AND %r0 %r2;
LABEL _l406_:
    JF %r0 _l405_;
    MOV %r2 @c9;
    PUSH %r2;
    MOV %r2 @c105;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l404_;
LABEL _l405_:
LABEL _l404_:
}
func @@f128() {
    VAR @c36;
    ALLOC @c36;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV @c36 arguments;
    MOV @c40 1;
    MINUS u;
    MOV %r0 0;
    PUSH %r0;
    MOV %r2 @c36;
    MOV %r3 "length";
    MOV_PROP %r0 %r2 %r3;
    MOV %r1 @c112;
    SUB %r0 %r1;
    PUSH %r0;
    CALL_REG @c34 2 false;
    MOV @c52 $RET;
    MOV %r0 @c52;
    PUSH %r0;
    CALL_CTX 'Array' 1 false;
    MOV @c4 $RET;
LABEL _l408_:
    MOV %r2 @c40;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c40 %r2;
    MOV %r1 @c52;
    LT %r0 %r1;
    JF %r0 _l409_;
LABEL _l411_:
    MOV %r2 @c36;
    MOV %r3 @c112;
    MOV %r4 @c40;
    ADD %r3 %r4;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @c4;
    MOV %r3 @c40;
    SET_KEY %r2 %r3 %r1;
    JMP _l408_;
LABEL _l409_:
    MOV %r0 1;
    MINUS %r0;
    MOV @c40 %r0;
    MOV %r1 @c112;
    MOV %r2 1;
    ADD %r1 %r2;
    PUSH %r1;
    CALL_CTX 'Array' 1 false;
    MOV %r0 $RET;
    MOV @c52 %r0;
LABEL _l412_:
    MOV %r2 @c40;
    ADD %r2 1;
    MOV %r0 %r2;
    MOV @c40 %r2;
    MOV %r1 @c112;
    LT %r0 %r1;
    JF %r0 _l413_;
LABEL _l415_:
    MOV %r2 @c36;
    MOV %r3 @c40;
    MOV_PROP %r1 %r2 %r3;
    MOV %r2 @c52;
    MOV %r3 @c40;
    SET_KEY %r2 %r3 %r1;
    JMP _l412_;
LABEL _l413_:
    MOV %r2 @c4;
    PUSH %r2;
    CALL_REG @c113 1 false;
    MOV %r1 $RET;
    MOV %r2 @c52;
    MOV %r3 @c112;
    SET_KEY %r2 %r3 %r1;
    MOV %r1 @c52;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c114;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f129() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r1 0;
    MOV %r3 @c115;
    SUB %r3 1;
    MOV %r2 %r3;
    MOV @c115 %r3;
    LT %r1 %r2;
    JF %r1 _l416_;
    MOV_ARGS %r4;
    PUSH %r4;
    MOV_THIS %r4;
    PUSH %r4;
    MOV %r4 @c116;
    MOV %r5 "apply";
    CALL_VAR %r4 %r5 2 false;
    MOV %r3 $RET;
    MOV @c117 %r3;
    MOV %r2 %r3;
LABEL _l416_:
    MOV %r1 1;
    MOV %r2 @c115;
    GE %r1 %r2;
    JF %r1 _l417_;
    MOV %r3 @c6;
    MOV @c116 %r3;
    MOV %r2 %r3;
LABEL _l417_:
    MOV %r0 @c117;
    MOV $RET %r0;
    RET;
}
func @@f130(e) {
    VAR @c40;
    ALLOC @c40;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r0 @c23;
    MOV %r1 @c36;
    MOV_PROP @c40 %r0 %r1;
    MOV %r0 @c40;
    MOV %r1 @c118;
    MOV %r2 @c36;
    SET_KEY %r1 %r2 %r0;
    MOV %r0 @c119;
    JF %r0 _l418_;
    FUNC %r2 @@f143;
    MOV %r5 @c118;
    MOV %r4 "prototype";
    MOV_PROP %r3 %r5 %r4;
    MOV %r4 @c36;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l418_:
}
func @@f131(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 null;
    MOV %r2 @c120;
    WEQ %r1 %r2;
    JF %r1 _l420_;
    MOV %r0 @c6;
    JMP _l419_;
LABEL _l420_:
    MOV %r2 @c120;
    MOV %r3 @c9;
    MOV_PROP %r0 %r2 %r3;
LABEL _l419_:
    MOV $RET %r0;
    RET;
}
func @@f132(r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV %r2 @c23;
    PUSH %r2;
    CALL_REG @c121 1 false;
    MOV %r1 $RET;
    PUSH %r1;
    CALL_REG @c122 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f133() {
}
func @@f134(t) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c39 1 false;
    MOV %r1 $RET;
    JF %r1 _l422_;
    MOV %r2 @c123;
    JF %r2 _l424_;
    MOV %r3 @c9;
    PUSH %r3;
    CALL_REG @c123 1 false;
    MOV %r0 $RET;
    JMP _l423_;
LABEL _l424_:
    MOV %r3 @c9;
    MOV %r4 @c124;
    MOV %r5 "prototype";
    SET_KEY %r4 %r5 %r3;
    CALL_REG @c124 0 true;
    MOV %r3 $RET;
    MOV @c9 %r3;
    MOV %r3 @c6;
    MOV %r4 @c124;
    MOV %r5 "prototype";
    SET_KEY %r4 %r5 %r3;
    MOV %r0 @c9;
LABEL _l423_:
    JMP _l421_;
LABEL _l422_:
    NEW_OBJ %r0;
LABEL _l421_:
    MOV $RET %r0;
    RET;
}
func @@f135(r, e) {
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 null;
    MOV %r1 @c23;
    WEQ %r0 %r1;
    JF %r0 _l426_;
    MOV %r1 @c23;
    MOV $RET %r1;
    RET;
    JMP _l425_;
LABEL _l426_:
LABEL _l425_:
    MOV %r1 @c23;
    PUSH %r1;
    CALL_REG @c24 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l428_;
    MOV %r2 @c36;
    PUSH %r2;
    MOV %r2 @c23;
    PUSH %r2;
    CALL_REG @c125 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l427_;
LABEL _l428_:
LABEL _l427_:
    MOV %r0 @c23;
    MOV %r1 "length";
    MOV_PROP @c40 %r0 %r1;
    MOV %r0 @c126;
    JF %r0 _l433_;
    MOV @c52 @c40;
    JMP _l432_;
LABEL _l433_:
    MOV @c52 1;
    MINUS o;
LABEL _l432_:
    MOV %r0 @c23;
    PUSH %r0;
    CALL_CTX 'Object' 1 false;
    MOV @c4 $RET;
LABEL _l429_:
    MOV %r2 @c126;
    JF %r2 _l437_;
    MOV %r3 @c52;
    MOV %r1 %r3;
    SUB %r3 1;
    MOV @c52 %r3;
    JMP _l436_;
LABEL _l437_:
    MOV %r4 @c52;
    ADD %r4 1;
    MOV %r1 %r4;
    MOV @c52 %r4;
    MOV %r3 @c40;
    LT %r1 %r3;
LABEL _l436_:
    MOV %r0 %r1;
    JF %r1 _l435_;
    MOV %r2 false;
    MOV %r4 @c4;
    PUSH %r4;
    MOV %r4 @c52;
    PUSH %r4;
    MOV %r5 @c4;
    MOV %r6 @c52;
    MOV_PROP %r4 %r5 %r6;
    PUSH %r4;
    CALL_REG @c36 3 false;
    MOV %r3 $RET;
    NE %r2 %r3;
    LG_AND %r0 %r2;
LABEL _l435_:
    JF %r0 _l430_;
LABEL _l434_:
    JMP _l429_;
LABEL _l430_:
    MOV %r0 @c23;
    MOV $RET %r0;
    RET;
}
func @@f136(t, r, e) {
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    MOV @c40 1;
    MINUS u;
    MOV %r0 @c9;
    PUSH %r0;
    CALL_CTX 'Object' 1 false;
    MOV @c52 $RET;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c36 1 false;
    MOV %r0 $RET;
    MOV @c36 %r0;
    MOV %r0 @c36;
    MOV %r1 "length";
    MOV_PROP @c4 %r0 %r1;
LABEL _l438_:
    MOV %r1 @c4;
    MOV %r0 %r1;
    SUB %r1 1;
    MOV @c4 %r1;
    JF %r0 _l439_;
LABEL _l441_:
    MOV %r1 @c36;
    MOV %r3 @c127;
    JF %r3 _l443_;
    MOV %r2 @c4;
    JMP _l442_;
LABEL _l443_:
    MOV %r4 @c40;
    ADD %r4 1;
    MOV %r2 %r4;
    MOV @c40 %r4;
LABEL _l442_:
    MOV_PROP @c43 %r1 %r2;
    MOV %r1 false;
    MOV %r3 @c52;
    PUSH %r3;
    MOV %r3 @c43;
    PUSH %r3;
    MOV %r4 @c52;
    MOV %r5 @c43;
    MOV_PROP %r3 %r4 %r5;
    PUSH %r3;
    CALL_REG @c23 3 false;
    MOV %r2 $RET;
    EQ %r1 %r2;
    JF %r1 _l445_;
    JMP _l439_;
    JMP _l444_;
LABEL _l445_:
LABEL _l444_:
    JMP _l438_;
LABEL _l439_:
    MOV %r0 @c9;
    MOV $RET %r0;
    RET;
}
func @@f137(t, r, e) {
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV %r0 @c9;
    PUSH %r0;
    CALL_CTX 'Object' 1 false;
    MOV @c40 $RET;
    MOV %r1 @c9;
    PUSH %r1;
    CALL_REG @c24 1 false;
    MOV %r0 $RET;
    NEG %r0;
    JF %r0 _l447_;
    MOV %r1 @c23;
    PUSH %r1;
    CALL_REG @c35 1 false;
    MOV @c52 $RET;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c10 1 false;
    MOV %r1 $RET;
    MOV @c9 %r1;
    FUNC %r1 @@f144;
    MOV @c23 %r1;
    JMP _l446_;
LABEL _l447_:
LABEL _l446_:
    MOV %r2 @c36;
    PUSH %r2;
    MOV %r2 @c23;
    PUSH %r2;
    MOV %r2 @c9;
    PUSH %r2;
    CALL_REG @c128 3 false;
    MOV %r1 $RET;
    MOV @c23 %r1;
    MOV %r1 1;
    MINUS %r1;
    MOV %r2 @c23;
    LT %r1 %r2;
    JF %r1 _l449_;
    MOV %r2 @c40;
    MOV %r4 @c52;
    JF %r4 _l451_;
    MOV %r5 @c9;
    MOV %r6 @c23;
    MOV_PROP %r3 %r5 %r6;
    JMP _l450_;
LABEL _l451_:
    MOV %r3 @c23;
LABEL _l450_:
    MOV_PROP %r0 %r2 %r3;
    JMP _l448_;
LABEL _l449_:
    MOV %r0 @c6;
LABEL _l448_:
    MOV $RET %r0;
    RET;
}
func @@f138() {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    MOV_ARGS %r1;
    PUSH %r1;
    MOV_THIS %r1;
    PUSH %r1;
    MOV %r1 @c129;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    NEG %r0;
    MOV $RET %r0;
    RET;
}
func @@f139(n, t) {
    VAR @c23;
    ALLOC @c23;
    VAR @c130;
    ALLOC @c130;
    VAR @c40;
    ALLOC @c40;
    VAR @c52;
    ALLOC @c52;
    VAR @c4;
    ALLOC @c4;
    VAR @c43;
    ALLOC @c43;
    VAR @c63;
    ALLOC @c63;
    VAR @c68;
    ALLOC @c68;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    VAR %r7;
    VAR %r8;
    MOV %r1 @c33;
    MOV %r2 "criteria";
    MOV_PROP %r0 %r1 %r2;
    MOV @c23 %r0;
    MOV %r0 @c131;
    MOV %r1 "criteria";
    MOV_PROP @c130 %r0 %r1;
    MOV %r0 @c23;
    MOV %r1 @c130;
    NE %r0 %r1;
    JF %r0 _l454_;
    MOV @c40 @c23;
    MOV %r1 @c6;
    NE @c40 %r1;
    MOV @c52 null;
    MOV %r1 @c23;
    EQ @c52 %r1;
    MOV @c4 @c23;
    MOV %r1 @c23;
    EQ @c4 %r1;
    MOV @c43 @c130;
    MOV %r1 @c6;
    NE @c43 %r1;
    MOV @c63 null;
    MOV %r1 @c130;
    EQ @c63 %r1;
    MOV @c68 @c130;
    MOV %r1 @c130;
    EQ @c68 %r1;
    MOV %r5 @c63;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l460_;
    MOV %r6 @c23;
    MOV %r7 @c130;
    GT %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l460_:
    MOV %r3 %r4;
    JIF %r4 _l459_;
    MOV %r7 @c52;
    MOV %r6 %r7;
    JF %r7 _l462_;
    MOV %r8 @c43;
    LG_AND %r6 %r8;
LABEL _l462_:
    MOV %r5 %r6;
    JF %r6 _l461_;
    MOV %r7 @c68;
    LG_AND %r5 %r7;
LABEL _l461_:
    LG_OR %r3 %r5;
LABEL _l459_:
    MOV %r2 %r3;
    JIF %r3 _l458_;
    MOV %r5 @c40;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l463_;
    MOV %r6 @c68;
    LG_AND %r4 %r6;
LABEL _l463_:
    LG_OR %r2 %r4;
LABEL _l458_:
    MOV %r1 %r2;
    JIF %r2 _l457_;
    MOV %r3 @c4;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l457_:
    JF %r1 _l456_;
    MOV %r2 1;
    MOV @c23 %r2;
    JMP _l452_;
    JMP _l455_;
LABEL _l456_:
LABEL _l455_:
    MOV %r5 @c52;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l469_;
    MOV %r6 @c23;
    MOV %r7 @c130;
    LT %r6 %r7;
    LG_AND %r4 %r6;
LABEL _l469_:
    MOV %r3 %r4;
    JIF %r4 _l468_;
    MOV %r7 @c63;
    MOV %r6 %r7;
    JF %r7 _l471_;
    MOV %r8 @c40;
    LG_AND %r6 %r8;
LABEL _l471_:
    MOV %r5 %r6;
    JF %r6 _l470_;
    MOV %r7 @c4;
    LG_AND %r5 %r7;
LABEL _l470_:
    LG_OR %r3 %r5;
LABEL _l468_:
    MOV %r2 %r3;
    JIF %r3 _l467_;
    MOV %r5 @c43;
    NEG %r5;
    MOV %r4 %r5;
    JF %r5 _l472_;
    MOV %r6 @c4;
    LG_AND %r4 %r6;
LABEL _l472_:
    LG_OR %r2 %r4;
LABEL _l467_:
    MOV %r1 %r2;
    JIF %r2 _l466_;
    MOV %r3 @c68;
    NEG %r3;
    LG_OR %r1 %r3;
LABEL _l466_:
    JF %r1 _l465_;
    MOV %r2 1;
    MINUS %r2;
    MOV @c23 %r2;
    JMP _l452_;
    JMP _l464_;
LABEL _l465_:
LABEL _l464_:
    JMP _l453_;
LABEL _l454_:
LABEL _l453_:
    MOV %r0 0;
    MOV @c23 %r0;
LABEL _l452_:
    MOV %r1 @c23;
    MOV %r0 %r1;
    JIF %r1 _l473_;
    MOV %r4 @c33;
    MOV %r5 "index";
    MOV_PROP %r2 %r4 %r5;
    MOV %r4 @c131;
    MOV %r5 "index";
    MOV_PROP %r3 %r4 %r5;
    SUB %r2 %r3;
    LG_OR %r0 %r2;
LABEL _l473_:
    MOV $RET %r0;
    RET;
}
func @@f140(n, r, u) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    NEW_OBJ %r0;
    MOV %r1 @c33;
    SET_KEY %r0 'value' %r1;
    MOV %r2 @c130;
    MOV %r1 %r2;
    ADD %r2 1;
    MOV @c130 %r2;
    SET_KEY %r0 'index' %r1;
    MOV %r2 @c40;
    PUSH %r2;
    MOV %r2 @c23;
    PUSH %r2;
    MOV %r2 @c33;
    PUSH %r2;
    CALL_REG @c131 3 false;
    MOV %r1 $RET;
    SET_KEY %r0 'criteria' %r1;
    MOV $RET %r0;
    RET;
}
func @@f141(t, r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV %r1 @c23;
    PUSH %r1;
    MOV %r2 @c52;
    MOV %r3 "prototype";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    MOV %r1 @c1;
    MOV %r2 "call";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    JIF %r0 _l474_;
    MOV %r2 @c9;
    MOV %r3 @c132;
    MOV %r4 @c23;
    SET_KEY %r3 %r4 %r2;
    MOV %r1 %r2;
LABEL _l474_:
}
func @@f142() {
    VAR @c33;
    ALLOC @c33;
    VAR @c40;
    ALLOC @c40;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    MOV @c33 arguments;
    MOV %r1 @c133;
    MOV %r0 %r1;
    JF %r1 _l477_;
    MOV_THIS %r3;
    MOV %r4 "__chain__";
    MOV_PROP %r2 %r3 %r4;
    NEG %r2;
    LG_AND %r0 %r2;
LABEL _l477_:
    JF %r0 _l476_;
    MOV_THIS %r1;
    MOV %r2 "value";
    CALL_VAR %r1 %r2 0 false;
    MOV @c40 $RET;
    MOV %r2 @c33;
    PUSH %r2;
    MOV %r4 @c40;
    PUSH %r4;
    CALL_REG @c15 1 false;
    MOV %r3 $RET;
    JF %r3 _l479_;
    MOV %r2 @c40;
    JMP _l478_;
LABEL _l479_:
    NEW_ARR %r2;
LABEL _l478_:
    PUSH %r2;
    MOV %r2 @c134;
    MOV %r3 "apply";
    CALL_VAR %r2 %r3 2 false;
    MOV %r1 $RET;
    MOV $RET %r1;
    RET;
    JMP _l475_;
LABEL _l476_:
LABEL _l475_:
    FUNC %r1 @@f145;
    PUSH %r1;
    MOV_THIS %r1;
    MOV %r2 @c135;
    CALL_VAR %r1 %r2 1 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f143() {
    VAR @c23;
    ALLOC @c23;
    VAR @c36;
    ALLOC @c36;
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    VAR %r4;
    VAR %r5;
    VAR %r6;
    MOV_THIS %r0;
    MOV %r1 "__chain__";
    MOV_PROP @c23 %r0 %r1;
    MOV %r1 @c136;
    MOV %r0 %r1;
    JIF %r1 _l482_;
    MOV %r2 @c23;
    LG_OR %r0 %r2;
LABEL _l482_:
    JF %r0 _l481_;
    MOV_THIS %r2;
    MOV %r3 "__wrapped__";
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c118 1 false;
    MOV @c36 $RET;
    NEW_OBJ %r2;
    MOV %r3 @c137;
    SET_KEY %r2 'func' %r3;
    MOV_ARGS %r3;
    SET_KEY %r2 'args' %r3;
    MOV %r3 @c118;
    SET_KEY %r2 'thisArg' %r3;
    PUSH %r2;
    MOV_THIS %r2;
    MOV %r3 "__actions__";
    MOV_PROP %r5 %r2 %r3;
    PUSH %r5;
    CALL_REG @c53 1 false;
    MOV %r4 $RET;
    MOV %r5 @c36;
    MOV %r6 "__actions__";
    SET_KEY %r5 %r6 %r4;
    MOV %r2 %r4;
    MOV %r3 "push";
    CALL_VAR %r2 %r3 1 false;
    MOV %r2 @c23;
    MOV %r3 @c36;
    MOV %r4 "__chain__";
    SET_KEY %r3 %r4 %r2;
    MOV %r1 @c36;
    MOV $RET %r1;
    RET;
    JMP _l480_;
LABEL _l481_:
LABEL _l480_:
    MOV_ARGS %r2;
    PUSH %r2;
    NEW_ARR %r2;
    MOV_THIS %r4;
    MOV %r5 "value";
    CALL_VAR %r4 %r5 0 false;
    MOV %r3 $RET;
    SET_KEY %r2 0 %r3;
    PUSH %r2;
    CALL_REG @c9 2 false;
    MOV %r1 $RET;
    PUSH %r1;
    MOV %r1 @c118;
    PUSH %r1;
    MOV %r1 @c137;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f144(n) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c138;
    PUSH %r1;
    MOV %r1 @c128;
    PUSH %r1;
    MOV %r2 @c138;
    MOV %r3 @c128;
    MOV_PROP %r1 %r2 %r3;
    PUSH %r1;
    CALL_REG @c139 3 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
func @@f145(r) {
    VAR %r0;
    VAR %r1;
    VAR %r2;
    VAR %r3;
    MOV %r1 @c140;
    PUSH %r1;
    MOV %r3 @c135;
    PUSH %r3;
    CALL_REG @c15 1 false;
    MOV %r2 $RET;
    JF %r2 _l484_;
    MOV %r1 @c135;
    JMP _l483_;
LABEL _l484_:
    NEW_ARR %r1;
LABEL _l483_:
    PUSH %r1;
    MOV %r1 @c134;
    MOV %r2 "apply";
    CALL_VAR %r1 %r2 2 false;
    MOV %r0 $RET;
    MOV $RET %r0;
    RET;
}
